
USB_Power_supply_fv0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001474c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0801480c  0801480c  0002480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bf8  08014bf8  000300c4  2**0
                  CONTENTS
  4 .ARM          00000000  08014bf8  08014bf8  000300c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014bf8  08014bf8  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bf8  08014bf8  00024bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014bfc  08014bfc  00024bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08014c00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005600  200000c4  08014cc4  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056c4  08014cc4  000356c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00060386  00000000  00000000  0003012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000f292  00000000  00000000  000904b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002618  00000000  00000000  0009f748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a69  00000000  00000000  000a1d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000335e9  00000000  00000000  000a37c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005a733  00000000  00000000  000d6db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae90  00000000  00000000  001314e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069d8  00000000  00000000  0020c378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000175  00000000  00000000  00212d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080147f4 	.word	0x080147f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	080147f4 	.word	0x080147f4
	...

08000110 <_tx_initialize_low_level>:
 8000110:	b672      	cpsid	i
 8000112:	4816      	ldr	r0, [pc, #88]	; (800016c <__tx_DBGHandler+0x4>)
 8000114:	4a16      	ldr	r2, [pc, #88]	; (8000170 <__tx_DBGHandler+0x8>)
 8000116:	4410      	add	r0, r2
 8000118:	4916      	ldr	r1, [pc, #88]	; (8000174 <__tx_DBGHandler+0xc>)
 800011a:	6001      	str	r1, [r0, #0]
 800011c:	4816      	ldr	r0, [pc, #88]	; (8000178 <__tx_DBGHandler+0x10>)
 800011e:	4915      	ldr	r1, [pc, #84]	; (8000174 <__tx_DBGHandler+0xc>)
 8000120:	6809      	ldr	r1, [r1, #0]
 8000122:	6001      	str	r1, [r0, #0]
 8000124:	4811      	ldr	r0, [pc, #68]	; (800016c <__tx_DBGHandler+0x4>)
 8000126:	4915      	ldr	r1, [pc, #84]	; (800017c <__tx_DBGHandler+0x14>)
 8000128:	6141      	str	r1, [r0, #20]
 800012a:	4915      	ldr	r1, [pc, #84]	; (8000180 <__tx_DBGHandler+0x18>)
 800012c:	6101      	str	r1, [r0, #16]
 800012e:	4915      	ldr	r1, [pc, #84]	; (8000184 <__tx_DBGHandler+0x1c>)
 8000130:	480e      	ldr	r0, [pc, #56]	; (800016c <__tx_DBGHandler+0x4>)
 8000132:	4a15      	ldr	r2, [pc, #84]	; (8000188 <__tx_DBGHandler+0x20>)
 8000134:	4410      	add	r0, r2
 8000136:	6001      	str	r1, [r0, #0]
 8000138:	4914      	ldr	r1, [pc, #80]	; (800018c <__tx_DBGHandler+0x24>)
 800013a:	480c      	ldr	r0, [pc, #48]	; (800016c <__tx_DBGHandler+0x4>)
 800013c:	4a14      	ldr	r2, [pc, #80]	; (8000190 <__tx_DBGHandler+0x28>)
 800013e:	4410      	add	r0, r2
 8000140:	6001      	str	r1, [r0, #0]
 8000142:	4914      	ldr	r1, [pc, #80]	; (8000194 <__tx_DBGHandler+0x2c>)
 8000144:	4809      	ldr	r0, [pc, #36]	; (800016c <__tx_DBGHandler+0x4>)
 8000146:	4a14      	ldr	r2, [pc, #80]	; (8000198 <__tx_DBGHandler+0x30>)
 8000148:	4410      	add	r0, r2
 800014a:	6001      	str	r1, [r0, #0]
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
 8000152:	b501      	push	{r0, lr}
 8000154:	bc03      	pop	{r0, r1}
 8000156:	468e      	mov	lr, r1
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
 800015a:	b501      	push	{r0, lr}
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
 8000160:	bc03      	pop	{r0, r1}
 8000162:	468e      	mov	lr, r1
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
 800016c:	e000e000 	.word	0xe000e000
 8000170:	00000d08 	.word	0x00000d08
 8000174:	08000000 	.word	0x08000000
 8000178:	20004868 	.word	0x20004868
 800017c:	0009c3ff 	.word	0x0009c3ff
 8000180:	00000007 	.word	0x00000007
 8000184:	00000000 	.word	0x00000000
 8000188:	00000d18 	.word	0x00000d18
 800018c:	ff000000 	.word	0xff000000
 8000190:	00000d1c 	.word	0x00000d1c
 8000194:	40ff0000 	.word	0x40ff0000
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	; (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	; (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	; (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	; (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	; (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	20004904 	.word	0x20004904
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	2000486c 	.word	0x2000486c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	20004870 	.word	0x20004870
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	20004e70 	.word	0x20004e70
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	; 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	; 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	; (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	; (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	; (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f00d fe13 	bl	800df34 <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f00d fd83 	bl	800de20 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	; (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	; (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	; (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	20004910 	.word	0x20004910
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	20004e70 	.word	0x20004e70
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	20004914 	.word	0x20004914
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	200049a0 	.word	0x200049a0
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	200049a4 	.word	0x200049a4
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	2000499c 	.word	0x2000499c
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	20004998 	.word	0x20004998
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	20004904 	.word	0x20004904
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	2000486c 	.word	0x2000486c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	20004870 	.word	0x20004870
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <strlen>:
 8000370:	2300      	movs	r3, #0
 8000372:	5cc2      	ldrb	r2, [r0, r3]
 8000374:	3301      	adds	r3, #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1e58      	subs	r0, r3, #1
 800037c:	4770      	bx	lr
	...

08000380 <__udivsi3>:
 8000380:	2200      	movs	r2, #0
 8000382:	0843      	lsrs	r3, r0, #1
 8000384:	428b      	cmp	r3, r1
 8000386:	d374      	bcc.n	8000472 <__udivsi3+0xf2>
 8000388:	0903      	lsrs	r3, r0, #4
 800038a:	428b      	cmp	r3, r1
 800038c:	d35f      	bcc.n	800044e <__udivsi3+0xce>
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d344      	bcc.n	800041e <__udivsi3+0x9e>
 8000394:	0b03      	lsrs	r3, r0, #12
 8000396:	428b      	cmp	r3, r1
 8000398:	d328      	bcc.n	80003ec <__udivsi3+0x6c>
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	428b      	cmp	r3, r1
 800039e:	d30d      	bcc.n	80003bc <__udivsi3+0x3c>
 80003a0:	22ff      	movs	r2, #255	; 0xff
 80003a2:	0209      	lsls	r1, r1, #8
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0c03      	lsrs	r3, r0, #16
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d302      	bcc.n	80003b2 <__udivsi3+0x32>
 80003ac:	1212      	asrs	r2, r2, #8
 80003ae:	0209      	lsls	r1, r1, #8
 80003b0:	d065      	beq.n	800047e <__udivsi3+0xfe>
 80003b2:	0b03      	lsrs	r3, r0, #12
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d319      	bcc.n	80003ec <__udivsi3+0x6c>
 80003b8:	e000      	b.n	80003bc <__udivsi3+0x3c>
 80003ba:	0a09      	lsrs	r1, r1, #8
 80003bc:	0bc3      	lsrs	r3, r0, #15
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__udivsi3+0x46>
 80003c2:	03cb      	lsls	r3, r1, #15
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	0b83      	lsrs	r3, r0, #14
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d301      	bcc.n	80003d2 <__udivsi3+0x52>
 80003ce:	038b      	lsls	r3, r1, #14
 80003d0:	1ac0      	subs	r0, r0, r3
 80003d2:	4152      	adcs	r2, r2
 80003d4:	0b43      	lsrs	r3, r0, #13
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__udivsi3+0x5e>
 80003da:	034b      	lsls	r3, r1, #13
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	0b03      	lsrs	r3, r0, #12
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__udivsi3+0x6a>
 80003e6:	030b      	lsls	r3, r1, #12
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	0ac3      	lsrs	r3, r0, #11
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d301      	bcc.n	80003f6 <__udivsi3+0x76>
 80003f2:	02cb      	lsls	r3, r1, #11
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	4152      	adcs	r2, r2
 80003f8:	0a83      	lsrs	r3, r0, #10
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__udivsi3+0x82>
 80003fe:	028b      	lsls	r3, r1, #10
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	0a43      	lsrs	r3, r0, #9
 8000406:	428b      	cmp	r3, r1
 8000408:	d301      	bcc.n	800040e <__udivsi3+0x8e>
 800040a:	024b      	lsls	r3, r1, #9
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	4152      	adcs	r2, r2
 8000410:	0a03      	lsrs	r3, r0, #8
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__udivsi3+0x9a>
 8000416:	020b      	lsls	r3, r1, #8
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	d2cd      	bcs.n	80003ba <__udivsi3+0x3a>
 800041e:	09c3      	lsrs	r3, r0, #7
 8000420:	428b      	cmp	r3, r1
 8000422:	d301      	bcc.n	8000428 <__udivsi3+0xa8>
 8000424:	01cb      	lsls	r3, r1, #7
 8000426:	1ac0      	subs	r0, r0, r3
 8000428:	4152      	adcs	r2, r2
 800042a:	0983      	lsrs	r3, r0, #6
 800042c:	428b      	cmp	r3, r1
 800042e:	d301      	bcc.n	8000434 <__udivsi3+0xb4>
 8000430:	018b      	lsls	r3, r1, #6
 8000432:	1ac0      	subs	r0, r0, r3
 8000434:	4152      	adcs	r2, r2
 8000436:	0943      	lsrs	r3, r0, #5
 8000438:	428b      	cmp	r3, r1
 800043a:	d301      	bcc.n	8000440 <__udivsi3+0xc0>
 800043c:	014b      	lsls	r3, r1, #5
 800043e:	1ac0      	subs	r0, r0, r3
 8000440:	4152      	adcs	r2, r2
 8000442:	0903      	lsrs	r3, r0, #4
 8000444:	428b      	cmp	r3, r1
 8000446:	d301      	bcc.n	800044c <__udivsi3+0xcc>
 8000448:	010b      	lsls	r3, r1, #4
 800044a:	1ac0      	subs	r0, r0, r3
 800044c:	4152      	adcs	r2, r2
 800044e:	08c3      	lsrs	r3, r0, #3
 8000450:	428b      	cmp	r3, r1
 8000452:	d301      	bcc.n	8000458 <__udivsi3+0xd8>
 8000454:	00cb      	lsls	r3, r1, #3
 8000456:	1ac0      	subs	r0, r0, r3
 8000458:	4152      	adcs	r2, r2
 800045a:	0883      	lsrs	r3, r0, #2
 800045c:	428b      	cmp	r3, r1
 800045e:	d301      	bcc.n	8000464 <__udivsi3+0xe4>
 8000460:	008b      	lsls	r3, r1, #2
 8000462:	1ac0      	subs	r0, r0, r3
 8000464:	4152      	adcs	r2, r2
 8000466:	0843      	lsrs	r3, r0, #1
 8000468:	428b      	cmp	r3, r1
 800046a:	d301      	bcc.n	8000470 <__udivsi3+0xf0>
 800046c:	004b      	lsls	r3, r1, #1
 800046e:	1ac0      	subs	r0, r0, r3
 8000470:	4152      	adcs	r2, r2
 8000472:	1a41      	subs	r1, r0, r1
 8000474:	d200      	bcs.n	8000478 <__udivsi3+0xf8>
 8000476:	4601      	mov	r1, r0
 8000478:	4152      	adcs	r2, r2
 800047a:	4610      	mov	r0, r2
 800047c:	4770      	bx	lr
 800047e:	e7ff      	b.n	8000480 <__udivsi3+0x100>
 8000480:	b501      	push	{r0, lr}
 8000482:	2000      	movs	r0, #0
 8000484:	f000 f806 	bl	8000494 <__aeabi_idiv0>
 8000488:	bd02      	pop	{r1, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_uidivmod>:
 800048c:	2900      	cmp	r1, #0
 800048e:	d0f7      	beq.n	8000480 <__udivsi3+0x100>
 8000490:	e776      	b.n	8000380 <__udivsi3>
 8000492:	4770      	bx	lr

08000494 <__aeabi_idiv0>:
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_cfrcmple>:
 8000498:	4684      	mov	ip, r0
 800049a:	0008      	movs	r0, r1
 800049c:	4661      	mov	r1, ip
 800049e:	e7ff      	b.n	80004a0 <__aeabi_cfcmpeq>

080004a0 <__aeabi_cfcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f000 fb71 	bl	8000b88 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cfcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_fcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f000 fafd 	bl	8000ab0 <__eqsf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_fcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb63 	bl	8000b88 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_fcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb59 	bl	8000b88 <__lesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_fcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fb09 	bl	8000afc <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_fcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 faff 	bl	8000afc <__gesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_fcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_f2uiz>:
 800050c:	219e      	movs	r1, #158	; 0x9e
 800050e:	b510      	push	{r4, lr}
 8000510:	05c9      	lsls	r1, r1, #23
 8000512:	1c04      	adds	r4, r0, #0
 8000514:	f7ff fff0 	bl	80004f8 <__aeabi_fcmpge>
 8000518:	2800      	cmp	r0, #0
 800051a:	d103      	bne.n	8000524 <__aeabi_f2uiz+0x18>
 800051c:	1c20      	adds	r0, r4, #0
 800051e:	f000 fe7b 	bl	8001218 <__aeabi_f2iz>
 8000522:	bd10      	pop	{r4, pc}
 8000524:	219e      	movs	r1, #158	; 0x9e
 8000526:	1c20      	adds	r0, r4, #0
 8000528:	05c9      	lsls	r1, r1, #23
 800052a:	f000 fcbf 	bl	8000eac <__aeabi_fsub>
 800052e:	f000 fe73 	bl	8001218 <__aeabi_f2iz>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	061b      	lsls	r3, r3, #24
 8000536:	469c      	mov	ip, r3
 8000538:	4460      	add	r0, ip
 800053a:	e7f2      	b.n	8000522 <__aeabi_f2uiz+0x16>

0800053c <__aeabi_fadd>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	4647      	mov	r7, r8
 8000540:	46ce      	mov	lr, r9
 8000542:	024a      	lsls	r2, r1, #9
 8000544:	0243      	lsls	r3, r0, #9
 8000546:	0045      	lsls	r5, r0, #1
 8000548:	0fc4      	lsrs	r4, r0, #31
 800054a:	0a50      	lsrs	r0, r2, #9
 800054c:	4680      	mov	r8, r0
 800054e:	0048      	lsls	r0, r1, #1
 8000550:	0a5b      	lsrs	r3, r3, #9
 8000552:	0e00      	lsrs	r0, r0, #24
 8000554:	0992      	lsrs	r2, r2, #6
 8000556:	4694      	mov	ip, r2
 8000558:	b580      	push	{r7, lr}
 800055a:	001e      	movs	r6, r3
 800055c:	4681      	mov	r9, r0
 800055e:	0002      	movs	r2, r0
 8000560:	0e2d      	lsrs	r5, r5, #24
 8000562:	00df      	lsls	r7, r3, #3
 8000564:	0fc9      	lsrs	r1, r1, #31
 8000566:	428c      	cmp	r4, r1
 8000568:	d024      	beq.n	80005b4 <__aeabi_fadd+0x78>
 800056a:	1a28      	subs	r0, r5, r0
 800056c:	2800      	cmp	r0, #0
 800056e:	dd0e      	ble.n	800058e <__aeabi_fadd+0x52>
 8000570:	2a00      	cmp	r2, #0
 8000572:	d13e      	bne.n	80005f2 <__aeabi_fadd+0xb6>
 8000574:	4662      	mov	r2, ip
 8000576:	2a00      	cmp	r2, #0
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x40>
 800057a:	e0fd      	b.n	8000778 <__aeabi_fadd+0x23c>
 800057c:	1e42      	subs	r2, r0, #1
 800057e:	2801      	cmp	r0, #1
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x48>
 8000582:	e137      	b.n	80007f4 <__aeabi_fadd+0x2b8>
 8000584:	28ff      	cmp	r0, #255	; 0xff
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x4e>
 8000588:	e0a9      	b.n	80006de <__aeabi_fadd+0x1a2>
 800058a:	0010      	movs	r0, r2
 800058c:	e039      	b.n	8000602 <__aeabi_fadd+0xc6>
 800058e:	2800      	cmp	r0, #0
 8000590:	d063      	beq.n	800065a <__aeabi_fadd+0x11e>
 8000592:	464b      	mov	r3, r9
 8000594:	1b52      	subs	r2, r2, r5
 8000596:	2d00      	cmp	r5, #0
 8000598:	d000      	beq.n	800059c <__aeabi_fadd+0x60>
 800059a:	e0e0      	b.n	800075e <__aeabi_fadd+0x222>
 800059c:	2f00      	cmp	r7, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x66>
 80005a0:	e0ce      	b.n	8000740 <__aeabi_fadd+0x204>
 80005a2:	1e53      	subs	r3, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x6e>
 80005a8:	e155      	b.n	8000856 <__aeabi_fadd+0x31a>
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d100      	bne.n	80005b0 <__aeabi_fadd+0x74>
 80005ae:	e094      	b.n	80006da <__aeabi_fadd+0x19e>
 80005b0:	001a      	movs	r2, r3
 80005b2:	e0d9      	b.n	8000768 <__aeabi_fadd+0x22c>
 80005b4:	1a2a      	subs	r2, r5, r0
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	dc00      	bgt.n	80005bc <__aeabi_fadd+0x80>
 80005ba:	e099      	b.n	80006f0 <__aeabi_fadd+0x1b4>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d062      	beq.n	8000686 <__aeabi_fadd+0x14a>
 80005c0:	2dff      	cmp	r5, #255	; 0xff
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x8a>
 80005c4:	e08b      	b.n	80006de <__aeabi_fadd+0x1a2>
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	4661      	mov	r1, ip
 80005ca:	04db      	lsls	r3, r3, #19
 80005cc:	4319      	orrs	r1, r3
 80005ce:	468c      	mov	ip, r1
 80005d0:	2a1b      	cmp	r2, #27
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_fadd+0x9a>
 80005d4:	e0d2      	b.n	800077c <__aeabi_fadd+0x240>
 80005d6:	2301      	movs	r3, #1
 80005d8:	19db      	adds	r3, r3, r7
 80005da:	015a      	lsls	r2, r3, #5
 80005dc:	d56a      	bpl.n	80006b4 <__aeabi_fadd+0x178>
 80005de:	3501      	adds	r5, #1
 80005e0:	2dff      	cmp	r5, #255	; 0xff
 80005e2:	d05b      	beq.n	800069c <__aeabi_fadd+0x160>
 80005e4:	2201      	movs	r2, #1
 80005e6:	49a3      	ldr	r1, [pc, #652]	; (8000874 <__aeabi_fadd+0x338>)
 80005e8:	401a      	ands	r2, r3
 80005ea:	085b      	lsrs	r3, r3, #1
 80005ec:	400b      	ands	r3, r1
 80005ee:	4313      	orrs	r3, r2
 80005f0:	e01c      	b.n	800062c <__aeabi_fadd+0xf0>
 80005f2:	2dff      	cmp	r5, #255	; 0xff
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0xbc>
 80005f6:	e072      	b.n	80006de <__aeabi_fadd+0x1a2>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	4662      	mov	r2, ip
 80005fc:	04db      	lsls	r3, r3, #19
 80005fe:	431a      	orrs	r2, r3
 8000600:	4694      	mov	ip, r2
 8000602:	281b      	cmp	r0, #27
 8000604:	dc00      	bgt.n	8000608 <__aeabi_fadd+0xcc>
 8000606:	e090      	b.n	800072a <__aeabi_fadd+0x1ee>
 8000608:	2301      	movs	r3, #1
 800060a:	1afb      	subs	r3, r7, r3
 800060c:	015a      	lsls	r2, r3, #5
 800060e:	d551      	bpl.n	80006b4 <__aeabi_fadd+0x178>
 8000610:	019b      	lsls	r3, r3, #6
 8000612:	099e      	lsrs	r6, r3, #6
 8000614:	0030      	movs	r0, r6
 8000616:	f000 feb9 	bl	800138c <__clzsi2>
 800061a:	0033      	movs	r3, r6
 800061c:	3805      	subs	r0, #5
 800061e:	4083      	lsls	r3, r0
 8000620:	4285      	cmp	r5, r0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_fadd+0xea>
 8000624:	e075      	b.n	8000712 <__aeabi_fadd+0x1d6>
 8000626:	4a94      	ldr	r2, [pc, #592]	; (8000878 <__aeabi_fadd+0x33c>)
 8000628:	1a2d      	subs	r5, r5, r0
 800062a:	4013      	ands	r3, r2
 800062c:	075a      	lsls	r2, r3, #29
 800062e:	d004      	beq.n	800063a <__aeabi_fadd+0xfe>
 8000630:	220f      	movs	r2, #15
 8000632:	401a      	ands	r2, r3
 8000634:	2a04      	cmp	r2, #4
 8000636:	d000      	beq.n	800063a <__aeabi_fadd+0xfe>
 8000638:	3304      	adds	r3, #4
 800063a:	015a      	lsls	r2, r3, #5
 800063c:	d53c      	bpl.n	80006b8 <__aeabi_fadd+0x17c>
 800063e:	1c68      	adds	r0, r5, #1
 8000640:	2dfe      	cmp	r5, #254	; 0xfe
 8000642:	d02b      	beq.n	800069c <__aeabi_fadd+0x160>
 8000644:	019b      	lsls	r3, r3, #6
 8000646:	0a5e      	lsrs	r6, r3, #9
 8000648:	b2c0      	uxtb	r0, r0
 800064a:	05c0      	lsls	r0, r0, #23
 800064c:	4330      	orrs	r0, r6
 800064e:	07e4      	lsls	r4, r4, #31
 8000650:	4320      	orrs	r0, r4
 8000652:	bcc0      	pop	{r6, r7}
 8000654:	46b9      	mov	r9, r7
 8000656:	46b0      	mov	r8, r6
 8000658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800065a:	20fe      	movs	r0, #254	; 0xfe
 800065c:	1c6a      	adds	r2, r5, #1
 800065e:	4210      	tst	r0, r2
 8000660:	d172      	bne.n	8000748 <__aeabi_fadd+0x20c>
 8000662:	2d00      	cmp	r5, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x12c>
 8000666:	e0ae      	b.n	80007c6 <__aeabi_fadd+0x28a>
 8000668:	2f00      	cmp	r7, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x132>
 800066c:	e0ec      	b.n	8000848 <__aeabi_fadd+0x30c>
 800066e:	4663      	mov	r3, ip
 8000670:	2000      	movs	r0, #0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0e9      	beq.n	800064a <__aeabi_fadd+0x10e>
 8000676:	1afb      	subs	r3, r7, r3
 8000678:	015a      	lsls	r2, r3, #5
 800067a:	d400      	bmi.n	800067e <__aeabi_fadd+0x142>
 800067c:	e0f3      	b.n	8000866 <__aeabi_fadd+0x32a>
 800067e:	4663      	mov	r3, ip
 8000680:	000c      	movs	r4, r1
 8000682:	1bdb      	subs	r3, r3, r7
 8000684:	e7d2      	b.n	800062c <__aeabi_fadd+0xf0>
 8000686:	4661      	mov	r1, ip
 8000688:	2900      	cmp	r1, #0
 800068a:	d05b      	beq.n	8000744 <__aeabi_fadd+0x208>
 800068c:	1e51      	subs	r1, r2, #1
 800068e:	2a01      	cmp	r2, #1
 8000690:	d100      	bne.n	8000694 <__aeabi_fadd+0x158>
 8000692:	e0a7      	b.n	80007e4 <__aeabi_fadd+0x2a8>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d022      	beq.n	80006de <__aeabi_fadd+0x1a2>
 8000698:	000a      	movs	r2, r1
 800069a:	e799      	b.n	80005d0 <__aeabi_fadd+0x94>
 800069c:	20ff      	movs	r0, #255	; 0xff
 800069e:	2600      	movs	r6, #0
 80006a0:	e7d3      	b.n	800064a <__aeabi_fadd+0x10e>
 80006a2:	21fe      	movs	r1, #254	; 0xfe
 80006a4:	1c6a      	adds	r2, r5, #1
 80006a6:	4211      	tst	r1, r2
 80006a8:	d073      	beq.n	8000792 <__aeabi_fadd+0x256>
 80006aa:	2aff      	cmp	r2, #255	; 0xff
 80006ac:	d0f6      	beq.n	800069c <__aeabi_fadd+0x160>
 80006ae:	0015      	movs	r5, r2
 80006b0:	4467      	add	r7, ip
 80006b2:	087b      	lsrs	r3, r7, #1
 80006b4:	075a      	lsls	r2, r3, #29
 80006b6:	d1bb      	bne.n	8000630 <__aeabi_fadd+0xf4>
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	2dff      	cmp	r5, #255	; 0xff
 80006bc:	d00f      	beq.n	80006de <__aeabi_fadd+0x1a2>
 80006be:	025b      	lsls	r3, r3, #9
 80006c0:	0a5e      	lsrs	r6, r3, #9
 80006c2:	b2e8      	uxtb	r0, r5
 80006c4:	e7c1      	b.n	800064a <__aeabi_fadd+0x10e>
 80006c6:	4662      	mov	r2, ip
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d008      	beq.n	80006de <__aeabi_fadd+0x1a2>
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	03d2      	lsls	r2, r2, #15
 80006d0:	4213      	tst	r3, r2
 80006d2:	d004      	beq.n	80006de <__aeabi_fadd+0x1a2>
 80006d4:	4640      	mov	r0, r8
 80006d6:	4210      	tst	r0, r2
 80006d8:	d101      	bne.n	80006de <__aeabi_fadd+0x1a2>
 80006da:	000c      	movs	r4, r1
 80006dc:	4643      	mov	r3, r8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0dc      	beq.n	800069c <__aeabi_fadd+0x160>
 80006e2:	2680      	movs	r6, #128	; 0x80
 80006e4:	03f6      	lsls	r6, r6, #15
 80006e6:	431e      	orrs	r6, r3
 80006e8:	0276      	lsls	r6, r6, #9
 80006ea:	20ff      	movs	r0, #255	; 0xff
 80006ec:	0a76      	lsrs	r6, r6, #9
 80006ee:	e7ac      	b.n	800064a <__aeabi_fadd+0x10e>
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	d0d6      	beq.n	80006a2 <__aeabi_fadd+0x166>
 80006f4:	1b42      	subs	r2, r0, r5
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d05c      	beq.n	80007b4 <__aeabi_fadd+0x278>
 80006fa:	28ff      	cmp	r0, #255	; 0xff
 80006fc:	d0ee      	beq.n	80006dc <__aeabi_fadd+0x1a0>
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	04db      	lsls	r3, r3, #19
 8000702:	431f      	orrs	r7, r3
 8000704:	2a1b      	cmp	r2, #27
 8000706:	dc00      	bgt.n	800070a <__aeabi_fadd+0x1ce>
 8000708:	e082      	b.n	8000810 <__aeabi_fadd+0x2d4>
 800070a:	2301      	movs	r3, #1
 800070c:	464d      	mov	r5, r9
 800070e:	4463      	add	r3, ip
 8000710:	e763      	b.n	80005da <__aeabi_fadd+0x9e>
 8000712:	2220      	movs	r2, #32
 8000714:	1b40      	subs	r0, r0, r5
 8000716:	3001      	adds	r0, #1
 8000718:	1a12      	subs	r2, r2, r0
 800071a:	0019      	movs	r1, r3
 800071c:	4093      	lsls	r3, r2
 800071e:	40c1      	lsrs	r1, r0
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	4193      	sbcs	r3, r2
 8000724:	2500      	movs	r5, #0
 8000726:	430b      	orrs	r3, r1
 8000728:	e780      	b.n	800062c <__aeabi_fadd+0xf0>
 800072a:	2320      	movs	r3, #32
 800072c:	4661      	mov	r1, ip
 800072e:	1a1b      	subs	r3, r3, r0
 8000730:	4099      	lsls	r1, r3
 8000732:	4662      	mov	r2, ip
 8000734:	000b      	movs	r3, r1
 8000736:	40c2      	lsrs	r2, r0
 8000738:	1e59      	subs	r1, r3, #1
 800073a:	418b      	sbcs	r3, r1
 800073c:	4313      	orrs	r3, r2
 800073e:	e764      	b.n	800060a <__aeabi_fadd+0xce>
 8000740:	000c      	movs	r4, r1
 8000742:	4643      	mov	r3, r8
 8000744:	0015      	movs	r5, r2
 8000746:	e7b8      	b.n	80006ba <__aeabi_fadd+0x17e>
 8000748:	4663      	mov	r3, ip
 800074a:	1afe      	subs	r6, r7, r3
 800074c:	0173      	lsls	r3, r6, #5
 800074e:	d445      	bmi.n	80007dc <__aeabi_fadd+0x2a0>
 8000750:	2e00      	cmp	r6, #0
 8000752:	d000      	beq.n	8000756 <__aeabi_fadd+0x21a>
 8000754:	e75e      	b.n	8000614 <__aeabi_fadd+0xd8>
 8000756:	2400      	movs	r4, #0
 8000758:	2000      	movs	r0, #0
 800075a:	2600      	movs	r6, #0
 800075c:	e775      	b.n	800064a <__aeabi_fadd+0x10e>
 800075e:	2bff      	cmp	r3, #255	; 0xff
 8000760:	d0bb      	beq.n	80006da <__aeabi_fadd+0x19e>
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	04db      	lsls	r3, r3, #19
 8000766:	431f      	orrs	r7, r3
 8000768:	2a1b      	cmp	r2, #27
 800076a:	dd47      	ble.n	80007fc <__aeabi_fadd+0x2c0>
 800076c:	2301      	movs	r3, #1
 800076e:	4662      	mov	r2, ip
 8000770:	000c      	movs	r4, r1
 8000772:	464d      	mov	r5, r9
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	e749      	b.n	800060c <__aeabi_fadd+0xd0>
 8000778:	0005      	movs	r5, r0
 800077a:	e79e      	b.n	80006ba <__aeabi_fadd+0x17e>
 800077c:	4661      	mov	r1, ip
 800077e:	2320      	movs	r3, #32
 8000780:	40d1      	lsrs	r1, r2
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	4662      	mov	r2, ip
 8000786:	409a      	lsls	r2, r3
 8000788:	0013      	movs	r3, r2
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	430b      	orrs	r3, r1
 8000790:	e722      	b.n	80005d8 <__aeabi_fadd+0x9c>
 8000792:	2d00      	cmp	r5, #0
 8000794:	d146      	bne.n	8000824 <__aeabi_fadd+0x2e8>
 8000796:	2f00      	cmp	r7, #0
 8000798:	d062      	beq.n	8000860 <__aeabi_fadd+0x324>
 800079a:	4663      	mov	r3, ip
 800079c:	2000      	movs	r0, #0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x268>
 80007a2:	e752      	b.n	800064a <__aeabi_fadd+0x10e>
 80007a4:	003b      	movs	r3, r7
 80007a6:	4463      	add	r3, ip
 80007a8:	015a      	lsls	r2, r3, #5
 80007aa:	d583      	bpl.n	80006b4 <__aeabi_fadd+0x178>
 80007ac:	4a32      	ldr	r2, [pc, #200]	; (8000878 <__aeabi_fadd+0x33c>)
 80007ae:	3501      	adds	r5, #1
 80007b0:	4013      	ands	r3, r2
 80007b2:	e77f      	b.n	80006b4 <__aeabi_fadd+0x178>
 80007b4:	2f00      	cmp	r7, #0
 80007b6:	d0c4      	beq.n	8000742 <__aeabi_fadd+0x206>
 80007b8:	1e53      	subs	r3, r2, #1
 80007ba:	2a01      	cmp	r2, #1
 80007bc:	d012      	beq.n	80007e4 <__aeabi_fadd+0x2a8>
 80007be:	2aff      	cmp	r2, #255	; 0xff
 80007c0:	d08c      	beq.n	80006dc <__aeabi_fadd+0x1a0>
 80007c2:	001a      	movs	r2, r3
 80007c4:	e79e      	b.n	8000704 <__aeabi_fadd+0x1c8>
 80007c6:	2f00      	cmp	r7, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_fadd+0x290>
 80007ca:	e77c      	b.n	80006c6 <__aeabi_fadd+0x18a>
 80007cc:	4663      	mov	r3, ip
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d183      	bne.n	80006da <__aeabi_fadd+0x19e>
 80007d2:	2680      	movs	r6, #128	; 0x80
 80007d4:	2400      	movs	r4, #0
 80007d6:	20ff      	movs	r0, #255	; 0xff
 80007d8:	03f6      	lsls	r6, r6, #15
 80007da:	e736      	b.n	800064a <__aeabi_fadd+0x10e>
 80007dc:	4663      	mov	r3, ip
 80007de:	000c      	movs	r4, r1
 80007e0:	1bde      	subs	r6, r3, r7
 80007e2:	e717      	b.n	8000614 <__aeabi_fadd+0xd8>
 80007e4:	003b      	movs	r3, r7
 80007e6:	4463      	add	r3, ip
 80007e8:	2501      	movs	r5, #1
 80007ea:	015a      	lsls	r2, r3, #5
 80007ec:	d400      	bmi.n	80007f0 <__aeabi_fadd+0x2b4>
 80007ee:	e761      	b.n	80006b4 <__aeabi_fadd+0x178>
 80007f0:	2502      	movs	r5, #2
 80007f2:	e6f7      	b.n	80005e4 <__aeabi_fadd+0xa8>
 80007f4:	4663      	mov	r3, ip
 80007f6:	2501      	movs	r5, #1
 80007f8:	1afb      	subs	r3, r7, r3
 80007fa:	e707      	b.n	800060c <__aeabi_fadd+0xd0>
 80007fc:	2320      	movs	r3, #32
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	0038      	movs	r0, r7
 8000802:	409f      	lsls	r7, r3
 8000804:	003b      	movs	r3, r7
 8000806:	40d0      	lsrs	r0, r2
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	4193      	sbcs	r3, r2
 800080c:	4303      	orrs	r3, r0
 800080e:	e7ae      	b.n	800076e <__aeabi_fadd+0x232>
 8000810:	2320      	movs	r3, #32
 8000812:	1a9b      	subs	r3, r3, r2
 8000814:	0039      	movs	r1, r7
 8000816:	409f      	lsls	r7, r3
 8000818:	003b      	movs	r3, r7
 800081a:	40d1      	lsrs	r1, r2
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	4193      	sbcs	r3, r2
 8000820:	430b      	orrs	r3, r1
 8000822:	e773      	b.n	800070c <__aeabi_fadd+0x1d0>
 8000824:	2f00      	cmp	r7, #0
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0x2ee>
 8000828:	e758      	b.n	80006dc <__aeabi_fadd+0x1a0>
 800082a:	4662      	mov	r2, ip
 800082c:	2a00      	cmp	r2, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_fadd+0x2f6>
 8000830:	e755      	b.n	80006de <__aeabi_fadd+0x1a2>
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	03d2      	lsls	r2, r2, #15
 8000836:	4213      	tst	r3, r2
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x300>
 800083a:	e750      	b.n	80006de <__aeabi_fadd+0x1a2>
 800083c:	4641      	mov	r1, r8
 800083e:	4211      	tst	r1, r2
 8000840:	d000      	beq.n	8000844 <__aeabi_fadd+0x308>
 8000842:	e74c      	b.n	80006de <__aeabi_fadd+0x1a2>
 8000844:	4643      	mov	r3, r8
 8000846:	e74a      	b.n	80006de <__aeabi_fadd+0x1a2>
 8000848:	4663      	mov	r3, ip
 800084a:	2b00      	cmp	r3, #0
 800084c:	d083      	beq.n	8000756 <__aeabi_fadd+0x21a>
 800084e:	000c      	movs	r4, r1
 8000850:	4646      	mov	r6, r8
 8000852:	2000      	movs	r0, #0
 8000854:	e6f9      	b.n	800064a <__aeabi_fadd+0x10e>
 8000856:	4663      	mov	r3, ip
 8000858:	000c      	movs	r4, r1
 800085a:	1bdb      	subs	r3, r3, r7
 800085c:	3501      	adds	r5, #1
 800085e:	e6d5      	b.n	800060c <__aeabi_fadd+0xd0>
 8000860:	4646      	mov	r6, r8
 8000862:	2000      	movs	r0, #0
 8000864:	e6f1      	b.n	800064a <__aeabi_fadd+0x10e>
 8000866:	2b00      	cmp	r3, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fadd+0x330>
 800086a:	e723      	b.n	80006b4 <__aeabi_fadd+0x178>
 800086c:	2400      	movs	r4, #0
 800086e:	2600      	movs	r6, #0
 8000870:	e6eb      	b.n	800064a <__aeabi_fadd+0x10e>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	7dffffff 	.word	0x7dffffff
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_fdiv>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	4646      	mov	r6, r8
 8000882:	46d6      	mov	lr, sl
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	b5c0      	push	{r6, r7, lr}
 8000888:	0047      	lsls	r7, r0, #1
 800088a:	1c0c      	adds	r4, r1, #0
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e3f      	lsrs	r7, r7, #24
 8000890:	0fc6      	lsrs	r6, r0, #31
 8000892:	2f00      	cmp	r7, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fdiv+0x1c>
 8000896:	e06f      	b.n	8000978 <__aeabi_fdiv+0xfc>
 8000898:	2fff      	cmp	r7, #255	; 0xff
 800089a:	d100      	bne.n	800089e <__aeabi_fdiv+0x22>
 800089c:	e074      	b.n	8000988 <__aeabi_fdiv+0x10c>
 800089e:	2300      	movs	r3, #0
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	4699      	mov	r9, r3
 80008a4:	469a      	mov	sl, r3
 80008a6:	00ed      	lsls	r5, r5, #3
 80008a8:	04d2      	lsls	r2, r2, #19
 80008aa:	4315      	orrs	r5, r2
 80008ac:	3f7f      	subs	r7, #127	; 0x7f
 80008ae:	0263      	lsls	r3, r4, #9
 80008b0:	0a5b      	lsrs	r3, r3, #9
 80008b2:	4698      	mov	r8, r3
 80008b4:	0063      	lsls	r3, r4, #1
 80008b6:	0e1b      	lsrs	r3, r3, #24
 80008b8:	0fe4      	lsrs	r4, r4, #31
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d04d      	beq.n	800095a <__aeabi_fdiv+0xde>
 80008be:	2bff      	cmp	r3, #255	; 0xff
 80008c0:	d045      	beq.n	800094e <__aeabi_fdiv+0xd2>
 80008c2:	4642      	mov	r2, r8
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	00d2      	lsls	r2, r2, #3
 80008c8:	04c9      	lsls	r1, r1, #19
 80008ca:	4311      	orrs	r1, r2
 80008cc:	4688      	mov	r8, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	3b7f      	subs	r3, #127	; 0x7f
 80008d2:	0031      	movs	r1, r6
 80008d4:	1aff      	subs	r7, r7, r3
 80008d6:	464b      	mov	r3, r9
 80008d8:	4061      	eors	r1, r4
 80008da:	b2c9      	uxtb	r1, r1
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d900      	bls.n	80008e2 <__aeabi_fdiv+0x66>
 80008e0:	e0b8      	b.n	8000a54 <__aeabi_fdiv+0x1d8>
 80008e2:	4870      	ldr	r0, [pc, #448]	; (8000aa4 <__aeabi_fdiv+0x228>)
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	58c3      	ldr	r3, [r0, r3]
 80008e8:	469f      	mov	pc, r3
 80008ea:	2300      	movs	r3, #0
 80008ec:	4698      	mov	r8, r3
 80008ee:	0026      	movs	r6, r4
 80008f0:	4645      	mov	r5, r8
 80008f2:	4692      	mov	sl, r2
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x80>
 80008fa:	e08d      	b.n	8000a18 <__aeabi_fdiv+0x19c>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d100      	bne.n	8000902 <__aeabi_fdiv+0x86>
 8000900:	e0a1      	b.n	8000a46 <__aeabi_fdiv+0x1ca>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d018      	beq.n	8000938 <__aeabi_fdiv+0xbc>
 8000906:	003b      	movs	r3, r7
 8000908:	337f      	adds	r3, #127	; 0x7f
 800090a:	2b00      	cmp	r3, #0
 800090c:	dd6d      	ble.n	80009ea <__aeabi_fdiv+0x16e>
 800090e:	076a      	lsls	r2, r5, #29
 8000910:	d004      	beq.n	800091c <__aeabi_fdiv+0xa0>
 8000912:	220f      	movs	r2, #15
 8000914:	402a      	ands	r2, r5
 8000916:	2a04      	cmp	r2, #4
 8000918:	d000      	beq.n	800091c <__aeabi_fdiv+0xa0>
 800091a:	3504      	adds	r5, #4
 800091c:	012a      	lsls	r2, r5, #4
 800091e:	d503      	bpl.n	8000928 <__aeabi_fdiv+0xac>
 8000920:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <__aeabi_fdiv+0x22c>)
 8000922:	401d      	ands	r5, r3
 8000924:	003b      	movs	r3, r7
 8000926:	3380      	adds	r3, #128	; 0x80
 8000928:	2bfe      	cmp	r3, #254	; 0xfe
 800092a:	dd00      	ble.n	800092e <__aeabi_fdiv+0xb2>
 800092c:	e074      	b.n	8000a18 <__aeabi_fdiv+0x19c>
 800092e:	01aa      	lsls	r2, r5, #6
 8000930:	0a52      	lsrs	r2, r2, #9
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	e002      	b.n	800093c <__aeabi_fdiv+0xc0>
 8000936:	000e      	movs	r6, r1
 8000938:	2000      	movs	r0, #0
 800093a:	2200      	movs	r2, #0
 800093c:	05c0      	lsls	r0, r0, #23
 800093e:	07f6      	lsls	r6, r6, #31
 8000940:	4310      	orrs	r0, r2
 8000942:	4330      	orrs	r0, r6
 8000944:	bce0      	pop	{r5, r6, r7}
 8000946:	46ba      	mov	sl, r7
 8000948:	46b1      	mov	r9, r6
 800094a:	46a8      	mov	r8, r5
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094e:	4643      	mov	r3, r8
 8000950:	2b00      	cmp	r3, #0
 8000952:	d13f      	bne.n	80009d4 <__aeabi_fdiv+0x158>
 8000954:	2202      	movs	r2, #2
 8000956:	3fff      	subs	r7, #255	; 0xff
 8000958:	e003      	b.n	8000962 <__aeabi_fdiv+0xe6>
 800095a:	4643      	mov	r3, r8
 800095c:	2b00      	cmp	r3, #0
 800095e:	d12d      	bne.n	80009bc <__aeabi_fdiv+0x140>
 8000960:	2201      	movs	r2, #1
 8000962:	0031      	movs	r1, r6
 8000964:	464b      	mov	r3, r9
 8000966:	4061      	eors	r1, r4
 8000968:	b2c9      	uxtb	r1, r1
 800096a:	4313      	orrs	r3, r2
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d838      	bhi.n	80009e2 <__aeabi_fdiv+0x166>
 8000970:	484e      	ldr	r0, [pc, #312]	; (8000aac <__aeabi_fdiv+0x230>)
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	58c3      	ldr	r3, [r0, r3]
 8000976:	469f      	mov	pc, r3
 8000978:	2d00      	cmp	r5, #0
 800097a:	d113      	bne.n	80009a4 <__aeabi_fdiv+0x128>
 800097c:	2304      	movs	r3, #4
 800097e:	4699      	mov	r9, r3
 8000980:	3b03      	subs	r3, #3
 8000982:	2700      	movs	r7, #0
 8000984:	469a      	mov	sl, r3
 8000986:	e792      	b.n	80008ae <__aeabi_fdiv+0x32>
 8000988:	2d00      	cmp	r5, #0
 800098a:	d105      	bne.n	8000998 <__aeabi_fdiv+0x11c>
 800098c:	2308      	movs	r3, #8
 800098e:	4699      	mov	r9, r3
 8000990:	3b06      	subs	r3, #6
 8000992:	27ff      	movs	r7, #255	; 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e78a      	b.n	80008ae <__aeabi_fdiv+0x32>
 8000998:	230c      	movs	r3, #12
 800099a:	4699      	mov	r9, r3
 800099c:	3b09      	subs	r3, #9
 800099e:	27ff      	movs	r7, #255	; 0xff
 80009a0:	469a      	mov	sl, r3
 80009a2:	e784      	b.n	80008ae <__aeabi_fdiv+0x32>
 80009a4:	0028      	movs	r0, r5
 80009a6:	f000 fcf1 	bl	800138c <__clzsi2>
 80009aa:	2776      	movs	r7, #118	; 0x76
 80009ac:	1f43      	subs	r3, r0, #5
 80009ae:	409d      	lsls	r5, r3
 80009b0:	2300      	movs	r3, #0
 80009b2:	427f      	negs	r7, r7
 80009b4:	4699      	mov	r9, r3
 80009b6:	469a      	mov	sl, r3
 80009b8:	1a3f      	subs	r7, r7, r0
 80009ba:	e778      	b.n	80008ae <__aeabi_fdiv+0x32>
 80009bc:	4640      	mov	r0, r8
 80009be:	f000 fce5 	bl	800138c <__clzsi2>
 80009c2:	4642      	mov	r2, r8
 80009c4:	1f43      	subs	r3, r0, #5
 80009c6:	409a      	lsls	r2, r3
 80009c8:	2376      	movs	r3, #118	; 0x76
 80009ca:	425b      	negs	r3, r3
 80009cc:	4690      	mov	r8, r2
 80009ce:	1a1b      	subs	r3, r3, r0
 80009d0:	2200      	movs	r2, #0
 80009d2:	e77e      	b.n	80008d2 <__aeabi_fdiv+0x56>
 80009d4:	2303      	movs	r3, #3
 80009d6:	464a      	mov	r2, r9
 80009d8:	431a      	orrs	r2, r3
 80009da:	4691      	mov	r9, r2
 80009dc:	33fc      	adds	r3, #252	; 0xfc
 80009de:	2203      	movs	r2, #3
 80009e0:	e777      	b.n	80008d2 <__aeabi_fdiv+0x56>
 80009e2:	000e      	movs	r6, r1
 80009e4:	20ff      	movs	r0, #255	; 0xff
 80009e6:	2200      	movs	r2, #0
 80009e8:	e7a8      	b.n	800093c <__aeabi_fdiv+0xc0>
 80009ea:	2201      	movs	r2, #1
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b1b      	cmp	r3, #27
 80009f0:	dca2      	bgt.n	8000938 <__aeabi_fdiv+0xbc>
 80009f2:	379e      	adds	r7, #158	; 0x9e
 80009f4:	002a      	movs	r2, r5
 80009f6:	40bd      	lsls	r5, r7
 80009f8:	40da      	lsrs	r2, r3
 80009fa:	1e6b      	subs	r3, r5, #1
 80009fc:	419d      	sbcs	r5, r3
 80009fe:	4315      	orrs	r5, r2
 8000a00:	076a      	lsls	r2, r5, #29
 8000a02:	d004      	beq.n	8000a0e <__aeabi_fdiv+0x192>
 8000a04:	220f      	movs	r2, #15
 8000a06:	402a      	ands	r2, r5
 8000a08:	2a04      	cmp	r2, #4
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fdiv+0x192>
 8000a0c:	3504      	adds	r5, #4
 8000a0e:	016a      	lsls	r2, r5, #5
 8000a10:	d544      	bpl.n	8000a9c <__aeabi_fdiv+0x220>
 8000a12:	2001      	movs	r0, #1
 8000a14:	2200      	movs	r2, #0
 8000a16:	e791      	b.n	800093c <__aeabi_fdiv+0xc0>
 8000a18:	20ff      	movs	r0, #255	; 0xff
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e78e      	b.n	800093c <__aeabi_fdiv+0xc0>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	2600      	movs	r6, #0
 8000a22:	20ff      	movs	r0, #255	; 0xff
 8000a24:	03d2      	lsls	r2, r2, #15
 8000a26:	e789      	b.n	800093c <__aeabi_fdiv+0xc0>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	03d2      	lsls	r2, r2, #15
 8000a30:	4215      	tst	r5, r2
 8000a32:	d008      	beq.n	8000a46 <__aeabi_fdiv+0x1ca>
 8000a34:	4643      	mov	r3, r8
 8000a36:	4213      	tst	r3, r2
 8000a38:	d105      	bne.n	8000a46 <__aeabi_fdiv+0x1ca>
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	0252      	lsls	r2, r2, #9
 8000a3e:	0026      	movs	r6, r4
 8000a40:	20ff      	movs	r0, #255	; 0xff
 8000a42:	0a52      	lsrs	r2, r2, #9
 8000a44:	e77a      	b.n	800093c <__aeabi_fdiv+0xc0>
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	03d2      	lsls	r2, r2, #15
 8000a4a:	432a      	orrs	r2, r5
 8000a4c:	0252      	lsls	r2, r2, #9
 8000a4e:	20ff      	movs	r0, #255	; 0xff
 8000a50:	0a52      	lsrs	r2, r2, #9
 8000a52:	e773      	b.n	800093c <__aeabi_fdiv+0xc0>
 8000a54:	4642      	mov	r2, r8
 8000a56:	016b      	lsls	r3, r5, #5
 8000a58:	0155      	lsls	r5, r2, #5
 8000a5a:	42ab      	cmp	r3, r5
 8000a5c:	d21a      	bcs.n	8000a94 <__aeabi_fdiv+0x218>
 8000a5e:	201b      	movs	r0, #27
 8000a60:	2200      	movs	r2, #0
 8000a62:	3f01      	subs	r7, #1
 8000a64:	2601      	movs	r6, #1
 8000a66:	001c      	movs	r4, r3
 8000a68:	0052      	lsls	r2, r2, #1
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2c00      	cmp	r4, #0
 8000a6e:	db01      	blt.n	8000a74 <__aeabi_fdiv+0x1f8>
 8000a70:	429d      	cmp	r5, r3
 8000a72:	d801      	bhi.n	8000a78 <__aeabi_fdiv+0x1fc>
 8000a74:	1b5b      	subs	r3, r3, r5
 8000a76:	4332      	orrs	r2, r6
 8000a78:	3801      	subs	r0, #1
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d1f3      	bne.n	8000a66 <__aeabi_fdiv+0x1ea>
 8000a7e:	1e58      	subs	r0, r3, #1
 8000a80:	4183      	sbcs	r3, r0
 8000a82:	4313      	orrs	r3, r2
 8000a84:	001d      	movs	r5, r3
 8000a86:	003b      	movs	r3, r7
 8000a88:	337f      	adds	r3, #127	; 0x7f
 8000a8a:	000e      	movs	r6, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dd00      	ble.n	8000a92 <__aeabi_fdiv+0x216>
 8000a90:	e73d      	b.n	800090e <__aeabi_fdiv+0x92>
 8000a92:	e7aa      	b.n	80009ea <__aeabi_fdiv+0x16e>
 8000a94:	201a      	movs	r0, #26
 8000a96:	2201      	movs	r2, #1
 8000a98:	1b5b      	subs	r3, r3, r5
 8000a9a:	e7e3      	b.n	8000a64 <__aeabi_fdiv+0x1e8>
 8000a9c:	01aa      	lsls	r2, r5, #6
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	0a52      	lsrs	r2, r2, #9
 8000aa2:	e74b      	b.n	800093c <__aeabi_fdiv+0xc0>
 8000aa4:	080149c0 	.word	0x080149c0
 8000aa8:	f7ffffff 	.word	0xf7ffffff
 8000aac:	08014a00 	.word	0x08014a00

08000ab0 <__eqsf2>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	024e      	lsls	r6, r1, #9
 8000ab8:	004c      	lsls	r4, r1, #1
 8000aba:	0fc3      	lsrs	r3, r0, #31
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	2001      	movs	r0, #1
 8000ac0:	0e12      	lsrs	r2, r2, #24
 8000ac2:	0a76      	lsrs	r6, r6, #9
 8000ac4:	0e24      	lsrs	r4, r4, #24
 8000ac6:	0fc9      	lsrs	r1, r1, #31
 8000ac8:	2aff      	cmp	r2, #255	; 0xff
 8000aca:	d006      	beq.n	8000ada <__eqsf2+0x2a>
 8000acc:	2cff      	cmp	r4, #255	; 0xff
 8000ace:	d003      	beq.n	8000ad8 <__eqsf2+0x28>
 8000ad0:	42a2      	cmp	r2, r4
 8000ad2:	d101      	bne.n	8000ad8 <__eqsf2+0x28>
 8000ad4:	42b5      	cmp	r5, r6
 8000ad6:	d006      	beq.n	8000ae6 <__eqsf2+0x36>
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d1fc      	bne.n	8000ad8 <__eqsf2+0x28>
 8000ade:	2cff      	cmp	r4, #255	; 0xff
 8000ae0:	d1fa      	bne.n	8000ad8 <__eqsf2+0x28>
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d1f8      	bne.n	8000ad8 <__eqsf2+0x28>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d006      	beq.n	8000af8 <__eqsf2+0x48>
 8000aea:	2001      	movs	r0, #1
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d1f3      	bne.n	8000ad8 <__eqsf2+0x28>
 8000af0:	0028      	movs	r0, r5
 8000af2:	1e43      	subs	r3, r0, #1
 8000af4:	4198      	sbcs	r0, r3
 8000af6:	e7ef      	b.n	8000ad8 <__eqsf2+0x28>
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7ed      	b.n	8000ad8 <__eqsf2+0x28>

08000afc <__gesf2>:
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	0042      	lsls	r2, r0, #1
 8000b00:	0245      	lsls	r5, r0, #9
 8000b02:	024e      	lsls	r6, r1, #9
 8000b04:	004c      	lsls	r4, r1, #1
 8000b06:	0fc3      	lsrs	r3, r0, #31
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e12      	lsrs	r2, r2, #24
 8000b0c:	0a76      	lsrs	r6, r6, #9
 8000b0e:	0e24      	lsrs	r4, r4, #24
 8000b10:	0fc8      	lsrs	r0, r1, #31
 8000b12:	2aff      	cmp	r2, #255	; 0xff
 8000b14:	d01b      	beq.n	8000b4e <__gesf2+0x52>
 8000b16:	2cff      	cmp	r4, #255	; 0xff
 8000b18:	d00e      	beq.n	8000b38 <__gesf2+0x3c>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d11b      	bne.n	8000b56 <__gesf2+0x5a>
 8000b1e:	2c00      	cmp	r4, #0
 8000b20:	d101      	bne.n	8000b26 <__gesf2+0x2a>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d01c      	beq.n	8000b60 <__gesf2+0x64>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d00c      	beq.n	8000b44 <__gesf2+0x48>
 8000b2a:	4283      	cmp	r3, r0
 8000b2c:	d01c      	beq.n	8000b68 <__gesf2+0x6c>
 8000b2e:	2102      	movs	r1, #2
 8000b30:	1e58      	subs	r0, r3, #1
 8000b32:	4008      	ands	r0, r1
 8000b34:	3801      	subs	r0, #1
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d122      	bne.n	8000b82 <__gesf2+0x86>
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d1f4      	bne.n	8000b2a <__gesf2+0x2e>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d1f2      	bne.n	8000b2a <__gesf2+0x2e>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d1f6      	bne.n	8000b36 <__gesf2+0x3a>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	e7f3      	b.n	8000b36 <__gesf2+0x3a>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d117      	bne.n	8000b82 <__gesf2+0x86>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d0f0      	beq.n	8000b38 <__gesf2+0x3c>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d1e7      	bne.n	8000b2a <__gesf2+0x2e>
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d1e5      	bne.n	8000b2a <__gesf2+0x2e>
 8000b5e:	e7e6      	b.n	8000b2e <__gesf2+0x32>
 8000b60:	2000      	movs	r0, #0
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e7      	beq.n	8000b36 <__gesf2+0x3a>
 8000b66:	e7e2      	b.n	8000b2e <__gesf2+0x32>
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	dc05      	bgt.n	8000b78 <__gesf2+0x7c>
 8000b6c:	dbea      	blt.n	8000b44 <__gesf2+0x48>
 8000b6e:	42b5      	cmp	r5, r6
 8000b70:	d802      	bhi.n	8000b78 <__gesf2+0x7c>
 8000b72:	d3e7      	bcc.n	8000b44 <__gesf2+0x48>
 8000b74:	2000      	movs	r0, #0
 8000b76:	e7de      	b.n	8000b36 <__gesf2+0x3a>
 8000b78:	4243      	negs	r3, r0
 8000b7a:	4158      	adcs	r0, r3
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	3801      	subs	r0, #1
 8000b80:	e7d9      	b.n	8000b36 <__gesf2+0x3a>
 8000b82:	2002      	movs	r0, #2
 8000b84:	4240      	negs	r0, r0
 8000b86:	e7d6      	b.n	8000b36 <__gesf2+0x3a>

08000b88 <__lesf2>:
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	0042      	lsls	r2, r0, #1
 8000b8c:	0245      	lsls	r5, r0, #9
 8000b8e:	024e      	lsls	r6, r1, #9
 8000b90:	004c      	lsls	r4, r1, #1
 8000b92:	0fc3      	lsrs	r3, r0, #31
 8000b94:	0a6d      	lsrs	r5, r5, #9
 8000b96:	0e12      	lsrs	r2, r2, #24
 8000b98:	0a76      	lsrs	r6, r6, #9
 8000b9a:	0e24      	lsrs	r4, r4, #24
 8000b9c:	0fc8      	lsrs	r0, r1, #31
 8000b9e:	2aff      	cmp	r2, #255	; 0xff
 8000ba0:	d00b      	beq.n	8000bba <__lesf2+0x32>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d00d      	beq.n	8000bc2 <__lesf2+0x3a>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d11f      	bne.n	8000bea <__lesf2+0x62>
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	d116      	bne.n	8000bdc <__lesf2+0x54>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d114      	bne.n	8000bdc <__lesf2+0x54>
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d010      	beq.n	8000bda <__lesf2+0x52>
 8000bb8:	e009      	b.n	8000bce <__lesf2+0x46>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d10c      	bne.n	8000bd8 <__lesf2+0x50>
 8000bbe:	2cff      	cmp	r4, #255	; 0xff
 8000bc0:	d113      	bne.n	8000bea <__lesf2+0x62>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d108      	bne.n	8000bd8 <__lesf2+0x50>
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d008      	beq.n	8000bdc <__lesf2+0x54>
 8000bca:	4283      	cmp	r3, r0
 8000bcc:	d012      	beq.n	8000bf4 <__lesf2+0x6c>
 8000bce:	2102      	movs	r1, #2
 8000bd0:	1e58      	subs	r0, r3, #1
 8000bd2:	4008      	ands	r0, r1
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	e000      	b.n	8000bda <__lesf2+0x52>
 8000bd8:	2002      	movs	r0, #2
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d1f4      	bne.n	8000bca <__lesf2+0x42>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d1fa      	bne.n	8000bda <__lesf2+0x52>
 8000be4:	2001      	movs	r0, #1
 8000be6:	4240      	negs	r0, r0
 8000be8:	e7f7      	b.n	8000bda <__lesf2+0x52>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d1ed      	bne.n	8000bca <__lesf2+0x42>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d1eb      	bne.n	8000bca <__lesf2+0x42>
 8000bf2:	e7ec      	b.n	8000bce <__lesf2+0x46>
 8000bf4:	42a2      	cmp	r2, r4
 8000bf6:	dc05      	bgt.n	8000c04 <__lesf2+0x7c>
 8000bf8:	dbf2      	blt.n	8000be0 <__lesf2+0x58>
 8000bfa:	42b5      	cmp	r5, r6
 8000bfc:	d802      	bhi.n	8000c04 <__lesf2+0x7c>
 8000bfe:	d3ef      	bcc.n	8000be0 <__lesf2+0x58>
 8000c00:	2000      	movs	r0, #0
 8000c02:	e7ea      	b.n	8000bda <__lesf2+0x52>
 8000c04:	4243      	negs	r3, r0
 8000c06:	4158      	adcs	r0, r3
 8000c08:	0040      	lsls	r0, r0, #1
 8000c0a:	3801      	subs	r0, #1
 8000c0c:	e7e5      	b.n	8000bda <__lesf2+0x52>
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <__aeabi_fmul>:
 8000c10:	0243      	lsls	r3, r0, #9
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	464f      	mov	r7, r9
 8000c18:	4646      	mov	r6, r8
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	46d6      	mov	lr, sl
 8000c1e:	0fc3      	lsrs	r3, r0, #31
 8000c20:	0045      	lsls	r5, r0, #1
 8000c22:	4698      	mov	r8, r3
 8000c24:	b5c0      	push	{r6, r7, lr}
 8000c26:	464b      	mov	r3, r9
 8000c28:	1c0f      	adds	r7, r1, #0
 8000c2a:	0e2d      	lsrs	r5, r5, #24
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fmul+0x20>
 8000c2e:	e0cb      	b.n	8000dc8 <__aeabi_fmul+0x1b8>
 8000c30:	2dff      	cmp	r5, #255	; 0xff
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fmul+0x26>
 8000c34:	e0cf      	b.n	8000dd6 <__aeabi_fmul+0x1c6>
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	2300      	movs	r3, #0
 8000c40:	4691      	mov	r9, r2
 8000c42:	2600      	movs	r6, #0
 8000c44:	469a      	mov	sl, r3
 8000c46:	3d7f      	subs	r5, #127	; 0x7f
 8000c48:	027c      	lsls	r4, r7, #9
 8000c4a:	007b      	lsls	r3, r7, #1
 8000c4c:	0a64      	lsrs	r4, r4, #9
 8000c4e:	0e1b      	lsrs	r3, r3, #24
 8000c50:	0fff      	lsrs	r7, r7, #31
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fmul+0x48>
 8000c56:	e0a9      	b.n	8000dac <__aeabi_fmul+0x19c>
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d011      	beq.n	8000c80 <__aeabi_fmul+0x70>
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	00e4      	lsls	r4, r4, #3
 8000c60:	04d2      	lsls	r2, r2, #19
 8000c62:	4314      	orrs	r4, r2
 8000c64:	4642      	mov	r2, r8
 8000c66:	3b7f      	subs	r3, #127	; 0x7f
 8000c68:	195b      	adds	r3, r3, r5
 8000c6a:	407a      	eors	r2, r7
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	1c5d      	adds	r5, r3, #1
 8000c72:	2e0a      	cmp	r6, #10
 8000c74:	dd13      	ble.n	8000c9e <__aeabi_fmul+0x8e>
 8000c76:	003a      	movs	r2, r7
 8000c78:	2e0b      	cmp	r6, #11
 8000c7a:	d047      	beq.n	8000d0c <__aeabi_fmul+0xfc>
 8000c7c:	4647      	mov	r7, r8
 8000c7e:	e03f      	b.n	8000d00 <__aeabi_fmul+0xf0>
 8000c80:	002b      	movs	r3, r5
 8000c82:	33ff      	adds	r3, #255	; 0xff
 8000c84:	2c00      	cmp	r4, #0
 8000c86:	d11e      	bne.n	8000cc6 <__aeabi_fmul+0xb6>
 8000c88:	2202      	movs	r2, #2
 8000c8a:	4316      	orrs	r6, r2
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	3501      	adds	r5, #1
 8000c90:	407a      	eors	r2, r7
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	35ff      	adds	r5, #255	; 0xff
 8000c96:	2e0a      	cmp	r6, #10
 8000c98:	dd00      	ble.n	8000c9c <__aeabi_fmul+0x8c>
 8000c9a:	e0e4      	b.n	8000e66 <__aeabi_fmul+0x256>
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	2e02      	cmp	r6, #2
 8000ca0:	dc1c      	bgt.n	8000cdc <__aeabi_fmul+0xcc>
 8000ca2:	3e01      	subs	r6, #1
 8000ca4:	2e01      	cmp	r6, #1
 8000ca6:	d842      	bhi.n	8000d2e <__aeabi_fmul+0x11e>
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d03d      	beq.n	8000d28 <__aeabi_fmul+0x118>
 8000cac:	2801      	cmp	r0, #1
 8000cae:	d166      	bne.n	8000d7e <__aeabi_fmul+0x16e>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	05c0      	lsls	r0, r0, #23
 8000cb6:	4308      	orrs	r0, r1
 8000cb8:	07d2      	lsls	r2, r2, #31
 8000cba:	4310      	orrs	r0, r2
 8000cbc:	bce0      	pop	{r5, r6, r7}
 8000cbe:	46ba      	mov	sl, r7
 8000cc0:	46b1      	mov	r9, r6
 8000cc2:	46a8      	mov	r8, r5
 8000cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	4316      	orrs	r6, r2
 8000cca:	4642      	mov	r2, r8
 8000ccc:	3501      	adds	r5, #1
 8000cce:	407a      	eors	r2, r7
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	35ff      	adds	r5, #255	; 0xff
 8000cd4:	2e0a      	cmp	r6, #10
 8000cd6:	dd00      	ble.n	8000cda <__aeabi_fmul+0xca>
 8000cd8:	e0e4      	b.n	8000ea4 <__aeabi_fmul+0x294>
 8000cda:	2003      	movs	r0, #3
 8000cdc:	2101      	movs	r1, #1
 8000cde:	40b1      	lsls	r1, r6
 8000ce0:	26a6      	movs	r6, #166	; 0xa6
 8000ce2:	00f6      	lsls	r6, r6, #3
 8000ce4:	4231      	tst	r1, r6
 8000ce6:	d10a      	bne.n	8000cfe <__aeabi_fmul+0xee>
 8000ce8:	2690      	movs	r6, #144	; 0x90
 8000cea:	00b6      	lsls	r6, r6, #2
 8000cec:	4231      	tst	r1, r6
 8000cee:	d116      	bne.n	8000d1e <__aeabi_fmul+0x10e>
 8000cf0:	3eb9      	subs	r6, #185	; 0xb9
 8000cf2:	3eff      	subs	r6, #255	; 0xff
 8000cf4:	420e      	tst	r6, r1
 8000cf6:	d01a      	beq.n	8000d2e <__aeabi_fmul+0x11e>
 8000cf8:	46a1      	mov	r9, r4
 8000cfa:	4682      	mov	sl, r0
 8000cfc:	e000      	b.n	8000d00 <__aeabi_fmul+0xf0>
 8000cfe:	0017      	movs	r7, r2
 8000d00:	4653      	mov	r3, sl
 8000d02:	003a      	movs	r2, r7
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d00f      	beq.n	8000d28 <__aeabi_fmul+0x118>
 8000d08:	464c      	mov	r4, r9
 8000d0a:	4650      	mov	r0, sl
 8000d0c:	2803      	cmp	r0, #3
 8000d0e:	d1cd      	bne.n	8000cac <__aeabi_fmul+0x9c>
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	03c9      	lsls	r1, r1, #15
 8000d14:	4321      	orrs	r1, r4
 8000d16:	0249      	lsls	r1, r1, #9
 8000d18:	20ff      	movs	r0, #255	; 0xff
 8000d1a:	0a49      	lsrs	r1, r1, #9
 8000d1c:	e7ca      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	2200      	movs	r2, #0
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	03c9      	lsls	r1, r1, #15
 8000d26:	e7c5      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000d28:	20ff      	movs	r0, #255	; 0xff
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e7c2      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	4649      	mov	r1, r9
 8000d32:	0424      	lsls	r4, r4, #16
 8000d34:	0c24      	lsrs	r4, r4, #16
 8000d36:	0027      	movs	r7, r4
 8000d38:	0c0e      	lsrs	r6, r1, #16
 8000d3a:	0409      	lsls	r1, r1, #16
 8000d3c:	0c09      	lsrs	r1, r1, #16
 8000d3e:	4374      	muls	r4, r6
 8000d40:	434f      	muls	r7, r1
 8000d42:	4346      	muls	r6, r0
 8000d44:	4348      	muls	r0, r1
 8000d46:	0c39      	lsrs	r1, r7, #16
 8000d48:	1900      	adds	r0, r0, r4
 8000d4a:	1809      	adds	r1, r1, r0
 8000d4c:	428c      	cmp	r4, r1
 8000d4e:	d903      	bls.n	8000d58 <__aeabi_fmul+0x148>
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	4684      	mov	ip, r0
 8000d56:	4466      	add	r6, ip
 8000d58:	043f      	lsls	r7, r7, #16
 8000d5a:	0408      	lsls	r0, r1, #16
 8000d5c:	0c3f      	lsrs	r7, r7, #16
 8000d5e:	19c0      	adds	r0, r0, r7
 8000d60:	0184      	lsls	r4, r0, #6
 8000d62:	1e67      	subs	r7, r4, #1
 8000d64:	41bc      	sbcs	r4, r7
 8000d66:	0c09      	lsrs	r1, r1, #16
 8000d68:	0e80      	lsrs	r0, r0, #26
 8000d6a:	1989      	adds	r1, r1, r6
 8000d6c:	4304      	orrs	r4, r0
 8000d6e:	0189      	lsls	r1, r1, #6
 8000d70:	430c      	orrs	r4, r1
 8000d72:	0109      	lsls	r1, r1, #4
 8000d74:	d571      	bpl.n	8000e5a <__aeabi_fmul+0x24a>
 8000d76:	2301      	movs	r3, #1
 8000d78:	0861      	lsrs	r1, r4, #1
 8000d7a:	401c      	ands	r4, r3
 8000d7c:	430c      	orrs	r4, r1
 8000d7e:	002b      	movs	r3, r5
 8000d80:	337f      	adds	r3, #127	; 0x7f
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dd51      	ble.n	8000e2a <__aeabi_fmul+0x21a>
 8000d86:	0761      	lsls	r1, r4, #29
 8000d88:	d004      	beq.n	8000d94 <__aeabi_fmul+0x184>
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	4021      	ands	r1, r4
 8000d8e:	2904      	cmp	r1, #4
 8000d90:	d000      	beq.n	8000d94 <__aeabi_fmul+0x184>
 8000d92:	3404      	adds	r4, #4
 8000d94:	0121      	lsls	r1, r4, #4
 8000d96:	d503      	bpl.n	8000da0 <__aeabi_fmul+0x190>
 8000d98:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <__aeabi_fmul+0x298>)
 8000d9a:	401c      	ands	r4, r3
 8000d9c:	002b      	movs	r3, r5
 8000d9e:	3380      	adds	r3, #128	; 0x80
 8000da0:	2bfe      	cmp	r3, #254	; 0xfe
 8000da2:	dcc1      	bgt.n	8000d28 <__aeabi_fmul+0x118>
 8000da4:	01a1      	lsls	r1, r4, #6
 8000da6:	0a49      	lsrs	r1, r1, #9
 8000da8:	b2d8      	uxtb	r0, r3
 8000daa:	e783      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000dac:	2c00      	cmp	r4, #0
 8000dae:	d12c      	bne.n	8000e0a <__aeabi_fmul+0x1fa>
 8000db0:	2301      	movs	r3, #1
 8000db2:	4642      	mov	r2, r8
 8000db4:	431e      	orrs	r6, r3
 8000db6:	002b      	movs	r3, r5
 8000db8:	407a      	eors	r2, r7
 8000dba:	2001      	movs	r0, #1
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	1c5d      	adds	r5, r3, #1
 8000dc0:	2e0a      	cmp	r6, #10
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_fmul+0x1b6>
 8000dc4:	e757      	b.n	8000c76 <__aeabi_fmul+0x66>
 8000dc6:	e76a      	b.n	8000c9e <__aeabi_fmul+0x8e>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d110      	bne.n	8000dee <__aeabi_fmul+0x1de>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	2604      	movs	r6, #4
 8000dd0:	2500      	movs	r5, #0
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	e738      	b.n	8000c48 <__aeabi_fmul+0x38>
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <__aeabi_fmul+0x1d4>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	2608      	movs	r6, #8
 8000dde:	25ff      	movs	r5, #255	; 0xff
 8000de0:	469a      	mov	sl, r3
 8000de2:	e731      	b.n	8000c48 <__aeabi_fmul+0x38>
 8000de4:	2303      	movs	r3, #3
 8000de6:	260c      	movs	r6, #12
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	469a      	mov	sl, r3
 8000dec:	e72c      	b.n	8000c48 <__aeabi_fmul+0x38>
 8000dee:	4648      	mov	r0, r9
 8000df0:	f000 facc 	bl	800138c <__clzsi2>
 8000df4:	464a      	mov	r2, r9
 8000df6:	1f43      	subs	r3, r0, #5
 8000df8:	2576      	movs	r5, #118	; 0x76
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	426d      	negs	r5, r5
 8000e00:	4691      	mov	r9, r2
 8000e02:	2600      	movs	r6, #0
 8000e04:	469a      	mov	sl, r3
 8000e06:	1a2d      	subs	r5, r5, r0
 8000e08:	e71e      	b.n	8000c48 <__aeabi_fmul+0x38>
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f000 fabe 	bl	800138c <__clzsi2>
 8000e10:	4642      	mov	r2, r8
 8000e12:	1f43      	subs	r3, r0, #5
 8000e14:	409c      	lsls	r4, r3
 8000e16:	1a2b      	subs	r3, r5, r0
 8000e18:	3b76      	subs	r3, #118	; 0x76
 8000e1a:	407a      	eors	r2, r7
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	1c5d      	adds	r5, r3, #1
 8000e22:	2e0a      	cmp	r6, #10
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_fmul+0x218>
 8000e26:	e726      	b.n	8000c76 <__aeabi_fmul+0x66>
 8000e28:	e739      	b.n	8000c9e <__aeabi_fmul+0x8e>
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	2b1b      	cmp	r3, #27
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fmul+0x224>
 8000e32:	e73d      	b.n	8000cb0 <__aeabi_fmul+0xa0>
 8000e34:	359e      	adds	r5, #158	; 0x9e
 8000e36:	0021      	movs	r1, r4
 8000e38:	40ac      	lsls	r4, r5
 8000e3a:	40d9      	lsrs	r1, r3
 8000e3c:	1e63      	subs	r3, r4, #1
 8000e3e:	419c      	sbcs	r4, r3
 8000e40:	4321      	orrs	r1, r4
 8000e42:	074b      	lsls	r3, r1, #29
 8000e44:	d004      	beq.n	8000e50 <__aeabi_fmul+0x240>
 8000e46:	230f      	movs	r3, #15
 8000e48:	400b      	ands	r3, r1
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fmul+0x240>
 8000e4e:	3104      	adds	r1, #4
 8000e50:	014b      	lsls	r3, r1, #5
 8000e52:	d504      	bpl.n	8000e5e <__aeabi_fmul+0x24e>
 8000e54:	2001      	movs	r0, #1
 8000e56:	2100      	movs	r1, #0
 8000e58:	e72c      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000e5a:	001d      	movs	r5, r3
 8000e5c:	e78f      	b.n	8000d7e <__aeabi_fmul+0x16e>
 8000e5e:	0189      	lsls	r1, r1, #6
 8000e60:	2000      	movs	r0, #0
 8000e62:	0a49      	lsrs	r1, r1, #9
 8000e64:	e726      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000e66:	2302      	movs	r3, #2
 8000e68:	2e0f      	cmp	r6, #15
 8000e6a:	d10c      	bne.n	8000e86 <__aeabi_fmul+0x276>
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	464b      	mov	r3, r9
 8000e70:	03c9      	lsls	r1, r1, #15
 8000e72:	420b      	tst	r3, r1
 8000e74:	d00d      	beq.n	8000e92 <__aeabi_fmul+0x282>
 8000e76:	420c      	tst	r4, r1
 8000e78:	d10b      	bne.n	8000e92 <__aeabi_fmul+0x282>
 8000e7a:	4321      	orrs	r1, r4
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	003a      	movs	r2, r7
 8000e80:	20ff      	movs	r0, #255	; 0xff
 8000e82:	0a49      	lsrs	r1, r1, #9
 8000e84:	e716      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000e86:	2e0b      	cmp	r6, #11
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fmul+0x27c>
 8000e8a:	e6f7      	b.n	8000c7c <__aeabi_fmul+0x6c>
 8000e8c:	46a1      	mov	r9, r4
 8000e8e:	469a      	mov	sl, r3
 8000e90:	e736      	b.n	8000d00 <__aeabi_fmul+0xf0>
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	464b      	mov	r3, r9
 8000e96:	03c9      	lsls	r1, r1, #15
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	0249      	lsls	r1, r1, #9
 8000e9c:	4642      	mov	r2, r8
 8000e9e:	20ff      	movs	r0, #255	; 0xff
 8000ea0:	0a49      	lsrs	r1, r1, #9
 8000ea2:	e707      	b.n	8000cb4 <__aeabi_fmul+0xa4>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e7df      	b.n	8000e68 <__aeabi_fmul+0x258>
 8000ea8:	f7ffffff 	.word	0xf7ffffff

08000eac <__aeabi_fsub>:
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	46c6      	mov	lr, r8
 8000eb0:	0243      	lsls	r3, r0, #9
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	0045      	lsls	r5, r0, #1
 8000eb6:	00da      	lsls	r2, r3, #3
 8000eb8:	0fc4      	lsrs	r4, r0, #31
 8000eba:	0248      	lsls	r0, r1, #9
 8000ebc:	004f      	lsls	r7, r1, #1
 8000ebe:	4694      	mov	ip, r2
 8000ec0:	0a42      	lsrs	r2, r0, #9
 8000ec2:	001e      	movs	r6, r3
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	b500      	push	{lr}
 8000ec8:	0e2d      	lsrs	r5, r5, #24
 8000eca:	0e3f      	lsrs	r7, r7, #24
 8000ecc:	0fc9      	lsrs	r1, r1, #31
 8000ece:	0980      	lsrs	r0, r0, #6
 8000ed0:	2fff      	cmp	r7, #255	; 0xff
 8000ed2:	d059      	beq.n	8000f88 <__aeabi_fsub+0xdc>
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4051      	eors	r1, r2
 8000ed8:	428c      	cmp	r4, r1
 8000eda:	d039      	beq.n	8000f50 <__aeabi_fsub+0xa4>
 8000edc:	1bea      	subs	r2, r5, r7
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	dd58      	ble.n	8000f94 <__aeabi_fsub+0xe8>
 8000ee2:	2f00      	cmp	r7, #0
 8000ee4:	d068      	beq.n	8000fb8 <__aeabi_fsub+0x10c>
 8000ee6:	2dff      	cmp	r5, #255	; 0xff
 8000ee8:	d100      	bne.n	8000eec <__aeabi_fsub+0x40>
 8000eea:	e0d1      	b.n	8001090 <__aeabi_fsub+0x1e4>
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	04db      	lsls	r3, r3, #19
 8000ef0:	4318      	orrs	r0, r3
 8000ef2:	2a1b      	cmp	r2, #27
 8000ef4:	dc00      	bgt.n	8000ef8 <__aeabi_fsub+0x4c>
 8000ef6:	e0e3      	b.n	80010c0 <__aeabi_fsub+0x214>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	4662      	mov	r2, ip
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_fsub+0x58>
 8000f02:	e0ac      	b.n	800105e <__aeabi_fsub+0x1b2>
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	099e      	lsrs	r6, r3, #6
 8000f08:	0030      	movs	r0, r6
 8000f0a:	f000 fa3f 	bl	800138c <__clzsi2>
 8000f0e:	0033      	movs	r3, r6
 8000f10:	3805      	subs	r0, #5
 8000f12:	4083      	lsls	r3, r0
 8000f14:	4285      	cmp	r5, r0
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x6e>
 8000f18:	e0c6      	b.n	80010a8 <__aeabi_fsub+0x1fc>
 8000f1a:	4ab2      	ldr	r2, [pc, #712]	; (80011e4 <__aeabi_fsub+0x338>)
 8000f1c:	1a2d      	subs	r5, r5, r0
 8000f1e:	4013      	ands	r3, r2
 8000f20:	075a      	lsls	r2, r3, #29
 8000f22:	d004      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f24:	220f      	movs	r2, #15
 8000f26:	401a      	ands	r2, r3
 8000f28:	2a04      	cmp	r2, #4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	015a      	lsls	r2, r3, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0x88>
 8000f32:	e097      	b.n	8001064 <__aeabi_fsub+0x1b8>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	; 0xfe
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x90>
 8000f3a:	e084      	b.n	8001046 <__aeabi_fsub+0x19a>
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	0a5e      	lsrs	r6, r3, #9
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	05d0      	lsls	r0, r2, #23
 8000f44:	4330      	orrs	r0, r6
 8000f46:	07e4      	lsls	r4, r4, #31
 8000f48:	4320      	orrs	r0, r4
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f50:	1bea      	subs	r2, r5, r7
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	dd41      	ble.n	8000fda <__aeabi_fsub+0x12e>
 8000f56:	2f00      	cmp	r7, #0
 8000f58:	d06b      	beq.n	8001032 <__aeabi_fsub+0x186>
 8000f5a:	2dff      	cmp	r5, #255	; 0xff
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0xb4>
 8000f5e:	e097      	b.n	8001090 <__aeabi_fsub+0x1e4>
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	04db      	lsls	r3, r3, #19
 8000f64:	4318      	orrs	r0, r3
 8000f66:	2a1b      	cmp	r2, #27
 8000f68:	dc00      	bgt.n	8000f6c <__aeabi_fsub+0xc0>
 8000f6a:	e0cc      	b.n	8001106 <__aeabi_fsub+0x25a>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4463      	add	r3, ip
 8000f70:	015a      	lsls	r2, r3, #5
 8000f72:	d574      	bpl.n	800105e <__aeabi_fsub+0x1b2>
 8000f74:	3501      	adds	r5, #1
 8000f76:	2dff      	cmp	r5, #255	; 0xff
 8000f78:	d065      	beq.n	8001046 <__aeabi_fsub+0x19a>
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	499a      	ldr	r1, [pc, #616]	; (80011e8 <__aeabi_fsub+0x33c>)
 8000f7e:	401a      	ands	r2, r3
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	400b      	ands	r3, r1
 8000f84:	4313      	orrs	r3, r2
 8000f86:	e7cb      	b.n	8000f20 <__aeabi_fsub+0x74>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d01f      	beq.n	8000fcc <__aeabi_fsub+0x120>
 8000f8c:	428c      	cmp	r4, r1
 8000f8e:	d022      	beq.n	8000fd6 <__aeabi_fsub+0x12a>
 8000f90:	002a      	movs	r2, r5
 8000f92:	3aff      	subs	r2, #255	; 0xff
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d035      	beq.n	8001004 <__aeabi_fsub+0x158>
 8000f98:	1b7a      	subs	r2, r7, r5
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_fsub+0xf4>
 8000f9e:	e099      	b.n	80010d4 <__aeabi_fsub+0x228>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0xfc>
 8000fa6:	e0dd      	b.n	8001164 <__aeabi_fsub+0x2b8>
 8000fa8:	1e53      	subs	r3, r2, #1
 8000faa:	2a01      	cmp	r2, #1
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x104>
 8000fae:	e105      	b.n	80011bc <__aeabi_fsub+0x310>
 8000fb0:	2aff      	cmp	r2, #255	; 0xff
 8000fb2:	d06b      	beq.n	800108c <__aeabi_fsub+0x1e0>
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	e094      	b.n	80010e2 <__aeabi_fsub+0x236>
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d073      	beq.n	80010a4 <__aeabi_fsub+0x1f8>
 8000fbc:	1e51      	subs	r1, r2, #1
 8000fbe:	2a01      	cmp	r2, #1
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x118>
 8000fc2:	e0df      	b.n	8001184 <__aeabi_fsub+0x2d8>
 8000fc4:	2aff      	cmp	r2, #255	; 0xff
 8000fc6:	d063      	beq.n	8001090 <__aeabi_fsub+0x1e4>
 8000fc8:	000a      	movs	r2, r1
 8000fca:	e792      	b.n	8000ef2 <__aeabi_fsub+0x46>
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4051      	eors	r1, r2
 8000fd0:	42a1      	cmp	r1, r4
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_fsub+0x12a>
 8000fd4:	e782      	b.n	8000edc <__aeabi_fsub+0x30>
 8000fd6:	002a      	movs	r2, r5
 8000fd8:	3aff      	subs	r2, #255	; 0xff
 8000fda:	2a00      	cmp	r2, #0
 8000fdc:	d036      	beq.n	800104c <__aeabi_fsub+0x1a0>
 8000fde:	1b7a      	subs	r2, r7, r5
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x13a>
 8000fe4:	e0aa      	b.n	800113c <__aeabi_fsub+0x290>
 8000fe6:	2fff      	cmp	r7, #255	; 0xff
 8000fe8:	d100      	bne.n	8000fec <__aeabi_fsub+0x140>
 8000fea:	e0da      	b.n	80011a2 <__aeabi_fsub+0x2f6>
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	4661      	mov	r1, ip
 8000ff0:	04db      	lsls	r3, r3, #19
 8000ff2:	4319      	orrs	r1, r3
 8000ff4:	468c      	mov	ip, r1
 8000ff6:	2a1b      	cmp	r2, #27
 8000ff8:	dc00      	bgt.n	8000ffc <__aeabi_fsub+0x150>
 8000ffa:	e0d4      	b.n	80011a6 <__aeabi_fsub+0x2fa>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	003d      	movs	r5, r7
 8001000:	181b      	adds	r3, r3, r0
 8001002:	e7b5      	b.n	8000f70 <__aeabi_fsub+0xc4>
 8001004:	27fe      	movs	r7, #254	; 0xfe
 8001006:	1c6a      	adds	r2, r5, #1
 8001008:	4217      	tst	r7, r2
 800100a:	d171      	bne.n	80010f0 <__aeabi_fsub+0x244>
 800100c:	2d00      	cmp	r5, #0
 800100e:	d000      	beq.n	8001012 <__aeabi_fsub+0x166>
 8001010:	e09e      	b.n	8001150 <__aeabi_fsub+0x2a4>
 8001012:	4663      	mov	r3, ip
 8001014:	2b00      	cmp	r3, #0
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x16e>
 8001018:	e0d5      	b.n	80011c6 <__aeabi_fsub+0x31a>
 800101a:	2200      	movs	r2, #0
 800101c:	2800      	cmp	r0, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x176>
 8001020:	e78f      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001022:	1a1b      	subs	r3, r3, r0
 8001024:	015e      	lsls	r6, r3, #5
 8001026:	d400      	bmi.n	800102a <__aeabi_fsub+0x17e>
 8001028:	e0d6      	b.n	80011d8 <__aeabi_fsub+0x32c>
 800102a:	4663      	mov	r3, ip
 800102c:	000c      	movs	r4, r1
 800102e:	1ac3      	subs	r3, r0, r3
 8001030:	e776      	b.n	8000f20 <__aeabi_fsub+0x74>
 8001032:	2800      	cmp	r0, #0
 8001034:	d036      	beq.n	80010a4 <__aeabi_fsub+0x1f8>
 8001036:	1e51      	subs	r1, r2, #1
 8001038:	2a01      	cmp	r2, #1
 800103a:	d100      	bne.n	800103e <__aeabi_fsub+0x192>
 800103c:	e09a      	b.n	8001174 <__aeabi_fsub+0x2c8>
 800103e:	2aff      	cmp	r2, #255	; 0xff
 8001040:	d026      	beq.n	8001090 <__aeabi_fsub+0x1e4>
 8001042:	000a      	movs	r2, r1
 8001044:	e78f      	b.n	8000f66 <__aeabi_fsub+0xba>
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	2600      	movs	r6, #0
 800104a:	e77a      	b.n	8000f42 <__aeabi_fsub+0x96>
 800104c:	27fe      	movs	r7, #254	; 0xfe
 800104e:	1c6a      	adds	r2, r5, #1
 8001050:	4217      	tst	r7, r2
 8001052:	d062      	beq.n	800111a <__aeabi_fsub+0x26e>
 8001054:	2aff      	cmp	r2, #255	; 0xff
 8001056:	d0f6      	beq.n	8001046 <__aeabi_fsub+0x19a>
 8001058:	0015      	movs	r5, r2
 800105a:	4460      	add	r0, ip
 800105c:	0843      	lsrs	r3, r0, #1
 800105e:	075a      	lsls	r2, r3, #29
 8001060:	d000      	beq.n	8001064 <__aeabi_fsub+0x1b8>
 8001062:	e75f      	b.n	8000f24 <__aeabi_fsub+0x78>
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	2dff      	cmp	r5, #255	; 0xff
 8001068:	d012      	beq.n	8001090 <__aeabi_fsub+0x1e4>
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	0a5e      	lsrs	r6, r3, #9
 800106e:	b2ea      	uxtb	r2, r5
 8001070:	e767      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001072:	4662      	mov	r2, ip
 8001074:	2a00      	cmp	r2, #0
 8001076:	d100      	bne.n	800107a <__aeabi_fsub+0x1ce>
 8001078:	e093      	b.n	80011a2 <__aeabi_fsub+0x2f6>
 800107a:	2800      	cmp	r0, #0
 800107c:	d008      	beq.n	8001090 <__aeabi_fsub+0x1e4>
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	03d2      	lsls	r2, r2, #15
 8001082:	4213      	tst	r3, r2
 8001084:	d004      	beq.n	8001090 <__aeabi_fsub+0x1e4>
 8001086:	4640      	mov	r0, r8
 8001088:	4210      	tst	r0, r2
 800108a:	d101      	bne.n	8001090 <__aeabi_fsub+0x1e4>
 800108c:	000c      	movs	r4, r1
 800108e:	4643      	mov	r3, r8
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0d8      	beq.n	8001046 <__aeabi_fsub+0x19a>
 8001094:	2680      	movs	r6, #128	; 0x80
 8001096:	03f6      	lsls	r6, r6, #15
 8001098:	431e      	orrs	r6, r3
 800109a:	0276      	lsls	r6, r6, #9
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	0a76      	lsrs	r6, r6, #9
 80010a0:	e74f      	b.n	8000f42 <__aeabi_fsub+0x96>
 80010a2:	4643      	mov	r3, r8
 80010a4:	0015      	movs	r5, r2
 80010a6:	e7de      	b.n	8001066 <__aeabi_fsub+0x1ba>
 80010a8:	2220      	movs	r2, #32
 80010aa:	1b40      	subs	r0, r0, r5
 80010ac:	3001      	adds	r0, #1
 80010ae:	1a12      	subs	r2, r2, r0
 80010b0:	0019      	movs	r1, r3
 80010b2:	4093      	lsls	r3, r2
 80010b4:	40c1      	lsrs	r1, r0
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	4193      	sbcs	r3, r2
 80010ba:	2500      	movs	r5, #0
 80010bc:	430b      	orrs	r3, r1
 80010be:	e72f      	b.n	8000f20 <__aeabi_fsub+0x74>
 80010c0:	2320      	movs	r3, #32
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	0001      	movs	r1, r0
 80010c6:	4098      	lsls	r0, r3
 80010c8:	0003      	movs	r3, r0
 80010ca:	40d1      	lsrs	r1, r2
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	4193      	sbcs	r3, r2
 80010d0:	430b      	orrs	r3, r1
 80010d2:	e712      	b.n	8000efa <__aeabi_fsub+0x4e>
 80010d4:	2fff      	cmp	r7, #255	; 0xff
 80010d6:	d0d9      	beq.n	800108c <__aeabi_fsub+0x1e0>
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	4664      	mov	r4, ip
 80010dc:	04db      	lsls	r3, r3, #19
 80010de:	431c      	orrs	r4, r3
 80010e0:	46a4      	mov	ip, r4
 80010e2:	2a1b      	cmp	r2, #27
 80010e4:	dd52      	ble.n	800118c <__aeabi_fsub+0x2e0>
 80010e6:	2301      	movs	r3, #1
 80010e8:	000c      	movs	r4, r1
 80010ea:	003d      	movs	r5, r7
 80010ec:	1ac3      	subs	r3, r0, r3
 80010ee:	e706      	b.n	8000efe <__aeabi_fsub+0x52>
 80010f0:	4663      	mov	r3, ip
 80010f2:	1a1e      	subs	r6, r3, r0
 80010f4:	0173      	lsls	r3, r6, #5
 80010f6:	d439      	bmi.n	800116c <__aeabi_fsub+0x2c0>
 80010f8:	2e00      	cmp	r6, #0
 80010fa:	d000      	beq.n	80010fe <__aeabi_fsub+0x252>
 80010fc:	e704      	b.n	8000f08 <__aeabi_fsub+0x5c>
 80010fe:	2400      	movs	r4, #0
 8001100:	2200      	movs	r2, #0
 8001102:	2600      	movs	r6, #0
 8001104:	e71d      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001106:	2320      	movs	r3, #32
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	0001      	movs	r1, r0
 800110c:	4098      	lsls	r0, r3
 800110e:	0003      	movs	r3, r0
 8001110:	40d1      	lsrs	r1, r2
 8001112:	1e5a      	subs	r2, r3, #1
 8001114:	4193      	sbcs	r3, r2
 8001116:	430b      	orrs	r3, r1
 8001118:	e729      	b.n	8000f6e <__aeabi_fsub+0xc2>
 800111a:	2d00      	cmp	r5, #0
 800111c:	d1a9      	bne.n	8001072 <__aeabi_fsub+0x1c6>
 800111e:	4663      	mov	r3, ip
 8001120:	2b00      	cmp	r3, #0
 8001122:	d056      	beq.n	80011d2 <__aeabi_fsub+0x326>
 8001124:	2200      	movs	r2, #0
 8001126:	2800      	cmp	r0, #0
 8001128:	d100      	bne.n	800112c <__aeabi_fsub+0x280>
 800112a:	e70a      	b.n	8000f42 <__aeabi_fsub+0x96>
 800112c:	0003      	movs	r3, r0
 800112e:	4463      	add	r3, ip
 8001130:	015a      	lsls	r2, r3, #5
 8001132:	d594      	bpl.n	800105e <__aeabi_fsub+0x1b2>
 8001134:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <__aeabi_fsub+0x338>)
 8001136:	3501      	adds	r5, #1
 8001138:	4013      	ands	r3, r2
 800113a:	e790      	b.n	800105e <__aeabi_fsub+0x1b2>
 800113c:	4663      	mov	r3, ip
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0af      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001142:	1e53      	subs	r3, r2, #1
 8001144:	2a01      	cmp	r2, #1
 8001146:	d015      	beq.n	8001174 <__aeabi_fsub+0x2c8>
 8001148:	2aff      	cmp	r2, #255	; 0xff
 800114a:	d02a      	beq.n	80011a2 <__aeabi_fsub+0x2f6>
 800114c:	001a      	movs	r2, r3
 800114e:	e752      	b.n	8000ff6 <__aeabi_fsub+0x14a>
 8001150:	4662      	mov	r2, ip
 8001152:	2a00      	cmp	r2, #0
 8001154:	d191      	bne.n	800107a <__aeabi_fsub+0x1ce>
 8001156:	2800      	cmp	r0, #0
 8001158:	d198      	bne.n	800108c <__aeabi_fsub+0x1e0>
 800115a:	2680      	movs	r6, #128	; 0x80
 800115c:	2400      	movs	r4, #0
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	03f6      	lsls	r6, r6, #15
 8001162:	e6ee      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001164:	000c      	movs	r4, r1
 8001166:	4643      	mov	r3, r8
 8001168:	0015      	movs	r5, r2
 800116a:	e77c      	b.n	8001066 <__aeabi_fsub+0x1ba>
 800116c:	4663      	mov	r3, ip
 800116e:	000c      	movs	r4, r1
 8001170:	1ac6      	subs	r6, r0, r3
 8001172:	e6c9      	b.n	8000f08 <__aeabi_fsub+0x5c>
 8001174:	0003      	movs	r3, r0
 8001176:	4463      	add	r3, ip
 8001178:	2501      	movs	r5, #1
 800117a:	015a      	lsls	r2, r3, #5
 800117c:	d400      	bmi.n	8001180 <__aeabi_fsub+0x2d4>
 800117e:	e76e      	b.n	800105e <__aeabi_fsub+0x1b2>
 8001180:	2502      	movs	r5, #2
 8001182:	e6fa      	b.n	8000f7a <__aeabi_fsub+0xce>
 8001184:	4663      	mov	r3, ip
 8001186:	2501      	movs	r5, #1
 8001188:	1a1b      	subs	r3, r3, r0
 800118a:	e6b8      	b.n	8000efe <__aeabi_fsub+0x52>
 800118c:	4664      	mov	r4, ip
 800118e:	2320      	movs	r3, #32
 8001190:	40d4      	lsrs	r4, r2
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	4662      	mov	r2, ip
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	4193      	sbcs	r3, r2
 800119e:	4323      	orrs	r3, r4
 80011a0:	e7a2      	b.n	80010e8 <__aeabi_fsub+0x23c>
 80011a2:	4643      	mov	r3, r8
 80011a4:	e774      	b.n	8001090 <__aeabi_fsub+0x1e4>
 80011a6:	4661      	mov	r1, ip
 80011a8:	2320      	movs	r3, #32
 80011aa:	40d1      	lsrs	r1, r2
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	4662      	mov	r2, ip
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	1e5a      	subs	r2, r3, #1
 80011b6:	4193      	sbcs	r3, r2
 80011b8:	430b      	orrs	r3, r1
 80011ba:	e720      	b.n	8000ffe <__aeabi_fsub+0x152>
 80011bc:	4663      	mov	r3, ip
 80011be:	000c      	movs	r4, r1
 80011c0:	2501      	movs	r5, #1
 80011c2:	1ac3      	subs	r3, r0, r3
 80011c4:	e69b      	b.n	8000efe <__aeabi_fsub+0x52>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d099      	beq.n	80010fe <__aeabi_fsub+0x252>
 80011ca:	000c      	movs	r4, r1
 80011cc:	4646      	mov	r6, r8
 80011ce:	2200      	movs	r2, #0
 80011d0:	e6b7      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011d2:	4646      	mov	r6, r8
 80011d4:	2200      	movs	r2, #0
 80011d6:	e6b4      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d000      	beq.n	80011de <__aeabi_fsub+0x332>
 80011dc:	e73f      	b.n	800105e <__aeabi_fsub+0x1b2>
 80011de:	2400      	movs	r4, #0
 80011e0:	2600      	movs	r6, #0
 80011e2:	e6ae      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011e4:	fbffffff 	.word	0xfbffffff
 80011e8:	7dffffff 	.word	0x7dffffff

080011ec <__aeabi_fcmpun>:
 80011ec:	0243      	lsls	r3, r0, #9
 80011ee:	024a      	lsls	r2, r1, #9
 80011f0:	0040      	lsls	r0, r0, #1
 80011f2:	0049      	lsls	r1, r1, #1
 80011f4:	0a5b      	lsrs	r3, r3, #9
 80011f6:	0a52      	lsrs	r2, r2, #9
 80011f8:	0e09      	lsrs	r1, r1, #24
 80011fa:	0e00      	lsrs	r0, r0, #24
 80011fc:	28ff      	cmp	r0, #255	; 0xff
 80011fe:	d006      	beq.n	800120e <__aeabi_fcmpun+0x22>
 8001200:	2000      	movs	r0, #0
 8001202:	29ff      	cmp	r1, #255	; 0xff
 8001204:	d102      	bne.n	800120c <__aeabi_fcmpun+0x20>
 8001206:	1e53      	subs	r3, r2, #1
 8001208:	419a      	sbcs	r2, r3
 800120a:	0010      	movs	r0, r2
 800120c:	4770      	bx	lr
 800120e:	38fe      	subs	r0, #254	; 0xfe
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1fb      	bne.n	800120c <__aeabi_fcmpun+0x20>
 8001214:	e7f4      	b.n	8001200 <__aeabi_fcmpun+0x14>
 8001216:	46c0      	nop			; (mov r8, r8)

08001218 <__aeabi_f2iz>:
 8001218:	0241      	lsls	r1, r0, #9
 800121a:	0042      	lsls	r2, r0, #1
 800121c:	0fc3      	lsrs	r3, r0, #31
 800121e:	0a49      	lsrs	r1, r1, #9
 8001220:	2000      	movs	r0, #0
 8001222:	0e12      	lsrs	r2, r2, #24
 8001224:	2a7e      	cmp	r2, #126	; 0x7e
 8001226:	dd03      	ble.n	8001230 <__aeabi_f2iz+0x18>
 8001228:	2a9d      	cmp	r2, #157	; 0x9d
 800122a:	dd02      	ble.n	8001232 <__aeabi_f2iz+0x1a>
 800122c:	4a09      	ldr	r2, [pc, #36]	; (8001254 <__aeabi_f2iz+0x3c>)
 800122e:	1898      	adds	r0, r3, r2
 8001230:	4770      	bx	lr
 8001232:	2080      	movs	r0, #128	; 0x80
 8001234:	0400      	lsls	r0, r0, #16
 8001236:	4301      	orrs	r1, r0
 8001238:	2a95      	cmp	r2, #149	; 0x95
 800123a:	dc07      	bgt.n	800124c <__aeabi_f2iz+0x34>
 800123c:	2096      	movs	r0, #150	; 0x96
 800123e:	1a82      	subs	r2, r0, r2
 8001240:	40d1      	lsrs	r1, r2
 8001242:	4248      	negs	r0, r1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f3      	bne.n	8001230 <__aeabi_f2iz+0x18>
 8001248:	0008      	movs	r0, r1
 800124a:	e7f1      	b.n	8001230 <__aeabi_f2iz+0x18>
 800124c:	3a96      	subs	r2, #150	; 0x96
 800124e:	4091      	lsls	r1, r2
 8001250:	e7f7      	b.n	8001242 <__aeabi_f2iz+0x2a>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	7fffffff 	.word	0x7fffffff

08001258 <__aeabi_i2f>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	2800      	cmp	r0, #0
 800125c:	d013      	beq.n	8001286 <__aeabi_i2f+0x2e>
 800125e:	17c3      	asrs	r3, r0, #31
 8001260:	18c5      	adds	r5, r0, r3
 8001262:	405d      	eors	r5, r3
 8001264:	0fc4      	lsrs	r4, r0, #31
 8001266:	0028      	movs	r0, r5
 8001268:	f000 f890 	bl	800138c <__clzsi2>
 800126c:	239e      	movs	r3, #158	; 0x9e
 800126e:	0001      	movs	r1, r0
 8001270:	1a1b      	subs	r3, r3, r0
 8001272:	2b96      	cmp	r3, #150	; 0x96
 8001274:	dc0f      	bgt.n	8001296 <__aeabi_i2f+0x3e>
 8001276:	2808      	cmp	r0, #8
 8001278:	d031      	beq.n	80012de <__aeabi_i2f+0x86>
 800127a:	3908      	subs	r1, #8
 800127c:	408d      	lsls	r5, r1
 800127e:	026d      	lsls	r5, r5, #9
 8001280:	0a6d      	lsrs	r5, r5, #9
 8001282:	b2d8      	uxtb	r0, r3
 8001284:	e002      	b.n	800128c <__aeabi_i2f+0x34>
 8001286:	2400      	movs	r4, #0
 8001288:	2000      	movs	r0, #0
 800128a:	2500      	movs	r5, #0
 800128c:	05c0      	lsls	r0, r0, #23
 800128e:	4328      	orrs	r0, r5
 8001290:	07e4      	lsls	r4, r4, #31
 8001292:	4320      	orrs	r0, r4
 8001294:	bd70      	pop	{r4, r5, r6, pc}
 8001296:	2b99      	cmp	r3, #153	; 0x99
 8001298:	dd0c      	ble.n	80012b4 <__aeabi_i2f+0x5c>
 800129a:	2205      	movs	r2, #5
 800129c:	1a12      	subs	r2, r2, r0
 800129e:	0028      	movs	r0, r5
 80012a0:	40d0      	lsrs	r0, r2
 80012a2:	0002      	movs	r2, r0
 80012a4:	0008      	movs	r0, r1
 80012a6:	301b      	adds	r0, #27
 80012a8:	4085      	lsls	r5, r0
 80012aa:	0028      	movs	r0, r5
 80012ac:	1e45      	subs	r5, r0, #1
 80012ae:	41a8      	sbcs	r0, r5
 80012b0:	4302      	orrs	r2, r0
 80012b2:	0015      	movs	r5, r2
 80012b4:	2905      	cmp	r1, #5
 80012b6:	dc16      	bgt.n	80012e6 <__aeabi_i2f+0x8e>
 80012b8:	002a      	movs	r2, r5
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <__aeabi_i2f+0xa0>)
 80012bc:	4002      	ands	r2, r0
 80012be:	076e      	lsls	r6, r5, #29
 80012c0:	d009      	beq.n	80012d6 <__aeabi_i2f+0x7e>
 80012c2:	260f      	movs	r6, #15
 80012c4:	4035      	ands	r5, r6
 80012c6:	2d04      	cmp	r5, #4
 80012c8:	d005      	beq.n	80012d6 <__aeabi_i2f+0x7e>
 80012ca:	3204      	adds	r2, #4
 80012cc:	0155      	lsls	r5, r2, #5
 80012ce:	d502      	bpl.n	80012d6 <__aeabi_i2f+0x7e>
 80012d0:	239f      	movs	r3, #159	; 0x9f
 80012d2:	4002      	ands	r2, r0
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	0192      	lsls	r2, r2, #6
 80012d8:	0a55      	lsrs	r5, r2, #9
 80012da:	b2d8      	uxtb	r0, r3
 80012dc:	e7d6      	b.n	800128c <__aeabi_i2f+0x34>
 80012de:	026d      	lsls	r5, r5, #9
 80012e0:	2096      	movs	r0, #150	; 0x96
 80012e2:	0a6d      	lsrs	r5, r5, #9
 80012e4:	e7d2      	b.n	800128c <__aeabi_i2f+0x34>
 80012e6:	1f4a      	subs	r2, r1, #5
 80012e8:	4095      	lsls	r5, r2
 80012ea:	002a      	movs	r2, r5
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <__aeabi_i2f+0xa0>)
 80012ee:	4002      	ands	r2, r0
 80012f0:	076e      	lsls	r6, r5, #29
 80012f2:	d0f0      	beq.n	80012d6 <__aeabi_i2f+0x7e>
 80012f4:	e7e5      	b.n	80012c2 <__aeabi_i2f+0x6a>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	fbffffff 	.word	0xfbffffff

080012fc <__aeabi_ui2f>:
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	1e04      	subs	r4, r0, #0
 8001300:	d00e      	beq.n	8001320 <__aeabi_ui2f+0x24>
 8001302:	f000 f843 	bl	800138c <__clzsi2>
 8001306:	239e      	movs	r3, #158	; 0x9e
 8001308:	0001      	movs	r1, r0
 800130a:	1a1b      	subs	r3, r3, r0
 800130c:	2b96      	cmp	r3, #150	; 0x96
 800130e:	dc0c      	bgt.n	800132a <__aeabi_ui2f+0x2e>
 8001310:	2808      	cmp	r0, #8
 8001312:	d02c      	beq.n	800136e <__aeabi_ui2f+0x72>
 8001314:	3908      	subs	r1, #8
 8001316:	408c      	lsls	r4, r1
 8001318:	0264      	lsls	r4, r4, #9
 800131a:	0a64      	lsrs	r4, r4, #9
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	e001      	b.n	8001324 <__aeabi_ui2f+0x28>
 8001320:	2000      	movs	r0, #0
 8001322:	2400      	movs	r4, #0
 8001324:	05c0      	lsls	r0, r0, #23
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0a      	ble.n	8001344 <__aeabi_ui2f+0x48>
 800132e:	0002      	movs	r2, r0
 8001330:	0020      	movs	r0, r4
 8001332:	321b      	adds	r2, #27
 8001334:	4090      	lsls	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	1e50      	subs	r0, r2, #1
 800133a:	4182      	sbcs	r2, r0
 800133c:	2005      	movs	r0, #5
 800133e:	1a40      	subs	r0, r0, r1
 8001340:	40c4      	lsrs	r4, r0
 8001342:	4314      	orrs	r4, r2
 8001344:	2905      	cmp	r1, #5
 8001346:	dc16      	bgt.n	8001376 <__aeabi_ui2f+0x7a>
 8001348:	0022      	movs	r2, r4
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <__aeabi_ui2f+0x8c>)
 800134c:	4002      	ands	r2, r0
 800134e:	0765      	lsls	r5, r4, #29
 8001350:	d009      	beq.n	8001366 <__aeabi_ui2f+0x6a>
 8001352:	250f      	movs	r5, #15
 8001354:	402c      	ands	r4, r5
 8001356:	2c04      	cmp	r4, #4
 8001358:	d005      	beq.n	8001366 <__aeabi_ui2f+0x6a>
 800135a:	3204      	adds	r2, #4
 800135c:	0154      	lsls	r4, r2, #5
 800135e:	d502      	bpl.n	8001366 <__aeabi_ui2f+0x6a>
 8001360:	239f      	movs	r3, #159	; 0x9f
 8001362:	4002      	ands	r2, r0
 8001364:	1a5b      	subs	r3, r3, r1
 8001366:	0192      	lsls	r2, r2, #6
 8001368:	0a54      	lsrs	r4, r2, #9
 800136a:	b2d8      	uxtb	r0, r3
 800136c:	e7da      	b.n	8001324 <__aeabi_ui2f+0x28>
 800136e:	0264      	lsls	r4, r4, #9
 8001370:	2096      	movs	r0, #150	; 0x96
 8001372:	0a64      	lsrs	r4, r4, #9
 8001374:	e7d6      	b.n	8001324 <__aeabi_ui2f+0x28>
 8001376:	1f4a      	subs	r2, r1, #5
 8001378:	4094      	lsls	r4, r2
 800137a:	0022      	movs	r2, r4
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <__aeabi_ui2f+0x8c>)
 800137e:	4002      	ands	r2, r0
 8001380:	0765      	lsls	r5, r4, #29
 8001382:	d0f0      	beq.n	8001366 <__aeabi_ui2f+0x6a>
 8001384:	e7e5      	b.n	8001352 <__aeabi_ui2f+0x56>
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	fbffffff 	.word	0xfbffffff

0800138c <__clzsi2>:
 800138c:	211c      	movs	r1, #28
 800138e:	2301      	movs	r3, #1
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	4298      	cmp	r0, r3
 8001394:	d301      	bcc.n	800139a <__clzsi2+0xe>
 8001396:	0c00      	lsrs	r0, r0, #16
 8001398:	3910      	subs	r1, #16
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	4298      	cmp	r0, r3
 800139e:	d301      	bcc.n	80013a4 <__clzsi2+0x18>
 80013a0:	0a00      	lsrs	r0, r0, #8
 80013a2:	3908      	subs	r1, #8
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d301      	bcc.n	80013ae <__clzsi2+0x22>
 80013aa:	0900      	lsrs	r0, r0, #4
 80013ac:	3904      	subs	r1, #4
 80013ae:	a202      	add	r2, pc, #8	; (adr r2, 80013b8 <__clzsi2+0x2c>)
 80013b0:	5c10      	ldrb	r0, [r2, r0]
 80013b2:	1840      	adds	r0, r0, r1
 80013b4:	4770      	bx	lr
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	02020304 	.word	0x02020304
 80013bc:	01010101 	.word	0x01010101
	...

080013c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80013d0:	23a0      	movs	r3, #160	; 0xa0
 80013d2:	015b      	lsls	r3, r3, #5
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <tx_application_define+0x54>)
 80013d6:	4912      	ldr	r1, [pc, #72]	; (8001420 <tx_application_define+0x58>)
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <tx_application_define+0x5c>)
 80013da:	2434      	movs	r4, #52	; 0x34
 80013dc:	9400      	str	r4, [sp, #0]
 80013de:	f00d f86d 	bl	800e4bc <_txe_byte_pool_create>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d105      	bne.n	80013f2 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <tx_application_define+0x5c>)
 80013e8:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f000 f8d9 	bl	80015a4 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80013f2:	23b0      	movs	r3, #176	; 0xb0
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <tx_application_define+0x60>)
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <tx_application_define+0x64>)
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <tx_application_define+0x68>)
 80013fc:	2434      	movs	r4, #52	; 0x34
 80013fe:	9400      	str	r4, [sp, #0]
 8001400:	f00d f85c 	bl	800e4bc <_txe_byte_pool_create>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d105      	bne.n	8001414 <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <tx_application_define+0x68>)
 800140a:	60fb      	str	r3, [r7, #12]

    if (MX_USBX_Device_Init(memory_ptr) != UX_SUCCESS)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	0018      	movs	r0, r3
 8001410:	f011 fc92 	bl	8012d38 <MX_USBX_Device_Init>

    /* USER CODE BEGIN MX_USBX_Device_Init_Success */

    /* USER CODE END MX_USBX_Device_Init_Success */
  }
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b005      	add	sp, #20
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	200000e0 	.word	0x200000e0
 8001420:	0801480c 	.word	0x0801480c
 8001424:	200014e0 	.word	0x200014e0
 8001428:	20001514 	.word	0x20001514
 800142c:	08014820 	.word	0x08014820
 8001430:	20004114 	.word	0x20004114

08001434 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	0018      	movs	r0, r3
 800143e:	230c      	movs	r3, #12
 8001440:	001a      	movs	r2, r3
 8001442:	2100      	movs	r1, #0
 8001444:	f012 fcea 	bl	8013e1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <MX_ADC1_Init+0xcc>)
 800144a:	4a2e      	ldr	r2, [pc, #184]	; (8001504 <MX_ADC1_Init+0xd0>)
 800144c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	05d2      	lsls	r2, r2, #23
 8001454:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <MX_ADC1_Init+0xcc>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <MX_ADC1_Init+0xcc>)
 800146a:	2204      	movs	r2, #4
 800146c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001470:	2200      	movs	r2, #0
 8001472:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001476:	2200      	movs	r2, #0
 8001478:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_ADC1_Init+0xcc>)
 800147c:	2200      	movs	r2, #0
 800147e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001482:	2201      	movs	r2, #1
 8001484:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001488:	2220      	movs	r2, #32
 800148a:	2101      	movs	r1, #1
 800148c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_ADC1_Init+0xcc>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_ADC1_Init+0xcc>)
 800149c:	222c      	movs	r2, #44	; 0x2c
 800149e:	2100      	movs	r1, #0
 80014a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_ADC1_Init+0xcc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_ADC1_Init+0xcc>)
 80014aa:	2206      	movs	r2, #6
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_ADC1_Init+0xcc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_ADC1_Init+0xcc>)
 80014b6:	223c      	movs	r2, #60	; 0x3c
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_ADC1_Init+0xcc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_ADC1_Init+0xcc>)
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 f9a1 	bl	800280c <HAL_ADC_Init>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80014ce:	f000 fa15 	bl	80018fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <MX_ADC1_Init+0xd4>)
 80014d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e4:	1d3a      	adds	r2, r7, #4
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_ADC1_Init+0xcc>)
 80014e8:	0011      	movs	r1, r2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 fd1e 	bl	8002f2c <HAL_ADC_ConfigChannel>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80014f4:	f000 fa02 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20004148 	.word	0x20004148
 8001504:	40012400 	.word	0x40012400
 8001508:	18000040 	.word	0x18000040

0800150c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b08b      	sub	sp, #44	; 0x2c
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	2414      	movs	r4, #20
 8001516:	193b      	adds	r3, r7, r4
 8001518:	0018      	movs	r0, r3
 800151a:	2314      	movs	r3, #20
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f012 fc7c 	bl	8013e1c <memset>
  if(adcHandle->Instance==ADC1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_ADC_MspInit+0x90>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d131      	bne.n	8001592 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_ADC_MspInit+0x94>)
 8001530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_ADC_MspInit+0x94>)
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0349      	lsls	r1, r1, #13
 8001538:	430a      	orrs	r2, r1
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_ADC_MspInit+0x94>)
 800153e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	035b      	lsls	r3, r3, #13
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_ADC_MspInit+0x94>)
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_ADC_MspInit+0x94>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_ADC_MspInit+0x94>)
 8001558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155a:	2201      	movs	r2, #1
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SENSE_Pin;
 8001562:	193b      	adds	r3, r7, r4
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001568:	193b      	adds	r3, r7, r4
 800156a:	2203      	movs	r2, #3
 800156c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	193b      	adds	r3, r7, r4
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8001574:	193a      	adds	r2, r7, r4
 8001576:	23a0      	movs	r3, #160	; 0xa0
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f002 fd3d 	bl	8003ffc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	200c      	movs	r0, #12
 8001588:	f002 fa0a 	bl	80039a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800158c:	200c      	movs	r0, #12
 800158e:	f002 fa1c 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b00b      	add	sp, #44	; 0x2c
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40012400 	.word	0x40012400
 80015a0:	40021000 	.word	0x40021000

080015a4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b08f      	sub	sp, #60	; 0x3c
 80015a8:	af08      	add	r7, sp, #32
 80015aa:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN App_ThreadX_Init */

	CHAR *pointer;

	/* Allocate the stack for tx main app thread  */
	if (tx_byte_allocate(byte_pool, (VOID**) &pointer, TX_MAIN_APP_STACK_SIZE,
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	009a      	lsls	r2, r3, #2
 80015b8:	230c      	movs	r3, #12
 80015ba:	18f9      	adds	r1, r7, r3
 80015bc:	6938      	ldr	r0, [r7, #16]
 80015be:	2300      	movs	r3, #0
 80015c0:	f00c ff06 	bl	800e3d0 <_txe_byte_allocate>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <App_ThreadX_Init+0x28>
	TX_NO_WAIT) != TX_SUCCESS) {
		return TX_POOL_ERROR;
 80015c8:	2302      	movs	r3, #2
 80015ca:	e060      	b.n	800168e <App_ThreadX_Init+0xea>
	}
	/* Create tx neopixel app thread.  */
	if (tx_thread_create(&tx_main_app_thread, "main app thread", tx_main_app_thread_entry, 0, pointer,
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4c32      	ldr	r4, [pc, #200]	; (8001698 <App_ThreadX_Init+0xf4>)
 80015d0:	4932      	ldr	r1, [pc, #200]	; (800169c <App_ThreadX_Init+0xf8>)
 80015d2:	4833      	ldr	r0, [pc, #204]	; (80016a0 <App_ThreadX_Init+0xfc>)
 80015d4:	22b0      	movs	r2, #176	; 0xb0
 80015d6:	9206      	str	r2, [sp, #24]
 80015d8:	2201      	movs	r2, #1
 80015da:	9205      	str	r2, [sp, #20]
 80015dc:	2200      	movs	r2, #0
 80015de:	9204      	str	r2, [sp, #16]
 80015e0:	220a      	movs	r2, #10
 80015e2:	9203      	str	r2, [sp, #12]
 80015e4:	220a      	movs	r2, #10
 80015e6:	9202      	str	r2, [sp, #8]
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	9201      	str	r2, [sp, #4]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	0022      	movs	r2, r4
 80015f4:	f00d fd10 	bl	800f018 <_txe_thread_create>
 80015f8:	1e03      	subs	r3, r0, #0
 80015fa:	d001      	beq.n	8001600 <App_ThreadX_Init+0x5c>
			TX_MAIN_APP_STACK_SIZE, TX_MAIN_APP_THREAD_PRIO, TX_MAIN_APP_THREAD_PREEMPTION_THRESHOLD,
			TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS) {
		return TX_THREAD_ERROR;
 80015fc:	230e      	movs	r3, #14
 80015fe:	e046      	b.n	800168e <App_ThreadX_Init+0xea>
	}

	/* Allocate the stack for tx neopixel app thread  */
	if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	009a      	lsls	r2, r3, #2
 8001604:	230c      	movs	r3, #12
 8001606:	18f9      	adds	r1, r7, r3
 8001608:	6938      	ldr	r0, [r7, #16]
 800160a:	2300      	movs	r3, #0
 800160c:	f00c fee0 	bl	800e3d0 <_txe_byte_allocate>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d001      	beq.n	8001618 <App_ThreadX_Init+0x74>
			TX_NEOPIXEL_APP_STACK_SIZE,
			TX_NO_WAIT) != TX_SUCCESS) {
		return TX_POOL_ERROR;
 8001614:	2302      	movs	r3, #2
 8001616:	e03a      	b.n	800168e <App_ThreadX_Init+0xea>
	}
	/* Create tx neopixel app thread.  */
	if (tx_thread_create(&tx_neopixel_app_thread, "neopixel app thread", tx_neopixel_app_thread_entry, 0, pointer,
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4c22      	ldr	r4, [pc, #136]	; (80016a4 <App_ThreadX_Init+0x100>)
 800161c:	4922      	ldr	r1, [pc, #136]	; (80016a8 <App_ThreadX_Init+0x104>)
 800161e:	4823      	ldr	r0, [pc, #140]	; (80016ac <App_ThreadX_Init+0x108>)
 8001620:	22b0      	movs	r2, #176	; 0xb0
 8001622:	9206      	str	r2, [sp, #24]
 8001624:	2201      	movs	r2, #1
 8001626:	9205      	str	r2, [sp, #20]
 8001628:	2200      	movs	r2, #0
 800162a:	9204      	str	r2, [sp, #16]
 800162c:	220a      	movs	r2, #10
 800162e:	9203      	str	r2, [sp, #12]
 8001630:	220a      	movs	r2, #10
 8001632:	9202      	str	r2, [sp, #8]
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	9201      	str	r2, [sp, #4]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	0022      	movs	r2, r4
 8001640:	f00d fcea 	bl	800f018 <_txe_thread_create>
 8001644:	1e03      	subs	r3, r0, #0
 8001646:	d001      	beq.n	800164c <App_ThreadX_Init+0xa8>
			TX_NEOPIXEL_APP_STACK_SIZE, TX_NEOPIXEL_APP_THREAD_PRIO, TX_NEOPIXEL_APP_THREAD_PREEMPTION_THRESHOLD,
			TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS) {
		return TX_THREAD_ERROR;
 8001648:	230e      	movs	r3, #14
 800164a:	e020      	b.n	800168e <App_ThreadX_Init+0xea>
	}

	/* Create the event flags group used by the neopixel driver. */
	tx_event_flags_create(&event_flags_neopixel, "regulator event flags");
 800164c:	4918      	ldr	r1, [pc, #96]	; (80016b0 <App_ThreadX_Init+0x10c>)
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <App_ThreadX_Init+0x110>)
 8001650:	2224      	movs	r2, #36	; 0x24
 8001652:	0018      	movs	r0, r3
 8001654:	f00c ffd0 	bl	800e5f8 <_txe_event_flags_create>

	/* Create the event flags group used by the regulator driver. */
	tx_event_flags_create(&event_flags_regulator, "regulator event flags");
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <App_ThreadX_Init+0x10c>)
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <App_ThreadX_Init+0x114>)
 800165c:	2224      	movs	r2, #36	; 0x24
 800165e:	0018      	movs	r0, r3
 8001660:	f00c ffca 	bl	800e5f8 <_txe_event_flags_create>

	/* Allocate the message queue. */
	tx_byte_allocate(byte_pool, (VOID**) &pointer, VOLTAGE_QUEUE_SIZE * sizeof(ULONG),
 8001664:	23c8      	movs	r3, #200	; 0xc8
 8001666:	005a      	lsls	r2, r3, #1
 8001668:	230c      	movs	r3, #12
 800166a:	18f9      	adds	r1, r7, r3
 800166c:	6938      	ldr	r0, [r7, #16]
 800166e:	2300      	movs	r3, #0
 8001670:	f00c feae 	bl	800e3d0 <_txe_byte_allocate>
			TX_NO_WAIT);

	/* Create the message queue shared by threads 1 and 2. */
	tx_queue_create(&queue_voltage, "queue voltage", TX_1_ULONG, pointer,
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4911      	ldr	r1, [pc, #68]	; (80016bc <App_ThreadX_Init+0x118>)
 8001678:	4811      	ldr	r0, [pc, #68]	; (80016c0 <App_ThreadX_Init+0x11c>)
 800167a:	2338      	movs	r3, #56	; 0x38
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	23c8      	movs	r3, #200	; 0xc8
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	0013      	movs	r3, r2
 8001686:	2201      	movs	r2, #1
 8001688:	f00d fa46 	bl	800eb18 <_txe_queue_create>
			VOLTAGE_QUEUE_SIZE * sizeof(ULONG));

  /* USER CODE END App_ThreadX_Init */

  return ret;
 800168c:	697b      	ldr	r3, [r7, #20]
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b007      	add	sp, #28
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	08001909 	.word	0x08001909
 800169c:	08014834 	.word	0x08014834
 80016a0:	2000425c 	.word	0x2000425c
 80016a4:	080019d5 	.word	0x080019d5
 80016a8:	08014844 	.word	0x08014844
 80016ac:	200041ac 	.word	0x200041ac
 80016b0:	08014858 	.word	0x08014858
 80016b4:	2000430c 	.word	0x2000430c
 80016b8:	20004330 	.word	0x20004330
 80016bc:	08014870 	.word	0x08014870
 80016c0:	20004354 	.word	0x20004354

080016c4 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80016c8:	f00a f99a 	bl	800ba00 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_DMA_Init+0x38>)
 80016dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_DMA_Init+0x38>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_DMA_Init+0x38>)
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	2201      	movs	r2, #1
 80016ec:	4013      	ands	r3, r2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2009      	movs	r0, #9
 80016f8:	f002 f952 	bl	80039a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016fc:	2009      	movs	r0, #9
 80016fe:	f002 f964 	bl	80039ca <HAL_NVIC_EnableIRQ>

}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40021000 	.word	0x40021000

08001710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	240c      	movs	r4, #12
 8001718:	193b      	adds	r3, r7, r4
 800171a:	0018      	movs	r0, r3
 800171c:	2314      	movs	r3, #20
 800171e:	001a      	movs	r2, r3
 8001720:	2100      	movs	r1, #0
 8001722:	f012 fb7b 	bl	8013e1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <MX_GPIO_Init+0xd4>)
 8001728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_GPIO_Init+0xd4>)
 800172c:	2101      	movs	r1, #1
 800172e:	430a      	orrs	r2, r1
 8001730:	635a      	str	r2, [r3, #52]	; 0x34
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_GPIO_Init+0xd4>)
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <MX_GPIO_Init+0xd4>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <MX_GPIO_Init+0xd4>)
 8001744:	2102      	movs	r1, #2
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <MX_GPIO_Init+0xd4>)
 800174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001756:	23a0      	movs	r3, #160	; 0xa0
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	2200      	movs	r2, #0
 800175c:	2110      	movs	r1, #16
 800175e:	0018      	movs	r0, r3
 8001760:	f002 fdb8 	bl	80042d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, GPIO_PIN_RESET);
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MX_GPIO_Init+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	2101      	movs	r1, #1
 800176a:	0018      	movs	r0, r3
 800176c:	f002 fdb2 	bl	80042d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2210      	movs	r2, #16
 8001774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2201      	movs	r2, #1
 800177a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	193b      	adds	r3, r7, r4
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001788:	193a      	adds	r2, r7, r4
 800178a:	23a0      	movs	r3, #160	; 0xa0
 800178c:	05db      	lsls	r3, r3, #23
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f002 fc33 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REG_EN_Pin;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	193b      	adds	r3, r7, r4
 800179e:	2201      	movs	r2, #1
 80017a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(REG_EN_GPIO_Port, &GPIO_InitStruct);
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <MX_GPIO_Init+0xd8>)
 80017b2:	0019      	movs	r1, r3
 80017b4:	0010      	movs	r0, r2
 80017b6:	f002 fc21 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REG_PG_Pin;
 80017ba:	0021      	movs	r1, r4
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REG_PG_GPIO_Port, &GPIO_InitStruct);
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <MX_GPIO_Init+0xd8>)
 80017d2:	0019      	movs	r1, r3
 80017d4:	0010      	movs	r0, r2
 80017d6:	f002 fc11 	bl	8003ffc <HAL_GPIO_Init>

}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b009      	add	sp, #36	; 0x24
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000
 80017e8:	50000400 	.word	0x50000400

080017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f0:	f000 fe20 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f4:	f000 f80d 	bl	8001812 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f8:	f7ff ff8a 	bl	8001710 <MX_GPIO_Init>
  MX_DMA_Init();
 80017fc:	f7ff ff6a 	bl	80016d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001800:	f7ff fe18 	bl	8001434 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001804:	f000 fae8 	bl	8001dd8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001808:	f000 fc64 	bl	80020d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800180c:	f7ff ff5a 	bl	80016c4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001810:	e7fe      	b.n	8001810 <main+0x24>

08001812 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001812:	b590      	push	{r4, r7, lr}
 8001814:	b095      	sub	sp, #84	; 0x54
 8001816:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001818:	2414      	movs	r4, #20
 800181a:	193b      	adds	r3, r7, r4
 800181c:	0018      	movs	r0, r3
 800181e:	233c      	movs	r3, #60	; 0x3c
 8001820:	001a      	movs	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	f012 fafa 	bl	8013e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	0018      	movs	r0, r3
 800182c:	2310      	movs	r3, #16
 800182e:	001a      	movs	r2, r3
 8001830:	2100      	movs	r1, #0
 8001832:	f012 faf3 	bl	8013e1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	0018      	movs	r0, r3
 800183c:	f004 fba0 	bl	8005f80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001840:	193b      	adds	r3, r7, r4
 8001842:	2222      	movs	r2, #34	; 0x22
 8001844:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	03d2      	lsls	r2, r2, #15
 8001854:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001856:	0021      	movs	r1, r4
 8001858:	187b      	adds	r3, r7, r1
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800185e:	187b      	adds	r3, r7, r1
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2202      	movs	r2, #2
 8001868:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2202      	movs	r2, #2
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2208      	movs	r2, #8
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	0292      	lsls	r2, r2, #10
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	0492      	lsls	r2, r2, #18
 800188a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	0592      	lsls	r2, r2, #22
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001894:	187b      	adds	r3, r7, r1
 8001896:	0018      	movs	r0, r3
 8001898:	f004 fbbe 	bl	8006018 <HAL_RCC_OscConfig>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018a0:	f000 f82c 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2207      	movs	r2, #7
 80018a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2202      	movs	r2, #2
 80018ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2102      	movs	r1, #2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f004 ff09 	bl	80066d8 <HAL_RCC_ClockConfig>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80018ca:	f000 f817 	bl	80018fc <Error_Handler>
  }
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b015      	add	sp, #84	; 0x54
 80018d4:	bd90      	pop	{r4, r7, pc}
	...

080018d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ea:	f000 fdc3 	bl	8002474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40014800 	.word	0x40014800

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <tx_main_app_thread_entry>:
/**
 * @brief  Function implementing the tx_main_app_thread_entry thread.
 * @param  thread_input: Hardcoded to 0.
 * @retval None
 */
void tx_main_app_thread_entry(ULONG thread_input) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	6078      	str	r0, [r7, #4]
	uint32_t voltage_output_mVolt;

	while (1) {

		/* Wait for neopixel event flag. */
		status = tx_event_flags_get(&event_flags_regulator, FLAG_REGULATOR_ALL,
 8001910:	230c      	movs	r3, #12
 8001912:	18fa      	adds	r2, r7, r3
 8001914:	482c      	ldr	r0, [pc, #176]	; (80019c8 <tx_main_app_thread_entry+0xc0>)
 8001916:	2301      	movs	r3, #1
 8001918:	425b      	negs	r3, r3
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	0013      	movs	r3, r2
 800191e:	2201      	movs	r2, #1
 8001920:	2103      	movs	r1, #3
 8001922:	f00c fefb 	bl	800e71c <_txe_event_flags_get>
 8001926:	0003      	movs	r3, r0
 8001928:	617b      	str	r3, [r7, #20]
		TX_OR_CLEAR, &actual_regulator_flags, TX_WAIT_FOREVER);

		/* Check status. */
		if (status == TX_SUCCESS) {
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ef      	bne.n	8001910 <tx_main_app_thread_entry+0x8>
			switch (actual_regulator_flags) {
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d020      	beq.n	8001978 <tx_main_app_thread_entry+0x70>
 8001936:	d8eb      	bhi.n	8001910 <tx_main_app_thread_entry+0x8>
 8001938:	2b01      	cmp	r3, #1
 800193a:	d00f      	beq.n	800195c <tx_main_app_thread_entry+0x54>
 800193c:	2b02      	cmp	r3, #2
 800193e:	d1e7      	bne.n	8001910 <tx_main_app_thread_entry+0x8>

			case FLAG_REGULATOR_ON:

				/* Set neopixel event flag to turn ON LED. */
				status = tx_event_flags_set(&event_flags_neopixel,
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <tx_main_app_thread_entry+0xc4>)
 8001942:	2200      	movs	r2, #0
 8001944:	2102      	movs	r1, #2
 8001946:	0018      	movs	r0, r3
 8001948:	f00c ff40 	bl	800e7cc <_txe_event_flags_set>
 800194c:	0003      	movs	r3, r0
 800194e:	617b      	str	r3, [r7, #20]
				FLAG_NEOPIXEL_RED,
				TX_OR);
				/* Check status. */
				if (status != TX_SUCCESS)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d131      	bne.n	80019ba <tx_main_app_thread_entry+0xb2>
					break;

				/* Enable regulator output. */
				regulator_enable();
 8001956:	f000 f8d1 	bl	8001afc <regulator_enable>

				break;
 800195a:	e033      	b.n	80019c4 <tx_main_app_thread_entry+0xbc>

			case FLAG_REGULATOR_OFF:

				/* Set neopixel event flag to turn ON LED. */
				status = tx_event_flags_set(&event_flags_neopixel,
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <tx_main_app_thread_entry+0xc4>)
 800195e:	2200      	movs	r2, #0
 8001960:	2103      	movs	r1, #3
 8001962:	0018      	movs	r0, r3
 8001964:	f00c ff32 	bl	800e7cc <_txe_event_flags_set>
 8001968:	0003      	movs	r3, r0
 800196a:	617b      	str	r3, [r7, #20]
				FLAG_NEOPIXEL_GREEN,
				TX_OR);
				/* Check status. */
				if (status != TX_SUCCESS)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d125      	bne.n	80019be <tx_main_app_thread_entry+0xb6>
					break;

				/* Disable regulator output. */
				regulator_disable();
 8001972:	f000 f8f3 	bl	8001b5c <regulator_disable>

				break;
 8001976:	e025      	b.n	80019c4 <tx_main_app_thread_entry+0xbc>

			case FLAG_REGULATOR_SET:

				/* Retrieve a message from the queue. */
				status = tx_queue_receive(&queue_voltage, &voltage_output_raw,
 8001978:	2308      	movs	r3, #8
 800197a:	18f9      	adds	r1, r7, r3
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <tx_main_app_thread_entry+0xc8>)
 800197e:	2200      	movs	r2, #0
 8001980:	0018      	movs	r0, r3
 8001982:	f00d f979 	bl	800ec78 <_txe_queue_receive>
 8001986:	0003      	movs	r3, r0
 8001988:	617b      	str	r3, [r7, #20]
						TX_NO_WAIT);

				/* Check completion status and make sure the message is what we
				 expected. */
				if (status != TX_SUCCESS)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d118      	bne.n	80019c2 <tx_main_app_thread_entry+0xba>
					break;

				/* Convert voltage from raw data to a mVolt value. */
				voltage_output_mVolt = ((voltage_output_raw >> 4) * 1000) + ((voltage_output_raw & 0x0F) * 100);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	091a      	lsrs	r2, r3, #4
 8001994:	0013      	movs	r3, r2
 8001996:	015b      	lsls	r3, r3, #5
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	189b      	adds	r3, r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	0019      	movs	r1, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	220f      	movs	r2, #15
 80019a6:	4013      	ands	r3, r2
 80019a8:	2264      	movs	r2, #100	; 0x64
 80019aa:	4353      	muls	r3, r2
 80019ac:	18cb      	adds	r3, r1, r3
 80019ae:	613b      	str	r3, [r7, #16]

				/* Set the output voltage. */
				regulator_set_voltage(voltage_output_mVolt);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 f8e0 	bl	8001b78 <regulator_set_voltage>

				break;
 80019b8:	e004      	b.n	80019c4 <tx_main_app_thread_entry+0xbc>
					break;
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	e7a8      	b.n	8001910 <tx_main_app_thread_entry+0x8>
					break;
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	e7a6      	b.n	8001910 <tx_main_app_thread_entry+0x8>
					break;
 80019c2:	46c0      	nop			; (mov r8, r8)
		status = tx_event_flags_get(&event_flags_regulator, FLAG_REGULATOR_ALL,
 80019c4:	e7a4      	b.n	8001910 <tx_main_app_thread_entry+0x8>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	20004330 	.word	0x20004330
 80019cc:	2000430c 	.word	0x2000430c
 80019d0:	20004354 	.word	0x20004354

080019d4 <tx_neopixel_app_thread_entry>:
/**
 * @brief  Function implementing the tx_neopixel_app_thread_entry thread.
 * @param  thread_input: Hardcoded to 0.
 * @retval None
 */
void tx_neopixel_app_thread_entry(ULONG thread_input) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
	UINT status;

	while (1) {

		/* Wait for neopixel event flag. */
		status = tx_event_flags_get(&event_flags_neopixel, FLAG_NEOPIXEL_ALL,
 80019dc:	2308      	movs	r3, #8
 80019de:	18fa      	adds	r2, r7, r3
 80019e0:	4817      	ldr	r0, [pc, #92]	; (8001a40 <tx_neopixel_app_thread_entry+0x6c>)
 80019e2:	2301      	movs	r3, #1
 80019e4:	425b      	negs	r3, r3
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	0013      	movs	r3, r2
 80019ea:	2201      	movs	r2, #1
 80019ec:	2103      	movs	r1, #3
 80019ee:	f00c fe95 	bl	800e71c <_txe_event_flags_get>
 80019f2:	0003      	movs	r3, r0
 80019f4:	60fb      	str	r3, [r7, #12]
				TX_OR_CLEAR, &actual_neopixel_flags, TX_WAIT_FOREVER);

		/* Check status. */
		if (status == TX_SUCCESS) {
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ef      	bne.n	80019dc <tx_neopixel_app_thread_entry+0x8>
			switch (actual_neopixel_flags) {
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d011      	beq.n	8001a26 <tx_neopixel_app_thread_entry+0x52>
 8001a02:	d816      	bhi.n	8001a32 <tx_neopixel_app_thread_entry+0x5e>
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d002      	beq.n	8001a0e <tx_neopixel_app_thread_entry+0x3a>
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d006      	beq.n	8001a1a <tx_neopixel_app_thread_entry+0x46>
 8001a0c:	e011      	b.n	8001a32 <tx_neopixel_app_thread_entry+0x5e>

			case FLAG_NEOPIXEL_OFF:
				neopixel_set_color_rgb(0, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f816 	bl	8001a44 <neopixel_set_color_rgb>
				break;
 8001a18:	e011      	b.n	8001a3e <tx_neopixel_app_thread_entry+0x6a>

			case FLAG_NEOPIXEL_RED:
				neopixel_set_color_rgb(NEOPIXEL_COLOR_VALUE, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2032      	movs	r0, #50	; 0x32
 8001a20:	f000 f810 	bl	8001a44 <neopixel_set_color_rgb>
				break;
 8001a24:	e00b      	b.n	8001a3e <tx_neopixel_app_thread_entry+0x6a>

			case FLAG_NEOPIXEL_GREEN:
				neopixel_set_color_rgb(0, NEOPIXEL_COLOR_VALUE, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2132      	movs	r1, #50	; 0x32
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f80a 	bl	8001a44 <neopixel_set_color_rgb>
				break;
 8001a30:	e005      	b.n	8001a3e <tx_neopixel_app_thread_entry+0x6a>

			default:
				neopixel_set_color_rgb(0, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f804 	bl	8001a44 <neopixel_set_color_rgb>
				break;
 8001a3c:	46c0      	nop			; (mov r8, r8)
		status = tx_event_flags_get(&event_flags_neopixel, FLAG_NEOPIXEL_ALL,
 8001a3e:	e7cd      	b.n	80019dc <tx_neopixel_app_thread_entry+0x8>
 8001a40:	2000430c 	.word	0x2000430c

08001a44 <neopixel_set_color_rgb>:
 * @param  r: Red color value
 * @param  g: Green color value
 * @param  b: Blue color value
 * @retval None
 */
static void neopixel_set_color_rgb(uint8_t r, uint8_t g, uint8_t b) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	0004      	movs	r4, r0
 8001a4c:	0008      	movs	r0, r1
 8001a4e:	0011      	movs	r1, r2
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	1c22      	adds	r2, r4, #0
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	1c02      	adds	r2, r0, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	1d7b      	adds	r3, r7, #5
 8001a5e:	1c0a      	adds	r2, r1, #0
 8001a60:	701a      	strb	r2, [r3, #0]

	PixelRGB_t pixel = { 0 };
 8001a62:	210c      	movs	r1, #12
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
	uint32_t *pBuff;

	pixel.color.r = r;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	1dfa      	adds	r2, r7, #7
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	705a      	strb	r2, [r3, #1]
	pixel.color.g = g;
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	1dba      	adds	r2, r7, #6
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	709a      	strb	r2, [r3, #2]
	pixel.color.b = b;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	1d7a      	adds	r2, r7, #5
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	701a      	strb	r2, [r3, #0]

	pBuff = dmaBuffer;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <neopixel_set_color_rgb+0x94>)
 8001a84:	617b      	str	r3, [r7, #20]

	for (int j = 23; j >= 0; j--) {
 8001a86:	2317      	movs	r3, #23
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e015      	b.n	8001ab8 <neopixel_set_color_rgb+0x74>
		if ((pixel.data >> j) & 0x01) {
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	40da      	lsrs	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d003      	beq.n	8001aa6 <neopixel_set_color_rgb+0x62>
			*pBuff = NEOPIXEL_ONE;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2233      	movs	r2, #51	; 0x33
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e002      	b.n	8001aac <neopixel_set_color_rgb+0x68>
		} else {
			*pBuff = NEOPIXEL_ZERO;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2219      	movs	r2, #25
 8001aaa:	601a      	str	r2, [r3, #0]
		}
		pBuff++;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
	for (int j = 23; j >= 0; j--) {
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	dae6      	bge.n	8001a8c <neopixel_set_color_rgb+0x48>
	}

	dmaBuffer[NEOPIXEL_DMA_BUF_SIZE - 1] = 0; // last element must be 0!
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <neopixel_set_color_rgb+0x94>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	661a      	str	r2, [r3, #96]	; 0x60

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer,
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <neopixel_set_color_rgb+0x94>)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <neopixel_set_color_rgb+0x98>)
 8001ac8:	2319      	movs	r3, #25
 8001aca:	2108      	movs	r1, #8
 8001acc:	f005 febc 	bl	8007848 <HAL_TIM_PWM_Start_DMA>
	NEOPIXEL_DMA_BUF_SIZE);

}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b007      	add	sp, #28
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	2000438c 	.word	0x2000438c
 8001adc:	200044a4 	.word	0x200044a4

08001ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3); // Stops timer output after the last pulse
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2108      	movs	r1, #8
 8001aec:	0018      	movs	r0, r3
 8001aee:	f006 f8b1 	bl	8007c54 <HAL_TIM_PWM_Stop_DMA>

}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <regulator_enable>:

/**
 * @brief  Function implementing the regulator_enable function.
 * @retval None
 */
void regulator_enable(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

	uint8_t spi_write_data_buf[2];

	/* Configure the first byte to enable writing to potentiometer. */
	spi_write_data_buf[1] = REGULATOR_WRITE_POTENTIOMETER;
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2211      	movs	r2, #17
 8001b06:	705a      	strb	r2, [r3, #1]

	/* Set potentiometer value to output 1V8. */
	spi_write_data_buf[0] = 0x7A;
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	227a      	movs	r2, #122	; 0x7a
 8001b0c:	701a      	strb	r2, [r3, #0]

	/* SPI transmit data. */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, RESET);
 8001b0e:	23a0      	movs	r3, #160	; 0xa0
 8001b10:	05db      	lsls	r3, r3, #23
 8001b12:	2200      	movs	r2, #0
 8001b14:	2110      	movs	r1, #16
 8001b16:	0018      	movs	r0, r3
 8001b18:	f002 fbdc 	bl	80042d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, spi_write_data_buf, 1, HAL_MAX_DELAY);
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	425b      	negs	r3, r3
 8001b20:	1d39      	adds	r1, r7, #4
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <regulator_enable+0x58>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	f005 fa9f 	bl	8007068 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, SET);
 8001b2a:	23a0      	movs	r3, #160	; 0xa0
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2110      	movs	r1, #16
 8001b32:	0018      	movs	r0, r3
 8001b34:	f002 fbce 	bl	80042d4 <HAL_GPIO_WritePin>

	/* Delay task for 10 ms. */
	tx_thread_sleep(1);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f00b fe33 	bl	800d7a4 <_tx_thread_sleep>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, SET);
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <regulator_enable+0x5c>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	2101      	movs	r1, #1
 8001b44:	0018      	movs	r0, r3
 8001b46:	f002 fbc5 	bl	80042d4 <HAL_GPIO_WritePin>

}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	200043f4 	.word	0x200043f4
 8001b58:	50000400 	.word	0x50000400

08001b5c <regulator_disable>:

/**
 * @brief  Function implementing the regulator_disable function.
 * @retval None
 */
void regulator_disable(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, RESET);
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <regulator_disable+0x18>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	2101      	movs	r1, #1
 8001b66:	0018      	movs	r0, r3
 8001b68:	f002 fbb4 	bl	80042d4 <HAL_GPIO_WritePin>

}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	50000400 	.word	0x50000400

08001b78 <regulator_set_voltage>:
/**
 * @brief  Function implementing the regulator_set_voltage function.
 * @param  output_voltage: Output voltage to be set in millivolts.
 * @retval None
 */
void regulator_set_voltage(uint32_t output_voltage) {
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

	uint8_t spi_write_data_buf[2];
	uint16_t adc_prev_value = 0;
 8001b80:	230e      	movs	r3, #14
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
	uint16_t adc_curr_value = 0;
 8001b88:	2316      	movs	r3, #22
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
	uint8_t potentiometer_value_est;

	if (output_voltage < 3600) {
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	23e1      	movs	r3, #225	; 0xe1
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d300      	bcc.n	8001b9c <regulator_set_voltage+0x24>
 8001b9a:	e0fb      	b.n	8001d94 <regulator_set_voltage+0x21c>

		/* Run the ADC calibration */
		if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) {
 8001b9c:	4b7f      	ldr	r3, [pc, #508]	; (8001d9c <regulator_set_voltage+0x224>)
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f001 fd5a 	bl	8003658 <HAL_ADCEx_Calibration_Start>
 8001ba4:	1e03      	subs	r3, r0, #0
 8001ba6:	d001      	beq.n	8001bac <regulator_set_voltage+0x34>
			/* Calibration Error */
			Error_Handler();
 8001ba8:	f7ff fea8 	bl	80018fc <Error_Handler>
		}

		/* Delay task for 10 ms. */
		tx_thread_sleep(1);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f00b fdf9 	bl	800d7a4 <_tx_thread_sleep>

		/* Configure the first byte to enable writing to potentiometer. */
		spi_write_data_buf[1] = REGULATOR_WRITE_POTENTIOMETER;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2211      	movs	r2, #17
 8001bb8:	705a      	strb	r2, [r3, #1]

		/* Calculate estimated potentiometer value for set voltage. */
		potentiometer_value_est = 273.89f
				* powf((output_voltage / 1000.0f), -1.366f);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fb9e 	bl	80012fc <__aeabi_ui2f>
 8001bc0:	1c03      	adds	r3, r0, #0
 8001bc2:	4977      	ldr	r1, [pc, #476]	; (8001da0 <regulator_set_voltage+0x228>)
 8001bc4:	1c18      	adds	r0, r3, #0
 8001bc6:	f7fe fe59 	bl	800087c <__aeabi_fdiv>
 8001bca:	1c03      	adds	r3, r0, #0
 8001bcc:	1c1a      	adds	r2, r3, #0
 8001bce:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <regulator_set_voltage+0x22c>)
 8001bd0:	1c19      	adds	r1, r3, #0
 8001bd2:	1c10      	adds	r0, r2, #0
 8001bd4:	f012 f954 	bl	8013e80 <powf>
 8001bd8:	1c03      	adds	r3, r0, #0
 8001bda:	4973      	ldr	r1, [pc, #460]	; (8001da8 <regulator_set_voltage+0x230>)
 8001bdc:	1c18      	adds	r0, r3, #0
 8001bde:	f7ff f817 	bl	8000c10 <__aeabi_fmul>
 8001be2:	1c03      	adds	r3, r0, #0
		potentiometer_value_est = 273.89f
 8001be4:	220d      	movs	r2, #13
 8001be6:	18bc      	adds	r4, r7, r2
 8001be8:	1c18      	adds	r0, r3, #0
 8001bea:	f7fe fc8f 	bl	800050c <__aeabi_f2uiz>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	7023      	strb	r3, [r4, #0]

		/* Sweep 5 values around estimated value or less. */
		for (int16_t i = 2; i > -3; i--) {
 8001bf2:	2314      	movs	r3, #20
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	801a      	strh	r2, [r3, #0]
 8001bfa:	e0c0      	b.n	8001d7e <regulator_set_voltage+0x206>

			/* Set potentiometer value with added sweep. */
			spi_write_data_buf[0] = potentiometer_value_est + i;
 8001bfc:	2314      	movs	r3, #20
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	230d      	movs	r3, #13
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	18d3      	adds	r3, r2, r3
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	2408      	movs	r4, #8
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	701a      	strb	r2, [r3, #0]

			/* SPI transmit data. */
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, RESET);
 8001c14:	23a0      	movs	r3, #160	; 0xa0
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f002 fb59 	bl	80042d4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, spi_write_data_buf, 1, HAL_MAX_DELAY);
 8001c22:	2301      	movs	r3, #1
 8001c24:	425b      	negs	r3, r3
 8001c26:	1939      	adds	r1, r7, r4
 8001c28:	4860      	ldr	r0, [pc, #384]	; (8001dac <regulator_set_voltage+0x234>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f005 fa1c 	bl	8007068 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, SET);
 8001c30:	23a0      	movs	r3, #160	; 0xa0
 8001c32:	05db      	lsls	r3, r3, #23
 8001c34:	2201      	movs	r2, #1
 8001c36:	2110      	movs	r1, #16
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f002 fb4b 	bl	80042d4 <HAL_GPIO_WritePin>

			/* Delay task for 20 ms for output stability. */
			tx_thread_sleep(2);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f00b fdb0 	bl	800d7a4 <_tx_thread_sleep>

			/* Save the last ADC value. */
			adc_prev_value = adc_curr_value;
 8001c44:	230e      	movs	r3, #14
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	2116      	movs	r1, #22
 8001c4a:	187a      	adds	r2, r7, r1
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	801a      	strh	r2, [r3, #0]

			/* Clear current ADC variable. */
			adc_curr_value = 0;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2200      	movs	r2, #0
 8001c54:	801a      	strh	r2, [r3, #0]

			/* Measure the same value 10 times. */
			for (int16_t j = 0; j < 10; j++) {
 8001c56:	2312      	movs	r3, #18
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	e040      	b.n	8001ce2 <regulator_set_voltage+0x16a>

				/* Start ADC conversion. */
				HAL_ADC_Start_IT(&hadc1);
 8001c60:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <regulator_set_voltage+0x224>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 ffb6 	bl	8002bd4 <HAL_ADC_Start_IT>
				adc_conversion_complete_flag = 0;
 8001c68:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <regulator_set_voltage+0x238>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]

				/* Wait for ADC conversion completion. */
				for (int16_t k = 0; k < ADC_CONVERSION_TIMEOUT; k++) {
 8001c6e:	2310      	movs	r3, #16
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2200      	movs	r2, #0
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	e00f      	b.n	8001c98 <regulator_set_voltage+0x120>

					/* Exit delay when conversion finishes. */
					if (adc_conversion_complete_flag)
 8001c78:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <regulator_set_voltage+0x238>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d112      	bne.n	8001ca6 <regulator_set_voltage+0x12e>
						break;
					HAL_Delay(1);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f000 fc13 	bl	80024ac <HAL_Delay>
				for (int16_t k = 0; k < ADC_CONVERSION_TIMEOUT; k++) {
 8001c86:	2110      	movs	r1, #16
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	5e9b      	ldrsh	r3, [r3, r2]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	801a      	strh	r2, [r3, #0]
 8001c98:	2310      	movs	r3, #16
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	5e9b      	ldrsh	r3, [r3, r2]
 8001ca0:	2b63      	cmp	r3, #99	; 0x63
 8001ca2:	dde9      	ble.n	8001c78 <regulator_set_voltage+0x100>
 8001ca4:	e000      	b.n	8001ca8 <regulator_set_voltage+0x130>
						break;
 8001ca6:	46c0      	nop			; (mov r8, r8)
				}

				/* Add read ADC value to the sum. */
				adc_curr_value +=
						__LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, HAL_ADC_GetValue(&hadc1),
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <regulator_set_voltage+0x224>)
 8001caa:	0018      	movs	r0, r3
 8001cac:	f001 f80a 	bl	8002cc4 <HAL_ADC_GetValue>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	4a40      	ldr	r2, [pc, #256]	; (8001db4 <regulator_set_voltage+0x23c>)
 8001cb4:	4353      	muls	r3, r2
 8001cb6:	4940      	ldr	r1, [pc, #256]	; (8001db8 <regulator_set_voltage+0x240>)
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7fe fb61 	bl	8000380 <__udivsi3>
 8001cbe:	0003      	movs	r3, r0
								LL_ADC_RESOLUTION_12B) * 2;
 8001cc0:	005b      	lsls	r3, r3, #1
				adc_curr_value +=
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	2216      	movs	r2, #22
 8001cc6:	18bb      	adds	r3, r7, r2
 8001cc8:	18ba      	adds	r2, r7, r2
 8001cca:	8812      	ldrh	r2, [r2, #0]
 8001ccc:	188a      	adds	r2, r1, r2
 8001cce:	801a      	strh	r2, [r3, #0]
			for (int16_t j = 0; j < 10; j++) {
 8001cd0:	2112      	movs	r1, #18
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	5e9b      	ldrsh	r3, [r3, r2]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	5e9b      	ldrsh	r3, [r3, r2]
 8001cea:	2b09      	cmp	r3, #9
 8001cec:	ddb8      	ble.n	8001c60 <regulator_set_voltage+0xe8>

			}

			/* Calculate average of values. */
			adc_curr_value /= 10;
 8001cee:	2516      	movs	r5, #22
 8001cf0:	197c      	adds	r4, r7, r5
 8001cf2:	197b      	adds	r3, r7, r5
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	210a      	movs	r1, #10
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7fe fb41 	bl	8000380 <__udivsi3>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	8023      	strh	r3, [r4, #0]

			/* Check if previous value is closer than the current one. */
			if (abs(output_voltage - adc_prev_value)
 8001d02:	230e      	movs	r3, #14
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	17d9      	asrs	r1, r3, #31
 8001d0e:	185a      	adds	r2, r3, r1
 8001d10:	404a      	eors	r2, r1
					< abs(output_voltage - adc_curr_value)) {
 8001d12:	197b      	adds	r3, r7, r5
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	1acb      	subs	r3, r1, r3
 8001d1a:	17d9      	asrs	r1, r3, #31
 8001d1c:	185b      	adds	r3, r3, r1
 8001d1e:	404b      	eors	r3, r1
			if (abs(output_voltage - adc_prev_value)
 8001d20:	429a      	cmp	r2, r3
 8001d22:	da23      	bge.n	8001d6c <regulator_set_voltage+0x1f4>

				/* Set the last closer value. */
				spi_write_data_buf[0] = potentiometer_value_est + 1 + i;
 8001d24:	2314      	movs	r3, #20
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	230d      	movs	r3, #13
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	18d3      	adds	r3, r2, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	2408      	movs	r4, #8
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	701a      	strb	r2, [r3, #0]

				/* SPI transmit data. */
				HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, RESET);
 8001d40:	23a0      	movs	r3, #160	; 0xa0
 8001d42:	05db      	lsls	r3, r3, #23
 8001d44:	2200      	movs	r2, #0
 8001d46:	2110      	movs	r1, #16
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f002 fac3 	bl	80042d4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, spi_write_data_buf, 1, HAL_MAX_DELAY);
 8001d4e:	2301      	movs	r3, #1
 8001d50:	425b      	negs	r3, r3
 8001d52:	1939      	adds	r1, r7, r4
 8001d54:	4815      	ldr	r0, [pc, #84]	; (8001dac <regulator_set_voltage+0x234>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	f005 f986 	bl	8007068 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, SET);
 8001d5c:	23a0      	movs	r3, #160	; 0xa0
 8001d5e:	05db      	lsls	r3, r3, #23
 8001d60:	2201      	movs	r2, #1
 8001d62:	2110      	movs	r1, #16
 8001d64:	0018      	movs	r0, r3
 8001d66:	f002 fab5 	bl	80042d4 <HAL_GPIO_WritePin>
				break;
 8001d6a:	e00f      	b.n	8001d8c <regulator_set_voltage+0x214>
		for (int16_t i = 2; i > -3; i--) {
 8001d6c:	2114      	movs	r1, #20
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	5e9b      	ldrsh	r3, [r3, r2]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	2314      	movs	r3, #20
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2200      	movs	r2, #0
 8001d84:	5e9b      	ldrsh	r3, [r3, r2]
 8001d86:	3302      	adds	r3, #2
 8001d88:	db00      	blt.n	8001d8c <regulator_set_voltage+0x214>
 8001d8a:	e737      	b.n	8001bfc <regulator_set_voltage+0x84>
			}

		}

		/* Stop ADC. */
		HAL_ADC_Stop(&hadc1);
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <regulator_set_voltage+0x224>)
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 fee4 	bl	8002b5c <HAL_ADC_Stop>

	}
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b006      	add	sp, #24
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	20004148 	.word	0x20004148
 8001da0:	447a0000 	.word	0x447a0000
 8001da4:	bfaed917 	.word	0xbfaed917
 8001da8:	4388f1ec 	.word	0x4388f1ec
 8001dac:	200043f4 	.word	0x200043f4
 8001db0:	200043f0 	.word	0x200043f0
 8001db4:	00000ce4 	.word	0x00000ce4
 8001db8:	00000fff 	.word	0x00000fff

08001dbc <HAL_ADC_ConvCpltCallback>:
/**
 * @brief  Function implementing ADC conversion complete callback.
 * @param  hadc: ADC handle.
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

	adc_conversion_complete_flag = 1;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]

}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	200043f0 	.word	0x200043f0

08001dd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <MX_SPI1_Init+0x78>)
 8001de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001de4:	2282      	movs	r2, #130	; 0x82
 8001de6:	0052      	lsls	r2, r2, #1
 8001de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001df2:	22f0      	movs	r2, #240	; 0xf0
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e0e:	2220      	movs	r2, #32
 8001e10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e26:	2207      	movs	r2, #7
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e32:	2208      	movs	r2, #8
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f005 f85d 	bl	8006ef8 <HAL_SPI_Init>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d001      	beq.n	8001e46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e42:	f7ff fd5b 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200043f4 	.word	0x200043f4
 8001e50:	40013000 	.word	0x40013000

08001e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b08b      	sub	sp, #44	; 0x2c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	2414      	movs	r4, #20
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	0018      	movs	r0, r3
 8001e62:	2314      	movs	r3, #20
 8001e64:	001a      	movs	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f011 ffd8 	bl	8013e1c <memset>
  if(spiHandle->Instance==SPI1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_SPI_MspInit+0x8c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d130      	bne.n	8001ed8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_SPI_MspInit+0x90>)
 8001e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_SPI_MspInit+0x90>)
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0149      	lsls	r1, r1, #5
 8001e80:	430a      	orrs	r2, r1
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_SPI_MspInit+0x90>)
 8001e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	015b      	lsls	r3, r3, #5
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_SPI_MspInit+0x90>)
 8001e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_SPI_MspInit+0x90>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_SPI_MspInit+0x90>)
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001eaa:	0021      	movs	r1, r4
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	2206      	movs	r2, #6
 8001eb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	187a      	adds	r2, r7, r1
 8001ecc:	23a0      	movs	r3, #160	; 0xa0
 8001ece:	05db      	lsls	r3, r3, #23
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f002 f892 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b00b      	add	sp, #44	; 0x2c
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	40013000 	.word	0x40013000
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	0549      	lsls	r1, r1, #21
 8001f10:	430a      	orrs	r2, r1
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	055b      	lsls	r3, r3, #21
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001f22:	23c0      	movs	r3, #192	; 0xc0
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fae4 	bl	80024f4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b002      	add	sp, #8
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f40:	232b      	movs	r3, #43	; 0x2b
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_InitTick+0xf4>)
 8001f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_InitTick+0xf4>)
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	02c9      	lsls	r1, r1, #11
 8001f52:	430a      	orrs	r2, r1
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_InitTick+0xf4>)
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	02db      	lsls	r3, r3, #11
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f64:	230c      	movs	r3, #12
 8001f66:	18fa      	adds	r2, r7, r3
 8001f68:	2410      	movs	r4, #16
 8001f6a:	193b      	adds	r3, r7, r4
 8001f6c:	0011      	movs	r1, r2
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f004 fd5c 	bl	8006a2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f80:	f004 fd3e 	bl	8006a00 <HAL_RCC_GetPCLK1Freq>
 8001f84:	0003      	movs	r3, r0
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f88:	e004      	b.n	8001f94 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f8a:	f004 fd39 	bl	8006a00 <HAL_RCC_GetPCLK1Freq>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	4926      	ldr	r1, [pc, #152]	; (8002030 <HAL_InitTick+0xf8>)
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7fe f9f1 	bl	8000380 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_InitTick+0xfc>)
 8001fa6:	4a24      	ldr	r2, [pc, #144]	; (8002038 <HAL_InitTick+0x100>)
 8001fa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_InitTick+0xfc>)
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_InitTick+0x104>)
 8001fae:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_InitTick+0xfc>)
 8001fb2:	6a3a      	ldr	r2, [r7, #32]
 8001fb4:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_InitTick+0xfc>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_InitTick+0xfc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_InitTick+0xfc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001fc8:	252b      	movs	r5, #43	; 0x2b
 8001fca:	197c      	adds	r4, r7, r5
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_InitTick+0xfc>)
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f005 fb20 	bl	8007614 <HAL_TIM_Base_Init>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001fd8:	197b      	adds	r3, r7, r5
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11e      	bne.n	800201e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001fe0:	197c      	adds	r4, r7, r5
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_InitTick+0xfc>)
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f005 fb75 	bl	80076d4 <HAL_TIM_Base_Start_IT>
 8001fea:	0003      	movs	r3, r0
 8001fec:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001fee:	197b      	adds	r3, r7, r5
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d113      	bne.n	800201e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8001ff6:	2016      	movs	r0, #22
 8001ff8:	f001 fce7 	bl	80039ca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d809      	bhi.n	8002016 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, TickPriority, 0U);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	0019      	movs	r1, r3
 8002008:	2016      	movs	r0, #22
 800200a:	f001 fcc9 	bl	80039a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_InitTick+0x108>)
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e003      	b.n	800201e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8002016:	232b      	movs	r3, #43	; 0x2b
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800201e:	232b      	movs	r3, #43	; 0x2b
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b00c      	add	sp, #48	; 0x30
 800202a:	bdb0      	pop	{r4, r5, r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	000f4240 	.word	0x000f4240
 8002034:	20004458 	.word	0x20004458
 8002038:	40014800 	.word	0x40014800
 800203c:	000003e7 	.word	0x000003e7
 8002040:	20000004 	.word	0x20000004

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <USB_UCPD1_2_IRQHandler+0x14>)
 8002056:	0018      	movs	r0, r3
 8002058:	f002 fb04 	bl	8004664 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	20004550 	.word	0x20004550

08002068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <DMA1_Channel1_IRQHandler+0x14>)
 800206e:	0018      	movs	r0, r3
 8002070:	f001 fe56 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	200044f0 	.word	0x200044f0

08002080 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <ADC1_COMP_IRQHandler+0x14>)
 8002086:	0018      	movs	r0, r3
 8002088:	f000 fe28 	bl	8002cdc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	20004148 	.word	0x20004148

08002098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <TIM2_IRQHandler+0x14>)
 800209e:	0018      	movs	r0, r3
 80020a0:	f005 fec8 	bl	8007e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	200044a4 	.word	0x200044a4

080020b0 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <TIM17_FDCAN_IT1_IRQHandler+0x14>)
 80020b6:	0018      	movs	r0, r3
 80020b8:	f005 febc 	bl	8007e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	20004458 	.word	0x20004458

080020c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020da:	231c      	movs	r3, #28
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	0018      	movs	r0, r3
 80020e0:	230c      	movs	r3, #12
 80020e2:	001a      	movs	r2, r3
 80020e4:	2100      	movs	r1, #0
 80020e6:	f011 fe99 	bl	8013e1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ea:	003b      	movs	r3, r7
 80020ec:	0018      	movs	r0, r3
 80020ee:	231c      	movs	r3, #28
 80020f0:	001a      	movs	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	f011 fe92 	bl	8013e1c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <MX_TIM2_Init+0xb8>)
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	05d2      	lsls	r2, r2, #23
 80020fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <MX_TIM2_Init+0xb8>)
 8002102:	2200      	movs	r2, #0
 8002104:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_TIM2_Init+0xb8>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_TIM2_Init+0xb8>)
 800210e:	224f      	movs	r2, #79	; 0x4f
 8002110:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_TIM2_Init+0xb8>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_TIM2_Init+0xb8>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_TIM2_Init+0xb8>)
 8002120:	0018      	movs	r0, r3
 8002122:	f005 fb39 	bl	8007798 <HAL_TIM_PWM_Init>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800212a:	f7ff fbe7 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	211c      	movs	r1, #28
 8002130:	187b      	adds	r3, r7, r1
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213c:	187a      	adds	r2, r7, r1
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_TIM2_Init+0xb8>)
 8002140:	0011      	movs	r1, r2
 8002142:	0018      	movs	r0, r3
 8002144:	f006 fcfa 	bl	8008b3c <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800214c:	f7ff fbd6 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	003b      	movs	r3, r7
 8002152:	2260      	movs	r2, #96	; 0x60
 8002154:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002156:	003b      	movs	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215c:	003b      	movs	r3, r7
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002162:	003b      	movs	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002168:	0039      	movs	r1, r7
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_TIM2_Init+0xb8>)
 800216c:	2208      	movs	r2, #8
 800216e:	0018      	movs	r0, r3
 8002170:	f005 ff68 	bl	8008044 <HAL_TIM_PWM_ConfigChannel>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d001      	beq.n	800217c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8002178:	f7ff fbc0 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <MX_TIM2_Init+0xb8>)
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f85a 	bl	8002238 <HAL_TIM_MspPostInit>

}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b00a      	add	sp, #40	; 0x28
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200044a4 	.word	0x200044a4

08002190 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	05db      	lsls	r3, r3, #23
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d13f      	bne.n	8002224 <HAL_TIM_PWM_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_TIM_PWM_MspInit+0x9c>)
 80021a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_TIM_PWM_MspInit+0x9c>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_TIM_PWM_MspInit+0x9c>)
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021be:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_TIM_PWM_MspInit+0xa4>)
 80021c0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021c4:	221c      	movs	r2, #28
 80021c6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021ca:	2210      	movs	r2, #16
 80021cc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021f2:	22c0      	movs	r2, #192	; 0xc0
 80021f4:	0192      	lsls	r2, r2, #6
 80021f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 80021fa:	0018      	movs	r0, r3
 80021fc:	f001 fbf6 	bl	80039ec <HAL_DMA_Init>
 8002200:	1e03      	subs	r3, r0, #0
 8002202:	d001      	beq.n	8002208 <HAL_TIM_PWM_MspInit+0x78>
    {
      Error_Handler();
 8002204:	f7ff fb7a 	bl	80018fc <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_TIM_PWM_MspInit+0xa0>)
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	200f      	movs	r0, #15
 800221a:	f001 fbc1 	bl	80039a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800221e:	200f      	movs	r0, #15
 8002220:	f001 fbd3 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	200044f0 	.word	0x200044f0
 8002234:	40020008 	.word	0x40020008

08002238 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	240c      	movs	r4, #12
 8002242:	193b      	adds	r3, r7, r4
 8002244:	0018      	movs	r0, r3
 8002246:	2314      	movs	r3, #20
 8002248:	001a      	movs	r2, r3
 800224a:	2100      	movs	r1, #0
 800224c:	f011 fde6 	bl	8013e1c <memset>
  if(timHandle->Instance==TIM2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	05db      	lsls	r3, r3, #23
 8002258:	429a      	cmp	r2, r3
 800225a:	d122      	bne.n	80022a2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_TIM_MspPostInit+0x74>)
 800225e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_TIM_MspPostInit+0x74>)
 8002262:	2102      	movs	r1, #2
 8002264:	430a      	orrs	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_TIM_MspPostInit+0x74>)
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	2202      	movs	r2, #2
 800226e:	4013      	ands	r3, r2
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002274:	193b      	adds	r3, r7, r4
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	00d2      	lsls	r2, r2, #3
 800227a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	0021      	movs	r1, r4
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2202      	movs	r2, #2
 8002282:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	187b      	adds	r3, r7, r1
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	187b      	adds	r3, r7, r1
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002290:	187b      	adds	r3, r7, r1
 8002292:	2202      	movs	r2, #2
 8002294:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	187b      	adds	r3, r7, r1
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <HAL_TIM_MspPostInit+0x78>)
 800229a:	0019      	movs	r1, r3
 800229c:	0010      	movs	r0, r2
 800229e:	f001 fead 	bl	8003ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b009      	add	sp, #36	; 0x24
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	40021000 	.word	0x40021000
 80022b0:	50000400 	.word	0x50000400

080022b4 <MX_USB_DRD_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_DRD_FS;

/* USB_DRD_FS init function */

void MX_USB_DRD_FS_PCD_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <MX_USB_DRD_FS_PCD_Init+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022c0:	2208      	movs	r2, #8
 80022c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022c6:	2208      	movs	r2, #8
 80022c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022d2:	2202      	movs	r2, #2
 80022d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8002302:	0018      	movs	r0, r3
 8002304:	f002 f86a 	bl	80043dc <HAL_PCD_Init>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	d001      	beq.n	8002310 <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 800230c:	f7ff faf6 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	20004550 	.word	0x20004550
 800231c:	40005c00 	.word	0x40005c00

08002320 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b099      	sub	sp, #100	; 0x64
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002328:	2414      	movs	r4, #20
 800232a:	193b      	adds	r3, r7, r4
 800232c:	0018      	movs	r0, r3
 800232e:	234c      	movs	r3, #76	; 0x4c
 8002330:	001a      	movs	r2, r3
 8002332:	2100      	movs	r1, #0
 8002334:	f011 fd72 	bl	8013e1c <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <HAL_PCD_MspInit+0xb4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d143      	bne.n	80023ca <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002342:	193b      	adds	r3, r7, r4
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	0452      	lsls	r2, r2, #17
 8002348:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800234a:	193b      	adds	r3, r7, r4
 800234c:	2200      	movs	r2, #0
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002350:	193b      	adds	r3, r7, r4
 8002352:	0018      	movs	r0, r3
 8002354:	f004 fb94 	bl	8006a80 <HAL_RCCEx_PeriphCLKConfig>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d001      	beq.n	8002360 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800235c:	f7ff face 	bl	80018fc <Error_Handler>
    }

    /* USB_DRD_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 8002362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	0189      	lsls	r1, r1, #6
 800236a:	430a      	orrs	r2, r1
 800236c:	63da      	str	r2, [r3, #60]	; 0x3c
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 8002370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 800237e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	055b      	lsls	r3, r3, #21
 8002384:	4013      	ands	r3, r2
 8002386:	d116      	bne.n	80023b6 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 800238a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	0549      	lsls	r1, r1, #21
 8002392:	430a      	orrs	r2, r1
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 8002398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	055b      	lsls	r3, r3, #21
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80023a4:	f003 fdde 	bl	8005f64 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 80023aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_PCD_MspInit+0xb8>)
 80023ae:	490b      	ldr	r1, [pc, #44]	; (80023dc <HAL_PCD_MspInit+0xbc>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80023b4:	e001      	b.n	80023ba <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80023b6:	f003 fdd5 	bl	8005f64 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	2008      	movs	r0, #8
 80023c0:	f001 faee 	bl	80039a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80023c4:	2008      	movs	r0, #8
 80023c6:	f001 fb00 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b019      	add	sp, #100	; 0x64
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	40005c00 	.word	0x40005c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	efffffff 	.word	0xefffffff

080023e0 <Reset_Handler>:
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <LoopForever+0x2>)
 80023e2:	4685      	mov	sp, r0
 80023e4:	f7ff fe70 	bl	80020c8 <SystemInit>
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <LoopForever+0x6>)
 80023ea:	490d      	ldr	r1, [pc, #52]	; (8002420 <LoopForever+0xa>)
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <LoopForever+0xe>)
 80023ee:	2300      	movs	r3, #0
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:
 80023f2:	58d4      	ldr	r4, [r2, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:
 80023f8:	18c4      	adds	r4, r0, r3
 80023fa:	428c      	cmp	r4, r1
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <LoopForever+0x12>)
 8002400:	4c0a      	ldr	r4, [pc, #40]	; (800242c <LoopForever+0x16>)
 8002402:	2300      	movs	r3, #0
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:
 800240a:	42a2      	cmp	r2, r4
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>
 800240e:	f011 fd13 	bl	8013e38 <__libc_init_array>
 8002412:	f7ff f9eb 	bl	80017ec <main>

08002416 <LoopForever>:
 8002416:	e7fe      	b.n	8002416 <LoopForever>
 8002418:	20024000 	.word	0x20024000
 800241c:	20000000 	.word	0x20000000
 8002420:	200000c4 	.word	0x200000c4
 8002424:	08014c00 	.word	0x08014c00
 8002428:	200000c4 	.word	0x200000c4
 800242c:	200056c4 	.word	0x200056c4

08002430 <CEC_IRQHandler>:
 8002430:	e7fe      	b.n	8002430 <CEC_IRQHandler>
	...

08002434 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_Init+0x3c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_Init+0x3c>)
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	0049      	lsls	r1, r1, #1
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244e:	2003      	movs	r0, #3
 8002450:	f7ff fd72 	bl	8001f38 <HAL_InitTick>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d003      	beq.n	8002460 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e001      	b.n	8002464 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002460:	f7ff fd42 	bl	8001ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781b      	ldrb	r3, [r3, #0]
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40022000 	.word	0x40022000

08002474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_IncTick+0x1c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	001a      	movs	r2, r3
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_IncTick+0x20>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	18d2      	adds	r2, r2, r3
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_IncTick+0x20>)
 8002486:	601a      	str	r2, [r3, #0]
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	20000008 	.word	0x20000008
 8002494:	20004830 	.word	0x20004830

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_GetTick+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20004830 	.word	0x20004830

080024ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff fff0 	bl	8002498 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3301      	adds	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_Delay+0x44>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	001a      	movs	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	f7ff ffe0 	bl	8002498 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d8f7      	bhi.n	80024d4 <HAL_Delay+0x28>
  {
  }
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	20000008 	.word	0x20000008

080024f4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002502:	4013      	ands	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	40010000 	.word	0x40010000
 800251c:	fffff9ff 	.word	0xfffff9ff

08002520 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002530:	401a      	ands	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b002      	add	sp, #8
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	fe3fffff 	.word	0xfe3fffff

08002548 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	23e0      	movs	r3, #224	; 0xe0
 8002556:	045b      	lsls	r3, r3, #17
 8002558:	4013      	ands	r3, r2
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}

08002562 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	2104      	movs	r1, #4
 8002576:	400a      	ands	r2, r1
 8002578:	2107      	movs	r1, #7
 800257a:	4091      	lsls	r1, r2
 800257c:	000a      	movs	r2, r1
 800257e:	43d2      	mvns	r2, r2
 8002580:	401a      	ands	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2104      	movs	r1, #4
 8002586:	400b      	ands	r3, r1
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4099      	lsls	r1, r3
 800258c:	000b      	movs	r3, r1
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}

0800259c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	2104      	movs	r1, #4
 80025ae:	400a      	ands	r2, r1
 80025b0:	2107      	movs	r1, #7
 80025b2:	4091      	lsls	r1, r2
 80025b4:	000a      	movs	r2, r1
 80025b6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2104      	movs	r1, #4
 80025bc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025be:	40da      	lsrs	r2, r3
 80025c0:	0013      	movs	r3, r2
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b002      	add	sp, #8
 80025c8:	bd80      	pop	{r7, pc}

080025ca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	23c0      	movs	r3, #192	; 0xc0
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	4013      	ands	r3, r2
 80025dc:	d101      	bne.n	80025e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}

080025ec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	211f      	movs	r1, #31
 8002600:	400a      	ands	r2, r1
 8002602:	210f      	movs	r1, #15
 8002604:	4091      	lsls	r1, r2
 8002606:	000a      	movs	r2, r1
 8002608:	43d2      	mvns	r2, r2
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	210f      	movs	r1, #15
 8002612:	4019      	ands	r1, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	201f      	movs	r0, #31
 8002618:	4003      	ands	r3, r0
 800261a:	4099      	lsls	r1, r3
 800261c:	000b      	movs	r3, r1
 800261e:	431a      	orrs	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bd80      	pop	{r7, pc}

0800262c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	035b      	lsls	r3, r3, #13
 800263e:	0b5b      	lsrs	r3, r3, #13
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}

0800264e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	0352      	lsls	r2, r2, #13
 8002660:	0b52      	lsrs	r2, r2, #13
 8002662:	43d2      	mvns	r2, r2
 8002664:	401a      	ands	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}

08002672 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2203      	movs	r2, #3
 8002680:	4013      	ands	r3, r2
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	0212      	lsls	r2, r2, #8
 80026a0:	43d2      	mvns	r2, r2
 80026a2:	401a      	ands	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	400b      	ands	r3, r1
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	07ffff00 	.word	0x07ffff00

080026c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	0552      	lsls	r2, r2, #21
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b002      	add	sp, #8
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	6fffffe8 	.word	0x6fffffe8

080026ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	055b      	lsls	r3, r3, #21
 80026fc:	401a      	ands	r2, r3
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	055b      	lsls	r3, r3, #21
 8002702:	429a      	cmp	r2, r3
 8002704:	d101      	bne.n	800270a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800270a:	2300      	movs	r3, #0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <LL_ADC_Enable+0x20>)
 8002722:	4013      	ands	r3, r2
 8002724:	2201      	movs	r2, #1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}
 8002734:	7fffffe8 	.word	0x7fffffe8

08002738 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <LL_ADC_Disable+0x20>)
 8002746:	4013      	ands	r3, r2
 8002748:	2202      	movs	r2, #2
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}
 8002758:	7fffffe8 	.word	0x7fffffe8

0800275c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2201      	movs	r2, #1
 800276a:	4013      	ands	r3, r2
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <LL_ADC_IsEnabled+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_ADC_IsEnabled+0x1a>
 8002774:	2300      	movs	r3, #0
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}

0800277e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d101      	bne.n	8002796 <LL_ADC_IsDisableOngoing+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_IsDisableOngoing+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <LL_ADC_REG_StartConversion+0x20>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	2204      	movs	r2, #4
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	7fffffe8 	.word	0x7fffffe8

080027c4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <LL_ADC_REG_StopConversion+0x20>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	2210      	movs	r2, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	7fffffe8 	.word	0x7fffffe8

080027e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2204      	movs	r2, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d101      	bne.n	8002800 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b002      	add	sp, #8
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002814:	231f      	movs	r3, #31
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e17f      	b.n	8002b32 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fe fe65 	bl	800150c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2254      	movs	r2, #84	; 0x54
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff49 	bl	80026ec <LL_ADC_IsInternalRegulatorEnabled>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d115      	bne.n	800288a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ff2e 	bl	80026c4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002868:	4bb4      	ldr	r3, [pc, #720]	; (8002b3c <HAL_ADC_Init+0x330>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	49b4      	ldr	r1, [pc, #720]	; (8002b40 <HAL_ADC_Init+0x334>)
 800286e:	0018      	movs	r0, r3
 8002870:	f7fd fd86 	bl	8000380 <__udivsi3>
 8002874:	0003      	movs	r3, r0
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800287c:	e002      	b.n	8002884 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3b01      	subs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff ff2c 	bl	80026ec <LL_ADC_IsInternalRegulatorEnabled>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d10f      	bne.n	80028b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	2210      	movs	r2, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	2201      	movs	r2, #1
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7ff ff93 	bl	80027e8 <LL_ADC_REG_IsConversionOngoing>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	2210      	movs	r2, #16
 80028cc:	4013      	ands	r3, r2
 80028ce:	d000      	beq.n	80028d2 <HAL_ADC_Init+0xc6>
 80028d0:	e122      	b.n	8002b18 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d000      	beq.n	80028da <HAL_ADC_Init+0xce>
 80028d8:	e11e      	b.n	8002b18 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	4a99      	ldr	r2, [pc, #612]	; (8002b44 <HAL_ADC_Init+0x338>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	2202      	movs	r2, #2
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7ff ff34 	bl	800275c <LL_ADC_IsEnabled>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d000      	beq.n	80028fa <HAL_ADC_Init+0xee>
 80028f8:	e0ad      	b.n	8002a56 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7e1b      	ldrb	r3, [r3, #24]
 8002902:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002904:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7e5b      	ldrb	r3, [r3, #25]
 800290a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800290c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e9b      	ldrb	r3, [r3, #26]
 8002912:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002914:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_ADC_Init+0x118>
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	015b      	lsls	r3, r3, #5
 8002922:	e000      	b.n	8002926 <HAL_ADC_Init+0x11a>
 8002924:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002926:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800292c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	da04      	bge.n	8002940 <HAL_ADC_Init+0x134>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	e001      	b.n	8002944 <HAL_ADC_Init+0x138>
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002944:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	5c5b      	ldrb	r3, [r3, r1]
 800294c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800294e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	5c9b      	ldrb	r3, [r3, r2]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d115      	bne.n	800298c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7e9b      	ldrb	r3, [r3, #26]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	0252      	lsls	r2, r2, #9
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e00b      	b.n	800298c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	2220      	movs	r2, #32
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2201      	movs	r2, #1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002998:	23e0      	movs	r3, #224	; 0xe0
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80029a2:	4313      	orrs	r3, r2
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_ADC_Init+0x33c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0f9b      	lsrs	r3, r3, #30
 80029c6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029cc:	4313      	orrs	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	223c      	movs	r2, #60	; 0x3c
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	0f9b      	lsrs	r3, r3, #30
 80029e4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029ea:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80029f0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80029f6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	2201      	movs	r2, #1
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_ADC_Init+0x340>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	23c0      	movs	r3, #192	; 0xc0
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d018      	beq.n	8002a56 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d012      	beq.n	8002a56 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	061b      	lsls	r3, r3, #24
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d00c      	beq.n	8002a56 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002a3c:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_ADC_Init+0x344>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <HAL_ADC_Init+0x348>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	23f0      	movs	r3, #240	; 0xf0
 8002a4c:	039b      	lsls	r3, r3, #14
 8002a4e:	401a      	ands	r2, r3
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_ADC_Init+0x344>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	001a      	movs	r2, r3
 8002a60:	2100      	movs	r1, #0
 8002a62:	f7ff fd7e 	bl	8002562 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	493a      	ldr	r1, [pc, #232]	; (8002b58 <HAL_ADC_Init+0x34c>)
 8002a70:	001a      	movs	r2, r3
 8002a72:	f7ff fd76 	bl	8002562 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2110      	movs	r1, #16
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	e018      	b.n	8002ac4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	039b      	lsls	r3, r3, #14
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d112      	bne.n	8002ac4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	221c      	movs	r2, #28
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2100      	movs	r1, #0
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7ff fd66 	bl	800259c <LL_ADC_GetSamplingTimeCommonChannels>
 8002ad0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d10b      	bne.n	8002af2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	2201      	movs	r2, #1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002af0:	e01c      	b.n	8002b2c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	2212      	movs	r2, #18
 8002af8:	4393      	bics	r3, r2
 8002afa:	2210      	movs	r2, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2201      	movs	r2, #1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b0e:	231f      	movs	r3, #31
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b16:	e009      	b.n	8002b2c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b24:	231f      	movs	r3, #31
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b008      	add	sp, #32
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	00030d40 	.word	0x00030d40
 8002b44:	fffffefd 	.word	0xfffffefd
 8002b48:	ffde0201 	.word	0xffde0201
 8002b4c:	1ffffc02 	.word	0x1ffffc02
 8002b50:	40012708 	.word	0x40012708
 8002b54:	ffc3ffff 	.word	0xffc3ffff
 8002b58:	07ffff04 	.word	0x07ffff04

08002b5c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2254      	movs	r2, #84	; 0x54
 8002b68:	5c9b      	ldrb	r3, [r3, r2]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Stop+0x16>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e029      	b.n	8002bc6 <HAL_ADC_Stop+0x6a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2254      	movs	r2, #84	; 0x54
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002b7a:	250f      	movs	r5, #15
 8002b7c:	197c      	adds	r4, r7, r5
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 fbab 	bl	80032dc <ADC_ConversionStop>
 8002b86:	0003      	movs	r3, r0
 8002b88:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b8a:	197b      	adds	r3, r7, r5
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d112      	bne.n	8002bb8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b92:	197c      	adds	r4, r7, r5
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fc68 	bl	800346c <ADC_Disable>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ba0:	197b      	adds	r3, r7, r5
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_ADC_Stop+0x74>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2254      	movs	r2, #84	; 0x54
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002bc0:	230f      	movs	r3, #15
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	fffffefe 	.word	0xfffffefe

08002bd4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7ff fe01 	bl	80027e8 <LL_ADC_REG_IsConversionOngoing>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d15f      	bne.n	8002caa <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2254      	movs	r2, #84	; 0x54
 8002bee:	5c9b      	ldrb	r3, [r3, r2]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_Start_IT+0x24>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e05f      	b.n	8002cb8 <HAL_ADC_Start_IT+0xe4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2254      	movs	r2, #84	; 0x54
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c00:	250f      	movs	r5, #15
 8002c02:	197c      	adds	r4, r7, r5
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fbaa 	bl	8003360 <ADC_Enable>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c10:	197b      	adds	r3, r7, r5
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d143      	bne.n	8002ca0 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	4a28      	ldr	r2, [pc, #160]	; (8002cc0 <HAL_ADC_Start_IT+0xec>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	221c      	movs	r2, #28
 8002c36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2254      	movs	r2, #84	; 0x54
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	211c      	movs	r1, #28
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d108      	bne.n	8002c6a <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2108      	movs	r1, #8
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
          break;
 8002c68:	e008      	b.n	8002c7c <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2104      	movs	r1, #4
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
          break;
 8002c7a:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2110      	movs	r1, #16
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff fd81 	bl	80027a0 <LL_ADC_REG_StartConversion>
 8002c9e:	e008      	b.n	8002cb2 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2254      	movs	r2, #84	; 0x54
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	5499      	strb	r1, [r3, r2]
 8002ca8:	e003      	b.n	8002cb2 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002caa:	230f      	movs	r3, #15
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2202      	movs	r2, #2
 8002cb0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002cb2:	230f      	movs	r3, #15
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc0:	fffff0fe 	.word	0xfffff0fe

08002cc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d017      	beq.n	8002d30 <HAL_ADC_IRQHandler+0x54>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d106      	bne.n	8002d20 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 fda4 	bl	8003870 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2204      	movs	r2, #4
 8002d34:	4013      	ands	r3, r2
 8002d36:	d003      	beq.n	8002d40 <HAL_ADC_IRQHandler+0x64>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d107      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2208      	movs	r2, #8
 8002d44:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d46:	d04d      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d049      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	2210      	movs	r2, #16
 8002d56:	4013      	ands	r3, r2
 8002d58:	d106      	bne.n	8002d68 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7ff fc2c 	bl	80025ca <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d02e      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7e9b      	ldrb	r3, [r3, #26]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d12a      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d123      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff fd29 	bl	80027e8 <LL_ADC_REG_IsConversionOngoing>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d110      	bne.n	8002dbc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	210c      	movs	r1, #12
 8002da6:	438a      	bics	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a56      	ldr	r2, [pc, #344]	; (8002f08 <HAL_ADC_IRQHandler+0x22c>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	2201      	movs	r2, #1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	659a      	str	r2, [r3, #88]	; 0x58
 8002dba:	e00b      	b.n	8002dd4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2201      	movs	r2, #1
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fe fff0 	bl	8001dbc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	220c      	movs	r2, #12
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	4013      	ands	r3, r2
 8002dea:	d012      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x136>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	4013      	ands	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	0252      	lsls	r2, r2, #9
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 f881 	bl	8002f0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d014      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x16a>
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d00f      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	0292      	lsls	r2, r2, #10
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fd0a 	bl	8003850 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0052      	lsls	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d014      	beq.n	8002e7a <HAL_ADC_IRQHandler+0x19e>
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	02d2      	lsls	r2, r2, #11
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 fcf8 	bl	8003860 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d02b      	beq.n	8002eda <HAL_ADC_IRQHandler+0x1fe>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2210      	movs	r2, #16
 8002e86:	4013      	ands	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e008      	b.n	8002eaa <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff fbe8 	bl	8002672 <LL_ADC_REG_GetDMATransfer>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d110      	bne.n	8002ed2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	00d2      	lsls	r2, r2, #3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 f825 	bl	8002f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	019b      	lsls	r3, r3, #6
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d00d      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x224>
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	4013      	ands	r3, r2
 8002eec:	d008      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 fcc5 	bl	8003880 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	0192      	lsls	r2, r2, #6
 8002efe:	601a      	str	r2, [r3, #0]
  }
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b006      	add	sp, #24
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	fffffefe 	.word	0xfffffefe

08002f0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f36:	2317      	movs	r3, #23
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2254      	movs	r2, #84	; 0x54
 8002f46:	5c9b      	ldrb	r3, [r3, r2]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x24>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e1c0      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x3a6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2254      	movs	r2, #84	; 0x54
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff fc43 	bl	80027e8 <LL_ADC_REG_IsConversionOngoing>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d000      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x3c>
 8002f66:	e1a3      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d100      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x46>
 8002f70:	e143      	b.n	80031fa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f82:	4ac1      	ldr	r2, [pc, #772]	; (8003288 <HAL_ADC_ConfigChannel+0x35c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0019      	movs	r1, r3
 8002f92:	0010      	movs	r0, r2
 8002f94:	f7ff fb4a 	bl	800262c <LL_ADC_REG_SetSequencerChAdd>
 8002f98:	e0c9      	b.n	800312e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	211f      	movs	r1, #31
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	4099      	lsls	r1, r3
 8002faa:	000b      	movs	r3, r1
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	035b      	lsls	r3, r3, #13
 8002fb8:	0b5b      	lsrs	r3, r3, #13
 8002fba:	d105      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x9c>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	221f      	movs	r2, #31
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	e098      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d000      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0xa8>
 8002fd2:	e091      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x1cc>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d000      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0xb4>
 8002fde:	e089      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x1c8>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d000      	beq.n	8002fec <HAL_ADC_ConfigChannel+0xc0>
 8002fea:	e081      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1c4>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d000      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0xcc>
 8002ff6:	e079      	b.n	80030ec <HAL_ADC_ConfigChannel+0x1c0>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	4013      	ands	r3, r2
 8003000:	d000      	beq.n	8003004 <HAL_ADC_ConfigChannel+0xd8>
 8003002:	e071      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x1bc>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2220      	movs	r2, #32
 800300a:	4013      	ands	r3, r2
 800300c:	d000      	beq.n	8003010 <HAL_ADC_ConfigChannel+0xe4>
 800300e:	e069      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x1b8>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	d000      	beq.n	800301c <HAL_ADC_ConfigChannel+0xf0>
 800301a:	e061      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1b4>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	4013      	ands	r3, r2
 8003024:	d000      	beq.n	8003028 <HAL_ADC_ConfigChannel+0xfc>
 8003026:	e059      	b.n	80030dc <HAL_ADC_ConfigChannel+0x1b0>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d151      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x1ac>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d149      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x1a8>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4013      	ands	r3, r2
 800304a:	d141      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1a4>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	4013      	ands	r3, r2
 8003056:	d139      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1a0>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	015b      	lsls	r3, r3, #5
 8003060:	4013      	ands	r3, r2
 8003062:	d131      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x19c>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	4013      	ands	r3, r2
 800306e:	d129      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x198>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	01db      	lsls	r3, r3, #7
 8003078:	4013      	ands	r3, r2
 800307a:	d121      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x194>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	4013      	ands	r3, r2
 8003086:	d119      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x190>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	025b      	lsls	r3, r3, #9
 8003090:	4013      	ands	r3, r2
 8003092:	d111      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x18c>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4013      	ands	r3, r2
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x188>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	02db      	lsls	r3, r3, #11
 80030a8:	4013      	ands	r3, r2
 80030aa:	d001      	beq.n	80030b0 <HAL_ADC_ConfigChannel+0x184>
 80030ac:	2312      	movs	r3, #18
 80030ae:	e024      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030b0:	2300      	movs	r3, #0
 80030b2:	e022      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030b4:	2311      	movs	r3, #17
 80030b6:	e020      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030b8:	2310      	movs	r3, #16
 80030ba:	e01e      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030bc:	230f      	movs	r3, #15
 80030be:	e01c      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030c0:	230e      	movs	r3, #14
 80030c2:	e01a      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030c4:	230d      	movs	r3, #13
 80030c6:	e018      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030c8:	230c      	movs	r3, #12
 80030ca:	e016      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030cc:	230b      	movs	r3, #11
 80030ce:	e014      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030d0:	230a      	movs	r3, #10
 80030d2:	e012      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030d4:	2309      	movs	r3, #9
 80030d6:	e010      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030d8:	2308      	movs	r3, #8
 80030da:	e00e      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030dc:	2307      	movs	r3, #7
 80030de:	e00c      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030e0:	2306      	movs	r3, #6
 80030e2:	e00a      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030e4:	2305      	movs	r3, #5
 80030e6:	e008      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e006      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030ec:	2303      	movs	r3, #3
 80030ee:	e004      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e002      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1ce>
 80030f8:	2300      	movs	r3, #0
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	6852      	ldr	r2, [r2, #4]
 80030fe:	201f      	movs	r0, #31
 8003100:	4002      	ands	r2, r0
 8003102:	4093      	lsls	r3, r2
 8003104:	000a      	movs	r2, r1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	429a      	cmp	r2, r3
 800311a:	d808      	bhi.n	800312e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	001a      	movs	r2, r3
 800312a:	f7ff fa5f 	bl	80025ec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	001a      	movs	r2, r3
 800313c:	f7ff faa6 	bl	800268c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db00      	blt.n	800314a <HAL_ADC_ConfigChannel+0x21e>
 8003148:	e0bc      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800314a:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff f9fb 	bl	8002548 <LL_ADC_GetCommonPathInternalCh>
 8003152:	0003      	movs	r3, r0
 8003154:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <HAL_ADC_ConfigChannel+0x364>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d122      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003168:	d11d      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	0412      	lsls	r2, r2, #16
 8003170:	4313      	orrs	r3, r2
 8003172:	4a46      	ldr	r2, [pc, #280]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 8003174:	0019      	movs	r1, r3
 8003176:	0010      	movs	r0, r2
 8003178:	f7ff f9d2 	bl	8002520 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800317c:	4b45      	ldr	r3, [pc, #276]	; (8003294 <HAL_ADC_ConfigChannel+0x368>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4945      	ldr	r1, [pc, #276]	; (8003298 <HAL_ADC_ConfigChannel+0x36c>)
 8003182:	0018      	movs	r0, r3
 8003184:	f7fd f8fc 	bl	8000380 <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	0013      	movs	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	189b      	adds	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003196:	e002      	b.n	800319e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3b01      	subs	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031a4:	e08e      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3c      	ldr	r2, [pc, #240]	; (800329c <HAL_ADC_ConfigChannel+0x370>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10e      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	045b      	lsls	r3, r3, #17
 80031b6:	4013      	ands	r3, r2
 80031b8:	d109      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	0452      	lsls	r2, r2, #17
 80031c0:	4313      	orrs	r3, r2
 80031c2:	4a32      	ldr	r2, [pc, #200]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 80031c4:	0019      	movs	r1, r3
 80031c6:	0010      	movs	r0, r2
 80031c8:	f7ff f9aa 	bl	8002520 <LL_ADC_SetCommonPathInternalCh>
 80031cc:	e07a      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a33      	ldr	r2, [pc, #204]	; (80032a0 <HAL_ADC_ConfigChannel+0x374>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d000      	beq.n	80031da <HAL_ADC_ConfigChannel+0x2ae>
 80031d8:	e074      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	03db      	lsls	r3, r3, #15
 80031e0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031e2:	d000      	beq.n	80031e6 <HAL_ADC_ConfigChannel+0x2ba>
 80031e4:	e06e      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	03d2      	lsls	r2, r2, #15
 80031ec:	4313      	orrs	r3, r2
 80031ee:	4a27      	ldr	r2, [pc, #156]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 80031f0:	0019      	movs	r1, r3
 80031f2:	0010      	movs	r0, r2
 80031f4:	f7ff f994 	bl	8002520 <LL_ADC_SetCommonPathInternalCh>
 80031f8:	e064      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	429a      	cmp	r2, r3
 8003204:	d004      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800320a:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_ADC_ConfigChannel+0x35c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d107      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0019      	movs	r1, r3
 800321a:	0010      	movs	r0, r2
 800321c:	f7ff fa17 	bl	800264e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da4d      	bge.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 800322a:	0018      	movs	r0, r3
 800322c:	f7ff f98c 	bl	8002548 <LL_ADC_GetCommonPathInternalCh>
 8003230:	0003      	movs	r3, r0
 8003232:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <HAL_ADC_ConfigChannel+0x364>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d108      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_ADC_ConfigChannel+0x378>)
 8003242:	4013      	ands	r3, r2
 8003244:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 8003246:	0019      	movs	r1, r3
 8003248:	0010      	movs	r0, r2
 800324a:	f7ff f969 	bl	8002520 <LL_ADC_SetCommonPathInternalCh>
 800324e:	e039      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <HAL_ADC_ConfigChannel+0x370>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <HAL_ADC_ConfigChannel+0x37c>)
 800325e:	4013      	ands	r3, r2
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 8003262:	0019      	movs	r1, r3
 8003264:	0010      	movs	r0, r2
 8003266:	f7ff f95b 	bl	8002520 <LL_ADC_SetCommonPathInternalCh>
 800326a:	e02b      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <HAL_ADC_ConfigChannel+0x374>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d126      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <HAL_ADC_ConfigChannel+0x380>)
 800327a:	4013      	ands	r3, r2
 800327c:	4a03      	ldr	r2, [pc, #12]	; (800328c <HAL_ADC_ConfigChannel+0x360>)
 800327e:	0019      	movs	r1, r3
 8003280:	0010      	movs	r0, r2
 8003282:	f7ff f94d 	bl	8002520 <LL_ADC_SetCommonPathInternalCh>
 8003286:	e01d      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x398>
 8003288:	80000004 	.word	0x80000004
 800328c:	40012708 	.word	0x40012708
 8003290:	b0001000 	.word	0xb0001000
 8003294:	20000000 	.word	0x20000000
 8003298:	00030d40 	.word	0x00030d40
 800329c:	b8004000 	.word	0xb8004000
 80032a0:	b4002000 	.word	0xb4002000
 80032a4:	ff7fffff 	.word	0xff7fffff
 80032a8:	feffffff 	.word	0xfeffffff
 80032ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	2220      	movs	r2, #32
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032bc:	2317      	movs	r3, #23
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2254      	movs	r2, #84	; 0x54
 80032c8:	2100      	movs	r1, #0
 80032ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80032cc:	2317      	movs	r3, #23
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	781b      	ldrb	r3, [r3, #0]
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b006      	add	sp, #24
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)

080032dc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fa7d 	bl	80027e8 <LL_ADC_REG_IsConversionOngoing>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d031      	beq.n	8003356 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fa41 	bl	800277e <LL_ADC_IsDisableOngoing>
 80032fc:	1e03      	subs	r3, r0, #0
 80032fe:	d104      	bne.n	800330a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff fa5d 	bl	80027c4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800330a:	f7ff f8c5 	bl	8002498 <HAL_GetTick>
 800330e:	0003      	movs	r3, r0
 8003310:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003312:	e01a      	b.n	800334a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003314:	f7ff f8c0 	bl	8002498 <HAL_GetTick>
 8003318:	0002      	movs	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d913      	bls.n	800334a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2204      	movs	r2, #4
 800332a:	4013      	ands	r3, r2
 800332c:	d00d      	beq.n	800334a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	2210      	movs	r2, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	2201      	movs	r2, #1
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e006      	b.n	8003358 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2204      	movs	r2, #4
 8003352:	4013      	ands	r3, r2
 8003354:	d1de      	bne.n	8003314 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}

08003360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff f9f3 	bl	800275c <LL_ADC_IsEnabled>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d000      	beq.n	800337c <ADC_Enable+0x1c>
 800337a:	e069      	b.n	8003450 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4a36      	ldr	r2, [pc, #216]	; (800345c <ADC_Enable+0xfc>)
 8003384:	4013      	ands	r3, r2
 8003386:	d00d      	beq.n	80033a4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	2210      	movs	r2, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	2201      	movs	r2, #1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e056      	b.n	8003452 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff f9b3 	bl	8002714 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <ADC_Enable+0x100>)
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff f8c9 	bl	8002548 <LL_ADC_GetCommonPathInternalCh>
 80033b6:	0002      	movs	r2, r0
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	4013      	ands	r3, r2
 80033be:	d00f      	beq.n	80033e0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <ADC_Enable+0x104>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4928      	ldr	r1, [pc, #160]	; (8003468 <ADC_Enable+0x108>)
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fc ffda 	bl	8000380 <__udivsi3>
 80033cc:	0003      	movs	r3, r0
 80033ce:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80033d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033d2:	e002      	b.n	80033da <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f9      	bne.n	80033d4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7e5b      	ldrb	r3, [r3, #25]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d033      	beq.n	8003450 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80033e8:	f7ff f856 	bl	8002498 <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f0:	e027      	b.n	8003442 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff f9b0 	bl	800275c <LL_ADC_IsEnabled>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d104      	bne.n	800340a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff f985 	bl	8002714 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800340a:	f7ff f845 	bl	8002498 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d914      	bls.n	8003442 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	2b01      	cmp	r3, #1
 8003424:	d00d      	beq.n	8003442 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	2210      	movs	r2, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	2201      	movs	r2, #1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	2b01      	cmp	r3, #1
 800344e:	d1d0      	bne.n	80033f2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	80000017 	.word	0x80000017
 8003460:	40012708 	.word	0x40012708
 8003464:	20000000 	.word	0x20000000
 8003468:	00030d40 	.word	0x00030d40

0800346c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff f980 	bl	800277e <LL_ADC_IsDisableOngoing>
 800347e:	0003      	movs	r3, r0
 8003480:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	0018      	movs	r0, r3
 8003488:	f7ff f968 	bl	800275c <LL_ADC_IsEnabled>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d046      	beq.n	800351e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d143      	bne.n	800351e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2205      	movs	r2, #5
 800349e:	4013      	ands	r3, r2
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10d      	bne.n	80034c0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff f945 	bl	8002738 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2203      	movs	r2, #3
 80034b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034b6:	f7fe ffef 	bl	8002498 <HAL_GetTick>
 80034ba:	0003      	movs	r3, r0
 80034bc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034be:	e028      	b.n	8003512 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	2210      	movs	r2, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	2201      	movs	r2, #1
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e021      	b.n	8003520 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034dc:	f7fe ffdc 	bl	8002498 <HAL_GetTick>
 80034e0:	0002      	movs	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d913      	bls.n	8003512 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00d      	beq.n	8003512 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	2210      	movs	r2, #16
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	2201      	movs	r2, #1
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e006      	b.n	8003520 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2201      	movs	r2, #1
 800351a:	4013      	ands	r3, r2
 800351c:	d1de      	bne.n	80034dc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}

08003528 <LL_ADC_GetCommonClock>:
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	23f0      	movs	r3, #240	; 0xf0
 8003536:	039b      	lsls	r3, r3, #14
 8003538:	4013      	ands	r3, r2
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b002      	add	sp, #8
 8003540:	bd80      	pop	{r7, pc}

08003542 <LL_ADC_GetClock>:
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	0f9b      	lsrs	r3, r3, #30
 8003550:	079b      	lsls	r3, r3, #30
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}

0800355a <LL_ADC_SetCalibrationFactor>:
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	22b4      	movs	r2, #180	; 0xb4
 8003568:	589b      	ldr	r3, [r3, r2]
 800356a:	227f      	movs	r2, #127	; 0x7f
 800356c:	4393      	bics	r3, r2
 800356e:	001a      	movs	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	21b4      	movs	r1, #180	; 0xb4
 8003578:	505a      	str	r2, [r3, r1]
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}

08003582 <LL_ADC_GetCalibrationFactor>:
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	22b4      	movs	r2, #180	; 0xb4
 800358e:	589b      	ldr	r3, [r3, r2]
 8003590:	227f      	movs	r2, #127	; 0x7f
 8003592:	4013      	ands	r3, r2
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <LL_ADC_Enable>:
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <LL_ADC_Enable+0x20>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	2201      	movs	r2, #1
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	7fffffe8 	.word	0x7fffffe8

080035c0 <LL_ADC_Disable>:
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <LL_ADC_Disable+0x20>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	2202      	movs	r2, #2
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	7fffffe8 	.word	0x7fffffe8

080035e4 <LL_ADC_IsEnabled>:
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2201      	movs	r2, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <LL_ADC_IsEnabled+0x18>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <LL_ADC_IsEnabled+0x1a>
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <LL_ADC_StartCalibration>:
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a05      	ldr	r2, [pc, #20]	; (800362c <LL_ADC_StartCalibration+0x24>)
 8003616:	4013      	ands	r3, r2
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	0612      	lsls	r2, r2, #24
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	609a      	str	r2, [r3, #8]
}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b002      	add	sp, #8
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	7fffffe8 	.word	0x7fffffe8

08003630 <LL_ADC_IsCalibrationOnGoing>:
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	0fdb      	lsrs	r3, r3, #31
 800363e:	07da      	lsls	r2, r3, #31
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	429a      	cmp	r2, r3
 8003646:	d101      	bne.n	800364c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800364c:	2300      	movs	r3, #0
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b08b      	sub	sp, #44	; 0x2c
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2254      	movs	r2, #84	; 0x54
 800366c:	5c9b      	ldrb	r3, [r3, r2]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ADCEx_Calibration_Start+0x1e>
 8003672:	2302      	movs	r3, #2
 8003674:	e0dd      	b.n	8003832 <HAL_ADCEx_Calibration_Start+0x1da>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2254      	movs	r2, #84	; 0x54
 800367a:	2101      	movs	r1, #1
 800367c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800367e:	231f      	movs	r3, #31
 8003680:	18fc      	adds	r4, r7, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f7ff fef1 	bl	800346c <ADC_Disable>
 800368a:	0003      	movs	r3, r0
 800368c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	0018      	movs	r0, r3
 8003694:	f7ff ffa6 	bl	80035e4 <LL_ADC_IsEnabled>
 8003698:	1e03      	subs	r3, r0, #0
 800369a:	d000      	beq.n	800369e <HAL_ADCEx_Calibration_Start+0x46>
 800369c:	e0bc      	b.n	8003818 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	4a66      	ldr	r2, [pc, #408]	; (800383c <HAL_ADCEx_Calibration_Start+0x1e4>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	2202      	movs	r2, #2
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a62      	ldr	r2, [pc, #392]	; (8003840 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	495f      	ldr	r1, [pc, #380]	; (8003844 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80036c6:	400a      	ands	r2, r1
 80036c8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	e02d      	b.n	800372c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7ff ff97 	bl	8003608 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036da:	e014      	b.n	8003706 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3301      	adds	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a58      	ldr	r2, [pc, #352]	; (8003848 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d90d      	bls.n	8003706 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	2212      	movs	r2, #18
 80036f0:	4393      	bics	r3, r2
 80036f2:	2210      	movs	r2, #16
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2254      	movs	r2, #84	; 0x54
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e095      	b.n	8003832 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff ff90 	bl	8003630 <LL_ADC_IsCalibrationOnGoing>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d1e3      	bne.n	80036dc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff ff32 	bl	8003582 <LL_ADC_GetCalibrationFactor>
 800371e:	0002      	movs	r2, r0
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	189b      	adds	r3, r3, r2
 8003724:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	3301      	adds	r3, #1
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	2b07      	cmp	r3, #7
 8003730:	d9ce      	bls.n	80036d0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003734:	6a38      	ldr	r0, [r7, #32]
 8003736:	f7fc fe23 	bl	8000380 <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff ff2a 	bl	800359c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0018      	movs	r0, r3
 800374e:	f7ff fef8 	bl	8003542 <LL_ADC_GetClock>
 8003752:	1e03      	subs	r3, r0, #0
 8003754:	d11b      	bne.n	800378e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003758:	0018      	movs	r0, r3
 800375a:	f7ff fee5 	bl	8003528 <LL_ADC_GetCommonClock>
 800375e:	0003      	movs	r3, r0
 8003760:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	23e0      	movs	r3, #224	; 0xe0
 8003766:	035b      	lsls	r3, r3, #13
 8003768:	429a      	cmp	r2, r3
 800376a:	d310      	bcc.n	800378e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	3b03      	subs	r3, #3
 8003772:	2201      	movs	r2, #1
 8003774:	409a      	lsls	r2, r3
 8003776:	0013      	movs	r3, r2
 8003778:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8003780:	e002      	b.n	8003788 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3b01      	subs	r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f9      	bne.n	8003782 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a3a      	ldr	r2, [r7, #32]
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff fedf 	bl	800355a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7ff ff0d 	bl	80035c0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037a6:	f7fe fe77 	bl	8002498 <HAL_GetTick>
 80037aa:	0003      	movs	r3, r0
 80037ac:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037ae:	e01b      	b.n	80037e8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037b0:	f7fe fe72 	bl	8002498 <HAL_GetTick>
 80037b4:	0002      	movs	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d914      	bls.n	80037e8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7ff ff0e 	bl	80035e4 <LL_ADC_IsEnabled>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d00d      	beq.n	80037e8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	2210      	movs	r2, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2201      	movs	r2, #1
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e024      	b.n	8003832 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff fef9 	bl	80035e4 <LL_ADC_IsEnabled>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d1dc      	bne.n	80037b0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68d9      	ldr	r1, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	430a      	orrs	r2, r1
 8003804:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	2203      	movs	r2, #3
 800380c:	4393      	bics	r3, r2
 800380e:	2201      	movs	r2, #1
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	659a      	str	r2, [r3, #88]	; 0x58
 8003816:	e005      	b.n	8003824 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	2210      	movs	r2, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2254      	movs	r2, #84	; 0x54
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800382c:	231f      	movs	r3, #31
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	781b      	ldrb	r3, [r3, #0]
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b00b      	add	sp, #44	; 0x2c
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	fffffefd 	.word	0xfffffefd
 8003840:	00008003 	.word	0x00008003
 8003844:	ffff7ffc 	.word	0xffff7ffc
 8003848:	0002f1ff 	.word	0x0002f1ff
 800384c:	40012708 	.word	0x40012708

08003850 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	0002      	movs	r2, r0
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b7f      	cmp	r3, #127	; 0x7f
 80038a2:	d809      	bhi.n	80038b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a4:	1dfb      	adds	r3, r7, #7
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	001a      	movs	r2, r3
 80038aa:	231f      	movs	r3, #31
 80038ac:	401a      	ands	r2, r3
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <__NVIC_EnableIRQ+0x30>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	4091      	lsls	r1, r2
 80038b4:	000a      	movs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	0002      	movs	r2, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b7f      	cmp	r3, #127	; 0x7f
 80038d8:	d828      	bhi.n	800392c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038da:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <__NVIC_SetPriority+0xd4>)
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	33c0      	adds	r3, #192	; 0xc0
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	589b      	ldr	r3, [r3, r2]
 80038ea:	1dfa      	adds	r2, r7, #7
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	0011      	movs	r1, r2
 80038f0:	2203      	movs	r2, #3
 80038f2:	400a      	ands	r2, r1
 80038f4:	00d2      	lsls	r2, r2, #3
 80038f6:	21ff      	movs	r1, #255	; 0xff
 80038f8:	4091      	lsls	r1, r2
 80038fa:	000a      	movs	r2, r1
 80038fc:	43d2      	mvns	r2, r2
 80038fe:	401a      	ands	r2, r3
 8003900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	22ff      	movs	r2, #255	; 0xff
 8003908:	401a      	ands	r2, r3
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	0018      	movs	r0, r3
 8003910:	2303      	movs	r3, #3
 8003912:	4003      	ands	r3, r0
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003918:	481f      	ldr	r0, [pc, #124]	; (8003998 <__NVIC_SetPriority+0xd4>)
 800391a:	1dfb      	adds	r3, r7, #7
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b25b      	sxtb	r3, r3
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	430a      	orrs	r2, r1
 8003924:	33c0      	adds	r3, #192	; 0xc0
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800392a:	e031      	b.n	8003990 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <__NVIC_SetPriority+0xd8>)
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0019      	movs	r1, r3
 8003934:	230f      	movs	r3, #15
 8003936:	400b      	ands	r3, r1
 8003938:	3b08      	subs	r3, #8
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	3306      	adds	r3, #6
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	3304      	adds	r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1dfa      	adds	r2, r7, #7
 8003948:	7812      	ldrb	r2, [r2, #0]
 800394a:	0011      	movs	r1, r2
 800394c:	2203      	movs	r2, #3
 800394e:	400a      	ands	r2, r1
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	21ff      	movs	r1, #255	; 0xff
 8003954:	4091      	lsls	r1, r2
 8003956:	000a      	movs	r2, r1
 8003958:	43d2      	mvns	r2, r2
 800395a:	401a      	ands	r2, r3
 800395c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	22ff      	movs	r2, #255	; 0xff
 8003964:	401a      	ands	r2, r3
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	0018      	movs	r0, r3
 800396c:	2303      	movs	r3, #3
 800396e:	4003      	ands	r3, r0
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <__NVIC_SetPriority+0xd8>)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	001c      	movs	r4, r3
 800397c:	230f      	movs	r3, #15
 800397e:	4023      	ands	r3, r4
 8003980:	3b08      	subs	r3, #8
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	430a      	orrs	r2, r1
 8003986:	3306      	adds	r3, #6
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	18c3      	adds	r3, r0, r3
 800398c:	3304      	adds	r3, #4
 800398e:	601a      	str	r2, [r3, #0]
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b003      	add	sp, #12
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	210f      	movs	r1, #15
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	1c02      	adds	r2, r0, #0
 80039b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff ff81 	bl	80038c4 <__NVIC_SetPriority>
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	0002      	movs	r2, r0
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff57 	bl	8003890 <__NVIC_EnableIRQ>
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e091      	b.n	8003b22 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	001a      	movs	r2, r3
 8003a04:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <HAL_DMA_Init+0x140>)
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d810      	bhi.n	8003a2c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a48      	ldr	r2, [pc, #288]	; (8003b30 <HAL_DMA_Init+0x144>)
 8003a10:	4694      	mov	ip, r2
 8003a12:	4463      	add	r3, ip
 8003a14:	2114      	movs	r1, #20
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7fc fcb2 	bl	8000380 <__udivsi3>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a43      	ldr	r2, [pc, #268]	; (8003b34 <HAL_DMA_Init+0x148>)
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
 8003a2a:	e00f      	b.n	8003a4c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a41      	ldr	r2, [pc, #260]	; (8003b38 <HAL_DMA_Init+0x14c>)
 8003a32:	4694      	mov	ip, r2
 8003a34:	4463      	add	r3, ip
 8003a36:	2114      	movs	r1, #20
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fc fca1 	bl	8000380 <__udivsi3>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <HAL_DMA_Init+0x150>)
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2225      	movs	r2, #37	; 0x25
 8003a50:	2102      	movs	r1, #2
 8003a52:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4938      	ldr	r1, [pc, #224]	; (8003b40 <HAL_DMA_Init+0x154>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 fa3f 	bl	8003f20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	01db      	lsls	r3, r3, #7
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d102      	bne.n	8003ab4 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	217f      	movs	r1, #127	; 0x7f
 8003abe:	400a      	ands	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d011      	beq.n	8003af8 <HAL_DMA_Init+0x10c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d80d      	bhi.n	8003af8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 fa68 	bl	8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e008      	b.n	8003b0a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2225      	movs	r2, #37	; 0x25
 8003b14:	2101      	movs	r1, #1
 8003b16:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2224      	movs	r2, #36	; 0x24
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	40020407 	.word	0x40020407
 8003b30:	bffdfff8 	.word	0xbffdfff8
 8003b34:	40020000 	.word	0x40020000
 8003b38:	bffdfbf8 	.word	0xbffdfbf8
 8003b3c:	40020400 	.word	0x40020400
 8003b40:	ffff800f 	.word	0xffff800f

08003b44 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2317      	movs	r3, #23
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2224      	movs	r2, #36	; 0x24
 8003b5e:	5c9b      	ldrb	r3, [r3, r2]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_DMA_Start_IT+0x24>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e06f      	b.n	8003c48 <HAL_DMA_Start_IT+0x104>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2224      	movs	r2, #36	; 0x24
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2225      	movs	r2, #37	; 0x25
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d157      	bne.n	8003c2c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2225      	movs	r2, #37	; 0x25
 8003b80:	2102      	movs	r1, #2
 8003b82:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	438a      	bics	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f981 	bl	8003ea8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	210e      	movs	r1, #14
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e00f      	b.n	8003be0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2104      	movs	r1, #4
 8003bcc:	438a      	bics	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	210a      	movs	r1, #10
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	025b      	lsls	r3, r3, #9
 8003bea:	4013      	ands	r3, r2
 8003bec:	d008      	beq.n	8003c00 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0049      	lsls	r1, r1, #1
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	0049      	lsls	r1, r1, #1
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e00a      	b.n	8003c42 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2224      	movs	r2, #36	; 0x24
 8003c36:	2100      	movs	r1, #0
 8003c38:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003c3a:	2317      	movs	r3, #23
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c42:	2317      	movs	r3, #23
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	781b      	ldrb	r3, [r3, #0]
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b006      	add	sp, #24
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	210f      	movs	r1, #15
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2225      	movs	r2, #37	; 0x25
 8003c64:	5c9b      	ldrb	r3, [r3, r2]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d006      	beq.n	8003c7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2204      	movs	r2, #4
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c72:	187b      	adds	r3, r7, r1
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	e048      	b.n	8003d0c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	210e      	movs	r1, #14
 8003c86:	438a      	bics	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	438a      	bics	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	491d      	ldr	r1, [pc, #116]	; (8003d1c <HAL_DMA_Abort_IT+0xcc>)
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	221c      	movs	r2, #28
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4091      	lsls	r1, r2
 8003cba:	000a      	movs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cc6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	4910      	ldr	r1, [pc, #64]	; (8003d1c <HAL_DMA_Abort_IT+0xcc>)
 8003cdc:	400a      	ands	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ce8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2225      	movs	r2, #37	; 0x25
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2224      	movs	r2, #36	; 0x24
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	0010      	movs	r0, r2
 8003d0a:	4798      	blx	r3
    }
  }
  return status;
 8003d0c:	230f      	movs	r3, #15
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	781b      	ldrb	r3, [r3, #0]
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	fffffeff 	.word	0xfffffeff

08003d20 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	221c      	movs	r2, #28
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2204      	movs	r2, #4
 8003d42:	409a      	lsls	r2, r3
 8003d44:	0013      	movs	r3, r2
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d026      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x7a>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	4013      	ands	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d107      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	221c      	movs	r2, #28
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	4091      	lsls	r1, r2
 8003d80:	000a      	movs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d100      	bne.n	8003d8e <HAL_DMA_IRQHandler+0x6e>
 8003d8c:	e080      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	0010      	movs	r0, r2
 8003d96:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d98:	e07a      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	221c      	movs	r2, #28
 8003da0:	4013      	ands	r3, r2
 8003da2:	2202      	movs	r2, #2
 8003da4:	409a      	lsls	r2, r3
 8003da6:	0013      	movs	r3, r2
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4013      	ands	r3, r2
 8003dac:	d03c      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x108>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2202      	movs	r2, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	d038      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d10b      	bne.n	8003dda <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	210a      	movs	r1, #10
 8003dce:	438a      	bics	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2225      	movs	r2, #37	; 0x25
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	001a      	movs	r2, r3
 8003de0:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <HAL_DMA_IRQHandler+0x17c>)
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d909      	bls.n	8003dfa <HAL_DMA_IRQHandler+0xda>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	221c      	movs	r2, #28
 8003dec:	401a      	ands	r2, r3
 8003dee:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <HAL_DMA_IRQHandler+0x180>)
 8003df0:	2102      	movs	r1, #2
 8003df2:	4091      	lsls	r1, r2
 8003df4:	000a      	movs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	e008      	b.n	8003e0c <HAL_DMA_IRQHandler+0xec>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	221c      	movs	r2, #28
 8003e00:	401a      	ands	r2, r3
 8003e02:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <HAL_DMA_IRQHandler+0x184>)
 8003e04:	2102      	movs	r1, #2
 8003e06:	4091      	lsls	r1, r2
 8003e08:	000a      	movs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	2100      	movs	r1, #0
 8003e12:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d039      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	0010      	movs	r0, r2
 8003e24:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003e26:	e033      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	221c      	movs	r2, #28
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2208      	movs	r2, #8
 8003e32:	409a      	lsls	r2, r3
 8003e34:	0013      	movs	r3, r2
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d02a      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x172>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2208      	movs	r2, #8
 8003e40:	4013      	ands	r3, r2
 8003e42:	d026      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	210e      	movs	r1, #14
 8003e50:	438a      	bics	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	221c      	movs	r2, #28
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2101      	movs	r1, #1
 8003e62:	4091      	lsls	r1, r2
 8003e64:	000a      	movs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2225      	movs	r2, #37	; 0x25
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2224      	movs	r2, #36	; 0x24
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	0010      	movs	r0, r2
 8003e8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46c0      	nop			; (mov r8, r8)
}
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b004      	add	sp, #16
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	40020080 	.word	0x40020080
 8003ea0:	40020400 	.word	0x40020400
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ebe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	221c      	movs	r2, #28
 8003ed8:	401a      	ands	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4091      	lsls	r1, r2
 8003ee2:	000a      	movs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d108      	bne.n	8003f08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f06:	e007      	b.n	8003f18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d814      	bhi.n	8003f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003f3e:	189a      	adds	r2, r3, r2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	001a      	movs	r2, r3
 8003f4a:	23ff      	movs	r3, #255	; 0xff
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	3b08      	subs	r3, #8
 8003f50:	2114      	movs	r1, #20
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7fc fa14 	bl	8000380 <__udivsi3>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e014      	b.n	8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003f68:	189a      	adds	r2, r3, r2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	001a      	movs	r2, r3
 8003f74:	23ff      	movs	r3, #255	; 0xff
 8003f76:	4013      	ands	r3, r2
 8003f78:	3b08      	subs	r3, #8
 8003f7a:	2114      	movs	r1, #20
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7fc f9ff 	bl	8000380 <__udivsi3>
 8003f82:	0003      	movs	r3, r0
 8003f84:	3307      	adds	r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003f8c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	221f      	movs	r2, #31
 8003f92:	4013      	ands	r3, r2
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40020407 	.word	0x40020407
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	4002081c 	.word	0x4002081c
 8003fb0:	40020880 	.word	0x40020880

08003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	227f      	movs	r2, #127	; 0x7f
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fca:	4694      	mov	ip, r2
 8003fcc:	4463      	add	r3, ip
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b004      	add	sp, #16
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	1000823f 	.word	0x1000823f
 8003ff8:	40020940 	.word	0x40020940

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	e14d      	b.n	80042a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4091      	lsls	r1, r2
 8004016:	000a      	movs	r2, r1
 8004018:	4013      	ands	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d100      	bne.n	8004024 <HAL_GPIO_Init+0x28>
 8004022:	e13e      	b.n	80042a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2203      	movs	r2, #3
 800402a:	4013      	ands	r3, r2
 800402c:	2b01      	cmp	r3, #1
 800402e:	d005      	beq.n	800403c <HAL_GPIO_Init+0x40>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2203      	movs	r2, #3
 8004036:	4013      	ands	r3, r2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d130      	bne.n	800409e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	2203      	movs	r2, #3
 8004048:	409a      	lsls	r2, r3
 800404a:	0013      	movs	r3, r2
 800404c:	43da      	mvns	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	409a      	lsls	r2, r3
 800405e:	0013      	movs	r3, r2
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004072:	2201      	movs	r2, #1
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	409a      	lsls	r2, r3
 8004078:	0013      	movs	r3, r2
 800407a:	43da      	mvns	r2, r3
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	2201      	movs	r2, #1
 800408a:	401a      	ands	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	409a      	lsls	r2, r3
 8004090:	0013      	movs	r3, r2
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2203      	movs	r2, #3
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d017      	beq.n	80040da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	2203      	movs	r2, #3
 80040b6:	409a      	lsls	r2, r3
 80040b8:	0013      	movs	r3, r2
 80040ba:	43da      	mvns	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	0013      	movs	r3, r2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2203      	movs	r2, #3
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d123      	bne.n	800412e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3208      	adds	r2, #8
 80040ee:	0092      	lsls	r2, r2, #2
 80040f0:	58d3      	ldr	r3, [r2, r3]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2207      	movs	r2, #7
 80040f8:	4013      	ands	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	220f      	movs	r2, #15
 80040fe:	409a      	lsls	r2, r3
 8004100:	0013      	movs	r3, r2
 8004102:	43da      	mvns	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2107      	movs	r1, #7
 8004112:	400b      	ands	r3, r1
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	409a      	lsls	r2, r3
 8004118:	0013      	movs	r3, r2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	0092      	lsls	r2, r2, #2
 800412a:	6939      	ldr	r1, [r7, #16]
 800412c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	2203      	movs	r2, #3
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	43da      	mvns	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2203      	movs	r2, #3
 800414c:	401a      	ands	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	409a      	lsls	r2, r3
 8004154:	0013      	movs	r3, r2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	23c0      	movs	r3, #192	; 0xc0
 8004168:	029b      	lsls	r3, r3, #10
 800416a:	4013      	ands	r3, r2
 800416c:	d100      	bne.n	8004170 <HAL_GPIO_Init+0x174>
 800416e:	e098      	b.n	80042a2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004170:	4a53      	ldr	r2, [pc, #332]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	3318      	adds	r3, #24
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	589b      	ldr	r3, [r3, r2]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2203      	movs	r2, #3
 8004182:	4013      	ands	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	220f      	movs	r2, #15
 8004188:	409a      	lsls	r2, r3
 800418a:	0013      	movs	r3, r2
 800418c:	43da      	mvns	r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	23a0      	movs	r3, #160	; 0xa0
 8004198:	05db      	lsls	r3, r3, #23
 800419a:	429a      	cmp	r2, r3
 800419c:	d019      	beq.n	80041d2 <HAL_GPIO_Init+0x1d6>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a48      	ldr	r2, [pc, #288]	; (80042c4 <HAL_GPIO_Init+0x2c8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_GPIO_Init+0x1d2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a47      	ldr	r2, [pc, #284]	; (80042c8 <HAL_GPIO_Init+0x2cc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00d      	beq.n	80041ca <HAL_GPIO_Init+0x1ce>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a46      	ldr	r2, [pc, #280]	; (80042cc <HAL_GPIO_Init+0x2d0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <HAL_GPIO_Init+0x1ca>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a45      	ldr	r2, [pc, #276]	; (80042d0 <HAL_GPIO_Init+0x2d4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_GPIO_Init+0x1c6>
 80041be:	2304      	movs	r3, #4
 80041c0:	e008      	b.n	80041d4 <HAL_GPIO_Init+0x1d8>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e006      	b.n	80041d4 <HAL_GPIO_Init+0x1d8>
 80041c6:	2303      	movs	r3, #3
 80041c8:	e004      	b.n	80041d4 <HAL_GPIO_Init+0x1d8>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e002      	b.n	80041d4 <HAL_GPIO_Init+0x1d8>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <HAL_GPIO_Init+0x1d8>
 80041d2:	2300      	movs	r3, #0
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	2103      	movs	r1, #3
 80041d8:	400a      	ands	r2, r1
 80041da:	00d2      	lsls	r2, r2, #3
 80041dc:	4093      	lsls	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80041e4:	4936      	ldr	r1, [pc, #216]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	089b      	lsrs	r3, r3, #2
 80041ea:	3318      	adds	r3, #24
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041f2:	4b33      	ldr	r3, [pc, #204]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43da      	mvns	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	035b      	lsls	r3, r3, #13
 800420a:	4013      	ands	r3, r2
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004216:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800421c:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43da      	mvns	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	039b      	lsls	r3, r3, #14
 8004234:	4013      	ands	r3, r2
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 8004248:	2384      	movs	r3, #132	; 0x84
 800424a:	58d3      	ldr	r3, [r2, r3]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	43da      	mvns	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	029b      	lsls	r3, r3, #10
 8004260:	4013      	ands	r3, r2
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800426c:	4914      	ldr	r1, [pc, #80]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 800426e:	2284      	movs	r2, #132	; 0x84
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004274:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	58d3      	ldr	r3, [r2, r3]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	43da      	mvns	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	025b      	lsls	r3, r3, #9
 800428e:	4013      	ands	r3, r2
 8004290:	d003      	beq.n	800429a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800429a:	4909      	ldr	r1, [pc, #36]	; (80042c0 <HAL_GPIO_Init+0x2c4>)
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	3301      	adds	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	40da      	lsrs	r2, r3
 80042b0:	1e13      	subs	r3, r2, #0
 80042b2:	d000      	beq.n	80042b6 <HAL_GPIO_Init+0x2ba>
 80042b4:	e6aa      	b.n	800400c <HAL_GPIO_Init+0x10>
  }
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b006      	add	sp, #24
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021800 	.word	0x40021800
 80042c4:	50000400 	.word	0x50000400
 80042c8:	50000800 	.word	0x50000800
 80042cc:	50000c00 	.word	0x50000c00
 80042d0:	50001000 	.word	0x50001000

080042d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	0008      	movs	r0, r1
 80042de:	0011      	movs	r1, r2
 80042e0:	1cbb      	adds	r3, r7, #2
 80042e2:	1c02      	adds	r2, r0, #0
 80042e4:	801a      	strh	r2, [r3, #0]
 80042e6:	1c7b      	adds	r3, r7, #1
 80042e8:	1c0a      	adds	r2, r1, #0
 80042ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ec:	1c7b      	adds	r3, r7, #1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042f4:	1cbb      	adds	r3, r7, #2
 80042f6:	881a      	ldrh	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042fc:	e003      	b.n	8004306 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042fe:	1cbb      	adds	r3, r7, #2
 8004300:	881a      	ldrh	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	46bd      	mov	sp, r7
 800430a:	b002      	add	sp, #8
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	000a      	movs	r2, r1
 800431a:	1cbb      	adds	r3, r7, #2
 800431c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800431e:	230a      	movs	r3, #10
 8004320:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004322:	e002      	b.n	800432a <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3b01      	subs	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f9      	bne.n	8004324 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8004330:	1cbb      	adds	r3, r7, #2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4a06      	ldr	r2, [pc, #24]	; (8004350 <PCD_GET_EP_RX_CNT+0x40>)
 8004338:	4694      	mov	ip, r2
 800433a:	4463      	add	r3, ip
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	0c1b      	lsrs	r3, r3, #16
 8004340:	b29b      	uxth	r3, r3
 8004342:	059b      	lsls	r3, r3, #22
 8004344:	0d9b      	lsrs	r3, r3, #22
 8004346:	b29b      	uxth	r3, r3
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40009800 	.word	0x40009800

08004354 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	000a      	movs	r2, r1
 800435e:	1cbb      	adds	r3, r7, #2
 8004360:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004362:	230a      	movs	r3, #10
 8004364:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004366:	e002      	b.n	800436e <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f9      	bne.n	8004368 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004374:	1cbb      	adds	r3, r7, #2
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4a06      	ldr	r2, [pc, #24]	; (8004394 <PCD_GET_EP_DBUF0_CNT+0x40>)
 800437c:	4694      	mov	ip, r2
 800437e:	4463      	add	r3, ip
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	0c1b      	lsrs	r3, r3, #16
 8004384:	b29b      	uxth	r3, r3
 8004386:	059b      	lsls	r3, r3, #22
 8004388:	0d9b      	lsrs	r3, r3, #22
 800438a:	b29b      	uxth	r3, r3
}
 800438c:	0018      	movs	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	b004      	add	sp, #16
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40009800 	.word	0x40009800

08004398 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	000a      	movs	r2, r1
 80043a2:	1cbb      	adds	r3, r7, #2
 80043a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80043a6:	230a      	movs	r3, #10
 80043a8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80043aa:	e002      	b.n	80043b2 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f9      	bne.n	80043ac <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80043b8:	1cbb      	adds	r3, r7, #2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <PCD_GET_EP_DBUF1_CNT+0x40>)
 80043c0:	4694      	mov	ip, r2
 80043c2:	4463      	add	r3, ip
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	0c1b      	lsrs	r3, r3, #16
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	059b      	lsls	r3, r3, #22
 80043cc:	0d9b      	lsrs	r3, r3, #22
 80043ce:	b29b      	uxth	r3, r3
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b004      	add	sp, #16
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40009800 	.word	0x40009800

080043dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b087      	sub	sp, #28
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0ea      	b.n	80045c4 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a76      	ldr	r2, [pc, #472]	; (80045cc <HAL_PCD_Init+0x1f0>)
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	23a5      	movs	r3, #165	; 0xa5
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	2100      	movs	r1, #0
 8004402:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	0018      	movs	r0, r3
 8004408:	f7fd ff8a 	bl	8002320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a6f      	ldr	r2, [pc, #444]	; (80045cc <HAL_PCD_Init+0x1f0>)
 8004410:	2103      	movs	r1, #3
 8004412:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0018      	movs	r0, r3
 800441a:	f004 fc31 	bl	8008c80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441e:	230f      	movs	r3, #15
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e049      	b.n	80044bc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004428:	200f      	movs	r0, #15
 800442a:	183b      	adds	r3, r7, r0
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	0013      	movs	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	189b      	adds	r3, r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	18cb      	adds	r3, r1, r3
 800443a:	3315      	adds	r3, #21
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004440:	183b      	adds	r3, r7, r0
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	0013      	movs	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	189b      	adds	r3, r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	18cb      	adds	r3, r1, r3
 8004450:	3314      	adds	r3, #20
 8004452:	183a      	adds	r2, r7, r0
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004458:	183b      	adds	r3, r7, r0
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	0013      	movs	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	189b      	adds	r3, r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	18cb      	adds	r3, r1, r3
 8004468:	3317      	adds	r3, #23
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800446e:	183b      	adds	r3, r7, r0
 8004470:	781a      	ldrb	r2, [r3, #0]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	0013      	movs	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	189b      	adds	r3, r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	18cb      	adds	r3, r1, r3
 800447e:	3324      	adds	r3, #36	; 0x24
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004484:	183b      	adds	r3, r7, r0
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	0013      	movs	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	189b      	adds	r3, r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	18cb      	adds	r3, r1, r3
 8004494:	3328      	adds	r3, #40	; 0x28
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800449a:	183b      	adds	r3, r7, r0
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	0013      	movs	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	18cb      	adds	r3, r1, r3
 80044ac:	3304      	adds	r3, #4
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b2:	183b      	adds	r3, r7, r0
 80044b4:	781a      	ldrb	r2, [r3, #0]
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	3201      	adds	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	791b      	ldrb	r3, [r3, #4]
 80044c0:	210f      	movs	r1, #15
 80044c2:	187a      	adds	r2, r7, r1
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3ae      	bcc.n	8004428 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ca:	187b      	adds	r3, r7, r1
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e056      	b.n	8004580 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044d2:	240f      	movs	r4, #15
 80044d4:	193b      	adds	r3, r7, r4
 80044d6:	781a      	ldrb	r2, [r3, #0]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	2356      	movs	r3, #86	; 0x56
 80044dc:	33ff      	adds	r3, #255	; 0xff
 80044de:	0019      	movs	r1, r3
 80044e0:	0013      	movs	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	189b      	adds	r3, r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	18c3      	adds	r3, r0, r3
 80044ea:	185b      	adds	r3, r3, r1
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044f0:	193b      	adds	r3, r7, r4
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	23aa      	movs	r3, #170	; 0xaa
 80044f8:	0059      	lsls	r1, r3, #1
 80044fa:	0013      	movs	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	18c3      	adds	r3, r0, r3
 8004504:	185b      	adds	r3, r3, r1
 8004506:	193a      	adds	r2, r7, r4
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800450c:	193b      	adds	r3, r7, r4
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	2358      	movs	r3, #88	; 0x58
 8004514:	33ff      	adds	r3, #255	; 0xff
 8004516:	0019      	movs	r1, r3
 8004518:	0013      	movs	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	189b      	adds	r3, r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	18c3      	adds	r3, r0, r3
 8004522:	185b      	adds	r3, r3, r1
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004528:	193b      	adds	r3, r7, r4
 800452a:	781a      	ldrb	r2, [r3, #0]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	23b2      	movs	r3, #178	; 0xb2
 8004530:	0059      	lsls	r1, r3, #1
 8004532:	0013      	movs	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	189b      	adds	r3, r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	18c3      	adds	r3, r0, r3
 800453c:	185b      	adds	r3, r3, r1
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004542:	193b      	adds	r3, r7, r4
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	23b4      	movs	r3, #180	; 0xb4
 800454a:	0059      	lsls	r1, r3, #1
 800454c:	0013      	movs	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	189b      	adds	r3, r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	18c3      	adds	r3, r0, r3
 8004556:	185b      	adds	r3, r3, r1
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800455c:	193b      	adds	r3, r7, r4
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	23b6      	movs	r3, #182	; 0xb6
 8004564:	0059      	lsls	r1, r3, #1
 8004566:	0013      	movs	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	189b      	adds	r3, r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	18c3      	adds	r3, r0, r3
 8004570:	185b      	adds	r3, r3, r1
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004576:	193b      	adds	r3, r7, r4
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	193b      	adds	r3, r7, r4
 800457c:	3201      	adds	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	791b      	ldrb	r3, [r3, #4]
 8004584:	220f      	movs	r2, #15
 8004586:	18ba      	adds	r2, r7, r2
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d3a1      	bcc.n	80044d2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	466a      	mov	r2, sp
 8004596:	7c19      	ldrb	r1, [r3, #16]
 8004598:	7011      	strb	r1, [r2, #0]
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f004 fba7 	bl	8008cf2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a07      	ldr	r2, [pc, #28]	; (80045cc <HAL_PCD_Init+0x1f0>)
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7b1b      	ldrb	r3, [r3, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d103      	bne.n	80045c2 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f001 fca3 	bl	8005f08 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b005      	add	sp, #20
 80045ca:	bd90      	pop	{r4, r7, pc}
 80045cc:	00000295 	.word	0x00000295

080045d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	23a5      	movs	r3, #165	; 0xa5
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	5cd3      	ldrb	r3, [r2, r3]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_PCD_Start+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e014      	b.n	8004612 <HAL_PCD_Start+0x42>
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	23a5      	movs	r3, #165	; 0xa5
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	2101      	movs	r1, #1
 80045f0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f004 fb2e 	bl	8008c58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0018      	movs	r0, r3
 8004602:	f006 f9c4 	bl	800a98e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	23a5      	movs	r3, #165	; 0xa5
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	2100      	movs	r1, #0
 800460e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b002      	add	sp, #8
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	23a5      	movs	r3, #165	; 0xa5
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	5cd3      	ldrb	r3, [r2, r3]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_PCD_Stop+0x18>
 800462e:	2302      	movs	r3, #2
 8004630:	e014      	b.n	800465c <HAL_PCD_Stop+0x42>
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	23a5      	movs	r3, #165	; 0xa5
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	2101      	movs	r1, #1
 800463a:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0018      	movs	r0, r3
 8004642:	f004 fb1d 	bl	8008c80 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0018      	movs	r0, r3
 800464c:	f006 f9b0 	bl	800a9b0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	23a5      	movs	r3, #165	; 0xa5
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	2100      	movs	r1, #0
 8004658:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0018      	movs	r0, r3
 8004672:	f006 f9af 	bl	800a9d4 <USB_ReadInterrupts>
 8004676:	0003      	movs	r3, r0
 8004678:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800467a:	4a7c      	ldr	r2, [pc, #496]	; (800486c <HAL_PCD_IRQHandler+0x208>)
 800467c:	23a0      	movs	r3, #160	; 0xa0
 800467e:	58d3      	ldr	r3, [r2, r3]
 8004680:	2204      	movs	r2, #4
 8004682:	4013      	ands	r3, r2
 8004684:	d100      	bne.n	8004688 <HAL_PCD_IRQHandler+0x24>
 8004686:	e0ed      	b.n	8004864 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	4013      	ands	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0018      	movs	r0, r3
 8004696:	f000 fbb9 	bl	8004e0c <PCD_EP_ISR_Handler>

    return;
 800469a:	e0e4      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4013      	ands	r3, r2
 80046a4:	d011      	beq.n	80046ca <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	496f      	ldr	r1, [pc, #444]	; (8004870 <HAL_PCD_IRQHandler+0x20c>)
 80046b2:	400a      	ands	r2, r1
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f00d ff8f 	bl	80125dc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2100      	movs	r1, #0
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 f8fc 	bl	80048c0 <HAL_PCD_SetAddress>

    return;
 80046c8:	e0cd      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	4013      	ands	r3, r2
 80046d2:	d008      	beq.n	80046e6 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4965      	ldr	r1, [pc, #404]	; (8004874 <HAL_PCD_IRQHandler+0x210>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80046e4:	e0bf      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	019b      	lsls	r3, r3, #6
 80046ec:	4013      	ands	r3, r2
 80046ee:	d008      	beq.n	8004702 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	495f      	ldr	r1, [pc, #380]	; (8004878 <HAL_PCD_IRQHandler+0x214>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8004700:	e0b1      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	015b      	lsls	r3, r3, #5
 8004708:	4013      	ands	r3, r2
 800470a:	d02c      	beq.n	8004766 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2104      	movs	r1, #4
 8004718:	438a      	bics	r2, r1
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2108      	movs	r1, #8
 8004728:	438a      	bics	r2, r1
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	23b3      	movs	r3, #179	; 0xb3
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	5cd3      	ldrb	r3, [r2, r3]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d109      	bne.n	800474c <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	23b3      	movs	r3, #179	; 0xb3
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	2100      	movs	r1, #0
 8004740:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2100      	movs	r1, #0
 8004746:	0018      	movs	r0, r3
 8004748:	f001 fc00 	bl	8005f4c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	0018      	movs	r0, r3
 8004750:	f000 f8ae 	bl	80048b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4947      	ldr	r1, [pc, #284]	; (800487c <HAL_PCD_IRQHandler+0x218>)
 8004760:	400a      	ands	r2, r1
 8004762:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8004764:	e07f      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	4013      	ands	r3, r2
 800476e:	d01c      	beq.n	80047aa <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2108      	movs	r1, #8
 800477c:	430a      	orrs	r2, r1
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	493d      	ldr	r1, [pc, #244]	; (8004880 <HAL_PCD_IRQHandler+0x21c>)
 800478c:	400a      	ands	r2, r1
 800478e:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2104      	movs	r1, #4
 800479c:	430a      	orrs	r2, r1
 800479e:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 f87c 	bl	80048a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047a8:	e05d      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2280      	movs	r2, #128	; 0x80
 80047ae:	4013      	ands	r3, r2
 80047b0:	d038      	beq.n	8004824 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4931      	ldr	r1, [pc, #196]	; (8004884 <HAL_PCD_IRQHandler+0x220>)
 80047be:	400a      	ands	r2, r1
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	23b3      	movs	r3, #179	; 0xb3
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	5cd3      	ldrb	r3, [r2, r3]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d125      	bne.n	800481a <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2104      	movs	r1, #4
 80047da:	430a      	orrs	r2, r1
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2108      	movs	r1, #8
 80047ea:	430a      	orrs	r2, r1
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	23b3      	movs	r3, #179	; 0xb3
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	2101      	movs	r1, #1
 80047f6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	223c      	movs	r2, #60	; 0x3c
 8004802:	4013      	ands	r3, r2
 8004804:	0019      	movs	r1, r3
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	23b4      	movs	r3, #180	; 0xb4
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2101      	movs	r1, #1
 8004812:	0018      	movs	r0, r3
 8004814:	f001 fb9a 	bl	8005f4c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004818:	e025      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f000 f83f 	bl	80048a0 <HAL_PCD_SuspendCallback>
    return;
 8004822:	e020      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4013      	ands	r3, r2
 800482c:	d00c      	beq.n	8004848 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4913      	ldr	r1, [pc, #76]	; (8004888 <HAL_PCD_IRQHandler+0x224>)
 800483a:	400a      	ands	r2, r1
 800483c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 f825 	bl	8004890 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004846:	e00e      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4013      	ands	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	490b      	ldr	r1, [pc, #44]	; (800488c <HAL_PCD_IRQHandler+0x228>)
 800485e:	400a      	ands	r2, r1
 8004860:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8004862:	e000      	b.n	8004866 <HAL_PCD_IRQHandler+0x202>
    return;
 8004864:	46c0      	nop			; (mov r8, r8)
  }
}
 8004866:	46bd      	mov	sp, r7
 8004868:	b004      	add	sp, #16
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40010000 	.word	0x40010000
 8004870:	0000fbff 	.word	0x0000fbff
 8004874:	0000bfff 	.word	0x0000bfff
 8004878:	0000dfff 	.word	0x0000dfff
 800487c:	0000efff 	.word	0x0000efff
 8004880:	0000f7ff 	.word	0x0000f7ff
 8004884:	0000ff7f 	.word	0x0000ff7f
 8004888:	0000fdff 	.word	0x0000fdff
 800488c:	0000feff 	.word	0x0000feff

08004890 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	000a      	movs	r2, r1
 80048ca:	1cfb      	adds	r3, r7, #3
 80048cc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	23a5      	movs	r3, #165	; 0xa5
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_PCD_SetAddress+0x1e>
 80048da:	2302      	movs	r3, #2
 80048dc:	e016      	b.n	800490c <HAL_PCD_SetAddress+0x4c>
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	23a5      	movs	r3, #165	; 0xa5
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	2101      	movs	r1, #1
 80048e6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1cfa      	adds	r2, r7, #3
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	1cfb      	adds	r3, r7, #3
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	0019      	movs	r1, r3
 80048fa:	0010      	movs	r0, r2
 80048fc:	f006 f834 	bl	800a968 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	23a5      	movs	r3, #165	; 0xa5
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	2100      	movs	r1, #0
 8004908:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	0018      	movs	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	b002      	add	sp, #8
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	000c      	movs	r4, r1
 800491e:	0010      	movs	r0, r2
 8004920:	0019      	movs	r1, r3
 8004922:	1cfb      	adds	r3, r7, #3
 8004924:	1c22      	adds	r2, r4, #0
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	003b      	movs	r3, r7
 800492a:	1c02      	adds	r2, r0, #0
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	1cbb      	adds	r3, r7, #2
 8004930:	1c0a      	adds	r2, r1, #0
 8004932:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004934:	230b      	movs	r3, #11
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800493c:	1cfb      	adds	r3, r7, #3
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b25b      	sxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	da10      	bge.n	8004968 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004946:	1cfb      	adds	r3, r7, #3
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2207      	movs	r2, #7
 800494c:	401a      	ands	r2, r3
 800494e:	0013      	movs	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	189b      	adds	r3, r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	3310      	adds	r3, #16
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	18d3      	adds	r3, r2, r3
 800495c:	3304      	adds	r3, #4
 800495e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	705a      	strb	r2, [r3, #1]
 8004966:	e010      	b.n	800498a <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004968:	1cfb      	adds	r3, r7, #3
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2207      	movs	r2, #7
 800496e:	401a      	ands	r2, r3
 8004970:	0013      	movs	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	189b      	adds	r3, r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	3351      	adds	r3, #81	; 0x51
 800497a:	33ff      	adds	r3, #255	; 0xff
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	18d3      	adds	r3, r2, r3
 8004980:	3304      	adds	r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800498a:	1cfb      	adds	r3, r7, #3
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2207      	movs	r2, #7
 8004990:	4013      	ands	r3, r2
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004998:	003b      	movs	r3, r7
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1cba      	adds	r2, r7, #2
 80049a4:	7812      	ldrb	r2, [r2, #0]
 80049a6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049a8:	1cbb      	adds	r3, r7, #2
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d102      	bne.n	80049b6 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	23a5      	movs	r3, #165	; 0xa5
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	5cd3      	ldrb	r3, [r2, r3]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_PCD_EP_Open+0xb2>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e013      	b.n	80049ee <HAL_PCD_EP_Open+0xda>
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	23a5      	movs	r3, #165	; 0xa5
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	2101      	movs	r1, #1
 80049ce:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	0011      	movs	r1, r2
 80049d8:	0018      	movs	r0, r3
 80049da:	f004 f9c9 	bl	8008d70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	23a5      	movs	r3, #165	; 0xa5
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	2100      	movs	r1, #0
 80049e6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80049e8:	230b      	movs	r3, #11
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b005      	add	sp, #20
 80049f4:	bd90      	pop	{r4, r7, pc}

080049f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	000a      	movs	r2, r1
 8004a00:	1cfb      	adds	r3, r7, #3
 8004a02:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a04:	1cfb      	adds	r3, r7, #3
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b25b      	sxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	da10      	bge.n	8004a30 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a0e:	1cfb      	adds	r3, r7, #3
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2207      	movs	r2, #7
 8004a14:	401a      	ands	r2, r3
 8004a16:	0013      	movs	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	3310      	adds	r3, #16
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	18d3      	adds	r3, r2, r3
 8004a24:	3304      	adds	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	705a      	strb	r2, [r3, #1]
 8004a2e:	e010      	b.n	8004a52 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a30:	1cfb      	adds	r3, r7, #3
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2207      	movs	r2, #7
 8004a36:	401a      	ands	r2, r3
 8004a38:	0013      	movs	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	189b      	adds	r3, r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	3351      	adds	r3, #81	; 0x51
 8004a42:	33ff      	adds	r3, #255	; 0xff
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	18d3      	adds	r3, r2, r3
 8004a48:	3304      	adds	r3, #4
 8004a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a52:	1cfb      	adds	r3, r7, #3
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2207      	movs	r2, #7
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	23a5      	movs	r3, #165	; 0xa5
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	5cd3      	ldrb	r3, [r2, r3]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_PCD_EP_Close+0x7a>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e011      	b.n	8004a94 <HAL_PCD_EP_Close+0x9e>
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	23a5      	movs	r3, #165	; 0xa5
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	2101      	movs	r1, #1
 8004a78:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	0011      	movs	r1, r2
 8004a82:	0018      	movs	r0, r3
 8004a84:	f004 fca8 	bl	80093d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	23a5      	movs	r3, #165	; 0xa5
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	2100      	movs	r1, #0
 8004a90:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	200b      	movs	r0, #11
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	1c0a      	adds	r2, r1, #0
 8004aae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ab0:	0001      	movs	r1, r0
 8004ab2:	187b      	adds	r3, r7, r1
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2207      	movs	r2, #7
 8004ab8:	401a      	ands	r2, r3
 8004aba:	0013      	movs	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	3351      	adds	r3, #81	; 0x51
 8004ac4:	33ff      	adds	r3, #255	; 0xff
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	3304      	adds	r3, #4
 8004acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2207      	movs	r2, #7
 8004aec:	4013      	ands	r3, r2
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	0011      	movs	r1, r2
 8004afc:	0018      	movs	r0, r3
 8004afe:	f004 fdd1 	bl	80096a4 <USB_EPStartXfer>

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	000a      	movs	r2, r1
 8004b16:	1cfb      	adds	r3, r7, #3
 8004b18:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b1a:	1cfb      	adds	r3, r7, #3
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2207      	movs	r2, #7
 8004b20:	401a      	ands	r2, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	23b8      	movs	r3, #184	; 0xb8
 8004b26:	0059      	lsls	r1, r3, #1
 8004b28:	0013      	movs	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	18c3      	adds	r3, r0, r3
 8004b32:	185b      	adds	r3, r3, r1
 8004b34:	681b      	ldr	r3, [r3, #0]
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b002      	add	sp, #8
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b086      	sub	sp, #24
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	200b      	movs	r0, #11
 8004b4c:	183b      	adds	r3, r7, r0
 8004b4e:	1c0a      	adds	r2, r1, #0
 8004b50:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b52:	183b      	adds	r3, r7, r0
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2207      	movs	r2, #7
 8004b58:	401a      	ands	r2, r3
 8004b5a:	0013      	movs	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	3310      	adds	r3, #16
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	18d3      	adds	r3, r2, r3
 8004b68:	3304      	adds	r3, #4
 8004b6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2224      	movs	r2, #36	; 0x24
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b92:	183b      	adds	r3, r7, r0
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2207      	movs	r2, #7
 8004b98:	4013      	ands	r3, r2
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f004 fd7b 	bl	80096a4 <USB_EPStartXfer>

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b006      	add	sp, #24
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	000a      	movs	r2, r1
 8004bc2:	1cfb      	adds	r3, r7, #3
 8004bc4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bc6:	1cfb      	adds	r3, r7, #3
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2207      	movs	r2, #7
 8004bcc:	4013      	ands	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	7912      	ldrb	r2, [r2, #4]
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e048      	b.n	8004c6c <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bda:	1cfb      	adds	r3, r7, #3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b25b      	sxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da10      	bge.n	8004c06 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be4:	1cfb      	adds	r3, r7, #3
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2207      	movs	r2, #7
 8004bea:	401a      	ands	r2, r3
 8004bec:	0013      	movs	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	189b      	adds	r3, r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	3310      	adds	r3, #16
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	18d3      	adds	r3, r2, r3
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	705a      	strb	r2, [r3, #1]
 8004c04:	e00e      	b.n	8004c24 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c06:	1cfb      	adds	r3, r7, #3
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	0013      	movs	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	189b      	adds	r3, r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	3351      	adds	r3, #81	; 0x51
 8004c14:	33ff      	adds	r3, #255	; 0xff
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	18d3      	adds	r3, r2, r3
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c2a:	1cfb      	adds	r3, r7, #3
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2207      	movs	r2, #7
 8004c30:	4013      	ands	r3, r2
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	23a5      	movs	r3, #165	; 0xa5
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_PCD_EP_SetStall+0x90>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e011      	b.n	8004c6c <HAL_PCD_EP_SetStall+0xb4>
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	23a5      	movs	r3, #165	; 0xa5
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	2101      	movs	r1, #1
 8004c50:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	0011      	movs	r1, r2
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f005 fd38 	bl	800a6d0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	23a5      	movs	r3, #165	; 0xa5
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	2100      	movs	r1, #0
 8004c68:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b004      	add	sp, #16
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	000a      	movs	r2, r1
 8004c7e:	1cfb      	adds	r3, r7, #3
 8004c80:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c82:	1cfb      	adds	r3, r7, #3
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	220f      	movs	r2, #15
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	7912      	ldrb	r2, [r2, #4]
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e04a      	b.n	8004d2c <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c96:	1cfb      	adds	r3, r7, #3
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	da10      	bge.n	8004cc2 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ca0:	1cfb      	adds	r3, r7, #3
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	0013      	movs	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	3310      	adds	r3, #16
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	18d3      	adds	r3, r2, r3
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	705a      	strb	r2, [r3, #1]
 8004cc0:	e010      	b.n	8004ce4 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc2:	1cfb      	adds	r3, r7, #3
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2207      	movs	r2, #7
 8004cc8:	401a      	ands	r2, r3
 8004cca:	0013      	movs	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	189b      	adds	r3, r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	3351      	adds	r3, #81	; 0x51
 8004cd4:	33ff      	adds	r3, #255	; 0xff
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	18d3      	adds	r3, r2, r3
 8004cda:	3304      	adds	r3, #4
 8004cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cea:	1cfb      	adds	r3, r7, #3
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2207      	movs	r2, #7
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	23a5      	movs	r3, #165	; 0xa5
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	5cd3      	ldrb	r3, [r2, r3]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_PCD_EP_ClrStall+0x94>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e011      	b.n	8004d2c <HAL_PCD_EP_ClrStall+0xb8>
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	23a5      	movs	r3, #165	; 0xa5
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	2101      	movs	r1, #1
 8004d10:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	0011      	movs	r1, r2
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f005 fd1a 	bl	800a754 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	23a5      	movs	r3, #165	; 0xa5
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	2100      	movs	r1, #0
 8004d28:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b004      	add	sp, #16
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d34:	b5b0      	push	{r4, r5, r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	000a      	movs	r2, r1
 8004d3e:	1cfb      	adds	r3, r7, #3
 8004d40:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d42:	1cfb      	adds	r3, r7, #3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	da0d      	bge.n	8004d68 <HAL_PCD_EP_Abort+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d4c:	1cfb      	adds	r3, r7, #3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2207      	movs	r2, #7
 8004d52:	401a      	ands	r2, r3
 8004d54:	0013      	movs	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	3310      	adds	r3, #16
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	18d3      	adds	r3, r2, r3
 8004d62:	3304      	adds	r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e00d      	b.n	8004d84 <HAL_PCD_EP_Abort+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d68:	1cfb      	adds	r3, r7, #3
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	401a      	ands	r2, r3
 8004d70:	0013      	movs	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	189b      	adds	r3, r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	3351      	adds	r3, #81	; 0x51
 8004d7a:	33ff      	adds	r3, #255	; 0xff
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	18d3      	adds	r3, r2, r3
 8004d80:	3304      	adds	r3, #4
 8004d82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	250b      	movs	r5, #11
 8004d8a:	197c      	adds	r4, r7, r5
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	0011      	movs	r1, r2
 8004d90:	0018      	movs	r0, r3
 8004d92:	f005 fd71 	bl	800a878 <USB_EPStopXfer>
 8004d96:	0003      	movs	r3, r0
 8004d98:	7023      	strb	r3, [r4, #0]

  return ret;
 8004d9a:	197b      	adds	r3, r7, r5
 8004d9c:	781b      	ldrb	r3, [r3, #0]
}
 8004d9e:	0018      	movs	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b004      	add	sp, #16
 8004da4:	bdb0      	pop	{r4, r5, r7, pc}

08004da6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	000a      	movs	r2, r1
 8004db0:	1cfb      	adds	r3, r7, #3
 8004db2:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	23a5      	movs	r3, #165	; 0xa5
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	5cd3      	ldrb	r3, [r2, r3]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_PCD_EP_Flush+0x1e>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e01f      	b.n	8004e04 <HAL_PCD_EP_Flush+0x5e>
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	23a5      	movs	r3, #165	; 0xa5
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	2101      	movs	r1, #1
 8004dcc:	54d1      	strb	r1, [r2, r3]

  if ((ep_addr & 0x80U) == 0x80U)
 8004dce:	1cfb      	adds	r3, r7, #3
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b25b      	sxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	da0a      	bge.n	8004dee <HAL_PCD_EP_Flush+0x48>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	1cfb      	adds	r3, r7, #3
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2107      	movs	r1, #7
 8004de2:	400b      	ands	r3, r1
 8004de4:	0019      	movs	r1, r3
 8004de6:	0010      	movs	r0, r2
 8004de8:	f003 ffae 	bl	8008d48 <USB_FlushTxFifo>
 8004dec:	e004      	b.n	8004df8 <HAL_PCD_EP_Flush+0x52>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f003 ffb2 	bl	8008d5c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	23a5      	movs	r3, #165	; 0xa5
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	2100      	movs	r1, #0
 8004e00:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	0018      	movs	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b002      	add	sp, #8
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b08e      	sub	sp, #56	; 0x38
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e14:	e362      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1c:	2022      	movs	r0, #34	; 0x22
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8004e22:	183b      	adds	r3, r7, r0
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	2421      	movs	r4, #33	; 0x21
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	210f      	movs	r1, #15
 8004e2e:	400a      	ands	r2, r1
 8004e30:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004e32:	193b      	adds	r3, r7, r4
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d000      	beq.n	8004e3c <PCD_EP_ISR_Handler+0x30>
 8004e3a:	e12d      	b.n	8005098 <PCD_EP_ISR_Handler+0x28c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004e3c:	183b      	adds	r3, r7, r0
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	2210      	movs	r2, #16
 8004e42:	4013      	ands	r3, r2
 8004e44:	d140      	bne.n	8004ec8 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4ac6      	ldr	r2, [pc, #792]	; (8005168 <PCD_EP_ISR_Handler+0x35c>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	0209      	lsls	r1, r1, #8
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3314      	adds	r3, #20
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4abf      	ldr	r2, [pc, #764]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 8004e6e:	4694      	mov	ip, r2
 8004e70:	4463      	add	r3, ip
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	059b      	lsls	r3, r3, #22
 8004e78:	0d9a      	lsrs	r2, r3, #22
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	18d2      	adds	r2, r2, r3
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	0018      	movs	r0, r3
 8004e92:	f00d fa71 	bl	8012378 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	7c5b      	ldrb	r3, [r3, #17]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d100      	bne.n	8004ea2 <PCD_EP_ISR_Handler+0x96>
 8004ea0:	e31c      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d000      	beq.n	8004eac <PCD_EP_ISR_Handler+0xa0>
 8004eaa:	e317      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7c5b      	ldrb	r3, [r3, #17]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	4252      	negs	r2, r2
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	745a      	strb	r2, [r3, #17]
 8004ec6:	e309      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3355      	adds	r3, #85	; 0x55
 8004ecc:	33ff      	adds	r3, #255	; 0xff
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2132      	movs	r1, #50	; 0x32
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	881a      	ldrh	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d02a      	beq.n	8004f3e <PCD_EP_ISR_Handler+0x132>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	0010      	movs	r0, r2
 8004ef6:	f7ff fa0b 	bl	8004310 <PCD_GET_EP_RX_CNT>
 8004efa:	0003      	movs	r3, r0
 8004efc:	001a      	movs	r2, r3
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	22a7      	movs	r2, #167	; 0xa7
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	1899      	adds	r1, r3, r2
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f005 fdde 	bl	800aad8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a93      	ldr	r2, [pc, #588]	; (8005170 <PCD_EP_ISR_Handler+0x364>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f00d f99a 	bl	8012270 <HAL_PCD_SetupStageCallback>
 8004f3c:	e2ce      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8004f3e:	2332      	movs	r3, #50	; 0x32
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	2200      	movs	r2, #0
 8004f44:	5e9b      	ldrsh	r3, [r3, r2]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	db00      	blt.n	8004f4c <PCD_EP_ISR_Handler+0x140>
 8004f4a:	e2c7      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a87      	ldr	r2, [pc, #540]	; (8005170 <PCD_EP_ISR_Handler+0x364>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5e:	2180      	movs	r1, #128	; 0x80
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	0019      	movs	r1, r3
 8004f70:	0010      	movs	r0, r2
 8004f72:	f7ff f9cd 	bl	8004310 <PCD_GET_EP_RX_CNT>
 8004f76:	0003      	movs	r3, r0
 8004f78:	001a      	movs	r2, r3
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01a      	beq.n	8004fbc <PCD_EP_ISR_Handler+0x1b0>
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <PCD_EP_ISR_Handler+0x1b0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	6959      	ldr	r1, [r3, #20]
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f005 fd9a 	bl	800aad8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	18d2      	adds	r2, r2, r3
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f00d fa86 	bl	80124c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	2132      	movs	r1, #50	; 0x32
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	881a      	ldrh	r2, [r3, #0]
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d000      	beq.n	8004fd6 <PCD_EP_ISR_Handler+0x1ca>
 8004fd4:	e282      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
 8004fd6:	187b      	adds	r3, r7, r1
 8004fd8:	881a      	ldrh	r2, [r3, #0]
 8004fda:	23c0      	movs	r3, #192	; 0xc0
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	401a      	ands	r2, r3
 8004fe0:	23c0      	movs	r3, #192	; 0xc0
 8004fe2:	019b      	lsls	r3, r3, #6
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d100      	bne.n	8004fea <PCD_EP_ISR_Handler+0x1de>
 8004fe8:	e278      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004fea:	4b60      	ldr	r3, [pc, #384]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	4b5f      	ldr	r3, [pc, #380]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 8004ff0:	0192      	lsls	r2, r2, #6
 8004ff2:	0992      	lsrs	r2, r2, #6
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8004ffc:	d916      	bls.n	800502c <PCD_EP_ISR_Handler+0x220>
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	221f      	movs	r2, #31
 800500c:	4013      	ands	r3, r2
 800500e:	d102      	bne.n	8005016 <PCD_EP_ISR_Handler+0x20a>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3b01      	subs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	4b55      	ldr	r3, [pc, #340]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	069b      	lsls	r3, r3, #26
 800501e:	431a      	orrs	r2, r3
 8005020:	4b52      	ldr	r3, [pc, #328]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	0609      	lsls	r1, r1, #24
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	e01e      	b.n	800506a <PCD_EP_ISR_Handler+0x25e>
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d107      	bne.n	8005044 <PCD_EP_ISR_Handler+0x238>
 8005034:	4b4d      	ldr	r3, [pc, #308]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	4b4c      	ldr	r3, [pc, #304]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	0609      	lsls	r1, r1, #24
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	e012      	b.n	800506a <PCD_EP_ISR_Handler+0x25e>
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2201      	movs	r2, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d002      	beq.n	800505c <PCD_EP_ISR_Handler+0x250>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	3301      	adds	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	4b43      	ldr	r3, [pc, #268]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	069a      	lsls	r2, r3, #26
 8005064:	4b41      	ldr	r3, [pc, #260]	; (800516c <PCD_EP_ISR_Handler+0x360>)
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a40      	ldr	r2, [pc, #256]	; (8005174 <PCD_EP_ISR_Handler+0x368>)
 8005072:	4013      	ands	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2280      	movs	r2, #128	; 0x80
 800507a:	0152      	lsls	r2, r2, #5
 800507c:	4053      	eors	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2280      	movs	r2, #128	; 0x80
 8005084:	0192      	lsls	r2, r2, #6
 8005086:	4053      	eors	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4939      	ldr	r1, [pc, #228]	; (8005178 <PCD_EP_ISR_Handler+0x36c>)
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e221      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	001a      	movs	r2, r3
 800509e:	2121      	movs	r1, #33	; 0x21
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	18d3      	adds	r3, r2, r3
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	2032      	movs	r0, #50	; 0x32
 80050ac:	183b      	adds	r3, r7, r0
 80050ae:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80050b0:	183b      	adds	r3, r7, r0
 80050b2:	2200      	movs	r2, #0
 80050b4:	5e9b      	ldrsh	r3, [r3, r2]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	db00      	blt.n	80050bc <PCD_EP_ISR_Handler+0x2b0>
 80050ba:	e0e2      	b.n	8005282 <PCD_EP_ISR_Handler+0x476>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	001a      	movs	r2, r3
 80050c2:	187b      	adds	r3, r7, r1
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	18d3      	adds	r3, r2, r3
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a28      	ldr	r2, [pc, #160]	; (8005170 <PCD_EP_ISR_Handler+0x364>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	001a      	movs	r2, r3
 80050d8:	0008      	movs	r0, r1
 80050da:	187b      	adds	r3, r7, r1
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	18d3      	adds	r3, r2, r3
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	2180      	movs	r1, #128	; 0x80
 80050e6:	430a      	orrs	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80050ea:	183b      	adds	r3, r7, r0
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	0013      	movs	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	3351      	adds	r3, #81	; 0x51
 80050f8:	33ff      	adds	r3, #255	; 0xff
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	18d3      	adds	r3, r2, r3
 80050fe:	3304      	adds	r3, #4
 8005100:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	7b1b      	ldrb	r3, [r3, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11d      	bne.n	8005146 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	2524      	movs	r5, #36	; 0x24
 8005116:	197c      	adds	r4, r7, r5
 8005118:	0019      	movs	r1, r3
 800511a:	0010      	movs	r0, r2
 800511c:	f7ff f8f8 	bl	8004310 <PCD_GET_EP_RX_CNT>
 8005120:	0003      	movs	r3, r0
 8005122:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8005124:	002c      	movs	r4, r5
 8005126:	193b      	adds	r3, r7, r4
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d100      	bne.n	8005130 <PCD_EP_ISR_Handler+0x324>
 800512e:	e080      	b.n	8005232 <PCD_EP_ISR_Handler+0x426>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	6959      	ldr	r1, [r3, #20]
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	88da      	ldrh	r2, [r3, #6]
 800513c:	193b      	adds	r3, r7, r4
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	f005 fcca 	bl	800aad8 <USB_ReadPMA>
 8005144:	e075      	b.n	8005232 <PCD_EP_ISR_Handler+0x426>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005148:	78db      	ldrb	r3, [r3, #3]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d116      	bne.n	800517c <PCD_EP_ISR_Handler+0x370>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800514e:	2324      	movs	r3, #36	; 0x24
 8005150:	18fc      	adds	r4, r7, r3
 8005152:	2332      	movs	r3, #50	; 0x32
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0018      	movs	r0, r3
 800515e:	f000 f9cb 	bl	80054f8 <HAL_PCD_EP_DB_Receive>
 8005162:	0003      	movs	r3, r0
 8005164:	8023      	strh	r3, [r4, #0]
 8005166:	e064      	b.n	8005232 <PCD_EP_ISR_Handler+0x426>
 8005168:	07ff8f0f 	.word	0x07ff8f0f
 800516c:	40009800 	.word	0x40009800
 8005170:	07ff0f8f 	.word	0x07ff0f8f
 8005174:	07ffbf8f 	.word	0x07ffbf8f
 8005178:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	001a      	movs	r2, r3
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	18d3      	adds	r3, r2, r3
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4acb      	ldr	r2, [pc, #812]	; (80054bc <PCD_EP_ISR_Handler+0x6b0>)
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	001a      	movs	r2, r3
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	18d3      	adds	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	49c7      	ldr	r1, [pc, #796]	; (80054c0 <PCD_EP_ISR_Handler+0x6b4>)
 80051a4:	430a      	orrs	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	001a      	movs	r2, r3
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	18d3      	adds	r3, r2, r3
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	01db      	lsls	r3, r3, #7
 80051bc:	4013      	ands	r3, r2
 80051be:	d01c      	beq.n	80051fa <PCD_EP_ISR_Handler+0x3ee>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2524      	movs	r5, #36	; 0x24
 80051cc:	197c      	adds	r4, r7, r5
 80051ce:	0019      	movs	r1, r3
 80051d0:	0010      	movs	r0, r2
 80051d2:	f7ff f8bf 	bl	8004354 <PCD_GET_EP_DBUF0_CNT>
 80051d6:	0003      	movs	r3, r0
 80051d8:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80051da:	002c      	movs	r4, r5
 80051dc:	193b      	adds	r3, r7, r4
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d026      	beq.n	8005232 <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ea:	6959      	ldr	r1, [r3, #20]
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	891a      	ldrh	r2, [r3, #8]
 80051f0:	193b      	adds	r3, r7, r4
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	f005 fc70 	bl	800aad8 <USB_ReadPMA>
 80051f8:	e01b      	b.n	8005232 <PCD_EP_ISR_Handler+0x426>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	2524      	movs	r5, #36	; 0x24
 8005206:	197c      	adds	r4, r7, r5
 8005208:	0019      	movs	r1, r3
 800520a:	0010      	movs	r0, r2
 800520c:	f7ff f8c4 	bl	8004398 <PCD_GET_EP_DBUF1_CNT>
 8005210:	0003      	movs	r3, r0
 8005212:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8005214:	002c      	movs	r4, r5
 8005216:	193b      	adds	r3, r7, r4
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	6959      	ldr	r1, [r3, #20]
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	895a      	ldrh	r2, [r3, #10]
 800522a:	193b      	adds	r3, r7, r4
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	f005 fc53 	bl	800aad8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	2124      	movs	r1, #36	; 0x24
 8005238:	187b      	adds	r3, r7, r1
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	18d2      	adds	r2, r2, r3
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	187b      	adds	r3, r7, r1
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	18d2      	adds	r2, r2, r3
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <PCD_EP_ISR_Handler+0x458>
 8005258:	187b      	adds	r3, r7, r1
 800525a:	881a      	ldrh	r2, [r3, #0]
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d207      	bcs.n	8005274 <PCD_EP_ISR_Handler+0x468>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	0011      	movs	r1, r2
 800526c:	0018      	movs	r0, r3
 800526e:	f00d f92b 	bl	80124c8 <HAL_PCD_DataOutStageCallback>
 8005272:	e006      	b.n	8005282 <PCD_EP_ISR_Handler+0x476>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527a:	0011      	movs	r1, r2
 800527c:	0018      	movs	r0, r3
 800527e:	f004 fa11 	bl	80096a4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8005282:	2032      	movs	r0, #50	; 0x32
 8005284:	183b      	adds	r3, r7, r0
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	4013      	ands	r3, r2
 800528c:	d100      	bne.n	8005290 <PCD_EP_ISR_Handler+0x484>
 800528e:	e125      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
      {
        ep = &hpcd->IN_ep[epindex];
 8005290:	2121      	movs	r1, #33	; 0x21
 8005292:	187b      	adds	r3, r7, r1
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	0013      	movs	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	189b      	adds	r3, r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	3310      	adds	r3, #16
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	18d3      	adds	r3, r2, r3
 80052a4:	3304      	adds	r3, #4
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	001a      	movs	r2, r3
 80052ae:	187b      	adds	r3, r7, r1
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	18d3      	adds	r3, r2, r3
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a82      	ldr	r2, [pc, #520]	; (80054c4 <PCD_EP_ISR_Handler+0x6b8>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	001a      	movs	r2, r3
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	18d3      	adds	r3, r2, r3
 80052cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ce:	2180      	movs	r1, #128	; 0x80
 80052d0:	0209      	lsls	r1, r1, #8
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	78db      	ldrb	r3, [r3, #3]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d000      	beq.n	80052e0 <PCD_EP_ISR_Handler+0x4d4>
 80052de:	e0a3      	b.n	8005428 <PCD_EP_ISR_Handler+0x61c>
        {
          ep->xfer_len = 0U;
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	2200      	movs	r2, #0
 80052e4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	7b1b      	ldrb	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d100      	bne.n	80052f0 <PCD_EP_ISR_Handler+0x4e4>
 80052ee:	e093      	b.n	8005418 <PCD_EP_ISR_Handler+0x60c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052f0:	183b      	adds	r3, r7, r0
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	2240      	movs	r2, #64	; 0x40
 80052f6:	4013      	ands	r3, r2
 80052f8:	d047      	beq.n	800538a <PCD_EP_ISR_Handler+0x57e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fc:	785b      	ldrb	r3, [r3, #1]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d121      	bne.n	8005346 <PCD_EP_ISR_Handler+0x53a>
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4a6f      	ldr	r2, [pc, #444]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 800530a:	4694      	mov	ip, r2
 800530c:	4463      	add	r3, ip
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	496c      	ldr	r1, [pc, #432]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005318:	468c      	mov	ip, r1
 800531a:	4463      	add	r3, ip
 800531c:	0192      	lsls	r2, r2, #6
 800531e:	0992      	lsrs	r2, r2, #6
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4a67      	ldr	r2, [pc, #412]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 800532a:	4694      	mov	ip, r2
 800532c:	4463      	add	r3, ip
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4964      	ldr	r1, [pc, #400]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005338:	468c      	mov	ip, r1
 800533a:	4463      	add	r3, ip
 800533c:	2180      	movs	r1, #128	; 0x80
 800533e:	0609      	lsls	r1, r1, #24
 8005340:	430a      	orrs	r2, r1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e068      	b.n	8005418 <PCD_EP_ISR_Handler+0x60c>
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d164      	bne.n	8005418 <PCD_EP_ISR_Handler+0x60c>
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4a5c      	ldr	r2, [pc, #368]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005356:	4694      	mov	ip, r2
 8005358:	4463      	add	r3, ip
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4959      	ldr	r1, [pc, #356]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005364:	468c      	mov	ip, r1
 8005366:	4463      	add	r3, ip
 8005368:	0412      	lsls	r2, r2, #16
 800536a:	0c12      	lsrs	r2, r2, #16
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4a54      	ldr	r2, [pc, #336]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005376:	189a      	adds	r2, r3, r2
 8005378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4952      	ldr	r1, [pc, #328]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005380:	468c      	mov	ip, r1
 8005382:	4463      	add	r3, ip
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e046      	b.n	8005418 <PCD_EP_ISR_Handler+0x60c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d121      	bne.n	80053d6 <PCD_EP_ISR_Handler+0x5ca>
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4a4b      	ldr	r2, [pc, #300]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 800539a:	4694      	mov	ip, r2
 800539c:	4463      	add	r3, ip
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4948      	ldr	r1, [pc, #288]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 80053a8:	468c      	mov	ip, r1
 80053aa:	4463      	add	r3, ip
 80053ac:	0192      	lsls	r2, r2, #6
 80053ae:	0992      	lsrs	r2, r2, #6
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4a43      	ldr	r2, [pc, #268]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 80053ba:	4694      	mov	ip, r2
 80053bc:	4463      	add	r3, ip
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4940      	ldr	r1, [pc, #256]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 80053c8:	468c      	mov	ip, r1
 80053ca:	4463      	add	r3, ip
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	0609      	lsls	r1, r1, #24
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	e020      	b.n	8005418 <PCD_EP_ISR_Handler+0x60c>
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d11c      	bne.n	8005418 <PCD_EP_ISR_Handler+0x60c>
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4a38      	ldr	r2, [pc, #224]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 80053e6:	4694      	mov	ip, r2
 80053e8:	4463      	add	r3, ip
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4935      	ldr	r1, [pc, #212]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 80053f4:	468c      	mov	ip, r1
 80053f6:	4463      	add	r3, ip
 80053f8:	0412      	lsls	r2, r2, #16
 80053fa:	0c12      	lsrs	r2, r2, #16
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4a30      	ldr	r2, [pc, #192]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005406:	189a      	adds	r2, r3, r2
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	492e      	ldr	r1, [pc, #184]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 8005410:	468c      	mov	ip, r1
 8005412:	4463      	add	r3, ip
 8005414:	6852      	ldr	r2, [r2, #4]
 8005416:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	0011      	movs	r1, r2
 8005420:	0018      	movs	r0, r3
 8005422:	f00c ffa9 	bl	8012378 <HAL_PCD_DataInStageCallback>
 8005426:	e059      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005428:	2332      	movs	r3, #50	; 0x32
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	881a      	ldrh	r2, [r3, #0]
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4013      	ands	r3, r2
 8005434:	d14a      	bne.n	80054cc <PCD_EP_ISR_Handler+0x6c0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <PCD_EP_ISR_Handler+0x6bc>)
 800543e:	4694      	mov	ip, r2
 8005440:	4463      	add	r3, ip
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	b29a      	uxth	r2, r3
 8005448:	2126      	movs	r1, #38	; 0x26
 800544a:	187b      	adds	r3, r7, r1
 800544c:	0592      	lsls	r2, r2, #22
 800544e:	0d92      	lsrs	r2, r2, #22
 8005450:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	187b      	adds	r3, r7, r1
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d907      	bls.n	800546e <PCD_EP_ISR_Handler+0x662>
            {
              ep->xfer_len -= TxPctSize;
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	187b      	adds	r3, r7, r1
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	619a      	str	r2, [r3, #24]
 800546c:	e002      	b.n	8005474 <PCD_EP_ISR_Handler+0x668>
            }
            else
            {
              ep->xfer_len = 0U;
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	2200      	movs	r2, #0
 8005472:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <PCD_EP_ISR_Handler+0x680>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f00c ff77 	bl	8012378 <HAL_PCD_DataInStageCallback>
 800548a:	e027      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	2126      	movs	r1, #38	; 0x26
 8005492:	187b      	adds	r3, r7, r1
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	18d2      	adds	r2, r2, r3
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	18d2      	adds	r2, r2, r3
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b0:	0011      	movs	r1, r2
 80054b2:	0018      	movs	r0, r3
 80054b4:	f004 f8f6 	bl	80096a4 <USB_EPStartXfer>
 80054b8:	e010      	b.n	80054dc <PCD_EP_ISR_Handler+0x6d0>
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	07ff8f8f 	.word	0x07ff8f8f
 80054c0:	000080c0 	.word	0x000080c0
 80054c4:	07ff8f0f 	.word	0x07ff8f0f
 80054c8:	40009800 	.word	0x40009800
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80054cc:	2332      	movs	r3, #50	; 0x32
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	881a      	ldrh	r2, [r3, #0]
 80054d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f000 f8fa 	bl	80056d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	4013      	ands	r3, r2
 80054e8:	d000      	beq.n	80054ec <PCD_EP_ISR_Handler+0x6e0>
 80054ea:	e494      	b.n	8004e16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b00e      	add	sp, #56	; 0x38
 80054f4:	bdb0      	pop	{r4, r5, r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)

080054f8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054f8:	b5b0      	push	{r4, r5, r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	1dbb      	adds	r3, r7, #6
 8005504:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005506:	1dbb      	adds	r3, r7, #6
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	01db      	lsls	r3, r3, #7
 800550e:	4013      	ands	r3, r2
 8005510:	d068      	beq.n	80055e4 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	251e      	movs	r5, #30
 800551e:	197c      	adds	r4, r7, r5
 8005520:	0019      	movs	r1, r3
 8005522:	0010      	movs	r0, r2
 8005524:	f7fe ff16 	bl	8004354 <PCD_GET_EP_DBUF0_CNT>
 8005528:	0003      	movs	r3, r0
 800552a:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	197b      	adds	r3, r7, r5
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d307      	bcc.n	8005548 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	197b      	adds	r3, r7, r5
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	1ad2      	subs	r2, r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	619a      	str	r2, [r3, #24]
 8005546:	e002      	b.n	800554e <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2200      	movs	r2, #0
 800554c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11a      	bne.n	800558c <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	001a      	movs	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	18d3      	adds	r3, r2, r3
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a56      	ldr	r2, [pc, #344]	; (80056c0 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	0192      	lsls	r2, r2, #6
 8005572:	4053      	eors	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	001a      	movs	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	18d3      	adds	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	494f      	ldr	r1, [pc, #316]	; (80056c4 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8005588:	430a      	orrs	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800558c:	1dbb      	adds	r3, r7, #6
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	2240      	movs	r2, #64	; 0x40
 8005592:	4013      	ands	r3, r2
 8005594:	d015      	beq.n	80055c2 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	001a      	movs	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	18d3      	adds	r3, r2, r3
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a48      	ldr	r2, [pc, #288]	; (80056c8 <HAL_PCD_EP_DB_Receive+0x1d0>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	001a      	movs	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	18d3      	adds	r3, r2, r3
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4943      	ldr	r1, [pc, #268]	; (80056cc <HAL_PCD_EP_DB_Receive+0x1d4>)
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80055c2:	241e      	movs	r4, #30
 80055c4:	193b      	adds	r3, r7, r4
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d100      	bne.n	80055ce <HAL_PCD_EP_DB_Receive+0xd6>
 80055cc:	e071      	b.n	80056b2 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6959      	ldr	r1, [r3, #20]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	891a      	ldrh	r2, [r3, #8]
 80055da:	193b      	adds	r3, r7, r4
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	f005 fa7b 	bl	800aad8 <USB_ReadPMA>
 80055e2:	e066      	b.n	80056b2 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	251e      	movs	r5, #30
 80055f0:	197c      	adds	r4, r7, r5
 80055f2:	0019      	movs	r1, r3
 80055f4:	0010      	movs	r0, r2
 80055f6:	f7fe fecf 	bl	8004398 <PCD_GET_EP_DBUF1_CNT>
 80055fa:	0003      	movs	r3, r0
 80055fc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	197b      	adds	r3, r7, r5
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d307      	bcc.n	800561a <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	197b      	adds	r3, r7, r5
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	619a      	str	r2, [r3, #24]
 8005618:	e002      	b.n	8005620 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11a      	bne.n	800565e <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	001a      	movs	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	18d3      	adds	r3, r2, r3
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800563a:	4013      	ands	r3, r2
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	0192      	lsls	r2, r2, #6
 8005644:	4053      	eors	r3, r2
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	001a      	movs	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	18d3      	adds	r3, r2, r3
 8005656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005658:	491a      	ldr	r1, [pc, #104]	; (80056c4 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800565e:	1dbb      	adds	r3, r7, #6
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	2240      	movs	r2, #64	; 0x40
 8005664:	4013      	ands	r3, r2
 8005666:	d115      	bne.n	8005694 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	001a      	movs	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	18d3      	adds	r3, r2, r3
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800567a:	4013      	ands	r3, r2
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	001a      	movs	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	18d3      	adds	r3, r2, r3
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	490f      	ldr	r1, [pc, #60]	; (80056cc <HAL_PCD_EP_DB_Receive+0x1d4>)
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8005694:	241e      	movs	r4, #30
 8005696:	193b      	adds	r3, r7, r4
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	895a      	ldrh	r2, [r3, #10]
 80056aa:	193b      	adds	r3, r7, r4
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	f005 fa13 	bl	800aad8 <USB_ReadPMA>
    }
  }

  return count;
 80056b2:	231e      	movs	r3, #30
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	881b      	ldrh	r3, [r3, #0]
}
 80056b8:	0018      	movs	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b00a      	add	sp, #40	; 0x28
 80056be:	bdb0      	pop	{r4, r5, r7, pc}
 80056c0:	07ffbf8f 	.word	0x07ffbf8f
 80056c4:	00008080 	.word	0x00008080
 80056c8:	07ff8f8f 	.word	0x07ff8f8f
 80056cc:	000080c0 	.word	0x000080c0

080056d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056d0:	b5b0      	push	{r4, r5, r7, lr}
 80056d2:	b08e      	sub	sp, #56	; 0x38
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	1dbb      	adds	r3, r7, #6
 80056dc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056de:	1dbb      	adds	r3, r7, #6
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	2240      	movs	r2, #64	; 0x40
 80056e4:	4013      	ands	r3, r2
 80056e6:	d100      	bne.n	80056ea <HAL_PCD_EP_DB_Transmit+0x1a>
 80056e8:	e1c4      	b.n	8005a74 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	251e      	movs	r5, #30
 80056f6:	197c      	adds	r4, r7, r5
 80056f8:	0019      	movs	r1, r3
 80056fa:	0010      	movs	r0, r2
 80056fc:	f7fe fe2a 	bl	8004354 <PCD_GET_EP_DBUF0_CNT>
 8005700:	0003      	movs	r3, r0
 8005702:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	197b      	adds	r3, r7, r5
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d907      	bls.n	8005720 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	197b      	adds	r3, r7, r5
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	1ad2      	subs	r2, r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	619a      	str	r2, [r3, #24]
 800571e:	e002      	b.n	8005726 <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d000      	beq.n	8005730 <HAL_PCD_EP_DB_Transmit+0x60>
 800572e:	e0b2      	b.n	8005896 <HAL_PCD_EP_DB_Transmit+0x1c6>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d121      	bne.n	800577c <HAL_PCD_EP_DB_Transmit+0xac>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4adb      	ldr	r2, [pc, #876]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005740:	4694      	mov	ip, r2
 8005742:	4463      	add	r3, ip
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	49d7      	ldr	r1, [pc, #860]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800574e:	468c      	mov	ip, r1
 8005750:	4463      	add	r3, ip
 8005752:	0192      	lsls	r2, r2, #6
 8005754:	0992      	lsrs	r2, r2, #6
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4ad3      	ldr	r2, [pc, #844]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005760:	4694      	mov	ip, r2
 8005762:	4463      	add	r3, ip
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	49cf      	ldr	r1, [pc, #828]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800576e:	468c      	mov	ip, r1
 8005770:	4463      	add	r3, ip
 8005772:	2180      	movs	r1, #128	; 0x80
 8005774:	0609      	lsls	r1, r1, #24
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e020      	b.n	80057be <HAL_PCD_EP_DB_Transmit+0xee>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d11c      	bne.n	80057be <HAL_PCD_EP_DB_Transmit+0xee>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4ac8      	ldr	r2, [pc, #800]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800578c:	4694      	mov	ip, r2
 800578e:	4463      	add	r3, ip
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	49c4      	ldr	r1, [pc, #784]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800579a:	468c      	mov	ip, r1
 800579c:	4463      	add	r3, ip
 800579e:	0412      	lsls	r2, r2, #16
 80057a0:	0c12      	lsrs	r2, r2, #16
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4ac0      	ldr	r2, [pc, #768]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80057ac:	189a      	adds	r2, r3, r2
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	49bd      	ldr	r1, [pc, #756]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80057b6:	468c      	mov	ip, r1
 80057b8:	4463      	add	r3, ip
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d121      	bne.n	800580a <HAL_PCD_EP_DB_Transmit+0x13a>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4ab7      	ldr	r2, [pc, #732]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80057ce:	4694      	mov	ip, r2
 80057d0:	4463      	add	r3, ip
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	49b4      	ldr	r1, [pc, #720]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80057dc:	468c      	mov	ip, r1
 80057de:	4463      	add	r3, ip
 80057e0:	0192      	lsls	r2, r2, #6
 80057e2:	0992      	lsrs	r2, r2, #6
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4aaf      	ldr	r2, [pc, #700]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80057ee:	4694      	mov	ip, r2
 80057f0:	4463      	add	r3, ip
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	49ac      	ldr	r1, [pc, #688]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80057fc:	468c      	mov	ip, r1
 80057fe:	4463      	add	r3, ip
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	0609      	lsls	r1, r1, #24
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e020      	b.n	800584c <HAL_PCD_EP_DB_Transmit+0x17c>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d11c      	bne.n	800584c <HAL_PCD_EP_DB_Transmit+0x17c>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4aa4      	ldr	r2, [pc, #656]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800581a:	4694      	mov	ip, r2
 800581c:	4463      	add	r3, ip
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	49a1      	ldr	r1, [pc, #644]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005828:	468c      	mov	ip, r1
 800582a:	4463      	add	r3, ip
 800582c:	0412      	lsls	r2, r2, #16
 800582e:	0c12      	lsrs	r2, r2, #16
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4a9c      	ldr	r2, [pc, #624]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800583a:	189a      	adds	r2, r3, r2
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	499a      	ldr	r1, [pc, #616]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005844:	468c      	mov	ip, r1
 8005846:	4463      	add	r3, ip
 8005848:	6852      	ldr	r2, [r2, #4]
 800584a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	0011      	movs	r1, r2
 8005854:	0018      	movs	r0, r3
 8005856:	f00c fd8f 	bl	8012378 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800585a:	1dbb      	adds	r3, r7, #6
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	01db      	lsls	r3, r3, #7
 8005862:	4013      	ands	r3, r2
 8005864:	d100      	bne.n	8005868 <HAL_PCD_EP_DB_Transmit+0x198>
 8005866:	e2d6      	b.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	001a      	movs	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	18d3      	adds	r3, r2, r3
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a8d      	ldr	r2, [pc, #564]	; (8005ab0 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800587a:	4013      	ands	r3, r2
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	001a      	movs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800588e:	4989      	ldr	r1, [pc, #548]	; (8005ab4 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 8005890:	430a      	orrs	r2, r1
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e2bf      	b.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005896:	1dbb      	adds	r3, r7, #6
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4013      	ands	r3, r2
 80058a0:	d015      	beq.n	80058ce <HAL_PCD_EP_DB_Transmit+0x1fe>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	001a      	movs	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	18d3      	adds	r3, r2, r3
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a7f      	ldr	r2, [pc, #508]	; (8005ab0 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	001a      	movs	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	18d3      	adds	r3, r2, r3
 80058c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c8:	497a      	ldr	r1, [pc, #488]	; (8005ab4 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2224      	movs	r2, #36	; 0x24
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d000      	beq.n	80058da <HAL_PCD_EP_DB_Transmit+0x20a>
 80058d8:	e29d      	b.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	211e      	movs	r1, #30
 80058e0:	187b      	adds	r3, r7, r1
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	18d2      	adds	r2, r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	69da      	ldr	r2, [r3, #28]
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	18d2      	adds	r2, r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d309      	bcc.n	8005918 <HAL_PCD_EP_DB_Transmit+0x248>
        {
          len = ep->maxpacket;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1ad2      	subs	r2, r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	621a      	str	r2, [r3, #32]
 8005916:	e016      	b.n	8005946 <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else if (ep->xfer_len_db == 0U)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <HAL_PCD_EP_DB_Transmit+0x262>
        {
          len = TxPctSize;
 8005920:	231e      	movs	r3, #30
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]
 8005930:	e009      	b.n	8005946 <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2224      	movs	r2, #36	; 0x24
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d162      	bne.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x344>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4a55      	ldr	r2, [pc, #340]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005956:	4694      	mov	ip, r2
 8005958:	4463      	add	r3, ip
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4952      	ldr	r1, [pc, #328]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005964:	468c      	mov	ip, r1
 8005966:	4463      	add	r3, ip
 8005968:	0192      	lsls	r2, r2, #6
 800596a:	0992      	lsrs	r2, r2, #6
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	2b3e      	cmp	r3, #62	; 0x3e
 8005972:	d91e      	bls.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x2e2>
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	221f      	movs	r2, #31
 800597e:	4013      	ands	r3, r2
 8005980:	d102      	bne.n	8005988 <HAL_PCD_EP_DB_Transmit+0x2b8>
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	3b01      	subs	r3, #1
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4a47      	ldr	r2, [pc, #284]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005990:	4694      	mov	ip, r2
 8005992:	4463      	add	r3, ip
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	069b      	lsls	r3, r3, #26
 800599a:	431a      	orrs	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4942      	ldr	r1, [pc, #264]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80059a4:	468c      	mov	ip, r1
 80059a6:	4463      	add	r3, ip
 80059a8:	2180      	movs	r1, #128	; 0x80
 80059aa:	0609      	lsls	r1, r1, #24
 80059ac:	430a      	orrs	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e055      	b.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x38e>
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d111      	bne.n	80059dc <HAL_PCD_EP_DB_Transmit+0x30c>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4a3b      	ldr	r2, [pc, #236]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80059c0:	4694      	mov	ip, r2
 80059c2:	4463      	add	r3, ip
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4937      	ldr	r1, [pc, #220]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80059ce:	468c      	mov	ip, r1
 80059d0:	4463      	add	r3, ip
 80059d2:	2180      	movs	r1, #128	; 0x80
 80059d4:	0609      	lsls	r1, r1, #24
 80059d6:	430a      	orrs	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e040      	b.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x38e>
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	085b      	lsrs	r3, r3, #1
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	2201      	movs	r2, #1
 80059e6:	4013      	ands	r3, r2
 80059e8:	d002      	beq.n	80059f0 <HAL_PCD_EP_DB_Transmit+0x320>
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	3301      	adds	r3, #1
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4a2d      	ldr	r2, [pc, #180]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80059f8:	4694      	mov	ip, r2
 80059fa:	4463      	add	r3, ip
 80059fc:	6819      	ldr	r1, [r3, #0]
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	069a      	lsls	r2, r3, #26
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4828      	ldr	r0, [pc, #160]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005a0a:	4684      	mov	ip, r0
 8005a0c:	4463      	add	r3, ip
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e024      	b.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d120      	bne.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4a22      	ldr	r2, [pc, #136]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005a24:	4694      	mov	ip, r2
 8005a26:	4463      	add	r3, ip
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	491e      	ldr	r1, [pc, #120]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005a32:	468c      	mov	ip, r1
 8005a34:	4463      	add	r3, ip
 8005a36:	0412      	lsls	r2, r2, #16
 8005a38:	0c12      	lsrs	r2, r2, #16
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005a44:	4694      	mov	ip, r2
 8005a46:	4463      	add	r3, ip
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	041a      	lsls	r2, r3, #16
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4815      	ldr	r0, [pc, #84]	; (8005aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8005a56:	4684      	mov	ip, r0
 8005a58:	4463      	add	r3, ip
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6959      	ldr	r1, [r3, #20]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	891a      	ldrh	r2, [r3, #8]
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f004 ffbd 	bl	800a9ec <USB_WritePMA>
 8005a72:	e1d0      	b.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x746>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	251e      	movs	r5, #30
 8005a80:	197c      	adds	r4, r7, r5
 8005a82:	0019      	movs	r1, r3
 8005a84:	0010      	movs	r0, r2
 8005a86:	f7fe fc87 	bl	8004398 <PCD_GET_EP_DBUF1_CNT>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	197b      	adds	r3, r7, r5
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d30e      	bcc.n	8005ab8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	197b      	adds	r3, r7, r5
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	619a      	str	r2, [r3, #24]
 8005aa8:	e009      	b.n	8005abe <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	40009800 	.word	0x40009800
 8005ab0:	07ff8f8f 	.word	0x07ff8f8f
 8005ab4:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d000      	beq.n	8005ac8 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8005ac6:	e0b2      	b.n	8005c2e <HAL_PCD_EP_DB_Transmit+0x55e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d121      	bne.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x444>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4ab5      	ldr	r2, [pc, #724]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005ad8:	4694      	mov	ip, r2
 8005ada:	4463      	add	r3, ip
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	49b1      	ldr	r1, [pc, #708]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005ae6:	468c      	mov	ip, r1
 8005ae8:	4463      	add	r3, ip
 8005aea:	0192      	lsls	r2, r2, #6
 8005aec:	0992      	lsrs	r2, r2, #6
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4aad      	ldr	r2, [pc, #692]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005af8:	4694      	mov	ip, r2
 8005afa:	4463      	add	r3, ip
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	49a9      	ldr	r1, [pc, #676]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b06:	468c      	mov	ip, r1
 8005b08:	4463      	add	r3, ip
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	0609      	lsls	r1, r1, #24
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e020      	b.n	8005b56 <HAL_PCD_EP_DB_Transmit+0x486>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d11c      	bne.n	8005b56 <HAL_PCD_EP_DB_Transmit+0x486>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4aa2      	ldr	r2, [pc, #648]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b24:	4694      	mov	ip, r2
 8005b26:	4463      	add	r3, ip
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	499e      	ldr	r1, [pc, #632]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b32:	468c      	mov	ip, r1
 8005b34:	4463      	add	r3, ip
 8005b36:	0412      	lsls	r2, r2, #16
 8005b38:	0c12      	lsrs	r2, r2, #16
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4a9a      	ldr	r2, [pc, #616]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b44:	189a      	adds	r2, r3, r2
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4997      	ldr	r1, [pc, #604]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b4e:	468c      	mov	ip, r1
 8005b50:	4463      	add	r3, ip
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d121      	bne.n	8005ba2 <HAL_PCD_EP_DB_Transmit+0x4d2>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4a91      	ldr	r2, [pc, #580]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b66:	4694      	mov	ip, r2
 8005b68:	4463      	add	r3, ip
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	498e      	ldr	r1, [pc, #568]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b74:	468c      	mov	ip, r1
 8005b76:	4463      	add	r3, ip
 8005b78:	0192      	lsls	r2, r2, #6
 8005b7a:	0992      	lsrs	r2, r2, #6
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4a89      	ldr	r2, [pc, #548]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b86:	4694      	mov	ip, r2
 8005b88:	4463      	add	r3, ip
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4986      	ldr	r1, [pc, #536]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005b94:	468c      	mov	ip, r1
 8005b96:	4463      	add	r3, ip
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	0609      	lsls	r1, r1, #24
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	e020      	b.n	8005be4 <HAL_PCD_EP_DB_Transmit+0x514>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d11c      	bne.n	8005be4 <HAL_PCD_EP_DB_Transmit+0x514>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4a7e      	ldr	r2, [pc, #504]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005bb2:	4694      	mov	ip, r2
 8005bb4:	4463      	add	r3, ip
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	497b      	ldr	r1, [pc, #492]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005bc0:	468c      	mov	ip, r1
 8005bc2:	4463      	add	r3, ip
 8005bc4:	0412      	lsls	r2, r2, #16
 8005bc6:	0c12      	lsrs	r2, r2, #16
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	4a76      	ldr	r2, [pc, #472]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005bd2:	189a      	adds	r2, r3, r2
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4974      	ldr	r1, [pc, #464]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005bdc:	468c      	mov	ip, r1
 8005bde:	4463      	add	r3, ip
 8005be0:	6852      	ldr	r2, [r2, #4]
 8005be2:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	0011      	movs	r1, r2
 8005bec:	0018      	movs	r0, r3
 8005bee:	f00c fbc3 	bl	8012378 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bf2:	1dbb      	adds	r3, r7, #6
 8005bf4:	881a      	ldrh	r2, [r3, #0]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	01db      	lsls	r3, r3, #7
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d000      	beq.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x530>
 8005bfe:	e10a      	b.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	001a      	movs	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	18d3      	adds	r3, r2, r3
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a67      	ldr	r2, [pc, #412]	; (8005db0 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	001a      	movs	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	18d3      	adds	r3, r2, r3
 8005c24:	6a3a      	ldr	r2, [r7, #32]
 8005c26:	4963      	ldr	r1, [pc, #396]	; (8005db4 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e0f3      	b.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c2e:	1dbb      	adds	r3, r7, #6
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	01db      	lsls	r3, r3, #7
 8005c36:	4013      	ands	r3, r2
 8005c38:	d115      	bne.n	8005c66 <HAL_PCD_EP_DB_Transmit+0x596>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	001a      	movs	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a59      	ldr	r2, [pc, #356]	; (8005db0 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	001a      	movs	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	18d3      	adds	r3, r2, r3
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4954      	ldr	r1, [pc, #336]	; (8005db4 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2224      	movs	r2, #36	; 0x24
 8005c6a:	5c9b      	ldrb	r3, [r3, r2]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d000      	beq.n	8005c72 <HAL_PCD_EP_DB_Transmit+0x5a2>
 8005c70:	e0d1      	b.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	211e      	movs	r1, #30
 8005c78:	187b      	adds	r3, r7, r1
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	18d2      	adds	r2, r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	187b      	adds	r3, r7, r1
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	18d2      	adds	r2, r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d309      	bcc.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x5e0>
        {
          len = ep->maxpacket;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6a1a      	ldr	r2, [r3, #32]
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	1ad2      	subs	r2, r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	621a      	str	r2, [r3, #32]
 8005cae:	e016      	b.n	8005cde <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else if (ep->xfer_len_db == 0U)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <HAL_PCD_EP_DB_Transmit+0x5fa>
        {
          len = TxPctSize;
 8005cb8:	231e      	movs	r3, #30
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2224      	movs	r2, #36	; 0x24
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]
 8005cc8:	e009      	b.n	8005cde <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2224      	movs	r2, #36	; 0x24
 8005cda:	2100      	movs	r1, #0
 8005cdc:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d168      	bne.n	8005db8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005cee:	4694      	mov	ip, r2
 8005cf0:	4463      	add	r3, ip
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	492c      	ldr	r1, [pc, #176]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005cfc:	468c      	mov	ip, r1
 8005cfe:	4463      	add	r3, ip
 8005d00:	0192      	lsls	r2, r2, #6
 8005d02:	0992      	lsrs	r2, r2, #6
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0a:	d91e      	bls.n	8005d4a <HAL_PCD_EP_DB_Transmit+0x67a>
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	221f      	movs	r2, #31
 8005d16:	4013      	ands	r3, r2
 8005d18:	d102      	bne.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x650>
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4a21      	ldr	r2, [pc, #132]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005d28:	4694      	mov	ip, r2
 8005d2a:	4463      	add	r3, ip
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	069b      	lsls	r3, r3, #26
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	491c      	ldr	r1, [pc, #112]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005d3c:	468c      	mov	ip, r1
 8005d3e:	4463      	add	r3, ip
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	0609      	lsls	r1, r1, #24
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	e05b      	b.n	8005e02 <HAL_PCD_EP_DB_Transmit+0x732>
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d111      	bne.n	8005d74 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005d58:	4694      	mov	ip, r2
 8005d5a:	4463      	add	r3, ip
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4911      	ldr	r1, [pc, #68]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005d66:	468c      	mov	ip, r1
 8005d68:	4463      	add	r3, ip
 8005d6a:	2180      	movs	r1, #128	; 0x80
 8005d6c:	0609      	lsls	r1, r1, #24
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	e046      	b.n	8005e02 <HAL_PCD_EP_DB_Transmit+0x732>
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d002      	beq.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x6b8>
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4a07      	ldr	r2, [pc, #28]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005d90:	4694      	mov	ip, r2
 8005d92:	4463      	add	r3, ip
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	069a      	lsls	r2, r3, #26
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8005da2:	4684      	mov	ip, r0
 8005da4:	4463      	add	r3, ip
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	e02a      	b.n	8005e02 <HAL_PCD_EP_DB_Transmit+0x732>
 8005dac:	40009800 	.word	0x40009800
 8005db0:	07ff8f8f 	.word	0x07ff8f8f
 8005db4:	0000c080 	.word	0x0000c080
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d120      	bne.n	8005e02 <HAL_PCD_EP_DB_Transmit+0x732>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4a25      	ldr	r2, [pc, #148]	; (8005e5c <HAL_PCD_EP_DB_Transmit+0x78c>)
 8005dc8:	4694      	mov	ip, r2
 8005dca:	4463      	add	r3, ip
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4921      	ldr	r1, [pc, #132]	; (8005e5c <HAL_PCD_EP_DB_Transmit+0x78c>)
 8005dd6:	468c      	mov	ip, r1
 8005dd8:	4463      	add	r3, ip
 8005dda:	0412      	lsls	r2, r2, #16
 8005ddc:	0c12      	lsrs	r2, r2, #16
 8005dde:	605a      	str	r2, [r3, #4]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4a1d      	ldr	r2, [pc, #116]	; (8005e5c <HAL_PCD_EP_DB_Transmit+0x78c>)
 8005de8:	4694      	mov	ip, r2
 8005dea:	4463      	add	r3, ip
 8005dec:	6859      	ldr	r1, [r3, #4]
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	041a      	lsls	r2, r3, #16
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4818      	ldr	r0, [pc, #96]	; (8005e5c <HAL_PCD_EP_DB_Transmit+0x78c>)
 8005dfa:	4684      	mov	ip, r0
 8005dfc:	4463      	add	r3, ip
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6959      	ldr	r1, [r3, #20]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	895a      	ldrh	r2, [r3, #10]
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f004 fdeb 	bl	800a9ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a0e      	ldr	r2, [pc, #56]	; (8005e60 <HAL_PCD_EP_DB_Transmit+0x790>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2210      	movs	r2, #16
 8005e30:	4053      	eors	r3, r2
 8005e32:	633b      	str	r3, [r7, #48]	; 0x30
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2220      	movs	r2, #32
 8005e38:	4053      	eors	r3, r2
 8005e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	001a      	movs	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	18d3      	adds	r3, r2, r3
 8005e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4c:	4905      	ldr	r1, [pc, #20]	; (8005e64 <HAL_PCD_EP_DB_Transmit+0x794>)
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b00e      	add	sp, #56	; 0x38
 8005e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e5c:	40009800 	.word	0x40009800
 8005e60:	07ff8fbf 	.word	0x07ff8fbf
 8005e64:	00008080 	.word	0x00008080

08005e68 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	0008      	movs	r0, r1
 8005e72:	0011      	movs	r1, r2
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	240a      	movs	r4, #10
 8005e78:	193b      	adds	r3, r7, r4
 8005e7a:	1c02      	adds	r2, r0, #0
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	2308      	movs	r3, #8
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	1c0a      	adds	r2, r1, #0
 8005e84:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e86:	0021      	movs	r1, r4
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	4013      	ands	r3, r2
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e96:	187b      	adds	r3, r7, r1
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	2207      	movs	r2, #7
 8005e9c:	401a      	ands	r2, r3
 8005e9e:	0013      	movs	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	3310      	adds	r3, #16
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	18d3      	adds	r3, r2, r3
 8005eac:	3304      	adds	r3, #4
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e00c      	b.n	8005ecc <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005eb2:	230a      	movs	r3, #10
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	0013      	movs	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	189b      	adds	r3, r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	3351      	adds	r3, #81	; 0x51
 8005ec2:	33ff      	adds	r3, #255	; 0xff
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	18d3      	adds	r3, r2, r3
 8005ec8:	3304      	adds	r3, #4
 8005eca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ecc:	2308      	movs	r3, #8
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	80da      	strh	r2, [r3, #6]
 8005ee4:	e00b      	b.n	8005efe <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	0018      	movs	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b007      	add	sp, #28
 8005f06:	bd90      	pop	{r4, r7, pc}

08005f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	23b5      	movs	r3, #181	; 0xb5
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	23b3      	movs	r3, #179	; 0xb3
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	2100      	movs	r1, #0
 8005f28:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	2201      	movs	r2, #1
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	0018      	movs	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b004      	add	sp, #16
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	000a      	movs	r2, r1
 8005f56:	1cfb      	adds	r3, r7, #3
 8005f58:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b002      	add	sp, #8
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <HAL_PWREx_EnableVddUSB+0x18>)
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <HAL_PWREx_EnableVddUSB+0x18>)
 8005f6e:	2180      	movs	r1, #128	; 0x80
 8005f70:	00c9      	lsls	r1, r1, #3
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40007000 	.word	0x40007000

08005f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005f88:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	0019      	movs	r1, r3
 8005f92:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d11f      	bne.n	8005fe4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005fa4:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	0013      	movs	r3, r2
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	189b      	adds	r3, r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4912      	ldr	r1, [pc, #72]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f7fa f9e4 	bl	8000380 <__udivsi3>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fbe:	e008      	b.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e001      	b.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e009      	b.n	8005fe6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d0ed      	beq.n	8005fc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	40007000 	.word	0x40007000
 8005ff4:	fffff9ff 	.word	0xfffff9ff
 8005ff8:	20000000 	.word	0x20000000
 8005ffc:	000f4240 	.word	0x000f4240

08006000 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	23e0      	movs	r3, #224	; 0xe0
 800600a:	01db      	lsls	r3, r3, #7
 800600c:	4013      	ands	r3, r2
}
 800600e:	0018      	movs	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40021000 	.word	0x40021000

08006018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f000 fb50 	bl	80066cc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2201      	movs	r2, #1
 8006032:	4013      	ands	r3, r2
 8006034:	d100      	bne.n	8006038 <HAL_RCC_OscConfig+0x20>
 8006036:	e07c      	b.n	8006132 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006038:	4bc3      	ldr	r3, [pc, #780]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2238      	movs	r2, #56	; 0x38
 800603e:	4013      	ands	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006042:	4bc1      	ldr	r3, [pc, #772]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2203      	movs	r2, #3
 8006048:	4013      	ands	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b10      	cmp	r3, #16
 8006050:	d102      	bne.n	8006058 <HAL_RCC_OscConfig+0x40>
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b03      	cmp	r3, #3
 8006056:	d002      	beq.n	800605e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b08      	cmp	r3, #8
 800605c:	d10b      	bne.n	8006076 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800605e:	4bba      	ldr	r3, [pc, #744]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	4013      	ands	r3, r2
 8006068:	d062      	beq.n	8006130 <HAL_RCC_OscConfig+0x118>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d15e      	bne.n	8006130 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e32a      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	2380      	movs	r3, #128	; 0x80
 800607c:	025b      	lsls	r3, r3, #9
 800607e:	429a      	cmp	r2, r3
 8006080:	d107      	bne.n	8006092 <HAL_RCC_OscConfig+0x7a>
 8006082:	4bb1      	ldr	r3, [pc, #708]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4bb0      	ldr	r3, [pc, #704]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006088:	2180      	movs	r1, #128	; 0x80
 800608a:	0249      	lsls	r1, r1, #9
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e020      	b.n	80060d4 <HAL_RCC_OscConfig+0xbc>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	23a0      	movs	r3, #160	; 0xa0
 8006098:	02db      	lsls	r3, r3, #11
 800609a:	429a      	cmp	r2, r3
 800609c:	d10e      	bne.n	80060bc <HAL_RCC_OscConfig+0xa4>
 800609e:	4baa      	ldr	r3, [pc, #680]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4ba9      	ldr	r3, [pc, #676]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	02c9      	lsls	r1, r1, #11
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	4ba6      	ldr	r3, [pc, #664]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4ba5      	ldr	r3, [pc, #660]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	0249      	lsls	r1, r1, #9
 80060b6:	430a      	orrs	r2, r1
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e00b      	b.n	80060d4 <HAL_RCC_OscConfig+0xbc>
 80060bc:	4ba2      	ldr	r3, [pc, #648]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4ba1      	ldr	r3, [pc, #644]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060c2:	49a2      	ldr	r1, [pc, #648]	; (800634c <HAL_RCC_OscConfig+0x334>)
 80060c4:	400a      	ands	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	4b9f      	ldr	r3, [pc, #636]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b9e      	ldr	r3, [pc, #632]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060ce:	49a0      	ldr	r1, [pc, #640]	; (8006350 <HAL_RCC_OscConfig+0x338>)
 80060d0:	400a      	ands	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d014      	beq.n	8006106 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fc f9dc 	bl	8002498 <HAL_GetTick>
 80060e0:	0003      	movs	r3, r0
 80060e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e6:	f7fc f9d7 	bl	8002498 <HAL_GetTick>
 80060ea:	0002      	movs	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b64      	cmp	r3, #100	; 0x64
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e2e9      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060f8:	4b93      	ldr	r3, [pc, #588]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	029b      	lsls	r3, r3, #10
 8006100:	4013      	ands	r3, r2
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0xce>
 8006104:	e015      	b.n	8006132 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fc f9c7 	bl	8002498 <HAL_GetTick>
 800610a:	0003      	movs	r3, r0
 800610c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006110:	f7fc f9c2 	bl	8002498 <HAL_GetTick>
 8006114:	0002      	movs	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	; 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e2d4      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006122:	4b89      	ldr	r3, [pc, #548]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	4013      	ands	r3, r2
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0xf8>
 800612e:	e000      	b.n	8006132 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006130:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2202      	movs	r2, #2
 8006138:	4013      	ands	r3, r2
 800613a:	d100      	bne.n	800613e <HAL_RCC_OscConfig+0x126>
 800613c:	e099      	b.n	8006272 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800613e:	4b82      	ldr	r3, [pc, #520]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2238      	movs	r2, #56	; 0x38
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006148:	4b7f      	ldr	r3, [pc, #508]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2203      	movs	r2, #3
 800614e:	4013      	ands	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b10      	cmp	r3, #16
 8006156:	d102      	bne.n	800615e <HAL_RCC_OscConfig+0x146>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d002      	beq.n	8006164 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d135      	bne.n	80061d0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006164:	4b78      	ldr	r3, [pc, #480]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	4013      	ands	r3, r2
 800616e:	d005      	beq.n	800617c <HAL_RCC_OscConfig+0x164>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e2a7      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800617c:	4b72      	ldr	r3, [pc, #456]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4a74      	ldr	r2, [pc, #464]	; (8006354 <HAL_RCC_OscConfig+0x33c>)
 8006182:	4013      	ands	r3, r2
 8006184:	0019      	movs	r1, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	4b6e      	ldr	r3, [pc, #440]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d112      	bne.n	80061be <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006198:	4b6b      	ldr	r3, [pc, #428]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a6e      	ldr	r2, [pc, #440]	; (8006358 <HAL_RCC_OscConfig+0x340>)
 800619e:	4013      	ands	r3, r2
 80061a0:	0019      	movs	r1, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	4b68      	ldr	r3, [pc, #416]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80061a8:	430a      	orrs	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80061ac:	4b66      	ldr	r3, [pc, #408]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	0adb      	lsrs	r3, r3, #11
 80061b2:	2207      	movs	r2, #7
 80061b4:	4013      	ands	r3, r2
 80061b6:	4a69      	ldr	r2, [pc, #420]	; (800635c <HAL_RCC_OscConfig+0x344>)
 80061b8:	40da      	lsrs	r2, r3
 80061ba:	4b69      	ldr	r3, [pc, #420]	; (8006360 <HAL_RCC_OscConfig+0x348>)
 80061bc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061be:	4b69      	ldr	r3, [pc, #420]	; (8006364 <HAL_RCC_OscConfig+0x34c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	0018      	movs	r0, r3
 80061c4:	f7fb feb8 	bl	8001f38 <HAL_InitTick>
 80061c8:	1e03      	subs	r3, r0, #0
 80061ca:	d051      	beq.n	8006270 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e27d      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d030      	beq.n	800623a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80061d8:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a5e      	ldr	r2, [pc, #376]	; (8006358 <HAL_RCC_OscConfig+0x340>)
 80061de:	4013      	ands	r3, r2
 80061e0:	0019      	movs	r1, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	4b58      	ldr	r3, [pc, #352]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80061ec:	4b56      	ldr	r3, [pc, #344]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	4b55      	ldr	r3, [pc, #340]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80061f2:	2180      	movs	r1, #128	; 0x80
 80061f4:	0049      	lsls	r1, r1, #1
 80061f6:	430a      	orrs	r2, r1
 80061f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fa:	f7fc f94d 	bl	8002498 <HAL_GetTick>
 80061fe:	0003      	movs	r3, r0
 8006200:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006204:	f7fc f948 	bl	8002498 <HAL_GetTick>
 8006208:	0002      	movs	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e25a      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006216:	4b4c      	ldr	r3, [pc, #304]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	4013      	ands	r3, r2
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006222:	4b49      	ldr	r3, [pc, #292]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4a4b      	ldr	r2, [pc, #300]	; (8006354 <HAL_RCC_OscConfig+0x33c>)
 8006228:	4013      	ands	r3, r2
 800622a:	0019      	movs	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	021a      	lsls	r2, r3, #8
 8006232:	4b45      	ldr	r3, [pc, #276]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
 8006238:	e01b      	b.n	8006272 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800623a:	4b43      	ldr	r3, [pc, #268]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b42      	ldr	r3, [pc, #264]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006240:	4949      	ldr	r1, [pc, #292]	; (8006368 <HAL_RCC_OscConfig+0x350>)
 8006242:	400a      	ands	r2, r1
 8006244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006246:	f7fc f927 	bl	8002498 <HAL_GetTick>
 800624a:	0003      	movs	r3, r0
 800624c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006250:	f7fc f922 	bl	8002498 <HAL_GetTick>
 8006254:	0002      	movs	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e234      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006262:	4b39      	ldr	r3, [pc, #228]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	2380      	movs	r3, #128	; 0x80
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	4013      	ands	r3, r2
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x238>
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006270:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2208      	movs	r2, #8
 8006278:	4013      	ands	r3, r2
 800627a:	d047      	beq.n	800630c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800627c:	4b32      	ldr	r3, [pc, #200]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2238      	movs	r2, #56	; 0x38
 8006282:	4013      	ands	r3, r2
 8006284:	2b18      	cmp	r3, #24
 8006286:	d10a      	bne.n	800629e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006288:	4b2f      	ldr	r3, [pc, #188]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800628a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628c:	2202      	movs	r2, #2
 800628e:	4013      	ands	r3, r2
 8006290:	d03c      	beq.n	800630c <HAL_RCC_OscConfig+0x2f4>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d138      	bne.n	800630c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e216      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d019      	beq.n	80062da <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80062a6:	4b28      	ldr	r3, [pc, #160]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80062a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062aa:	4b27      	ldr	r3, [pc, #156]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80062ac:	2101      	movs	r1, #1
 80062ae:	430a      	orrs	r2, r1
 80062b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b2:	f7fc f8f1 	bl	8002498 <HAL_GetTick>
 80062b6:	0003      	movs	r3, r0
 80062b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062bc:	f7fc f8ec 	bl	8002498 <HAL_GetTick>
 80062c0:	0002      	movs	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e1fe      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ce:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80062d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d2:	2202      	movs	r2, #2
 80062d4:	4013      	ands	r3, r2
 80062d6:	d0f1      	beq.n	80062bc <HAL_RCC_OscConfig+0x2a4>
 80062d8:	e018      	b.n	800630c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80062da:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80062dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062de:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 80062e0:	2101      	movs	r1, #1
 80062e2:	438a      	bics	r2, r1
 80062e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fc f8d7 	bl	8002498 <HAL_GetTick>
 80062ea:	0003      	movs	r3, r0
 80062ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f0:	f7fc f8d2 	bl	8002498 <HAL_GetTick>
 80062f4:	0002      	movs	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e1e4      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006302:	4b11      	ldr	r3, [pc, #68]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006306:	2202      	movs	r2, #2
 8006308:	4013      	ands	r3, r2
 800630a:	d1f1      	bne.n	80062f0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2204      	movs	r2, #4
 8006312:	4013      	ands	r3, r2
 8006314:	d100      	bne.n	8006318 <HAL_RCC_OscConfig+0x300>
 8006316:	e0c7      	b.n	80064a8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006318:	231f      	movs	r3, #31
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006320:	4b09      	ldr	r3, [pc, #36]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2238      	movs	r2, #56	; 0x38
 8006326:	4013      	ands	r3, r2
 8006328:	2b20      	cmp	r3, #32
 800632a:	d11f      	bne.n	800636c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <HAL_RCC_OscConfig+0x330>)
 800632e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006330:	2202      	movs	r2, #2
 8006332:	4013      	ands	r3, r2
 8006334:	d100      	bne.n	8006338 <HAL_RCC_OscConfig+0x320>
 8006336:	e0b7      	b.n	80064a8 <HAL_RCC_OscConfig+0x490>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d000      	beq.n	8006342 <HAL_RCC_OscConfig+0x32a>
 8006340:	e0b2      	b.n	80064a8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e1c2      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	40021000 	.word	0x40021000
 800634c:	fffeffff 	.word	0xfffeffff
 8006350:	fffbffff 	.word	0xfffbffff
 8006354:	ffff80ff 	.word	0xffff80ff
 8006358:	ffffc7ff 	.word	0xffffc7ff
 800635c:	00f42400 	.word	0x00f42400
 8006360:	20000000 	.word	0x20000000
 8006364:	20000004 	.word	0x20000004
 8006368:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800636c:	4bb5      	ldr	r3, [pc, #724]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800636e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	055b      	lsls	r3, r3, #21
 8006374:	4013      	ands	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_RCC_OscConfig+0x364>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_RCC_OscConfig+0x366>
 800637c:	2300      	movs	r3, #0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006382:	4bb0      	ldr	r3, [pc, #704]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006386:	4baf      	ldr	r3, [pc, #700]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006388:	2180      	movs	r1, #128	; 0x80
 800638a:	0549      	lsls	r1, r1, #21
 800638c:	430a      	orrs	r2, r1
 800638e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006390:	4bac      	ldr	r3, [pc, #688]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006394:	2380      	movs	r3, #128	; 0x80
 8006396:	055b      	lsls	r3, r3, #21
 8006398:	4013      	ands	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800639e:	231f      	movs	r3, #31
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063a6:	4ba8      	ldr	r3, [pc, #672]	; (8006648 <HAL_RCC_OscConfig+0x630>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4013      	ands	r3, r2
 80063b0:	d11a      	bne.n	80063e8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063b2:	4ba5      	ldr	r3, [pc, #660]	; (8006648 <HAL_RCC_OscConfig+0x630>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4ba4      	ldr	r3, [pc, #656]	; (8006648 <HAL_RCC_OscConfig+0x630>)
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	0049      	lsls	r1, r1, #1
 80063bc:	430a      	orrs	r2, r1
 80063be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80063c0:	f7fc f86a 	bl	8002498 <HAL_GetTick>
 80063c4:	0003      	movs	r3, r0
 80063c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ca:	f7fc f865 	bl	8002498 <HAL_GetTick>
 80063ce:	0002      	movs	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e177      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063dc:	4b9a      	ldr	r3, [pc, #616]	; (8006648 <HAL_RCC_OscConfig+0x630>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4013      	ands	r3, r2
 80063e6:	d0f0      	beq.n	80063ca <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d106      	bne.n	80063fe <HAL_RCC_OscConfig+0x3e6>
 80063f0:	4b94      	ldr	r3, [pc, #592]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80063f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063f4:	4b93      	ldr	r3, [pc, #588]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80063f6:	2101      	movs	r1, #1
 80063f8:	430a      	orrs	r2, r1
 80063fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80063fc:	e01c      	b.n	8006438 <HAL_RCC_OscConfig+0x420>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b05      	cmp	r3, #5
 8006404:	d10c      	bne.n	8006420 <HAL_RCC_OscConfig+0x408>
 8006406:	4b8f      	ldr	r3, [pc, #572]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800640a:	4b8e      	ldr	r3, [pc, #568]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800640c:	2104      	movs	r1, #4
 800640e:	430a      	orrs	r2, r1
 8006410:	65da      	str	r2, [r3, #92]	; 0x5c
 8006412:	4b8c      	ldr	r3, [pc, #560]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006416:	4b8b      	ldr	r3, [pc, #556]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006418:	2101      	movs	r1, #1
 800641a:	430a      	orrs	r2, r1
 800641c:	65da      	str	r2, [r3, #92]	; 0x5c
 800641e:	e00b      	b.n	8006438 <HAL_RCC_OscConfig+0x420>
 8006420:	4b88      	ldr	r3, [pc, #544]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006424:	4b87      	ldr	r3, [pc, #540]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006426:	2101      	movs	r1, #1
 8006428:	438a      	bics	r2, r1
 800642a:	65da      	str	r2, [r3, #92]	; 0x5c
 800642c:	4b85      	ldr	r3, [pc, #532]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800642e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006430:	4b84      	ldr	r3, [pc, #528]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006432:	2104      	movs	r1, #4
 8006434:	438a      	bics	r2, r1
 8006436:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d014      	beq.n	800646a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fc f82a 	bl	8002498 <HAL_GetTick>
 8006444:	0003      	movs	r3, r0
 8006446:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006448:	e009      	b.n	800645e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644a:	f7fc f825 	bl	8002498 <HAL_GetTick>
 800644e:	0002      	movs	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	4a7d      	ldr	r2, [pc, #500]	; (800664c <HAL_RCC_OscConfig+0x634>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e136      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800645e:	4b79      	ldr	r3, [pc, #484]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	2202      	movs	r2, #2
 8006464:	4013      	ands	r3, r2
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x432>
 8006468:	e013      	b.n	8006492 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fc f815 	bl	8002498 <HAL_GetTick>
 800646e:	0003      	movs	r3, r0
 8006470:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006472:	e009      	b.n	8006488 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006474:	f7fc f810 	bl	8002498 <HAL_GetTick>
 8006478:	0002      	movs	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	4a73      	ldr	r2, [pc, #460]	; (800664c <HAL_RCC_OscConfig+0x634>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e121      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006488:	4b6e      	ldr	r3, [pc, #440]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800648a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648c:	2202      	movs	r2, #2
 800648e:	4013      	ands	r3, r2
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006492:	231f      	movs	r3, #31
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d105      	bne.n	80064a8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800649c:	4b69      	ldr	r3, [pc, #420]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800649e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a0:	4b68      	ldr	r3, [pc, #416]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80064a2:	496b      	ldr	r1, [pc, #428]	; (8006650 <HAL_RCC_OscConfig+0x638>)
 80064a4:	400a      	ands	r2, r1
 80064a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2220      	movs	r2, #32
 80064ae:	4013      	ands	r3, r2
 80064b0:	d039      	beq.n	8006526 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064ba:	4b62      	ldr	r3, [pc, #392]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b61      	ldr	r3, [pc, #388]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80064c0:	2180      	movs	r1, #128	; 0x80
 80064c2:	03c9      	lsls	r1, r1, #15
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7fb ffe6 	bl	8002498 <HAL_GetTick>
 80064cc:	0003      	movs	r3, r0
 80064ce:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064d2:	f7fb ffe1 	bl	8002498 <HAL_GetTick>
 80064d6:	0002      	movs	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e0f3      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80064e4:	4b57      	ldr	r3, [pc, #348]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	4013      	ands	r3, r2
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x4ba>
 80064f0:	e019      	b.n	8006526 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064f2:	4b54      	ldr	r3, [pc, #336]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b53      	ldr	r3, [pc, #332]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80064f8:	4956      	ldr	r1, [pc, #344]	; (8006654 <HAL_RCC_OscConfig+0x63c>)
 80064fa:	400a      	ands	r2, r1
 80064fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fe:	f7fb ffcb 	bl	8002498 <HAL_GetTick>
 8006502:	0003      	movs	r3, r0
 8006504:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006508:	f7fb ffc6 	bl	8002498 <HAL_GetTick>
 800650c:	0002      	movs	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e0d8      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800651a:	4b4a      	ldr	r3, [pc, #296]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	4013      	ands	r3, r2
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d100      	bne.n	8006530 <HAL_RCC_OscConfig+0x518>
 800652e:	e0cc      	b.n	80066ca <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2238      	movs	r2, #56	; 0x38
 8006536:	4013      	ands	r3, r2
 8006538:	2b10      	cmp	r3, #16
 800653a:	d100      	bne.n	800653e <HAL_RCC_OscConfig+0x526>
 800653c:	e07b      	b.n	8006636 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d156      	bne.n	80065f4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006546:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800654c:	4942      	ldr	r1, [pc, #264]	; (8006658 <HAL_RCC_OscConfig+0x640>)
 800654e:	400a      	ands	r2, r1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fb ffa1 	bl	8002498 <HAL_GetTick>
 8006556:	0003      	movs	r3, r0
 8006558:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655c:	f7fb ff9c 	bl	8002498 <HAL_GetTick>
 8006560:	0002      	movs	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e0ae      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800656e:	4b35      	ldr	r3, [pc, #212]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	2380      	movs	r3, #128	; 0x80
 8006574:	049b      	lsls	r3, r3, #18
 8006576:	4013      	ands	r3, r2
 8006578:	d1f0      	bne.n	800655c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800657a:	4b32      	ldr	r3, [pc, #200]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	4a37      	ldr	r2, [pc, #220]	; (800665c <HAL_RCC_OscConfig+0x644>)
 8006580:	4013      	ands	r3, r2
 8006582:	0019      	movs	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	431a      	orrs	r2, r3
 80065a8:	4b26      	ldr	r3, [pc, #152]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065aa:	430a      	orrs	r2, r1
 80065ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ae:	4b25      	ldr	r3, [pc, #148]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b24      	ldr	r3, [pc, #144]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065b4:	2180      	movs	r1, #128	; 0x80
 80065b6:	0449      	lsls	r1, r1, #17
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80065bc:	4b21      	ldr	r3, [pc, #132]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	4b20      	ldr	r3, [pc, #128]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	0549      	lsls	r1, r1, #21
 80065c6:	430a      	orrs	r2, r1
 80065c8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fb ff65 	bl	8002498 <HAL_GetTick>
 80065ce:	0003      	movs	r3, r0
 80065d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d4:	f7fb ff60 	bl	8002498 <HAL_GetTick>
 80065d8:	0002      	movs	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e072      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	049b      	lsls	r3, r3, #18
 80065ee:	4013      	ands	r3, r2
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x5bc>
 80065f2:	e06a      	b.n	80066ca <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f4:	4b13      	ldr	r3, [pc, #76]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b12      	ldr	r3, [pc, #72]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 80065fa:	4917      	ldr	r1, [pc, #92]	; (8006658 <HAL_RCC_OscConfig+0x640>)
 80065fc:	400a      	ands	r2, r1
 80065fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006600:	f7fb ff4a 	bl	8002498 <HAL_GetTick>
 8006604:	0003      	movs	r3, r0
 8006606:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800660a:	f7fb ff45 	bl	8002498 <HAL_GetTick>
 800660e:	0002      	movs	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e057      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	049b      	lsls	r3, r3, #18
 8006624:	4013      	ands	r3, r2
 8006626:	d1f0      	bne.n	800660a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006628:	4b06      	ldr	r3, [pc, #24]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCC_OscConfig+0x62c>)
 800662e:	490c      	ldr	r1, [pc, #48]	; (8006660 <HAL_RCC_OscConfig+0x648>)
 8006630:	400a      	ands	r2, r1
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	e049      	b.n	80066ca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d112      	bne.n	8006664 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e044      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	40021000 	.word	0x40021000
 8006648:	40007000 	.word	0x40007000
 800664c:	00001388 	.word	0x00001388
 8006650:	efffffff 	.word	0xefffffff
 8006654:	ffbfffff 	.word	0xffbfffff
 8006658:	feffffff 	.word	0xfeffffff
 800665c:	11c1808c 	.word	0x11c1808c
 8006660:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006664:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <HAL_RCC_OscConfig+0x6bc>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2203      	movs	r2, #3
 800666e:	401a      	ands	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	429a      	cmp	r2, r3
 8006676:	d126      	bne.n	80066c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2270      	movs	r2, #112	; 0x70
 800667c:	401a      	ands	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006682:	429a      	cmp	r2, r3
 8006684:	d11f      	bne.n	80066c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	23fe      	movs	r3, #254	; 0xfe
 800668a:	01db      	lsls	r3, r3, #7
 800668c:	401a      	ands	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d116      	bne.n	80066c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	23f8      	movs	r3, #248	; 0xf8
 800669c:	039b      	lsls	r3, r3, #14
 800669e:	401a      	ands	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d10e      	bne.n	80066c6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	23e0      	movs	r3, #224	; 0xe0
 80066ac:	051b      	lsls	r3, r3, #20
 80066ae:	401a      	ands	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d106      	bne.n	80066c6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	0f5b      	lsrs	r3, r3, #29
 80066bc:	075a      	lsls	r2, r3, #29
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d001      	beq.n	80066ca <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	0018      	movs	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b008      	add	sp, #32
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40021000 	.word	0x40021000

080066d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0e9      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b76      	ldr	r3, [pc, #472]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2207      	movs	r2, #7
 80066f2:	4013      	ands	r3, r2
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d91e      	bls.n	8006738 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b73      	ldr	r3, [pc, #460]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2207      	movs	r2, #7
 8006700:	4393      	bics	r3, r2
 8006702:	0019      	movs	r1, r3
 8006704:	4b70      	ldr	r3, [pc, #448]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800670c:	f7fb fec4 	bl	8002498 <HAL_GetTick>
 8006710:	0003      	movs	r3, r0
 8006712:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006714:	e009      	b.n	800672a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006716:	f7fb febf 	bl	8002498 <HAL_GetTick>
 800671a:	0002      	movs	r2, r0
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	4a6a      	ldr	r2, [pc, #424]	; (80068cc <HAL_RCC_ClockConfig+0x1f4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d901      	bls.n	800672a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e0ca      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800672a:	4b67      	ldr	r3, [pc, #412]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2207      	movs	r2, #7
 8006730:	4013      	ands	r3, r2
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d1ee      	bne.n	8006716 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2202      	movs	r2, #2
 800673e:	4013      	ands	r3, r2
 8006740:	d015      	beq.n	800676e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2204      	movs	r2, #4
 8006748:	4013      	ands	r3, r2
 800674a:	d006      	beq.n	800675a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800674c:	4b60      	ldr	r3, [pc, #384]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	4b5f      	ldr	r3, [pc, #380]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 8006752:	21e0      	movs	r1, #224	; 0xe0
 8006754:	01c9      	lsls	r1, r1, #7
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800675a:	4b5d      	ldr	r3, [pc, #372]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	4a5d      	ldr	r2, [pc, #372]	; (80068d4 <HAL_RCC_ClockConfig+0x1fc>)
 8006760:	4013      	ands	r3, r2
 8006762:	0019      	movs	r1, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	4b59      	ldr	r3, [pc, #356]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2201      	movs	r2, #1
 8006774:	4013      	ands	r3, r2
 8006776:	d057      	beq.n	8006828 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d107      	bne.n	8006790 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006780:	4b53      	ldr	r3, [pc, #332]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	4013      	ands	r3, r2
 800678a:	d12b      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e097      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d107      	bne.n	80067a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006798:	4b4d      	ldr	r3, [pc, #308]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	049b      	lsls	r3, r3, #18
 80067a0:	4013      	ands	r3, r2
 80067a2:	d11f      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e08b      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b0:	4b47      	ldr	r3, [pc, #284]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	4013      	ands	r3, r2
 80067ba:	d113      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e07f      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d106      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067c8:	4b41      	ldr	r3, [pc, #260]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 80067ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067cc:	2202      	movs	r2, #2
 80067ce:	4013      	ands	r3, r2
 80067d0:	d108      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e074      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d6:	4b3e      	ldr	r3, [pc, #248]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 80067d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067da:	2202      	movs	r2, #2
 80067dc:	4013      	ands	r3, r2
 80067de:	d101      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e06d      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067e4:	4b3a      	ldr	r3, [pc, #232]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2207      	movs	r2, #7
 80067ea:	4393      	bics	r3, r2
 80067ec:	0019      	movs	r1, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	4b37      	ldr	r3, [pc, #220]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067f8:	f7fb fe4e 	bl	8002498 <HAL_GetTick>
 80067fc:	0003      	movs	r3, r0
 80067fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006800:	e009      	b.n	8006816 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006802:	f7fb fe49 	bl	8002498 <HAL_GetTick>
 8006806:	0002      	movs	r2, r0
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <HAL_RCC_ClockConfig+0x1f4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e054      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2238      	movs	r2, #56	; 0x38
 800681c:	401a      	ands	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	429a      	cmp	r2, r3
 8006826:	d1ec      	bne.n	8006802 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006828:	4b27      	ldr	r3, [pc, #156]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2207      	movs	r2, #7
 800682e:	4013      	ands	r3, r2
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d21e      	bcs.n	8006874 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006836:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2207      	movs	r2, #7
 800683c:	4393      	bics	r3, r2
 800683e:	0019      	movs	r1, r3
 8006840:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006848:	f7fb fe26 	bl	8002498 <HAL_GetTick>
 800684c:	0003      	movs	r3, r0
 800684e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006850:	e009      	b.n	8006866 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006852:	f7fb fe21 	bl	8002498 <HAL_GetTick>
 8006856:	0002      	movs	r2, r0
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <HAL_RCC_ClockConfig+0x1f4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e02c      	b.n	80068c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2207      	movs	r2, #7
 800686c:	4013      	ands	r3, r2
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d1ee      	bne.n	8006852 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2204      	movs	r2, #4
 800687a:	4013      	ands	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800687e:	4b14      	ldr	r3, [pc, #80]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <HAL_RCC_ClockConfig+0x200>)
 8006884:	4013      	ands	r3, r2
 8006886:	0019      	movs	r1, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006892:	f000 f829 	bl	80068e8 <HAL_RCC_GetSysClockFreq>
 8006896:	0001      	movs	r1, r0
 8006898:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <HAL_RCC_ClockConfig+0x1f8>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	0a1b      	lsrs	r3, r3, #8
 800689e:	220f      	movs	r2, #15
 80068a0:	401a      	ands	r2, r3
 80068a2:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <HAL_RCC_ClockConfig+0x204>)
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	58d3      	ldr	r3, [r2, r3]
 80068a8:	221f      	movs	r2, #31
 80068aa:	4013      	ands	r3, r2
 80068ac:	000a      	movs	r2, r1
 80068ae:	40da      	lsrs	r2, r3
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <HAL_RCC_ClockConfig+0x208>)
 80068b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_ClockConfig+0x20c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7fb fb3d 	bl	8001f38 <HAL_InitTick>
 80068be:	0003      	movs	r3, r0
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b004      	add	sp, #16
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40022000 	.word	0x40022000
 80068cc:	00001388 	.word	0x00001388
 80068d0:	40021000 	.word	0x40021000
 80068d4:	fffff0ff 	.word	0xfffff0ff
 80068d8:	ffff8fff 	.word	0xffff8fff
 80068dc:	08014a40 	.word	0x08014a40
 80068e0:	20000000 	.word	0x20000000
 80068e4:	20000004 	.word	0x20000004

080068e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068ee:	4b3c      	ldr	r3, [pc, #240]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2238      	movs	r2, #56	; 0x38
 80068f4:	4013      	ands	r3, r2
 80068f6:	d10f      	bne.n	8006918 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80068f8:	4b39      	ldr	r3, [pc, #228]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	0adb      	lsrs	r3, r3, #11
 80068fe:	2207      	movs	r2, #7
 8006900:	4013      	ands	r3, r2
 8006902:	2201      	movs	r2, #1
 8006904:	409a      	lsls	r2, r3
 8006906:	0013      	movs	r3, r2
 8006908:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	4835      	ldr	r0, [pc, #212]	; (80069e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800690e:	f7f9 fd37 	bl	8000380 <__udivsi3>
 8006912:	0003      	movs	r3, r0
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	e05d      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006918:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2238      	movs	r2, #56	; 0x38
 800691e:	4013      	ands	r3, r2
 8006920:	2b08      	cmp	r3, #8
 8006922:	d102      	bne.n	800692a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006924:	4b30      	ldr	r3, [pc, #192]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e054      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800692a:	4b2d      	ldr	r3, [pc, #180]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2238      	movs	r2, #56	; 0x38
 8006930:	4013      	ands	r3, r2
 8006932:	2b10      	cmp	r3, #16
 8006934:	d138      	bne.n	80069a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006936:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2203      	movs	r2, #3
 800693c:	4013      	ands	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	091b      	lsrs	r3, r3, #4
 8006946:	2207      	movs	r2, #7
 8006948:	4013      	ands	r3, r2
 800694a:	3301      	adds	r3, #1
 800694c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d10d      	bne.n	8006970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	4824      	ldr	r0, [pc, #144]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006958:	f7f9 fd12 	bl	8000380 <__udivsi3>
 800695c:	0003      	movs	r3, r0
 800695e:	0019      	movs	r1, r3
 8006960:	4b1f      	ldr	r3, [pc, #124]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	227f      	movs	r2, #127	; 0x7f
 8006968:	4013      	ands	r3, r2
 800696a:	434b      	muls	r3, r1
 800696c:	617b      	str	r3, [r7, #20]
        break;
 800696e:	e00d      	b.n	800698c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	481c      	ldr	r0, [pc, #112]	; (80069e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006974:	f7f9 fd04 	bl	8000380 <__udivsi3>
 8006978:	0003      	movs	r3, r0
 800697a:	0019      	movs	r1, r3
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	0a1b      	lsrs	r3, r3, #8
 8006982:	227f      	movs	r2, #127	; 0x7f
 8006984:	4013      	ands	r3, r2
 8006986:	434b      	muls	r3, r1
 8006988:	617b      	str	r3, [r7, #20]
        break;
 800698a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800698c:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	0f5b      	lsrs	r3, r3, #29
 8006992:	2207      	movs	r2, #7
 8006994:	4013      	ands	r3, r2
 8006996:	3301      	adds	r3, #1
 8006998:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	6978      	ldr	r0, [r7, #20]
 800699e:	f7f9 fcef 	bl	8000380 <__udivsi3>
 80069a2:	0003      	movs	r3, r0
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	e015      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2238      	movs	r2, #56	; 0x38
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d103      	bne.n	80069bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	e00b      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2238      	movs	r2, #56	; 0x38
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b18      	cmp	r3, #24
 80069c6:	d103      	bne.n	80069d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80069c8:	23fa      	movs	r3, #250	; 0xfa
 80069ca:	01db      	lsls	r3, r3, #7
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	e001      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069d4:	693b      	ldr	r3, [r7, #16]
}
 80069d6:	0018      	movs	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	b006      	add	sp, #24
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	40021000 	.word	0x40021000
 80069e4:	00f42400 	.word	0x00f42400
 80069e8:	007a1200 	.word	0x007a1200

080069ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <HAL_RCC_GetHCLKFreq+0x10>)
 80069f2:	681b      	ldr	r3, [r3, #0]
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	20000000 	.word	0x20000000

08006a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a00:	b5b0      	push	{r4, r5, r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006a04:	f7ff fff2 	bl	80069ec <HAL_RCC_GetHCLKFreq>
 8006a08:	0004      	movs	r4, r0
 8006a0a:	f7ff faf9 	bl	8006000 <LL_RCC_GetAPB1Prescaler>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	0b1a      	lsrs	r2, r3, #12
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a14:	0092      	lsls	r2, r2, #2
 8006a16:	58d3      	ldr	r3, [r2, r3]
 8006a18:	221f      	movs	r2, #31
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	40dc      	lsrs	r4, r3
 8006a1e:	0023      	movs	r3, r4
}
 8006a20:	0018      	movs	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bdb0      	pop	{r4, r5, r7, pc}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	08014a80 	.word	0x08014a80

08006a2c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2207      	movs	r2, #7
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <HAL_RCC_GetClockConfig+0x4c>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2207      	movs	r2, #7
 8006a42:	401a      	ands	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a48:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <HAL_RCC_GetClockConfig+0x4c>)
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	23f0      	movs	r3, #240	; 0xf0
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	401a      	ands	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8006a56:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <HAL_RCC_GetClockConfig+0x4c>)
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	23e0      	movs	r3, #224	; 0xe0
 8006a5c:	01db      	lsls	r3, r3, #7
 8006a5e:	401a      	ands	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a64:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCC_GetClockConfig+0x50>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2207      	movs	r2, #7
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	601a      	str	r2, [r3, #0]
}
 8006a70:	46c0      	nop			; (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b002      	add	sp, #8
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	40022000 	.word	0x40022000

08006a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006a88:	2313      	movs	r3, #19
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a90:	2312      	movs	r3, #18
 8006a92:	18fb      	adds	r3, r7, r3
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	2380      	movs	r3, #128	; 0x80
 8006a9e:	029b      	lsls	r3, r3, #10
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d100      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006aa4:	e0ad      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aa6:	2011      	movs	r0, #17
 8006aa8:	183b      	adds	r3, r7, r0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aae:	4b47      	ldr	r3, [pc, #284]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab2:	2380      	movs	r3, #128	; 0x80
 8006ab4:	055b      	lsls	r3, r3, #21
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d110      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aba:	4b44      	ldr	r3, [pc, #272]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006abe:	4b43      	ldr	r3, [pc, #268]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ac0:	2180      	movs	r1, #128	; 0x80
 8006ac2:	0549      	lsls	r1, r1, #21
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ac8:	4b40      	ldr	r3, [pc, #256]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	055b      	lsls	r3, r3, #21
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ad6:	183b      	adds	r3, r7, r0
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006adc:	4b3c      	ldr	r3, [pc, #240]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b3b      	ldr	r3, [pc, #236]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006ae2:	2180      	movs	r1, #128	; 0x80
 8006ae4:	0049      	lsls	r1, r1, #1
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aea:	f7fb fcd5 	bl	8002498 <HAL_GetTick>
 8006aee:	0003      	movs	r3, r0
 8006af0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af2:	e00b      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af4:	f7fb fcd0 	bl	8002498 <HAL_GetTick>
 8006af8:	0002      	movs	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d904      	bls.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006b02:	2313      	movs	r3, #19
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	2203      	movs	r2, #3
 8006b08:	701a      	strb	r2, [r3, #0]
        break;
 8006b0a:	e005      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b0c:	4b30      	ldr	r3, [pc, #192]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	2380      	movs	r3, #128	; 0x80
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	4013      	ands	r3, r2
 8006b16:	d0ed      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006b18:	2313      	movs	r3, #19
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d15e      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b22:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b26:	23c0      	movs	r3, #192	; 0xc0
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d019      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d014      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b3e:	4b23      	ldr	r3, [pc, #140]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b42:	4a24      	ldr	r2, [pc, #144]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b48:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b4c:	4b1f      	ldr	r3, [pc, #124]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b4e:	2180      	movs	r1, #128	; 0x80
 8006b50:	0249      	lsls	r1, r1, #9
 8006b52:	430a      	orrs	r2, r1
 8006b54:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b5a:	4b1c      	ldr	r3, [pc, #112]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b5c:	491e      	ldr	r1, [pc, #120]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006b5e:	400a      	ands	r2, r1
 8006b60:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b62:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	d016      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fb fc92 	bl	8002498 <HAL_GetTick>
 8006b74:	0003      	movs	r3, r0
 8006b76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b78:	e00c      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b7a:	f7fb fc8d 	bl	8002498 <HAL_GetTick>
 8006b7e:	0002      	movs	r2, r0
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d904      	bls.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006b8a:	2313      	movs	r3, #19
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	2203      	movs	r2, #3
 8006b90:	701a      	strb	r2, [r3, #0]
            break;
 8006b92:	e004      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b94:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	2202      	movs	r2, #2
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d0ed      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006b9e:	2313      	movs	r3, #19
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bac:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	0019      	movs	r1, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bbc:	e016      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bbe:	2312      	movs	r3, #18
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	2213      	movs	r2, #19
 8006bc4:	18ba      	adds	r2, r7, r2
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e00f      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40007000 	.word	0x40007000
 8006bd4:	fffffcff 	.word	0xfffffcff
 8006bd8:	fffeffff 	.word	0xfffeffff
 8006bdc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	2312      	movs	r3, #18
 8006be2:	18fb      	adds	r3, r7, r3
 8006be4:	2213      	movs	r2, #19
 8006be6:	18ba      	adds	r2, r7, r2
 8006be8:	7812      	ldrb	r2, [r2, #0]
 8006bea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bec:	2311      	movs	r3, #17
 8006bee:	18fb      	adds	r3, r7, r3
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d105      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf6:	4bb6      	ldr	r3, [pc, #728]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bfa:	4bb5      	ldr	r3, [pc, #724]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006bfc:	49b5      	ldr	r1, [pc, #724]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006bfe:	400a      	ands	r2, r1
 8006c00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2201      	movs	r2, #1
 8006c08:	4013      	ands	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c0c:	4bb0      	ldr	r3, [pc, #704]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c10:	2203      	movs	r2, #3
 8006c12:	4393      	bics	r3, r2
 8006c14:	0019      	movs	r1, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	4bad      	ldr	r3, [pc, #692]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2202      	movs	r2, #2
 8006c26:	4013      	ands	r3, r2
 8006c28:	d009      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c2a:	4ba9      	ldr	r3, [pc, #676]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	220c      	movs	r2, #12
 8006c30:	4393      	bics	r3, r2
 8006c32:	0019      	movs	r1, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	4ba5      	ldr	r3, [pc, #660]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2204      	movs	r2, #4
 8006c44:	4013      	ands	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c48:	4ba1      	ldr	r3, [pc, #644]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	2230      	movs	r2, #48	; 0x30
 8006c4e:	4393      	bics	r3, r2
 8006c50:	0019      	movs	r1, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	4b9e      	ldr	r3, [pc, #632]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2210      	movs	r2, #16
 8006c62:	4013      	ands	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c66:	4b9a      	ldr	r3, [pc, #616]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6a:	4a9b      	ldr	r2, [pc, #620]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	0019      	movs	r1, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	4b96      	ldr	r3, [pc, #600]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c76:	430a      	orrs	r2, r1
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	2380      	movs	r3, #128	; 0x80
 8006c80:	015b      	lsls	r3, r3, #5
 8006c82:	4013      	ands	r3, r2
 8006c84:	d009      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006c86:	4b92      	ldr	r3, [pc, #584]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8a:	4a94      	ldr	r2, [pc, #592]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	0019      	movs	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695a      	ldr	r2, [r3, #20]
 8006c94:	4b8e      	ldr	r3, [pc, #568]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c96:	430a      	orrs	r2, r1
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ca6:	4b8a      	ldr	r3, [pc, #552]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006caa:	4a8d      	ldr	r2, [pc, #564]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	0019      	movs	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb4:	4b86      	ldr	r3, [pc, #536]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	2380      	movs	r3, #128	; 0x80
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cc6:	4b82      	ldr	r3, [pc, #520]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cca:	4a86      	ldr	r2, [pc, #536]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	0019      	movs	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	4b7e      	ldr	r3, [pc, #504]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d009      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ce4:	4b7a      	ldr	r3, [pc, #488]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce8:	4a7f      	ldr	r2, [pc, #508]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	0019      	movs	r1, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	4b77      	ldr	r3, [pc, #476]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2240      	movs	r2, #64	; 0x40
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d02:	4b73      	ldr	r3, [pc, #460]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d06:	4a79      	ldr	r2, [pc, #484]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	0019      	movs	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	4b6f      	ldr	r3, [pc, #444]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d12:	430a      	orrs	r2, r1
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	2380      	movs	r3, #128	; 0x80
 8006d1c:	01db      	lsls	r3, r3, #7
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d015      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d22:	4b6b      	ldr	r3, [pc, #428]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	0899      	lsrs	r1, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2e:	4b68      	ldr	r3, [pc, #416]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d30:	430a      	orrs	r2, r1
 8006d32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d38:	2380      	movs	r3, #128	; 0x80
 8006d3a:	05db      	lsls	r3, r3, #23
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d106      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006d40:	4b63      	ldr	r3, [pc, #396]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	4b62      	ldr	r3, [pc, #392]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d46:	2180      	movs	r1, #128	; 0x80
 8006d48:	0249      	lsls	r1, r1, #9
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	2380      	movs	r3, #128	; 0x80
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	4013      	ands	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d5a:	4b5d      	ldr	r3, [pc, #372]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	2240      	movs	r2, #64	; 0x40
 8006d60:	4393      	bics	r3, r2
 8006d62:	0019      	movs	r1, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d68:	4b59      	ldr	r3, [pc, #356]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	2380      	movs	r3, #128	; 0x80
 8006d74:	039b      	lsls	r3, r3, #14
 8006d76:	4013      	ands	r3, r2
 8006d78:	d016      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006d7a:	4b55      	ldr	r3, [pc, #340]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	4a5c      	ldr	r2, [pc, #368]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	0019      	movs	r1, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d88:	4b51      	ldr	r3, [pc, #324]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	03db      	lsls	r3, r3, #15
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d106      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006d9a:	4b4d      	ldr	r3, [pc, #308]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	4b4c      	ldr	r3, [pc, #304]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006da0:	2180      	movs	r1, #128	; 0x80
 8006da2:	0449      	lsls	r1, r1, #17
 8006da4:	430a      	orrs	r2, r1
 8006da6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	2380      	movs	r3, #128	; 0x80
 8006dae:	03db      	lsls	r3, r3, #15
 8006db0:	4013      	ands	r3, r2
 8006db2:	d016      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006db4:	4b46      	ldr	r3, [pc, #280]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db8:	4a4e      	ldr	r2, [pc, #312]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	0019      	movs	r1, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dc2:	4b43      	ldr	r3, [pc, #268]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	045b      	lsls	r3, r3, #17
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d106      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006dd4:	4b3e      	ldr	r3, [pc, #248]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	4b3d      	ldr	r3, [pc, #244]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dda:	2180      	movs	r1, #128	; 0x80
 8006ddc:	0449      	lsls	r1, r1, #17
 8006dde:	430a      	orrs	r2, r1
 8006de0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	4013      	ands	r3, r2
 8006dec:	d014      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006dee:	4b38      	ldr	r3, [pc, #224]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	2203      	movs	r2, #3
 8006df4:	4393      	bics	r3, r2
 8006df6:	0019      	movs	r1, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	4b34      	ldr	r3, [pc, #208]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d106      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006e0a:	4b31      	ldr	r3, [pc, #196]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	4b30      	ldr	r3, [pc, #192]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e10:	2180      	movs	r1, #128	; 0x80
 8006e12:	0249      	lsls	r1, r1, #9
 8006e14:	430a      	orrs	r2, r1
 8006e16:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	2380      	movs	r3, #128	; 0x80
 8006e1e:	019b      	lsls	r3, r3, #6
 8006e20:	4013      	ands	r3, r2
 8006e22:	d014      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006e24:	4b2a      	ldr	r3, [pc, #168]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e28:	220c      	movs	r2, #12
 8006e2a:	4393      	bics	r3, r2
 8006e2c:	0019      	movs	r1, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e32:	4b27      	ldr	r3, [pc, #156]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e34:	430a      	orrs	r2, r1
 8006e36:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006e40:	4b23      	ldr	r3, [pc, #140]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	4b22      	ldr	r3, [pc, #136]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e46:	2180      	movs	r1, #128	; 0x80
 8006e48:	0249      	lsls	r1, r1, #9
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	2380      	movs	r3, #128	; 0x80
 8006e54:	045b      	lsls	r3, r3, #17
 8006e56:	4013      	ands	r3, r2
 8006e58:	d016      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5e:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	0019      	movs	r1, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e68:	4b19      	ldr	r3, [pc, #100]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	019b      	lsls	r3, r3, #6
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d106      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	0449      	lsls	r1, r1, #17
 8006e84:	430a      	orrs	r2, r1
 8006e86:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	049b      	lsls	r3, r3, #18
 8006e90:	4013      	ands	r3, r2
 8006e92:	d016      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e94:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e98:	4a10      	ldr	r2, [pc, #64]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ea2:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d106      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	0449      	lsls	r1, r1, #17
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006ec2:	2312      	movs	r3, #18
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	781b      	ldrb	r3, [r3, #0]
}
 8006ec8:	0018      	movs	r0, r3
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	b006      	add	sp, #24
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	efffffff 	.word	0xefffffff
 8006ed8:	fffff3ff 	.word	0xfffff3ff
 8006edc:	fffffcff 	.word	0xfffffcff
 8006ee0:	fff3ffff 	.word	0xfff3ffff
 8006ee4:	ffcfffff 	.word	0xffcfffff
 8006ee8:	ffffcfff 	.word	0xffffcfff
 8006eec:	ffff3fff 	.word	0xffff3fff
 8006ef0:	ffbfffff 	.word	0xffbfffff
 8006ef4:	feffffff 	.word	0xfeffffff

08006ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e0a8      	b.n	800705c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	2382      	movs	r3, #130	; 0x82
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d009      	beq.n	8006f32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	61da      	str	r2, [r3, #28]
 8006f24:	e005      	b.n	8006f32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	225d      	movs	r2, #93	; 0x5d
 8006f3c:	5c9b      	ldrb	r3, [r3, r2]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	225c      	movs	r2, #92	; 0x5c
 8006f48:	2100      	movs	r1, #0
 8006f4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7fa ff80 	bl	8001e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	225d      	movs	r2, #93	; 0x5d
 8006f58:	2102      	movs	r1, #2
 8006f5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2140      	movs	r1, #64	; 0x40
 8006f68:	438a      	bics	r2, r1
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	23e0      	movs	r3, #224	; 0xe0
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d902      	bls.n	8006f7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e002      	b.n	8006f84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f7e:	2380      	movs	r3, #128	; 0x80
 8006f80:	015b      	lsls	r3, r3, #5
 8006f82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	23f0      	movs	r3, #240	; 0xf0
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d008      	beq.n	8006fa2 <HAL_SPI_Init+0xaa>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	23e0      	movs	r3, #224	; 0xe0
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d002      	beq.n	8006fa2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	2382      	movs	r3, #130	; 0x82
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	401a      	ands	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6899      	ldr	r1, [r3, #8]
 8006fb0:	2384      	movs	r3, #132	; 0x84
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	400b      	ands	r3, r1
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	400b      	ands	r3, r1
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	400b      	ands	r3, r1
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6999      	ldr	r1, [r3, #24]
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	400b      	ands	r3, r1
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2138      	movs	r1, #56	; 0x38
 8006fde:	400b      	ands	r3, r1
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	400b      	ands	r3, r1
 8006fea:	431a      	orrs	r2, r3
 8006fec:	0011      	movs	r1, r2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff2:	2380      	movs	r3, #128	; 0x80
 8006ff4:	019b      	lsls	r3, r3, #6
 8006ff6:	401a      	ands	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	0c1b      	lsrs	r3, r3, #16
 8007006:	2204      	movs	r2, #4
 8007008:	401a      	ands	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2110      	movs	r1, #16
 8007010:	400b      	ands	r3, r1
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	2108      	movs	r1, #8
 800701a:	400b      	ands	r3, r1
 800701c:	431a      	orrs	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68d9      	ldr	r1, [r3, #12]
 8007022:	23f0      	movs	r3, #240	; 0xf0
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	400b      	ands	r3, r1
 8007028:	431a      	orrs	r2, r3
 800702a:	0011      	movs	r1, r2
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	2380      	movs	r3, #128	; 0x80
 8007030:	015b      	lsls	r3, r3, #5
 8007032:	401a      	ands	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4907      	ldr	r1, [pc, #28]	; (8007064 <HAL_SPI_Init+0x16c>)
 8007048:	400a      	ands	r2, r1
 800704a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	225d      	movs	r2, #93	; 0x5d
 8007056:	2101      	movs	r1, #1
 8007058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	0018      	movs	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	b004      	add	sp, #16
 8007062:	bd80      	pop	{r7, pc}
 8007064:	fffff7ff 	.word	0xfffff7ff

08007068 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	1dbb      	adds	r3, r7, #6
 8007076:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007078:	231f      	movs	r3, #31
 800707a:	18fb      	adds	r3, r7, r3
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	225c      	movs	r2, #92	; 0x5c
 8007084:	5c9b      	ldrb	r3, [r3, r2]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_SPI_Transmit+0x26>
 800708a:	2302      	movs	r3, #2
 800708c:	e147      	b.n	800731e <HAL_SPI_Transmit+0x2b6>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	225c      	movs	r2, #92	; 0x5c
 8007092:	2101      	movs	r1, #1
 8007094:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007096:	f7fb f9ff 	bl	8002498 <HAL_GetTick>
 800709a:	0003      	movs	r3, r0
 800709c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800709e:	2316      	movs	r3, #22
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	1dba      	adds	r2, r7, #6
 80070a4:	8812      	ldrh	r2, [r2, #0]
 80070a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	225d      	movs	r2, #93	; 0x5d
 80070ac:	5c9b      	ldrb	r3, [r3, r2]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d004      	beq.n	80070be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80070b4:	231f      	movs	r3, #31
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	2202      	movs	r2, #2
 80070ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80070bc:	e128      	b.n	8007310 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_SPI_Transmit+0x64>
 80070c4:	1dbb      	adds	r3, r7, #6
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80070cc:	231f      	movs	r3, #31
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	2201      	movs	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80070d4:	e11c      	b.n	8007310 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	225d      	movs	r2, #93	; 0x5d
 80070da:	2103      	movs	r1, #3
 80070dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1dba      	adds	r2, r7, #6
 80070ee:	8812      	ldrh	r2, [r2, #0]
 80070f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1dba      	adds	r2, r7, #6
 80070f6:	8812      	ldrh	r2, [r2, #0]
 80070f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2244      	movs	r2, #68	; 0x44
 8007104:	2100      	movs	r1, #0
 8007106:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2246      	movs	r2, #70	; 0x46
 800710c:	2100      	movs	r1, #0
 800710e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	429a      	cmp	r2, r3
 8007126:	d110      	bne.n	800714a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2140      	movs	r1, #64	; 0x40
 8007134:	438a      	bics	r2, r1
 8007136:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	01c9      	lsls	r1, r1, #7
 8007146:	430a      	orrs	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2240      	movs	r2, #64	; 0x40
 8007152:	4013      	ands	r3, r2
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d007      	beq.n	8007168 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2140      	movs	r1, #64	; 0x40
 8007164:	430a      	orrs	r2, r1
 8007166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	23e0      	movs	r3, #224	; 0xe0
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	429a      	cmp	r2, r3
 8007172:	d952      	bls.n	800721a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <HAL_SPI_Transmit+0x11e>
 800717c:	2316      	movs	r3, #22
 800717e:	18fb      	adds	r3, r7, r3
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d143      	bne.n	800720e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	881a      	ldrh	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	1c9a      	adds	r2, r3, #2
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071aa:	e030      	b.n	800720e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2202      	movs	r2, #2
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d112      	bne.n	80071e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	881a      	ldrh	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	1c9a      	adds	r2, r3, #2
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071de:	e016      	b.n	800720e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e0:	f7fb f95a 	bl	8002498 <HAL_GetTick>
 80071e4:	0002      	movs	r2, r0
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d802      	bhi.n	80071f6 <HAL_SPI_Transmit+0x18e>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	3301      	adds	r3, #1
 80071f4:	d102      	bne.n	80071fc <HAL_SPI_Transmit+0x194>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d108      	bne.n	800720e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80071fc:	231f      	movs	r3, #31
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	2203      	movs	r2, #3
 8007202:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	225d      	movs	r2, #93	; 0x5d
 8007208:	2101      	movs	r1, #1
 800720a:	5499      	strb	r1, [r3, r2]
          goto error;
 800720c:	e080      	b.n	8007310 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007212:	b29b      	uxth	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1c9      	bne.n	80071ac <HAL_SPI_Transmit+0x144>
 8007218:	e053      	b.n	80072c2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <HAL_SPI_Transmit+0x1c4>
 8007222:	2316      	movs	r3, #22
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d145      	bne.n	80072b8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007252:	e031      	b.n	80072b8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2202      	movs	r2, #2
 800725c:	4013      	ands	r3, r2
 800725e:	2b02      	cmp	r3, #2
 8007260:	d113      	bne.n	800728a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	330c      	adds	r3, #12
 800726c:	7812      	ldrb	r2, [r2, #0]
 800726e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007288:	e016      	b.n	80072b8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800728a:	f7fb f905 	bl	8002498 <HAL_GetTick>
 800728e:	0002      	movs	r2, r0
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d802      	bhi.n	80072a0 <HAL_SPI_Transmit+0x238>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	d102      	bne.n	80072a6 <HAL_SPI_Transmit+0x23e>
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d108      	bne.n	80072b8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80072a6:	231f      	movs	r3, #31
 80072a8:	18fb      	adds	r3, r7, r3
 80072aa:	2203      	movs	r2, #3
 80072ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	225d      	movs	r2, #93	; 0x5d
 80072b2:	2101      	movs	r1, #1
 80072b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80072b6:	e02b      	b.n	8007310 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1c8      	bne.n	8007254 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	0018      	movs	r0, r3
 80072ca:	f000 f95d 	bl	8007588 <SPI_EndRxTxTransaction>
 80072ce:	1e03      	subs	r3, r0, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80072fe:	231f      	movs	r3, #31
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	2201      	movs	r2, #1
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e003      	b.n	8007310 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	225d      	movs	r2, #93	; 0x5d
 800730c:	2101      	movs	r1, #1
 800730e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	225c      	movs	r2, #92	; 0x5c
 8007314:	2100      	movs	r1, #0
 8007316:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007318:	231f      	movs	r3, #31
 800731a:	18fb      	adds	r3, r7, r3
 800731c:	781b      	ldrb	r3, [r3, #0]
}
 800731e:	0018      	movs	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	b008      	add	sp, #32
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	1dfb      	adds	r3, r7, #7
 8007336:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007338:	f7fb f8ae 	bl	8002498 <HAL_GetTick>
 800733c:	0002      	movs	r2, r0
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	18d3      	adds	r3, r2, r3
 8007346:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007348:	f7fb f8a6 	bl	8002498 <HAL_GetTick>
 800734c:	0003      	movs	r3, r0
 800734e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007350:	4b3a      	ldr	r3, [pc, #232]	; (800743c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	015b      	lsls	r3, r3, #5
 8007356:	0d1b      	lsrs	r3, r3, #20
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	4353      	muls	r3, r2
 800735c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800735e:	e058      	b.n	8007412 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	d055      	beq.n	8007412 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007366:	f7fb f897 	bl	8002498 <HAL_GetTick>
 800736a:	0002      	movs	r2, r0
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	429a      	cmp	r2, r3
 8007374:	d902      	bls.n	800737c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d142      	bne.n	8007402 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	21e0      	movs	r1, #224	; 0xe0
 8007388:	438a      	bics	r2, r1
 800738a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	2382      	movs	r3, #130	; 0x82
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	429a      	cmp	r2, r3
 8007396:	d113      	bne.n	80073c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	2380      	movs	r3, #128	; 0x80
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d005      	beq.n	80073b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	2380      	movs	r3, #128	; 0x80
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d107      	bne.n	80073c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2140      	movs	r1, #64	; 0x40
 80073bc:	438a      	bics	r2, r1
 80073be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073c4:	2380      	movs	r3, #128	; 0x80
 80073c6:	019b      	lsls	r3, r3, #6
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d110      	bne.n	80073ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	491a      	ldr	r1, [pc, #104]	; (8007440 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80073d8:	400a      	ands	r2, r1
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2180      	movs	r1, #128	; 0x80
 80073e8:	0189      	lsls	r1, r1, #6
 80073ea:	430a      	orrs	r2, r1
 80073ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	225d      	movs	r2, #93	; 0x5d
 80073f2:	2101      	movs	r1, #1
 80073f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	225c      	movs	r2, #92	; 0x5c
 80073fa:	2100      	movs	r1, #0
 80073fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e017      	b.n	8007432 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3b01      	subs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	4013      	ands	r3, r2
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	425a      	negs	r2, r3
 8007422:	4153      	adcs	r3, r2
 8007424:	b2db      	uxtb	r3, r3
 8007426:	001a      	movs	r2, r3
 8007428:	1dfb      	adds	r3, r7, #7
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d197      	bne.n	8007360 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	0018      	movs	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	b008      	add	sp, #32
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	20000000 	.word	0x20000000
 8007440:	ffffdfff 	.word	0xffffdfff

08007444 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	; 0x28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007452:	2317      	movs	r3, #23
 8007454:	18fb      	adds	r3, r7, r3
 8007456:	2200      	movs	r2, #0
 8007458:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800745a:	f7fb f81d 	bl	8002498 <HAL_GetTick>
 800745e:	0002      	movs	r2, r0
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	18d3      	adds	r3, r2, r3
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800746a:	f7fb f815 	bl	8002498 <HAL_GetTick>
 800746e:	0003      	movs	r3, r0
 8007470:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800747a:	4b41      	ldr	r3, [pc, #260]	; (8007580 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	0013      	movs	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	189b      	adds	r3, r3, r2
 8007484:	00da      	lsls	r2, r3, #3
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	0d1b      	lsrs	r3, r3, #20
 800748a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748c:	4353      	muls	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007490:	e068      	b.n	8007564 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	23c0      	movs	r3, #192	; 0xc0
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	429a      	cmp	r2, r3
 800749a:	d10a      	bne.n	80074b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d107      	bne.n	80074b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	2117      	movs	r1, #23
 80074aa:	187b      	adds	r3, r7, r1
 80074ac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80074ae:	187b      	adds	r3, r7, r1
 80074b0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	d055      	beq.n	8007564 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074b8:	f7fa ffee 	bl	8002498 <HAL_GetTick>
 80074bc:	0002      	movs	r2, r0
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d902      	bls.n	80074ce <SPI_WaitFifoStateUntilTimeout+0x8a>
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d142      	bne.n	8007554 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	21e0      	movs	r1, #224	; 0xe0
 80074da:	438a      	bics	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	2382      	movs	r3, #130	; 0x82
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d113      	bne.n	8007512 <SPI_WaitFifoStateUntilTimeout+0xce>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d005      	beq.n	8007502 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	2380      	movs	r3, #128	; 0x80
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	429a      	cmp	r2, r3
 8007500:	d107      	bne.n	8007512 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2140      	movs	r1, #64	; 0x40
 800750e:	438a      	bics	r2, r1
 8007510:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007516:	2380      	movs	r3, #128	; 0x80
 8007518:	019b      	lsls	r3, r3, #6
 800751a:	429a      	cmp	r2, r3
 800751c:	d110      	bne.n	8007540 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4916      	ldr	r1, [pc, #88]	; (8007584 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800752a:	400a      	ands	r2, r1
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	0189      	lsls	r1, r1, #6
 800753c:	430a      	orrs	r2, r1
 800753e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	225d      	movs	r2, #93	; 0x5d
 8007544:	2101      	movs	r1, #1
 8007546:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	225c      	movs	r2, #92	; 0x5c
 800754c:	2100      	movs	r1, #0
 800754e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e010      	b.n	8007576 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	3b01      	subs	r3, #1
 8007562:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4013      	ands	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d18e      	bne.n	8007492 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	b00a      	add	sp, #40	; 0x28
 800757c:	bd80      	pop	{r7, pc}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	20000000 	.word	0x20000000
 8007584:	ffffdfff 	.word	0xffffdfff

08007588 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	23c0      	movs	r3, #192	; 0xc0
 8007598:	0159      	lsls	r1, r3, #5
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	0013      	movs	r3, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	f7ff ff4e 	bl	8007444 <SPI_WaitFifoStateUntilTimeout>
 80075a8:	1e03      	subs	r3, r0, #0
 80075aa:	d007      	beq.n	80075bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b0:	2220      	movs	r2, #32
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e027      	b.n	800760c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	0013      	movs	r3, r2
 80075c6:	2200      	movs	r2, #0
 80075c8:	2180      	movs	r1, #128	; 0x80
 80075ca:	f7ff fead 	bl	8007328 <SPI_WaitFlagStateUntilTimeout>
 80075ce:	1e03      	subs	r3, r0, #0
 80075d0:	d007      	beq.n	80075e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d6:	2220      	movs	r2, #32
 80075d8:	431a      	orrs	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e014      	b.n	800760c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	23c0      	movs	r3, #192	; 0xc0
 80075e6:	00d9      	lsls	r1, r3, #3
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	0013      	movs	r3, r2
 80075f0:	2200      	movs	r2, #0
 80075f2:	f7ff ff27 	bl	8007444 <SPI_WaitFifoStateUntilTimeout>
 80075f6:	1e03      	subs	r3, r0, #0
 80075f8:	d007      	beq.n	800760a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075fe:	2220      	movs	r2, #32
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e000      	b.n	800760c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b004      	add	sp, #16
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e04a      	b.n	80076bc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	223d      	movs	r2, #61	; 0x3d
 800762a:	5c9b      	ldrb	r3, [r3, r2]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d107      	bne.n	8007642 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	223c      	movs	r2, #60	; 0x3c
 8007636:	2100      	movs	r1, #0
 8007638:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	0018      	movs	r0, r3
 800763e:	f000 f841 	bl	80076c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	223d      	movs	r2, #61	; 0x3d
 8007646:	2102      	movs	r1, #2
 8007648:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3304      	adds	r3, #4
 8007652:	0019      	movs	r1, r3
 8007654:	0010      	movs	r0, r2
 8007656:	f000 fef1 	bl	800843c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2248      	movs	r2, #72	; 0x48
 800765e:	2101      	movs	r1, #1
 8007660:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	223e      	movs	r2, #62	; 0x3e
 8007666:	2101      	movs	r1, #1
 8007668:	5499      	strb	r1, [r3, r2]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	223f      	movs	r2, #63	; 0x3f
 800766e:	2101      	movs	r1, #1
 8007670:	5499      	strb	r1, [r3, r2]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2240      	movs	r2, #64	; 0x40
 8007676:	2101      	movs	r1, #1
 8007678:	5499      	strb	r1, [r3, r2]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2241      	movs	r2, #65	; 0x41
 800767e:	2101      	movs	r1, #1
 8007680:	5499      	strb	r1, [r3, r2]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2242      	movs	r2, #66	; 0x42
 8007686:	2101      	movs	r1, #1
 8007688:	5499      	strb	r1, [r3, r2]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2243      	movs	r2, #67	; 0x43
 800768e:	2101      	movs	r1, #1
 8007690:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2244      	movs	r2, #68	; 0x44
 8007696:	2101      	movs	r1, #1
 8007698:	5499      	strb	r1, [r3, r2]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2245      	movs	r2, #69	; 0x45
 800769e:	2101      	movs	r1, #1
 80076a0:	5499      	strb	r1, [r3, r2]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2246      	movs	r2, #70	; 0x46
 80076a6:	2101      	movs	r1, #1
 80076a8:	5499      	strb	r1, [r3, r2]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2247      	movs	r2, #71	; 0x47
 80076ae:	2101      	movs	r1, #1
 80076b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	223d      	movs	r2, #61	; 0x3d
 80076b6:	2101      	movs	r1, #1
 80076b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	0018      	movs	r0, r3
 80076be:	46bd      	mov	sp, r7
 80076c0:	b002      	add	sp, #8
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80076cc:	46c0      	nop			; (mov r8, r8)
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b002      	add	sp, #8
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	223d      	movs	r2, #61	; 0x3d
 80076e0:	5c9b      	ldrb	r3, [r3, r2]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d001      	beq.n	80076ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e047      	b.n	800777c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	223d      	movs	r2, #61	; 0x3d
 80076f0:	2102      	movs	r1, #2
 80076f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2101      	movs	r1, #1
 8007700:	430a      	orrs	r2, r1
 8007702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <HAL_TIM_Base_Start_IT+0xb0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d014      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x64>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	2380      	movs	r3, #128	; 0x80
 8007714:	05db      	lsls	r3, r3, #23
 8007716:	429a      	cmp	r2, r3
 8007718:	d00e      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x64>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1a      	ldr	r2, [pc, #104]	; (8007788 <HAL_TIM_Base_Start_IT+0xb4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x64>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a18      	ldr	r2, [pc, #96]	; (800778c <HAL_TIM_Base_Start_IT+0xb8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x64>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_TIM_Base_Start_IT+0xbc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d116      	bne.n	8007766 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	4a15      	ldr	r2, [pc, #84]	; (8007794 <HAL_TIM_Base_Start_IT+0xc0>)
 8007740:	4013      	ands	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b06      	cmp	r3, #6
 8007748:	d016      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0xa4>
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	2380      	movs	r3, #128	; 0x80
 800774e:	025b      	lsls	r3, r3, #9
 8007750:	429a      	cmp	r2, r3
 8007752:	d011      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2101      	movs	r1, #1
 8007760:	430a      	orrs	r2, r1
 8007762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007764:	e008      	b.n	8007778 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2101      	movs	r1, #1
 8007772:	430a      	orrs	r2, r1
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	e000      	b.n	800777a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007778:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	0018      	movs	r0, r3
 800777e:	46bd      	mov	sp, r7
 8007780:	b004      	add	sp, #16
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40014000 	.word	0x40014000
 8007794:	00010007 	.word	0x00010007

08007798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e04a      	b.n	8007840 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	223d      	movs	r2, #61	; 0x3d
 80077ae:	5c9b      	ldrb	r3, [r3, r2]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d107      	bne.n	80077c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	223c      	movs	r2, #60	; 0x3c
 80077ba:	2100      	movs	r1, #0
 80077bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	0018      	movs	r0, r3
 80077c2:	f7fa fce5 	bl	8002190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	223d      	movs	r2, #61	; 0x3d
 80077ca:	2102      	movs	r1, #2
 80077cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	0019      	movs	r1, r3
 80077d8:	0010      	movs	r0, r2
 80077da:	f000 fe2f 	bl	800843c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2248      	movs	r2, #72	; 0x48
 80077e2:	2101      	movs	r1, #1
 80077e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	223e      	movs	r2, #62	; 0x3e
 80077ea:	2101      	movs	r1, #1
 80077ec:	5499      	strb	r1, [r3, r2]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	223f      	movs	r2, #63	; 0x3f
 80077f2:	2101      	movs	r1, #1
 80077f4:	5499      	strb	r1, [r3, r2]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2240      	movs	r2, #64	; 0x40
 80077fa:	2101      	movs	r1, #1
 80077fc:	5499      	strb	r1, [r3, r2]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2241      	movs	r2, #65	; 0x41
 8007802:	2101      	movs	r1, #1
 8007804:	5499      	strb	r1, [r3, r2]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2242      	movs	r2, #66	; 0x42
 800780a:	2101      	movs	r1, #1
 800780c:	5499      	strb	r1, [r3, r2]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2243      	movs	r2, #67	; 0x43
 8007812:	2101      	movs	r1, #1
 8007814:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2244      	movs	r2, #68	; 0x44
 800781a:	2101      	movs	r1, #1
 800781c:	5499      	strb	r1, [r3, r2]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2245      	movs	r2, #69	; 0x45
 8007822:	2101      	movs	r1, #1
 8007824:	5499      	strb	r1, [r3, r2]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2246      	movs	r2, #70	; 0x46
 800782a:	2101      	movs	r1, #1
 800782c:	5499      	strb	r1, [r3, r2]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2247      	movs	r2, #71	; 0x47
 8007832:	2101      	movs	r1, #1
 8007834:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	223d      	movs	r2, #61	; 0x3d
 800783a:	2101      	movs	r1, #1
 800783c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	0018      	movs	r0, r3
 8007842:	46bd      	mov	sp, r7
 8007844:	b002      	add	sp, #8
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	001a      	movs	r2, r3
 8007856:	1cbb      	adds	r3, r7, #2
 8007858:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800785a:	2317      	movs	r3, #23
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d108      	bne.n	800787a <HAL_TIM_PWM_Start_DMA+0x32>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	223e      	movs	r2, #62	; 0x3e
 800786c:	5c9b      	ldrb	r3, [r3, r2]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	3b02      	subs	r3, #2
 8007872:	425a      	negs	r2, r3
 8007874:	4153      	adcs	r3, r2
 8007876:	b2db      	uxtb	r3, r3
 8007878:	e037      	b.n	80078ea <HAL_TIM_PWM_Start_DMA+0xa2>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b04      	cmp	r3, #4
 800787e:	d108      	bne.n	8007892 <HAL_TIM_PWM_Start_DMA+0x4a>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	223f      	movs	r2, #63	; 0x3f
 8007884:	5c9b      	ldrb	r3, [r3, r2]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	3b02      	subs	r3, #2
 800788a:	425a      	negs	r2, r3
 800788c:	4153      	adcs	r3, r2
 800788e:	b2db      	uxtb	r3, r3
 8007890:	e02b      	b.n	80078ea <HAL_TIM_PWM_Start_DMA+0xa2>
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d108      	bne.n	80078aa <HAL_TIM_PWM_Start_DMA+0x62>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2240      	movs	r2, #64	; 0x40
 800789c:	5c9b      	ldrb	r3, [r3, r2]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	3b02      	subs	r3, #2
 80078a2:	425a      	negs	r2, r3
 80078a4:	4153      	adcs	r3, r2
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	e01f      	b.n	80078ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b0c      	cmp	r3, #12
 80078ae:	d108      	bne.n	80078c2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2241      	movs	r2, #65	; 0x41
 80078b4:	5c9b      	ldrb	r3, [r3, r2]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	3b02      	subs	r3, #2
 80078ba:	425a      	negs	r2, r3
 80078bc:	4153      	adcs	r3, r2
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	e013      	b.n	80078ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d108      	bne.n	80078da <HAL_TIM_PWM_Start_DMA+0x92>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2242      	movs	r2, #66	; 0x42
 80078cc:	5c9b      	ldrb	r3, [r3, r2]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	3b02      	subs	r3, #2
 80078d2:	425a      	negs	r2, r3
 80078d4:	4153      	adcs	r3, r2
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	e007      	b.n	80078ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2243      	movs	r2, #67	; 0x43
 80078de:	5c9b      	ldrb	r3, [r3, r2]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	3b02      	subs	r3, #2
 80078e4:	425a      	negs	r2, r3
 80078e6:	4153      	adcs	r3, r2
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
 80078f0:	e198      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d108      	bne.n	800790a <HAL_TIM_PWM_Start_DMA+0xc2>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	223e      	movs	r2, #62	; 0x3e
 80078fc:	5c9b      	ldrb	r3, [r3, r2]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	425a      	negs	r2, r3
 8007904:	4153      	adcs	r3, r2
 8007906:	b2db      	uxtb	r3, r3
 8007908:	e037      	b.n	800797a <HAL_TIM_PWM_Start_DMA+0x132>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b04      	cmp	r3, #4
 800790e:	d108      	bne.n	8007922 <HAL_TIM_PWM_Start_DMA+0xda>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	223f      	movs	r2, #63	; 0x3f
 8007914:	5c9b      	ldrb	r3, [r3, r2]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	425a      	negs	r2, r3
 800791c:	4153      	adcs	r3, r2
 800791e:	b2db      	uxtb	r3, r3
 8007920:	e02b      	b.n	800797a <HAL_TIM_PWM_Start_DMA+0x132>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d108      	bne.n	800793a <HAL_TIM_PWM_Start_DMA+0xf2>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2240      	movs	r2, #64	; 0x40
 800792c:	5c9b      	ldrb	r3, [r3, r2]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	425a      	negs	r2, r3
 8007934:	4153      	adcs	r3, r2
 8007936:	b2db      	uxtb	r3, r3
 8007938:	e01f      	b.n	800797a <HAL_TIM_PWM_Start_DMA+0x132>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b0c      	cmp	r3, #12
 800793e:	d108      	bne.n	8007952 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2241      	movs	r2, #65	; 0x41
 8007944:	5c9b      	ldrb	r3, [r3, r2]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	425a      	negs	r2, r3
 800794c:	4153      	adcs	r3, r2
 800794e:	b2db      	uxtb	r3, r3
 8007950:	e013      	b.n	800797a <HAL_TIM_PWM_Start_DMA+0x132>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b10      	cmp	r3, #16
 8007956:	d108      	bne.n	800796a <HAL_TIM_PWM_Start_DMA+0x122>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2242      	movs	r2, #66	; 0x42
 800795c:	5c9b      	ldrb	r3, [r3, r2]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	3b01      	subs	r3, #1
 8007962:	425a      	negs	r2, r3
 8007964:	4153      	adcs	r3, r2
 8007966:	b2db      	uxtb	r3, r3
 8007968:	e007      	b.n	800797a <HAL_TIM_PWM_Start_DMA+0x132>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2243      	movs	r2, #67	; 0x43
 800796e:	5c9b      	ldrb	r3, [r3, r2]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	425a      	negs	r2, r3
 8007976:	4153      	adcs	r3, r2
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d035      	beq.n	80079ea <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_TIM_PWM_Start_DMA+0x144>
 8007984:	1cbb      	adds	r3, r7, #2
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e149      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3dc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <HAL_TIM_PWM_Start_DMA+0x158>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	223e      	movs	r2, #62	; 0x3e
 800799a:	2102      	movs	r1, #2
 800799c:	5499      	strb	r1, [r3, r2]
 800799e:	e026      	b.n	80079ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d104      	bne.n	80079b0 <HAL_TIM_PWM_Start_DMA+0x168>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	223f      	movs	r2, #63	; 0x3f
 80079aa:	2102      	movs	r1, #2
 80079ac:	5499      	strb	r1, [r3, r2]
 80079ae:	e01e      	b.n	80079ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d104      	bne.n	80079c0 <HAL_TIM_PWM_Start_DMA+0x178>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2240      	movs	r2, #64	; 0x40
 80079ba:	2102      	movs	r1, #2
 80079bc:	5499      	strb	r1, [r3, r2]
 80079be:	e016      	b.n	80079ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b0c      	cmp	r3, #12
 80079c4:	d104      	bne.n	80079d0 <HAL_TIM_PWM_Start_DMA+0x188>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2241      	movs	r2, #65	; 0x41
 80079ca:	2102      	movs	r1, #2
 80079cc:	5499      	strb	r1, [r3, r2]
 80079ce:	e00e      	b.n	80079ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d104      	bne.n	80079e0 <HAL_TIM_PWM_Start_DMA+0x198>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2242      	movs	r2, #66	; 0x42
 80079da:	2102      	movs	r1, #2
 80079dc:	5499      	strb	r1, [r3, r2]
 80079de:	e006      	b.n	80079ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2243      	movs	r2, #67	; 0x43
 80079e4:	2102      	movs	r1, #2
 80079e6:	5499      	strb	r1, [r3, r2]
 80079e8:	e001      	b.n	80079ee <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e11a      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }

  switch (Channel)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b0c      	cmp	r3, #12
 80079f2:	d100      	bne.n	80079f6 <HAL_TIM_PWM_Start_DMA+0x1ae>
 80079f4:	e080      	b.n	8007af8 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b0c      	cmp	r3, #12
 80079fa:	d900      	bls.n	80079fe <HAL_TIM_PWM_Start_DMA+0x1b6>
 80079fc:	e0a1      	b.n	8007b42 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d054      	beq.n	8007aae <HAL_TIM_PWM_Start_DMA+0x266>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d900      	bls.n	8007a0c <HAL_TIM_PWM_Start_DMA+0x1c4>
 8007a0a:	e09a      	b.n	8007b42 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <HAL_TIM_PWM_Start_DMA+0x1d2>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d025      	beq.n	8007a64 <HAL_TIM_PWM_Start_DMA+0x21c>
 8007a18:	e093      	b.n	8007b42 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	4a83      	ldr	r2, [pc, #524]	; (8007c2c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007a20:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	4a82      	ldr	r2, [pc, #520]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	4a81      	ldr	r2, [pc, #516]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007a30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3334      	adds	r3, #52	; 0x34
 8007a3e:	001a      	movs	r2, r3
 8007a40:	1cbb      	adds	r3, r7, #2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	f7fc f87e 	bl	8003b44 <HAL_DMA_Start_IT>
 8007a48:	1e03      	subs	r3, r0, #0
 8007a4a:	d001      	beq.n	8007a50 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e0e9      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2180      	movs	r1, #128	; 0x80
 8007a5c:	0089      	lsls	r1, r1, #2
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	60da      	str	r2, [r3, #12]
      break;
 8007a62:	e073      	b.n	8007b4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	4a70      	ldr	r2, [pc, #448]	; (8007c2c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	4a6f      	ldr	r2, [pc, #444]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	4a6e      	ldr	r2, [pc, #440]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007a7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3338      	adds	r3, #56	; 0x38
 8007a88:	001a      	movs	r2, r3
 8007a8a:	1cbb      	adds	r3, r7, #2
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	f7fc f859 	bl	8003b44 <HAL_DMA_Start_IT>
 8007a92:	1e03      	subs	r3, r0, #0
 8007a94:	d001      	beq.n	8007a9a <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e0c4      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2180      	movs	r1, #128	; 0x80
 8007aa6:	00c9      	lsls	r1, r1, #3
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	60da      	str	r2, [r3, #12]
      break;
 8007aac:	e04e      	b.n	8007b4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	4a5e      	ldr	r2, [pc, #376]	; (8007c2c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007ab4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	4a5d      	ldr	r2, [pc, #372]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	4a5c      	ldr	r2, [pc, #368]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007ac4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	333c      	adds	r3, #60	; 0x3c
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	1cbb      	adds	r3, r7, #2
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	f7fc f834 	bl	8003b44 <HAL_DMA_Start_IT>
 8007adc:	1e03      	subs	r3, r0, #0
 8007ade:	d001      	beq.n	8007ae4 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e09f      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2180      	movs	r1, #128	; 0x80
 8007af0:	0109      	lsls	r1, r1, #4
 8007af2:	430a      	orrs	r2, r1
 8007af4:	60da      	str	r2, [r3, #12]
      break;
 8007af6:	e029      	b.n	8007b4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	4a4b      	ldr	r2, [pc, #300]	; (8007c2c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b04:	4a4a      	ldr	r2, [pc, #296]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	4a49      	ldr	r2, [pc, #292]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3340      	adds	r3, #64	; 0x40
 8007b1c:	001a      	movs	r2, r3
 8007b1e:	1cbb      	adds	r3, r7, #2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	f7fc f80f 	bl	8003b44 <HAL_DMA_Start_IT>
 8007b26:	1e03      	subs	r3, r0, #0
 8007b28:	d001      	beq.n	8007b2e <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e07a      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2180      	movs	r1, #128	; 0x80
 8007b3a:	0149      	lsls	r1, r1, #5
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	60da      	str	r2, [r3, #12]
      break;
 8007b40:	e004      	b.n	8007b4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8007b42:	2317      	movs	r3, #23
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	2201      	movs	r2, #1
 8007b48:	701a      	strb	r2, [r3, #0]
      break;
 8007b4a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8007b4c:	2317      	movs	r3, #23
 8007b4e:	18fb      	adds	r3, r7, r3
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d163      	bne.n	8007c1e <HAL_TIM_PWM_Start_DMA+0x3d6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	0018      	movs	r0, r3
 8007b60:	f000 ffc8 	bl	8008af4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a33      	ldr	r2, [pc, #204]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00e      	beq.n	8007b8c <HAL_TIM_PWM_Start_DMA+0x344>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a32      	ldr	r2, [pc, #200]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d009      	beq.n	8007b8c <HAL_TIM_PWM_Start_DMA+0x344>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a30      	ldr	r2, [pc, #192]	; (8007c40 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_TIM_PWM_Start_DMA+0x344>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2f      	ldr	r2, [pc, #188]	; (8007c44 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d101      	bne.n	8007b90 <HAL_TIM_PWM_Start_DMA+0x348>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <HAL_TIM_PWM_Start_DMA+0x34a>
 8007b90:	2300      	movs	r3, #0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2180      	movs	r1, #128	; 0x80
 8007ba2:	0209      	lsls	r1, r1, #8
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a22      	ldr	r2, [pc, #136]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d014      	beq.n	8007bdc <HAL_TIM_PWM_Start_DMA+0x394>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	2380      	movs	r3, #128	; 0x80
 8007bb8:	05db      	lsls	r3, r3, #23
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d00e      	beq.n	8007bdc <HAL_TIM_PWM_Start_DMA+0x394>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a21      	ldr	r2, [pc, #132]	; (8007c48 <HAL_TIM_PWM_Start_DMA+0x400>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d009      	beq.n	8007bdc <HAL_TIM_PWM_Start_DMA+0x394>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <HAL_TIM_PWM_Start_DMA+0x404>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_TIM_PWM_Start_DMA+0x394>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a19      	ldr	r2, [pc, #100]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d116      	bne.n	8007c0a <HAL_TIM_PWM_Start_DMA+0x3c2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	4a1b      	ldr	r2, [pc, #108]	; (8007c50 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b06      	cmp	r3, #6
 8007bec:	d016      	beq.n	8007c1c <HAL_TIM_PWM_Start_DMA+0x3d4>
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	2380      	movs	r3, #128	; 0x80
 8007bf2:	025b      	lsls	r3, r3, #9
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d011      	beq.n	8007c1c <HAL_TIM_PWM_Start_DMA+0x3d4>
      {
        __HAL_TIM_ENABLE(htim);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2101      	movs	r1, #1
 8007c04:	430a      	orrs	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c08:	e008      	b.n	8007c1c <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2101      	movs	r1, #1
 8007c16:	430a      	orrs	r2, r1
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e000      	b.n	8007c1e <HAL_TIM_PWM_Start_DMA+0x3d6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8007c1e:	2317      	movs	r3, #23
 8007c20:	18fb      	adds	r3, r7, r3
 8007c22:	781b      	ldrb	r3, [r3, #0]
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b006      	add	sp, #24
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	08008329 	.word	0x08008329
 8007c30:	080083d3 	.word	0x080083d3
 8007c34:	08008295 	.word	0x08008295
 8007c38:	40012c00 	.word	0x40012c00
 8007c3c:	40014000 	.word	0x40014000
 8007c40:	40014400 	.word	0x40014400
 8007c44:	40014800 	.word	0x40014800
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	00010007 	.word	0x00010007

08007c54 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c5e:	230f      	movs	r3, #15
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b0c      	cmp	r3, #12
 8007c6a:	d039      	beq.n	8007ce0 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b0c      	cmp	r3, #12
 8007c70:	d844      	bhi.n	8007cfc <HAL_TIM_PWM_Stop_DMA+0xa8>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d025      	beq.n	8007cc4 <HAL_TIM_PWM_Stop_DMA+0x70>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	d83e      	bhi.n	8007cfc <HAL_TIM_PWM_Stop_DMA+0xa8>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_TIM_PWM_Stop_DMA+0x38>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d00e      	beq.n	8007ca8 <HAL_TIM_PWM_Stop_DMA+0x54>
 8007c8a:	e037      	b.n	8007cfc <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	495c      	ldr	r1, [pc, #368]	; (8007e08 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8007c98:	400a      	ands	r2, r1
 8007c9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f7fb ffd5 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 8007ca6:	e02e      	b.n	8007d06 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4956      	ldr	r1, [pc, #344]	; (8007e0c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8007cb4:	400a      	ands	r2, r1
 8007cb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f7fb ffc7 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 8007cc2:	e020      	b.n	8007d06 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4950      	ldr	r1, [pc, #320]	; (8007e10 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8007cd0:	400a      	ands	r2, r1
 8007cd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f7fb ffb9 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 8007cde:	e012      	b.n	8007d06 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	494a      	ldr	r1, [pc, #296]	; (8007e14 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8007cec:	400a      	ands	r2, r1
 8007cee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f7fb ffab 	bl	8003c50 <HAL_DMA_Abort_IT>
      break;
 8007cfa:	e004      	b.n	8007d06 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8007cfc:	230f      	movs	r3, #15
 8007cfe:	18fb      	adds	r3, r7, r3
 8007d00:	2201      	movs	r2, #1
 8007d02:	701a      	strb	r2, [r3, #0]
      break;
 8007d04:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8007d06:	230f      	movs	r3, #15
 8007d08:	18fb      	adds	r3, r7, r3
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d000      	beq.n	8007d12 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8007d10:	e073      	b.n	8007dfa <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f000 feea 	bl	8008af4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a3c      	ldr	r2, [pc, #240]	; (8007e18 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00e      	beq.n	8007d48 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a3b      	ldr	r2, [pc, #236]	; (8007e1c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d009      	beq.n	8007d48 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a39      	ldr	r2, [pc, #228]	; (8007e20 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a38      	ldr	r2, [pc, #224]	; (8007e24 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d101      	bne.n	8007d4c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <HAL_TIM_PWM_Stop_DMA+0xfa>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d013      	beq.n	8007d7a <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	4a33      	ldr	r2, [pc, #204]	; (8007e28 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d10d      	bne.n	8007d7a <HAL_TIM_PWM_Stop_DMA+0x126>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	4a31      	ldr	r2, [pc, #196]	; (8007e2c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	d107      	bne.n	8007d7a <HAL_TIM_PWM_Stop_DMA+0x126>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	492e      	ldr	r1, [pc, #184]	; (8007e30 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007d76:	400a      	ands	r2, r1
 8007d78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	4a29      	ldr	r2, [pc, #164]	; (8007e28 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	d10d      	bne.n	8007da2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	4a27      	ldr	r2, [pc, #156]	; (8007e2c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	d107      	bne.n	8007da2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	438a      	bics	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <HAL_TIM_PWM_Stop_DMA+0x15e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	223e      	movs	r2, #62	; 0x3e
 8007dac:	2101      	movs	r1, #1
 8007dae:	5499      	strb	r1, [r3, r2]
 8007db0:	e023      	b.n	8007dfa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	223f      	movs	r2, #63	; 0x3f
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	5499      	strb	r1, [r3, r2]
 8007dc0:	e01b      	b.n	8007dfa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d104      	bne.n	8007dd2 <HAL_TIM_PWM_Stop_DMA+0x17e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2240      	movs	r2, #64	; 0x40
 8007dcc:	2101      	movs	r1, #1
 8007dce:	5499      	strb	r1, [r3, r2]
 8007dd0:	e013      	b.n	8007dfa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b0c      	cmp	r3, #12
 8007dd6:	d104      	bne.n	8007de2 <HAL_TIM_PWM_Stop_DMA+0x18e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2241      	movs	r2, #65	; 0x41
 8007ddc:	2101      	movs	r1, #1
 8007dde:	5499      	strb	r1, [r3, r2]
 8007de0:	e00b      	b.n	8007dfa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	d104      	bne.n	8007df2 <HAL_TIM_PWM_Stop_DMA+0x19e>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2242      	movs	r2, #66	; 0x42
 8007dec:	2101      	movs	r1, #1
 8007dee:	5499      	strb	r1, [r3, r2]
 8007df0:	e003      	b.n	8007dfa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2243      	movs	r2, #67	; 0x43
 8007df6:	2101      	movs	r1, #1
 8007df8:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8007dfa:	230f      	movs	r3, #15
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	781b      	ldrb	r3, [r3, #0]
}
 8007e00:	0018      	movs	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	b004      	add	sp, #16
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	fffffdff 	.word	0xfffffdff
 8007e0c:	fffffbff 	.word	0xfffffbff
 8007e10:	fffff7ff 	.word	0xfffff7ff
 8007e14:	ffffefff 	.word	0xffffefff
 8007e18:	40012c00 	.word	0x40012c00
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800
 8007e28:	00001111 	.word	0x00001111
 8007e2c:	00000444 	.word	0x00000444
 8007e30:	ffff7fff 	.word	0xffff7fff

08007e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	4013      	ands	r3, r2
 8007e52:	d021      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2202      	movs	r2, #2
 8007e58:	4013      	ands	r3, r2
 8007e5a:	d01d      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2203      	movs	r2, #3
 8007e62:	4252      	negs	r2, r2
 8007e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	2203      	movs	r2, #3
 8007e74:	4013      	ands	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f000 f9ea 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 8007e80:	e007      	b.n	8007e92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	0018      	movs	r0, r3
 8007e86:	f000 f9dd 	bl	8008244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f7f9 fe27 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	d01e      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2205      	movs	r2, #5
 8007eae:	4252      	negs	r2, r2
 8007eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	23c0      	movs	r3, #192	; 0xc0
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f000 f9c3 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 8007ece:	e007      	b.n	8007ee0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f000 f9b6 	bl	8008244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	0018      	movs	r0, r3
 8007edc:	f7f9 fe00 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	4013      	ands	r3, r2
 8007eec:	d021      	beq.n	8007f32 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	d01d      	beq.n	8007f32 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2209      	movs	r2, #9
 8007efc:	4252      	negs	r2, r2
 8007efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2204      	movs	r2, #4
 8007f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	4013      	ands	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	0018      	movs	r0, r3
 8007f16:	f000 f99d 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 8007f1a:	e007      	b.n	8007f2c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f000 f990 	bl	8008244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	0018      	movs	r0, r3
 8007f28:	f7f9 fdda 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2210      	movs	r2, #16
 8007f36:	4013      	ands	r3, r2
 8007f38:	d022      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2210      	movs	r2, #16
 8007f3e:	4013      	ands	r3, r2
 8007f40:	d01e      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2211      	movs	r2, #17
 8007f48:	4252      	negs	r2, r2
 8007f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2208      	movs	r2, #8
 8007f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69da      	ldr	r2, [r3, #28]
 8007f58:	23c0      	movs	r3, #192	; 0xc0
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	0018      	movs	r0, r3
 8007f64:	f000 f976 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 8007f68:	e007      	b.n	8007f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	f000 f969 	bl	8008244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	0018      	movs	r0, r3
 8007f76:	f7f9 fdb3 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2201      	movs	r2, #1
 8007f84:	4013      	ands	r3, r2
 8007f86:	d00c      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	d008      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2202      	movs	r2, #2
 8007f96:	4252      	negs	r2, r2
 8007f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f7f9 fc9b 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2280      	movs	r2, #128	; 0x80
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	d104      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	2380      	movs	r3, #128	; 0x80
 8007fae:	019b      	lsls	r3, r3, #6
 8007fb0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fb2:	d00b      	beq.n	8007fcc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2280      	movs	r2, #128	; 0x80
 8007fb8:	4013      	ands	r3, r2
 8007fba:	d007      	beq.n	8007fcc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1e      	ldr	r2, [pc, #120]	; (800803c <HAL_TIM_IRQHandler+0x208>)
 8007fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f000 fe36 	bl	8008c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	2380      	movs	r3, #128	; 0x80
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	d00b      	beq.n	8007fee <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2280      	movs	r2, #128	; 0x80
 8007fda:	4013      	ands	r3, r2
 8007fdc:	d007      	beq.n	8007fee <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	; (8008040 <HAL_TIM_IRQHandler+0x20c>)
 8007fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f000 fe2d 	bl	8008c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2240      	movs	r2, #64	; 0x40
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	d00c      	beq.n	8008010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2240      	movs	r2, #64	; 0x40
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	d008      	beq.n	8008010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2241      	movs	r2, #65	; 0x41
 8008004:	4252      	negs	r2, r2
 8008006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	0018      	movs	r0, r3
 800800c:	f000 f932 	bl	8008274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2220      	movs	r2, #32
 8008014:	4013      	ands	r3, r2
 8008016:	d00c      	beq.n	8008032 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2220      	movs	r2, #32
 800801c:	4013      	ands	r3, r2
 800801e:	d008      	beq.n	8008032 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2221      	movs	r2, #33	; 0x21
 8008026:	4252      	negs	r2, r2
 8008028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	0018      	movs	r0, r3
 800802e:	f000 fdfb 	bl	8008c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	46bd      	mov	sp, r7
 8008036:	b004      	add	sp, #16
 8008038:	bd80      	pop	{r7, pc}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	ffffdf7f 	.word	0xffffdf7f
 8008040:	fffffeff 	.word	0xfffffeff

08008044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008050:	2317      	movs	r3, #23
 8008052:	18fb      	adds	r3, r7, r3
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	223c      	movs	r2, #60	; 0x3c
 800805c:	5c9b      	ldrb	r3, [r3, r2]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d101      	bne.n	8008066 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008062:	2302      	movs	r3, #2
 8008064:	e0e5      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	223c      	movs	r2, #60	; 0x3c
 800806a:	2101      	movs	r1, #1
 800806c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b14      	cmp	r3, #20
 8008072:	d900      	bls.n	8008076 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008074:	e0d1      	b.n	800821a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	009a      	lsls	r2, r3, #2
 800807a:	4b70      	ldr	r3, [pc, #448]	; (800823c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800807c:	18d3      	adds	r3, r2, r3
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	0011      	movs	r1, r2
 800808a:	0018      	movs	r0, r3
 800808c:	f000 fa6e 	bl	800856c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699a      	ldr	r2, [r3, #24]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2108      	movs	r1, #8
 800809c:	430a      	orrs	r2, r1
 800809e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699a      	ldr	r2, [r3, #24]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2104      	movs	r1, #4
 80080ac:	438a      	bics	r2, r1
 80080ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6999      	ldr	r1, [r3, #24]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	691a      	ldr	r2, [r3, #16]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	619a      	str	r2, [r3, #24]
      break;
 80080c2:	e0af      	b.n	8008224 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	0011      	movs	r1, r2
 80080cc:	0018      	movs	r0, r3
 80080ce:	f000 fad7 	bl	8008680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699a      	ldr	r2, [r3, #24]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2180      	movs	r1, #128	; 0x80
 80080de:	0109      	lsls	r1, r1, #4
 80080e0:	430a      	orrs	r2, r1
 80080e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4954      	ldr	r1, [pc, #336]	; (8008240 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80080f0:	400a      	ands	r2, r1
 80080f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6999      	ldr	r1, [r3, #24]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	021a      	lsls	r2, r3, #8
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	619a      	str	r2, [r3, #24]
      break;
 8008108:	e08c      	b.n	8008224 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	0011      	movs	r1, r2
 8008112:	0018      	movs	r0, r3
 8008114:	f000 fb38 	bl	8008788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2108      	movs	r1, #8
 8008124:	430a      	orrs	r2, r1
 8008126:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69da      	ldr	r2, [r3, #28]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2104      	movs	r1, #4
 8008134:	438a      	bics	r2, r1
 8008136:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	69d9      	ldr	r1, [r3, #28]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	61da      	str	r2, [r3, #28]
      break;
 800814a:	e06b      	b.n	8008224 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	0011      	movs	r1, r2
 8008154:	0018      	movs	r0, r3
 8008156:	f000 fb9f 	bl	8008898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2180      	movs	r1, #128	; 0x80
 8008166:	0109      	lsls	r1, r1, #4
 8008168:	430a      	orrs	r2, r1
 800816a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	69da      	ldr	r2, [r3, #28]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4932      	ldr	r1, [pc, #200]	; (8008240 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008178:	400a      	ands	r2, r1
 800817a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	69d9      	ldr	r1, [r3, #28]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	021a      	lsls	r2, r3, #8
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	61da      	str	r2, [r3, #28]
      break;
 8008190:	e048      	b.n	8008224 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	0011      	movs	r1, r2
 800819a:	0018      	movs	r0, r3
 800819c:	f000 fbe6 	bl	800896c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2108      	movs	r1, #8
 80081ac:	430a      	orrs	r2, r1
 80081ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2104      	movs	r1, #4
 80081bc:	438a      	bics	r2, r1
 80081be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081d2:	e027      	b.n	8008224 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	0011      	movs	r1, r2
 80081dc:	0018      	movs	r0, r3
 80081de:	f000 fc25 	bl	8008a2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2180      	movs	r1, #128	; 0x80
 80081ee:	0109      	lsls	r1, r1, #4
 80081f0:	430a      	orrs	r2, r1
 80081f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4910      	ldr	r1, [pc, #64]	; (8008240 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008200:	400a      	ands	r2, r1
 8008202:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	021a      	lsls	r2, r3, #8
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008218:	e004      	b.n	8008224 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800821a:	2317      	movs	r3, #23
 800821c:	18fb      	adds	r3, r7, r3
 800821e:	2201      	movs	r2, #1
 8008220:	701a      	strb	r2, [r3, #0]
      break;
 8008222:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	223c      	movs	r2, #60	; 0x3c
 8008228:	2100      	movs	r1, #0
 800822a:	5499      	strb	r1, [r3, r2]

  return status;
 800822c:	2317      	movs	r3, #23
 800822e:	18fb      	adds	r3, r7, r3
 8008230:	781b      	ldrb	r3, [r3, #0]
}
 8008232:	0018      	movs	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	b006      	add	sp, #24
 8008238:	bd80      	pop	{r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	08014aa0 	.word	0x08014aa0
 8008240:	fffffbff 	.word	0xfffffbff

08008244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800824c:	46c0      	nop			; (mov r8, r8)
 800824e:	46bd      	mov	sp, r7
 8008250:	b002      	add	sp, #8
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800825c:	46c0      	nop			; (mov r8, r8)
 800825e:	46bd      	mov	sp, r7
 8008260:	b002      	add	sp, #8
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800826c:	46c0      	nop			; (mov r8, r8)
 800826e:	46bd      	mov	sp, r7
 8008270:	b002      	add	sp, #8
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800827c:	46c0      	nop			; (mov r8, r8)
 800827e:	46bd      	mov	sp, r7
 8008280:	b002      	add	sp, #8
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800828c:	46c0      	nop			; (mov r8, r8)
 800828e:	46bd      	mov	sp, r7
 8008290:	b002      	add	sp, #8
 8008292:	bd80      	pop	{r7, pc}

08008294 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d107      	bne.n	80082bc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	223e      	movs	r2, #62	; 0x3e
 80082b6:	2101      	movs	r1, #1
 80082b8:	5499      	strb	r1, [r3, r2]
 80082ba:	e02a      	b.n	8008312 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d107      	bne.n	80082d6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2202      	movs	r2, #2
 80082ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	223f      	movs	r2, #63	; 0x3f
 80082d0:	2101      	movs	r1, #1
 80082d2:	5499      	strb	r1, [r3, r2]
 80082d4:	e01d      	b.n	8008312 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d107      	bne.n	80082f0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2204      	movs	r2, #4
 80082e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2240      	movs	r2, #64	; 0x40
 80082ea:	2101      	movs	r1, #1
 80082ec:	5499      	strb	r1, [r3, r2]
 80082ee:	e010      	b.n	8008312 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d107      	bne.n	800830a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2208      	movs	r2, #8
 80082fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2241      	movs	r2, #65	; 0x41
 8008304:	2101      	movs	r1, #1
 8008306:	5499      	strb	r1, [r3, r2]
 8008308:	e003      	b.n	8008312 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	223d      	movs	r2, #61	; 0x3d
 800830e:	2101      	movs	r1, #1
 8008310:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	0018      	movs	r0, r3
 8008316:	f7ff ffb5 	bl	8008284 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	771a      	strb	r2, [r3, #28]
}
 8008320:	46c0      	nop			; (mov r8, r8)
 8008322:	46bd      	mov	sp, r7
 8008324:	b004      	add	sp, #16
 8008326:	bd80      	pop	{r7, pc}

08008328 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d10b      	bne.n	8008358 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d136      	bne.n	80083bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	223e      	movs	r2, #62	; 0x3e
 8008352:	2101      	movs	r1, #1
 8008354:	5499      	strb	r1, [r3, r2]
 8008356:	e031      	b.n	80083bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	429a      	cmp	r2, r3
 8008360:	d10b      	bne.n	800837a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2202      	movs	r2, #2
 8008366:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d125      	bne.n	80083bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	223f      	movs	r2, #63	; 0x3f
 8008374:	2101      	movs	r1, #1
 8008376:	5499      	strb	r1, [r3, r2]
 8008378:	e020      	b.n	80083bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d10b      	bne.n	800839c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2204      	movs	r2, #4
 8008388:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d114      	bne.n	80083bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2240      	movs	r2, #64	; 0x40
 8008396:	2101      	movs	r1, #1
 8008398:	5499      	strb	r1, [r3, r2]
 800839a:	e00f      	b.n	80083bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d10a      	bne.n	80083bc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2208      	movs	r2, #8
 80083aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2241      	movs	r2, #65	; 0x41
 80083b8:	2101      	movs	r1, #1
 80083ba:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	0018      	movs	r0, r3
 80083c0:	f7f9 fb8e 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	771a      	strb	r2, [r3, #28]
}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	46bd      	mov	sp, r7
 80083ce:	b004      	add	sp, #16
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d103      	bne.n	80083f2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	771a      	strb	r2, [r3, #28]
 80083f0:	e019      	b.n	8008426 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d103      	bne.n	8008404 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2202      	movs	r2, #2
 8008400:	771a      	strb	r2, [r3, #28]
 8008402:	e010      	b.n	8008426 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	429a      	cmp	r2, r3
 800840c:	d103      	bne.n	8008416 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2204      	movs	r2, #4
 8008412:	771a      	strb	r2, [r3, #28]
 8008414:	e007      	b.n	8008426 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	d102      	bne.n	8008426 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2208      	movs	r2, #8
 8008424:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	0018      	movs	r0, r3
 800842a:	f7ff ff1b 	bl	8008264 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	771a      	strb	r2, [r3, #28]
}
 8008434:	46c0      	nop			; (mov r8, r8)
 8008436:	46bd      	mov	sp, r7
 8008438:	b004      	add	sp, #16
 800843a:	bd80      	pop	{r7, pc}

0800843c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a3f      	ldr	r2, [pc, #252]	; (800854c <TIM_Base_SetConfig+0x110>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00c      	beq.n	800846e <TIM_Base_SetConfig+0x32>
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	2380      	movs	r3, #128	; 0x80
 8008458:	05db      	lsls	r3, r3, #23
 800845a:	429a      	cmp	r2, r3
 800845c:	d007      	beq.n	800846e <TIM_Base_SetConfig+0x32>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a3b      	ldr	r2, [pc, #236]	; (8008550 <TIM_Base_SetConfig+0x114>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d003      	beq.n	800846e <TIM_Base_SetConfig+0x32>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a3a      	ldr	r2, [pc, #232]	; (8008554 <TIM_Base_SetConfig+0x118>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d108      	bne.n	8008480 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2270      	movs	r2, #112	; 0x70
 8008472:	4393      	bics	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a32      	ldr	r2, [pc, #200]	; (800854c <TIM_Base_SetConfig+0x110>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d01c      	beq.n	80084c2 <TIM_Base_SetConfig+0x86>
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	2380      	movs	r3, #128	; 0x80
 800848c:	05db      	lsls	r3, r3, #23
 800848e:	429a      	cmp	r2, r3
 8008490:	d017      	beq.n	80084c2 <TIM_Base_SetConfig+0x86>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a2e      	ldr	r2, [pc, #184]	; (8008550 <TIM_Base_SetConfig+0x114>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d013      	beq.n	80084c2 <TIM_Base_SetConfig+0x86>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a2d      	ldr	r2, [pc, #180]	; (8008554 <TIM_Base_SetConfig+0x118>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00f      	beq.n	80084c2 <TIM_Base_SetConfig+0x86>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a2c      	ldr	r2, [pc, #176]	; (8008558 <TIM_Base_SetConfig+0x11c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00b      	beq.n	80084c2 <TIM_Base_SetConfig+0x86>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a2b      	ldr	r2, [pc, #172]	; (800855c <TIM_Base_SetConfig+0x120>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d007      	beq.n	80084c2 <TIM_Base_SetConfig+0x86>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a2a      	ldr	r2, [pc, #168]	; (8008560 <TIM_Base_SetConfig+0x124>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d003      	beq.n	80084c2 <TIM_Base_SetConfig+0x86>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a29      	ldr	r2, [pc, #164]	; (8008564 <TIM_Base_SetConfig+0x128>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d108      	bne.n	80084d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4a28      	ldr	r2, [pc, #160]	; (8008568 <TIM_Base_SetConfig+0x12c>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2280      	movs	r2, #128	; 0x80
 80084d8:	4393      	bics	r3, r2
 80084da:	001a      	movs	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a13      	ldr	r2, [pc, #76]	; (800854c <TIM_Base_SetConfig+0x110>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00b      	beq.n	800851a <TIM_Base_SetConfig+0xde>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a15      	ldr	r2, [pc, #84]	; (800855c <TIM_Base_SetConfig+0x120>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d007      	beq.n	800851a <TIM_Base_SetConfig+0xde>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a14      	ldr	r2, [pc, #80]	; (8008560 <TIM_Base_SetConfig+0x124>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d003      	beq.n	800851a <TIM_Base_SetConfig+0xde>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a13      	ldr	r2, [pc, #76]	; (8008564 <TIM_Base_SetConfig+0x128>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d103      	bne.n	8008522 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	2201      	movs	r2, #1
 800852e:	4013      	ands	r3, r2
 8008530:	2b01      	cmp	r3, #1
 8008532:	d106      	bne.n	8008542 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2201      	movs	r2, #1
 800853a:	4393      	bics	r3, r2
 800853c:	001a      	movs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	611a      	str	r2, [r3, #16]
  }
}
 8008542:	46c0      	nop			; (mov r8, r8)
 8008544:	46bd      	mov	sp, r7
 8008546:	b004      	add	sp, #16
 8008548:	bd80      	pop	{r7, pc}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40002000 	.word	0x40002000
 800855c:	40014000 	.word	0x40014000
 8008560:	40014400 	.word	0x40014400
 8008564:	40014800 	.word	0x40014800
 8008568:	fffffcff 	.word	0xfffffcff

0800856c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	2201      	movs	r2, #1
 8008582:	4393      	bics	r3, r2
 8008584:	001a      	movs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4a32      	ldr	r2, [pc, #200]	; (8008664 <TIM_OC1_SetConfig+0xf8>)
 800859a:	4013      	ands	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2203      	movs	r2, #3
 80085a2:	4393      	bics	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2202      	movs	r2, #2
 80085b4:	4393      	bics	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a28      	ldr	r2, [pc, #160]	; (8008668 <TIM_OC1_SetConfig+0xfc>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00b      	beq.n	80085e2 <TIM_OC1_SetConfig+0x76>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a27      	ldr	r2, [pc, #156]	; (800866c <TIM_OC1_SetConfig+0x100>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d007      	beq.n	80085e2 <TIM_OC1_SetConfig+0x76>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a26      	ldr	r2, [pc, #152]	; (8008670 <TIM_OC1_SetConfig+0x104>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d003      	beq.n	80085e2 <TIM_OC1_SetConfig+0x76>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a25      	ldr	r2, [pc, #148]	; (8008674 <TIM_OC1_SetConfig+0x108>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d10c      	bne.n	80085fc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2208      	movs	r2, #8
 80085e6:	4393      	bics	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2204      	movs	r2, #4
 80085f8:	4393      	bics	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a1a      	ldr	r2, [pc, #104]	; (8008668 <TIM_OC1_SetConfig+0xfc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00b      	beq.n	800861c <TIM_OC1_SetConfig+0xb0>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a19      	ldr	r2, [pc, #100]	; (800866c <TIM_OC1_SetConfig+0x100>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d007      	beq.n	800861c <TIM_OC1_SetConfig+0xb0>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a18      	ldr	r2, [pc, #96]	; (8008670 <TIM_OC1_SetConfig+0x104>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_OC1_SetConfig+0xb0>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a17      	ldr	r2, [pc, #92]	; (8008674 <TIM_OC1_SetConfig+0x108>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d111      	bne.n	8008640 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4a16      	ldr	r2, [pc, #88]	; (8008678 <TIM_OC1_SetConfig+0x10c>)
 8008620:	4013      	ands	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4a15      	ldr	r2, [pc, #84]	; (800867c <TIM_OC1_SetConfig+0x110>)
 8008628:	4013      	ands	r3, r2
 800862a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	46bd      	mov	sp, r7
 800865e:	b006      	add	sp, #24
 8008660:	bd80      	pop	{r7, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	fffeff8f 	.word	0xfffeff8f
 8008668:	40012c00 	.word	0x40012c00
 800866c:	40014000 	.word	0x40014000
 8008670:	40014400 	.word	0x40014400
 8008674:	40014800 	.word	0x40014800
 8008678:	fffffeff 	.word	0xfffffeff
 800867c:	fffffdff 	.word	0xfffffdff

08008680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	2210      	movs	r2, #16
 8008696:	4393      	bics	r3, r2
 8008698:	001a      	movs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4a2e      	ldr	r2, [pc, #184]	; (8008768 <TIM_OC2_SetConfig+0xe8>)
 80086ae:	4013      	ands	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4a2d      	ldr	r2, [pc, #180]	; (800876c <TIM_OC2_SetConfig+0xec>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2220      	movs	r2, #32
 80086ca:	4393      	bics	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a24      	ldr	r2, [pc, #144]	; (8008770 <TIM_OC2_SetConfig+0xf0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d10d      	bne.n	80086fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2280      	movs	r2, #128	; 0x80
 80086e6:	4393      	bics	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2240      	movs	r2, #64	; 0x40
 80086fa:	4393      	bics	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a1b      	ldr	r2, [pc, #108]	; (8008770 <TIM_OC2_SetConfig+0xf0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00b      	beq.n	800871e <TIM_OC2_SetConfig+0x9e>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a1a      	ldr	r2, [pc, #104]	; (8008774 <TIM_OC2_SetConfig+0xf4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <TIM_OC2_SetConfig+0x9e>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a19      	ldr	r2, [pc, #100]	; (8008778 <TIM_OC2_SetConfig+0xf8>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <TIM_OC2_SetConfig+0x9e>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a18      	ldr	r2, [pc, #96]	; (800877c <TIM_OC2_SetConfig+0xfc>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d113      	bne.n	8008746 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	4a17      	ldr	r2, [pc, #92]	; (8008780 <TIM_OC2_SetConfig+0x100>)
 8008722:	4013      	ands	r3, r2
 8008724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	4a16      	ldr	r2, [pc, #88]	; (8008784 <TIM_OC2_SetConfig+0x104>)
 800872a:	4013      	ands	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	46c0      	nop			; (mov r8, r8)
 8008762:	46bd      	mov	sp, r7
 8008764:	b006      	add	sp, #24
 8008766:	bd80      	pop	{r7, pc}
 8008768:	feff8fff 	.word	0xfeff8fff
 800876c:	fffffcff 	.word	0xfffffcff
 8008770:	40012c00 	.word	0x40012c00
 8008774:	40014000 	.word	0x40014000
 8008778:	40014400 	.word	0x40014400
 800877c:	40014800 	.word	0x40014800
 8008780:	fffffbff 	.word	0xfffffbff
 8008784:	fffff7ff 	.word	0xfffff7ff

08008788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	4a33      	ldr	r2, [pc, #204]	; (800886c <TIM_OC3_SetConfig+0xe4>)
 800879e:	401a      	ands	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a2f      	ldr	r2, [pc, #188]	; (8008870 <TIM_OC3_SetConfig+0xe8>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4393      	bics	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	4a29      	ldr	r2, [pc, #164]	; (8008874 <TIM_OC3_SetConfig+0xec>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <TIM_OC3_SetConfig+0xf0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d10d      	bne.n	8008802 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	4a24      	ldr	r2, [pc, #144]	; (800887c <TIM_OC3_SetConfig+0xf4>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	021b      	lsls	r3, r3, #8
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	4a20      	ldr	r2, [pc, #128]	; (8008880 <TIM_OC3_SetConfig+0xf8>)
 80087fe:	4013      	ands	r3, r2
 8008800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1c      	ldr	r2, [pc, #112]	; (8008878 <TIM_OC3_SetConfig+0xf0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_OC3_SetConfig+0x9a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1d      	ldr	r2, [pc, #116]	; (8008884 <TIM_OC3_SetConfig+0xfc>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_OC3_SetConfig+0x9a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1c      	ldr	r2, [pc, #112]	; (8008888 <TIM_OC3_SetConfig+0x100>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_OC3_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <TIM_OC3_SetConfig+0x104>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d113      	bne.n	800884a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	4a1a      	ldr	r2, [pc, #104]	; (8008890 <TIM_OC3_SetConfig+0x108>)
 8008826:	4013      	ands	r3, r2
 8008828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	4a19      	ldr	r2, [pc, #100]	; (8008894 <TIM_OC3_SetConfig+0x10c>)
 800882e:	4013      	ands	r3, r2
 8008830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	621a      	str	r2, [r3, #32]
}
 8008864:	46c0      	nop			; (mov r8, r8)
 8008866:	46bd      	mov	sp, r7
 8008868:	b006      	add	sp, #24
 800886a:	bd80      	pop	{r7, pc}
 800886c:	fffffeff 	.word	0xfffffeff
 8008870:	fffeff8f 	.word	0xfffeff8f
 8008874:	fffffdff 	.word	0xfffffdff
 8008878:	40012c00 	.word	0x40012c00
 800887c:	fffff7ff 	.word	0xfffff7ff
 8008880:	fffffbff 	.word	0xfffffbff
 8008884:	40014000 	.word	0x40014000
 8008888:	40014400 	.word	0x40014400
 800888c:	40014800 	.word	0x40014800
 8008890:	ffffefff 	.word	0xffffefff
 8008894:	ffffdfff 	.word	0xffffdfff

08008898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	4a26      	ldr	r2, [pc, #152]	; (8008948 <TIM_OC4_SetConfig+0xb0>)
 80088ae:	401a      	ands	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a22      	ldr	r2, [pc, #136]	; (800894c <TIM_OC4_SetConfig+0xb4>)
 80088c4:	4013      	ands	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4a21      	ldr	r2, [pc, #132]	; (8008950 <TIM_OC4_SetConfig+0xb8>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	4a1d      	ldr	r2, [pc, #116]	; (8008954 <TIM_OC4_SetConfig+0xbc>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	031b      	lsls	r3, r3, #12
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a19      	ldr	r2, [pc, #100]	; (8008958 <TIM_OC4_SetConfig+0xc0>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00b      	beq.n	8008910 <TIM_OC4_SetConfig+0x78>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a18      	ldr	r2, [pc, #96]	; (800895c <TIM_OC4_SetConfig+0xc4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d007      	beq.n	8008910 <TIM_OC4_SetConfig+0x78>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a17      	ldr	r2, [pc, #92]	; (8008960 <TIM_OC4_SetConfig+0xc8>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d003      	beq.n	8008910 <TIM_OC4_SetConfig+0x78>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a16      	ldr	r2, [pc, #88]	; (8008964 <TIM_OC4_SetConfig+0xcc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d109      	bne.n	8008924 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	4a15      	ldr	r2, [pc, #84]	; (8008968 <TIM_OC4_SetConfig+0xd0>)
 8008914:	4013      	ands	r3, r2
 8008916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	019b      	lsls	r3, r3, #6
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4313      	orrs	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	621a      	str	r2, [r3, #32]
}
 800893e:	46c0      	nop			; (mov r8, r8)
 8008940:	46bd      	mov	sp, r7
 8008942:	b006      	add	sp, #24
 8008944:	bd80      	pop	{r7, pc}
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	ffffefff 	.word	0xffffefff
 800894c:	feff8fff 	.word	0xfeff8fff
 8008950:	fffffcff 	.word	0xfffffcff
 8008954:	ffffdfff 	.word	0xffffdfff
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40014000 	.word	0x40014000
 8008960:	40014400 	.word	0x40014400
 8008964:	40014800 	.word	0x40014800
 8008968:	ffffbfff 	.word	0xffffbfff

0800896c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	4a23      	ldr	r2, [pc, #140]	; (8008a10 <TIM_OC5_SetConfig+0xa4>)
 8008982:	401a      	ands	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4a1f      	ldr	r2, [pc, #124]	; (8008a14 <TIM_OC5_SetConfig+0xa8>)
 8008998:	4013      	ands	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	4a1b      	ldr	r2, [pc, #108]	; (8008a18 <TIM_OC5_SetConfig+0xac>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <TIM_OC5_SetConfig+0xb0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d00b      	beq.n	80089da <TIM_OC5_SetConfig+0x6e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <TIM_OC5_SetConfig+0xb4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d007      	beq.n	80089da <TIM_OC5_SetConfig+0x6e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <TIM_OC5_SetConfig+0xb8>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d003      	beq.n	80089da <TIM_OC5_SetConfig+0x6e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a14      	ldr	r2, [pc, #80]	; (8008a28 <TIM_OC5_SetConfig+0xbc>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d109      	bne.n	80089ee <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4a0c      	ldr	r2, [pc, #48]	; (8008a10 <TIM_OC5_SetConfig+0xa4>)
 80089de:	4013      	ands	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	621a      	str	r2, [r3, #32]
}
 8008a08:	46c0      	nop			; (mov r8, r8)
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	b006      	add	sp, #24
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	fffeffff 	.word	0xfffeffff
 8008a14:	fffeff8f 	.word	0xfffeff8f
 8008a18:	fffdffff 	.word	0xfffdffff
 8008a1c:	40012c00 	.word	0x40012c00
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40014400 	.word	0x40014400
 8008a28:	40014800 	.word	0x40014800

08008a2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	4a24      	ldr	r2, [pc, #144]	; (8008ad4 <TIM_OC6_SetConfig+0xa8>)
 8008a42:	401a      	ands	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4a20      	ldr	r2, [pc, #128]	; (8008ad8 <TIM_OC6_SetConfig+0xac>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4a1c      	ldr	r2, [pc, #112]	; (8008adc <TIM_OC6_SetConfig+0xb0>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	051b      	lsls	r3, r3, #20
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a18      	ldr	r2, [pc, #96]	; (8008ae0 <TIM_OC6_SetConfig+0xb4>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00b      	beq.n	8008a9c <TIM_OC6_SetConfig+0x70>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a17      	ldr	r2, [pc, #92]	; (8008ae4 <TIM_OC6_SetConfig+0xb8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d007      	beq.n	8008a9c <TIM_OC6_SetConfig+0x70>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <TIM_OC6_SetConfig+0xbc>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_OC6_SetConfig+0x70>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a15      	ldr	r2, [pc, #84]	; (8008aec <TIM_OC6_SetConfig+0xc0>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d109      	bne.n	8008ab0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	4a14      	ldr	r2, [pc, #80]	; (8008af0 <TIM_OC6_SetConfig+0xc4>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	029b      	lsls	r3, r3, #10
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	621a      	str	r2, [r3, #32]
}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	46bd      	mov	sp, r7
 8008ace:	b006      	add	sp, #24
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	ffefffff 	.word	0xffefffff
 8008ad8:	feff8fff 	.word	0xfeff8fff
 8008adc:	ffdfffff 	.word	0xffdfffff
 8008ae0:	40012c00 	.word	0x40012c00
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400
 8008aec:	40014800 	.word	0x40014800
 8008af0:	fffbffff 	.word	0xfffbffff

08008af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	221f      	movs	r2, #31
 8008b04:	4013      	ands	r3, r2
 8008b06:	2201      	movs	r2, #1
 8008b08:	409a      	lsls	r2, r3
 8008b0a:	0013      	movs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	43d2      	mvns	r2, r2
 8008b16:	401a      	ands	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a1a      	ldr	r2, [r3, #32]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	211f      	movs	r1, #31
 8008b24:	400b      	ands	r3, r1
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4099      	lsls	r1, r3
 8008b2a:	000b      	movs	r3, r1
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	621a      	str	r2, [r3, #32]
}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	46bd      	mov	sp, r7
 8008b36:	b006      	add	sp, #24
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	223c      	movs	r2, #60	; 0x3c
 8008b4a:	5c9b      	ldrb	r3, [r3, r2]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e05a      	b.n	8008c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	223c      	movs	r2, #60	; 0x3c
 8008b58:	2101      	movs	r1, #1
 8008b5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	223d      	movs	r2, #61	; 0x3d
 8008b60:	2102      	movs	r1, #2
 8008b62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a26      	ldr	r2, [pc, #152]	; (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d108      	bne.n	8008b90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4a25      	ldr	r2, [pc, #148]	; (8008c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2270      	movs	r2, #112	; 0x70
 8008b94:	4393      	bics	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a19      	ldr	r2, [pc, #100]	; (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d014      	beq.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	05db      	lsls	r3, r3, #23
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d00e      	beq.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a15      	ldr	r2, [pc, #84]	; (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d009      	beq.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a14      	ldr	r2, [pc, #80]	; (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d004      	beq.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a12      	ldr	r2, [pc, #72]	; (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d10c      	bne.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2280      	movs	r2, #128	; 0x80
 8008be2:	4393      	bics	r3, r2
 8008be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	223d      	movs	r2, #61	; 0x3d
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	223c      	movs	r2, #60	; 0x3c
 8008c04:	2100      	movs	r1, #0
 8008c06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	b004      	add	sp, #16
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	40012c00 	.word	0x40012c00
 8008c18:	ff0fffff 	.word	0xff0fffff
 8008c1c:	40000400 	.word	0x40000400
 8008c20:	40000800 	.word	0x40000800
 8008c24:	40014000 	.word	0x40014000

08008c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c30:	46c0      	nop			; (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b002      	add	sp, #8
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c40:	46c0      	nop			; (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b002      	add	sp, #8
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c50:	46c0      	nop			; (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b002      	add	sp, #8
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <USB_EnableGlobalInt+0x24>)
 8008c68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	0018      	movs	r0, r3
 8008c74:	46bd      	mov	sp, r7
 8008c76:	b004      	add	sp, #16
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	46c0      	nop			; (mov r8, r8)
 8008c7c:	0000bf80 	.word	0x0000bf80

08008c80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c88:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <USB_DisableGlobalInt+0x24>)
 8008c8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	43d2      	mvns	r2, r2
 8008c94:	401a      	ands	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	b004      	add	sp, #16
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	0000bf80 	.word	0x0000bf80

08008ca8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	000a      	movs	r2, r1
 8008cb2:	1cfb      	adds	r3, r7, #3
 8008cb4:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8008cb6:	1cfb      	adds	r3, r7, #3
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	085a      	lsrs	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8008cca:	e00d      	b.n	8008ce8 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8008ccc:	1cfb      	adds	r3, r7, #3
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d107      	bne.n	8008ce4 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd8:	2280      	movs	r2, #128	; 0x80
 8008cda:	0612      	lsls	r2, r2, #24
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8008ce2:	e001      	b.n	8008ce8 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e000      	b.n	8008cea <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	0018      	movs	r0, r3
 8008cec:	46bd      	mov	sp, r7
 8008cee:	b002      	add	sp, #8
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	b5b0      	push	{r4, r5, r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	2004      	movs	r0, #4
 8008cfe:	2420      	movs	r4, #32
 8008d00:	1900      	adds	r0, r0, r4
 8008d02:	19c0      	adds	r0, r0, r7
 8008d04:	6001      	str	r1, [r0, #0]
 8008d06:	6042      	str	r2, [r0, #4]
 8008d08:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	2201      	movs	r2, #1
 8008d16:	4393      	bics	r3, r2
 8008d18:	001a      	movs	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8008d1e:	250f      	movs	r5, #15
 8008d20:	197c      	adds	r4, r7, r5
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2100      	movs	r1, #0
 8008d26:	0018      	movs	r0, r3
 8008d28:	f7ff ffbe 	bl	8008ca8 <USB_SetCurrentMode>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8008d36:	197b      	adds	r3, r7, r5
 8008d38:	781b      	ldrb	r3, [r3, #0]
}
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b004      	add	sp, #16
 8008d40:	bcb0      	pop	{r4, r5, r7}
 8008d42:	bc08      	pop	{r3}
 8008d44:	b004      	add	sp, #16
 8008d46:	4718      	bx	r3

08008d48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_DRD_TypeDef const *USBx, uint32_t num)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	0018      	movs	r0, r3
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_DRD_TypeDef const *USBx)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	0018      	movs	r0, r3
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	b002      	add	sp, #8
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b09e      	sub	sp, #120	; 0x78
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d7a:	2377      	movs	r3, #119	; 0x77
 8008d7c:	18fb      	adds	r3, r7, r3
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	18d3      	adds	r3, r2, r3
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4adc      	ldr	r2, [pc, #880]	; (8009100 <USB_ActivateEndpoint+0x390>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	78db      	ldrb	r3, [r3, #3]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d00e      	beq.n	8008dba <USB_ActivateEndpoint+0x4a>
 8008d9c:	dc19      	bgt.n	8008dd2 <USB_ActivateEndpoint+0x62>
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d01c      	beq.n	8008ddc <USB_ActivateEndpoint+0x6c>
 8008da2:	dc16      	bgt.n	8008dd2 <USB_ActivateEndpoint+0x62>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <USB_ActivateEndpoint+0x3e>
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d00c      	beq.n	8008dc6 <USB_ActivateEndpoint+0x56>
 8008dac:	e011      	b.n	8008dd2 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008db0:	2280      	movs	r2, #128	; 0x80
 8008db2:	0092      	lsls	r2, r2, #2
 8008db4:	4313      	orrs	r3, r2
 8008db6:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8008db8:	e011      	b.n	8008dde <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dbc:	22c0      	movs	r2, #192	; 0xc0
 8008dbe:	00d2      	lsls	r2, r2, #3
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8008dc4:	e00b      	b.n	8008dde <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dc8:	2280      	movs	r2, #128	; 0x80
 8008dca:	00d2      	lsls	r2, r2, #3
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8008dd0:	e005      	b.n	8008dde <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8008dd2:	2377      	movs	r3, #119	; 0x77
 8008dd4:	18fb      	adds	r3, r7, r3
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	701a      	strb	r2, [r3, #0]
      break;
 8008dda:	e000      	b.n	8008dde <USB_ActivateEndpoint+0x6e>
      break;
 8008ddc:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	18d3      	adds	r3, r2, r3
 8008de8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008dea:	49c6      	ldr	r1, [pc, #792]	; (8009104 <USB_ActivateEndpoint+0x394>)
 8008dec:	430a      	orrs	r2, r1
 8008dee:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	18d3      	adds	r3, r2, r3
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4ac2      	ldr	r2, [pc, #776]	; (8009108 <USB_ActivateEndpoint+0x398>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	18d3      	adds	r3, r2, r3
 8008e12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e14:	49bb      	ldr	r1, [pc, #748]	; (8009104 <USB_ActivateEndpoint+0x394>)
 8008e16:	430a      	orrs	r2, r1
 8008e18:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	7b1b      	ldrb	r3, [r3, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d000      	beq.n	8008e24 <USB_ActivateEndpoint+0xb4>
 8008e22:	e155      	b.n	80090d0 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d06e      	beq.n	8008f0a <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	4ab6      	ldr	r2, [pc, #728]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008e34:	4694      	mov	ip, r2
 8008e36:	4463      	add	r3, ip
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	49b2      	ldr	r1, [pc, #712]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008e42:	468c      	mov	ip, r1
 8008e44:	4463      	add	r3, ip
 8008e46:	0c12      	lsrs	r2, r2, #16
 8008e48:	0412      	lsls	r2, r2, #16
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	4aae      	ldr	r2, [pc, #696]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008e54:	4694      	mov	ip, r2
 8008e56:	4463      	add	r3, ip
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	089b      	lsrs	r3, r3, #2
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	009a      	lsls	r2, r3, #2
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	48a8      	ldr	r0, [pc, #672]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008e6c:	4684      	mov	ip, r0
 8008e6e:	4463      	add	r3, ip
 8008e70:	430a      	orrs	r2, r1
 8008e72:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	18d3      	adds	r3, r2, r3
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	61bb      	str	r3, [r7, #24]
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2240      	movs	r2, #64	; 0x40
 8008e86:	4013      	ands	r3, r2
 8008e88:	d011      	beq.n	8008eae <USB_ActivateEndpoint+0x13e>
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	18d3      	adds	r3, r2, r3
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a9c      	ldr	r2, [pc, #624]	; (8009108 <USB_ActivateEndpoint+0x398>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	18d3      	adds	r3, r2, r3
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	4999      	ldr	r1, [pc, #612]	; (8009110 <USB_ActivateEndpoint+0x3a0>)
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	78db      	ldrb	r3, [r3, #3]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d016      	beq.n	8008ee4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	18d3      	adds	r3, r2, r3
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a94      	ldr	r2, [pc, #592]	; (8009114 <USB_ActivateEndpoint+0x3a4>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	4053      	eors	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	18d3      	adds	r3, r2, r3
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4989      	ldr	r1, [pc, #548]	; (8009104 <USB_ActivateEndpoint+0x394>)
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	e261      	b.n	80093a8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	18d3      	adds	r3, r2, r3
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a88      	ldr	r2, [pc, #544]	; (8009114 <USB_ActivateEndpoint+0x3a4>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	18d3      	adds	r3, r2, r3
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4980      	ldr	r1, [pc, #512]	; (8009104 <USB_ActivateEndpoint+0x394>)
 8008f04:	430a      	orrs	r2, r1
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	e24e      	b.n	80093a8 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	4a7e      	ldr	r2, [pc, #504]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008f12:	4694      	mov	ip, r2
 8008f14:	4463      	add	r3, ip
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	497b      	ldr	r1, [pc, #492]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008f20:	468c      	mov	ip, r1
 8008f22:	4463      	add	r3, ip
 8008f24:	0c12      	lsrs	r2, r2, #16
 8008f26:	0412      	lsls	r2, r2, #16
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	4a76      	ldr	r2, [pc, #472]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008f32:	4694      	mov	ip, r2
 8008f34:	4463      	add	r3, ip
 8008f36:	6859      	ldr	r1, [r3, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	88db      	ldrh	r3, [r3, #6]
 8008f3c:	089b      	lsrs	r3, r3, #2
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	009a      	lsls	r2, r3, #2
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	4870      	ldr	r0, [pc, #448]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008f4a:	4684      	mov	ip, r0
 8008f4c:	4463      	add	r3, ip
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	4a6c      	ldr	r2, [pc, #432]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008f5a:	4694      	mov	ip, r2
 8008f5c:	4463      	add	r3, ip
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	4969      	ldr	r1, [pc, #420]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008f68:	468c      	mov	ip, r1
 8008f6a:	4463      	add	r3, ip
 8008f6c:	0192      	lsls	r2, r2, #6
 8008f6e:	0992      	lsrs	r2, r2, #6
 8008f70:	605a      	str	r2, [r3, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b3e      	cmp	r3, #62	; 0x3e
 8008f78:	d920      	bls.n	8008fbc <USB_ActivateEndpoint+0x24c>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	221f      	movs	r2, #31
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d102      	bne.n	8008f92 <USB_ActivateEndpoint+0x222>
 8008f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	4a5c      	ldr	r2, [pc, #368]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008f9a:	4694      	mov	ip, r2
 8008f9c:	4463      	add	r3, ip
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa2:	069b      	lsls	r3, r3, #26
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	4957      	ldr	r1, [pc, #348]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008fae:	468c      	mov	ip, r1
 8008fb0:	4463      	add	r3, ip
 8008fb2:	2180      	movs	r1, #128	; 0x80
 8008fb4:	0609      	lsls	r1, r1, #24
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	605a      	str	r2, [r3, #4]
 8008fba:	e032      	b.n	8009022 <USB_ActivateEndpoint+0x2b2>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d111      	bne.n	8008fe8 <USB_ActivateEndpoint+0x278>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	4a50      	ldr	r2, [pc, #320]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008fcc:	4694      	mov	ip, r2
 8008fce:	4463      	add	r3, ip
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	494c      	ldr	r1, [pc, #304]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8008fda:	468c      	mov	ip, r1
 8008fdc:	4463      	add	r3, ip
 8008fde:	2180      	movs	r1, #128	; 0x80
 8008fe0:	0609      	lsls	r1, r1, #24
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	605a      	str	r2, [r3, #4]
 8008fe6:	e01c      	b.n	8009022 <USB_ActivateEndpoint+0x2b2>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	085b      	lsrs	r3, r3, #1
 8008fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	d002      	beq.n	8009000 <USB_ActivateEndpoint+0x290>
 8008ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	4a41      	ldr	r2, [pc, #260]	; (800910c <USB_ActivateEndpoint+0x39c>)
 8009008:	4694      	mov	ip, r2
 800900a:	4463      	add	r3, ip
 800900c:	6859      	ldr	r1, [r3, #4]
 800900e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009010:	069a      	lsls	r2, r3, #26
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	483c      	ldr	r0, [pc, #240]	; (800910c <USB_ActivateEndpoint+0x39c>)
 800901a:	4684      	mov	ip, r0
 800901c:	4463      	add	r3, ip
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	18d3      	adds	r3, r2, r3
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	01db      	lsls	r3, r3, #7
 8009036:	4013      	ands	r3, r2
 8009038:	d011      	beq.n	800905e <USB_ActivateEndpoint+0x2ee>
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	18d3      	adds	r3, r2, r3
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a30      	ldr	r2, [pc, #192]	; (8009108 <USB_ActivateEndpoint+0x398>)
 8009048:	4013      	ands	r3, r2
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	18d3      	adds	r3, r2, r3
 8009056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009058:	492f      	ldr	r1, [pc, #188]	; (8009118 <USB_ActivateEndpoint+0x3a8>)
 800905a:	430a      	orrs	r2, r1
 800905c:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d11c      	bne.n	80090a0 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	18d3      	adds	r3, r2, r3
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a2a      	ldr	r2, [pc, #168]	; (800911c <USB_ActivateEndpoint+0x3ac>)
 8009074:	4013      	ands	r3, r2
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2280      	movs	r2, #128	; 0x80
 800907c:	0152      	lsls	r2, r2, #5
 800907e:	4053      	eors	r3, r2
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	2280      	movs	r2, #128	; 0x80
 8009086:	0192      	lsls	r2, r2, #6
 8009088:	4053      	eors	r3, r2
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	18d3      	adds	r3, r2, r3
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	491a      	ldr	r1, [pc, #104]	; (8009104 <USB_ActivateEndpoint+0x394>)
 800909a:	430a      	orrs	r2, r1
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e183      	b.n	80093a8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	18d3      	adds	r3, r2, r3
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a1b      	ldr	r2, [pc, #108]	; (800911c <USB_ActivateEndpoint+0x3ac>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	623b      	str	r3, [r7, #32]
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	2280      	movs	r2, #128	; 0x80
 80090b6:	0192      	lsls	r2, r2, #6
 80090b8:	4053      	eors	r3, r2
 80090ba:	623b      	str	r3, [r7, #32]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	18d3      	adds	r3, r2, r3
 80090c6:	6a3a      	ldr	r2, [r7, #32]
 80090c8:	490e      	ldr	r1, [pc, #56]	; (8009104 <USB_ActivateEndpoint+0x394>)
 80090ca:	430a      	orrs	r2, r1
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e16b      	b.n	80093a8 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	78db      	ldrb	r3, [r3, #3]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d125      	bne.n	8009124 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	18d3      	adds	r3, r2, r3
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a08      	ldr	r2, [pc, #32]	; (8009108 <USB_ActivateEndpoint+0x398>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	663b      	str	r3, [r7, #96]	; 0x60
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	18d3      	adds	r3, r2, r3
 80090f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090f6:	490a      	ldr	r1, [pc, #40]	; (8009120 <USB_ActivateEndpoint+0x3b0>)
 80090f8:	430a      	orrs	r2, r1
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	e024      	b.n	8009148 <USB_ActivateEndpoint+0x3d8>
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	07ff898f 	.word	0x07ff898f
 8009104:	00008080 	.word	0x00008080
 8009108:	07ff8f8f 	.word	0x07ff8f8f
 800910c:	40009800 	.word	0x40009800
 8009110:	000080c0 	.word	0x000080c0
 8009114:	07ff8fbf 	.word	0x07ff8fbf
 8009118:	0000c080 	.word	0x0000c080
 800911c:	07ffbf8f 	.word	0x07ffbf8f
 8009120:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	18d3      	adds	r3, r2, r3
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4aa1      	ldr	r2, [pc, #644]	; (80093b8 <USB_ActivateEndpoint+0x648>)
 8009132:	4013      	ands	r3, r2
 8009134:	667b      	str	r3, [r7, #100]	; 0x64
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	18d3      	adds	r3, r2, r3
 8009140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009142:	499e      	ldr	r1, [pc, #632]	; (80093bc <USB_ActivateEndpoint+0x64c>)
 8009144:	430a      	orrs	r2, r1
 8009146:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	4a9c      	ldr	r2, [pc, #624]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 8009150:	4694      	mov	ip, r2
 8009152:	4463      	add	r3, ip
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4998      	ldr	r1, [pc, #608]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 800915e:	468c      	mov	ip, r1
 8009160:	4463      	add	r3, ip
 8009162:	0c12      	lsrs	r2, r2, #16
 8009164:	0412      	lsls	r2, r2, #16
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	4a94      	ldr	r2, [pc, #592]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 8009170:	4694      	mov	ip, r2
 8009172:	4463      	add	r3, ip
 8009174:	6819      	ldr	r1, [r3, #0]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	891b      	ldrh	r3, [r3, #8]
 800917a:	089b      	lsrs	r3, r3, #2
 800917c:	b29b      	uxth	r3, r3
 800917e:	009a      	lsls	r2, r3, #2
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	488e      	ldr	r0, [pc, #568]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 8009188:	4684      	mov	ip, r0
 800918a:	4463      	add	r3, ip
 800918c:	430a      	orrs	r2, r1
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	4a8a      	ldr	r2, [pc, #552]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 8009198:	4694      	mov	ip, r2
 800919a:	4463      	add	r3, ip
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	4986      	ldr	r1, [pc, #536]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 80091a6:	468c      	mov	ip, r1
 80091a8:	4463      	add	r3, ip
 80091aa:	0c12      	lsrs	r2, r2, #16
 80091ac:	0412      	lsls	r2, r2, #16
 80091ae:	605a      	str	r2, [r3, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	4a82      	ldr	r2, [pc, #520]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 80091b8:	4694      	mov	ip, r2
 80091ba:	4463      	add	r3, ip
 80091bc:	6859      	ldr	r1, [r3, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	895b      	ldrh	r3, [r3, #10]
 80091c2:	089b      	lsrs	r3, r3, #2
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	009a      	lsls	r2, r3, #2
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	487c      	ldr	r0, [pc, #496]	; (80093c0 <USB_ActivateEndpoint+0x650>)
 80091d0:	4684      	mov	ip, r0
 80091d2:	4463      	add	r3, ip
 80091d4:	430a      	orrs	r2, r1
 80091d6:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	785b      	ldrb	r3, [r3, #1]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d169      	bne.n	80092b4 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	18d3      	adds	r3, r2, r3
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	643b      	str	r3, [r7, #64]	; 0x40
 80091ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f0:	2380      	movs	r3, #128	; 0x80
 80091f2:	01db      	lsls	r3, r3, #7
 80091f4:	4013      	ands	r3, r2
 80091f6:	d011      	beq.n	800921c <USB_ActivateEndpoint+0x4ac>
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	18d3      	adds	r3, r2, r3
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a6f      	ldr	r2, [pc, #444]	; (80093c4 <USB_ActivateEndpoint+0x654>)
 8009206:	4013      	ands	r3, r2
 8009208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	18d3      	adds	r3, r2, r3
 8009214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009216:	496c      	ldr	r1, [pc, #432]	; (80093c8 <USB_ActivateEndpoint+0x658>)
 8009218:	430a      	orrs	r2, r1
 800921a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	18d3      	adds	r3, r2, r3
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	63bb      	str	r3, [r7, #56]	; 0x38
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	2240      	movs	r2, #64	; 0x40
 800922e:	4013      	ands	r3, r2
 8009230:	d011      	beq.n	8009256 <USB_ActivateEndpoint+0x4e6>
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	18d3      	adds	r3, r2, r3
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a61      	ldr	r2, [pc, #388]	; (80093c4 <USB_ActivateEndpoint+0x654>)
 8009240:	4013      	ands	r3, r2
 8009242:	637b      	str	r3, [r7, #52]	; 0x34
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	18d3      	adds	r3, r2, r3
 800924e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009250:	495e      	ldr	r1, [pc, #376]	; (80093cc <USB_ActivateEndpoint+0x65c>)
 8009252:	430a      	orrs	r2, r1
 8009254:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	18d3      	adds	r3, r2, r3
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a5b      	ldr	r2, [pc, #364]	; (80093d0 <USB_ActivateEndpoint+0x660>)
 8009264:	4013      	ands	r3, r2
 8009266:	633b      	str	r3, [r7, #48]	; 0x30
 8009268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926a:	2280      	movs	r2, #128	; 0x80
 800926c:	0152      	lsls	r2, r2, #5
 800926e:	4053      	eors	r3, r2
 8009270:	633b      	str	r3, [r7, #48]	; 0x30
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	2280      	movs	r2, #128	; 0x80
 8009276:	0192      	lsls	r2, r2, #6
 8009278:	4053      	eors	r3, r2
 800927a:	633b      	str	r3, [r7, #48]	; 0x30
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	18d3      	adds	r3, r2, r3
 8009286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009288:	494c      	ldr	r1, [pc, #304]	; (80093bc <USB_ActivateEndpoint+0x64c>)
 800928a:	430a      	orrs	r2, r1
 800928c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	18d3      	adds	r3, r2, r3
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a4e      	ldr	r2, [pc, #312]	; (80093d4 <USB_ActivateEndpoint+0x664>)
 800929c:	4013      	ands	r3, r2
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	18d3      	adds	r3, r2, r3
 80092aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ac:	4943      	ldr	r1, [pc, #268]	; (80093bc <USB_ActivateEndpoint+0x64c>)
 80092ae:	430a      	orrs	r2, r1
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	e079      	b.n	80093a8 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	18d3      	adds	r3, r2, r3
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092c4:	2380      	movs	r3, #128	; 0x80
 80092c6:	01db      	lsls	r3, r3, #7
 80092c8:	4013      	ands	r3, r2
 80092ca:	d011      	beq.n	80092f0 <USB_ActivateEndpoint+0x580>
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	18d3      	adds	r3, r2, r3
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a3a      	ldr	r2, [pc, #232]	; (80093c4 <USB_ActivateEndpoint+0x654>)
 80092da:	4013      	ands	r3, r2
 80092dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	18d3      	adds	r3, r2, r3
 80092e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092ea:	4937      	ldr	r1, [pc, #220]	; (80093c8 <USB_ActivateEndpoint+0x658>)
 80092ec:	430a      	orrs	r2, r1
 80092ee:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	18d3      	adds	r3, r2, r3
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	657b      	str	r3, [r7, #84]	; 0x54
 80092fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009300:	2240      	movs	r2, #64	; 0x40
 8009302:	4013      	ands	r3, r2
 8009304:	d011      	beq.n	800932a <USB_ActivateEndpoint+0x5ba>
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	18d3      	adds	r3, r2, r3
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a2c      	ldr	r2, [pc, #176]	; (80093c4 <USB_ActivateEndpoint+0x654>)
 8009314:	4013      	ands	r3, r2
 8009316:	653b      	str	r3, [r7, #80]	; 0x50
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	18d3      	adds	r3, r2, r3
 8009322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009324:	4929      	ldr	r1, [pc, #164]	; (80093cc <USB_ActivateEndpoint+0x65c>)
 8009326:	430a      	orrs	r2, r1
 8009328:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	78db      	ldrb	r3, [r3, #3]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d016      	beq.n	8009360 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	18d3      	adds	r3, r2, r3
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a25      	ldr	r2, [pc, #148]	; (80093d4 <USB_ActivateEndpoint+0x664>)
 8009340:	4013      	ands	r3, r2
 8009342:	64bb      	str	r3, [r7, #72]	; 0x48
 8009344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009346:	2220      	movs	r2, #32
 8009348:	4053      	eors	r3, r2
 800934a:	64bb      	str	r3, [r7, #72]	; 0x48
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	18d3      	adds	r3, r2, r3
 8009356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009358:	4918      	ldr	r1, [pc, #96]	; (80093bc <USB_ActivateEndpoint+0x64c>)
 800935a:	430a      	orrs	r2, r1
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e011      	b.n	8009384 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	18d3      	adds	r3, r2, r3
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a19      	ldr	r2, [pc, #100]	; (80093d4 <USB_ActivateEndpoint+0x664>)
 800936e:	4013      	ands	r3, r2
 8009370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	18d3      	adds	r3, r2, r3
 800937c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800937e:	490f      	ldr	r1, [pc, #60]	; (80093bc <USB_ActivateEndpoint+0x64c>)
 8009380:	430a      	orrs	r2, r1
 8009382:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	18d3      	adds	r3, r2, r3
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <USB_ActivateEndpoint+0x660>)
 8009392:	4013      	ands	r3, r2
 8009394:	647b      	str	r3, [r7, #68]	; 0x44
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	18d3      	adds	r3, r2, r3
 80093a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093a2:	4906      	ldr	r1, [pc, #24]	; (80093bc <USB_ActivateEndpoint+0x64c>)
 80093a4:	430a      	orrs	r2, r1
 80093a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80093a8:	2377      	movs	r3, #119	; 0x77
 80093aa:	18fb      	adds	r3, r7, r3
 80093ac:	781b      	ldrb	r3, [r3, #0]
}
 80093ae:	0018      	movs	r0, r3
 80093b0:	46bd      	mov	sp, r7
 80093b2:	b01e      	add	sp, #120	; 0x78
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	07ff8e8f 	.word	0x07ff8e8f
 80093bc:	00008080 	.word	0x00008080
 80093c0:	40009800 	.word	0x40009800
 80093c4:	07ff8f8f 	.word	0x07ff8f8f
 80093c8:	0000c080 	.word	0x0000c080
 80093cc:	000080c0 	.word	0x000080c0
 80093d0:	07ffbf8f 	.word	0x07ffbf8f
 80093d4:	07ff8fbf 	.word	0x07ff8fbf

080093d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b096      	sub	sp, #88	; 0x58
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	7b1b      	ldrb	r3, [r3, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d164      	bne.n	80094b4 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d02f      	beq.n	8009452 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	18d3      	adds	r3, r2, r3
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	613b      	str	r3, [r7, #16]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	2240      	movs	r2, #64	; 0x40
 8009404:	4013      	ands	r3, r2
 8009406:	d011      	beq.n	800942c <USB_DeactivateEndpoint+0x54>
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	18d3      	adds	r3, r2, r3
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a9d      	ldr	r2, [pc, #628]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 8009416:	4013      	ands	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	18d3      	adds	r3, r2, r3
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	499a      	ldr	r1, [pc, #616]	; (8009690 <USB_DeactivateEndpoint+0x2b8>)
 8009428:	430a      	orrs	r2, r1
 800942a:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	18d3      	adds	r3, r2, r3
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a96      	ldr	r2, [pc, #600]	; (8009694 <USB_DeactivateEndpoint+0x2bc>)
 800943a:	4013      	ands	r3, r2
 800943c:	60bb      	str	r3, [r7, #8]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	18d3      	adds	r3, r2, r3
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	4993      	ldr	r1, [pc, #588]	; (8009698 <USB_DeactivateEndpoint+0x2c0>)
 800944c:	430a      	orrs	r2, r1
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	e117      	b.n	8009682 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	18d3      	adds	r3, r2, r3
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	2380      	movs	r3, #128	; 0x80
 8009464:	01db      	lsls	r3, r3, #7
 8009466:	4013      	ands	r3, r2
 8009468:	d011      	beq.n	800948e <USB_DeactivateEndpoint+0xb6>
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	18d3      	adds	r3, r2, r3
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a85      	ldr	r2, [pc, #532]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 8009478:	4013      	ands	r3, r2
 800947a:	61bb      	str	r3, [r7, #24]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	18d3      	adds	r3, r2, r3
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	4984      	ldr	r1, [pc, #528]	; (800969c <USB_DeactivateEndpoint+0x2c4>)
 800948a:	430a      	orrs	r2, r1
 800948c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	18d3      	adds	r3, r2, r3
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a81      	ldr	r2, [pc, #516]	; (80096a0 <USB_DeactivateEndpoint+0x2c8>)
 800949c:	4013      	ands	r3, r2
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	18d3      	adds	r3, r2, r3
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	497a      	ldr	r1, [pc, #488]	; (8009698 <USB_DeactivateEndpoint+0x2c0>)
 80094ae:	430a      	orrs	r2, r1
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	e0e6      	b.n	8009682 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d171      	bne.n	80095a0 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	18d3      	adds	r3, r2, r3
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80094ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094cc:	2380      	movs	r3, #128	; 0x80
 80094ce:	01db      	lsls	r3, r3, #7
 80094d0:	4013      	ands	r3, r2
 80094d2:	d011      	beq.n	80094f8 <USB_DeactivateEndpoint+0x120>
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	18d3      	adds	r3, r2, r3
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a6a      	ldr	r2, [pc, #424]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 80094e2:	4013      	ands	r3, r2
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	18d3      	adds	r3, r2, r3
 80094f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f2:	496a      	ldr	r1, [pc, #424]	; (800969c <USB_DeactivateEndpoint+0x2c4>)
 80094f4:	430a      	orrs	r2, r1
 80094f6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	18d3      	adds	r3, r2, r3
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	633b      	str	r3, [r7, #48]	; 0x30
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	2240      	movs	r2, #64	; 0x40
 800950a:	4013      	ands	r3, r2
 800950c:	d011      	beq.n	8009532 <USB_DeactivateEndpoint+0x15a>
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	18d3      	adds	r3, r2, r3
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a5c      	ldr	r2, [pc, #368]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 800951c:	4013      	ands	r3, r2
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	18d3      	adds	r3, r2, r3
 800952a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952c:	4958      	ldr	r1, [pc, #352]	; (8009690 <USB_DeactivateEndpoint+0x2b8>)
 800952e:	430a      	orrs	r2, r1
 8009530:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	18d3      	adds	r3, r2, r3
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a53      	ldr	r2, [pc, #332]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 8009540:	4013      	ands	r3, r2
 8009542:	62bb      	str	r3, [r7, #40]	; 0x28
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	18d3      	adds	r3, r2, r3
 800954e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009550:	494f      	ldr	r1, [pc, #316]	; (8009690 <USB_DeactivateEndpoint+0x2b8>)
 8009552:	430a      	orrs	r2, r1
 8009554:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	18d3      	adds	r3, r2, r3
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a4f      	ldr	r2, [pc, #316]	; (80096a0 <USB_DeactivateEndpoint+0x2c8>)
 8009564:	4013      	ands	r3, r2
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	18d3      	adds	r3, r2, r3
 8009572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009574:	4948      	ldr	r1, [pc, #288]	; (8009698 <USB_DeactivateEndpoint+0x2c0>)
 8009576:	430a      	orrs	r2, r1
 8009578:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	18d3      	adds	r3, r2, r3
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a43      	ldr	r2, [pc, #268]	; (8009694 <USB_DeactivateEndpoint+0x2bc>)
 8009588:	4013      	ands	r3, r2
 800958a:	623b      	str	r3, [r7, #32]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	18d3      	adds	r3, r2, r3
 8009596:	6a3a      	ldr	r2, [r7, #32]
 8009598:	493f      	ldr	r1, [pc, #252]	; (8009698 <USB_DeactivateEndpoint+0x2c0>)
 800959a:	430a      	orrs	r2, r1
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	e070      	b.n	8009682 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	18d3      	adds	r3, r2, r3
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	657b      	str	r3, [r7, #84]	; 0x54
 80095ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095b0:	2380      	movs	r3, #128	; 0x80
 80095b2:	01db      	lsls	r3, r3, #7
 80095b4:	4013      	ands	r3, r2
 80095b6:	d011      	beq.n	80095dc <USB_DeactivateEndpoint+0x204>
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	18d3      	adds	r3, r2, r3
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a31      	ldr	r2, [pc, #196]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	653b      	str	r3, [r7, #80]	; 0x50
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	18d3      	adds	r3, r2, r3
 80095d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095d6:	4931      	ldr	r1, [pc, #196]	; (800969c <USB_DeactivateEndpoint+0x2c4>)
 80095d8:	430a      	orrs	r2, r1
 80095da:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	18d3      	adds	r3, r2, r3
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ec:	2240      	movs	r2, #64	; 0x40
 80095ee:	4013      	ands	r3, r2
 80095f0:	d011      	beq.n	8009616 <USB_DeactivateEndpoint+0x23e>
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	18d3      	adds	r3, r2, r3
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a23      	ldr	r2, [pc, #140]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 8009600:	4013      	ands	r3, r2
 8009602:	64bb      	str	r3, [r7, #72]	; 0x48
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	18d3      	adds	r3, r2, r3
 800960e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009610:	491f      	ldr	r1, [pc, #124]	; (8009690 <USB_DeactivateEndpoint+0x2b8>)
 8009612:	430a      	orrs	r2, r1
 8009614:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	18d3      	adds	r3, r2, r3
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1a      	ldr	r2, [pc, #104]	; (800968c <USB_DeactivateEndpoint+0x2b4>)
 8009624:	4013      	ands	r3, r2
 8009626:	647b      	str	r3, [r7, #68]	; 0x44
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	18d3      	adds	r3, r2, r3
 8009632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009634:	4919      	ldr	r1, [pc, #100]	; (800969c <USB_DeactivateEndpoint+0x2c4>)
 8009636:	430a      	orrs	r2, r1
 8009638:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	18d3      	adds	r3, r2, r3
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a13      	ldr	r2, [pc, #76]	; (8009694 <USB_DeactivateEndpoint+0x2bc>)
 8009648:	4013      	ands	r3, r2
 800964a:	643b      	str	r3, [r7, #64]	; 0x40
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	18d3      	adds	r3, r2, r3
 8009656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009658:	490f      	ldr	r1, [pc, #60]	; (8009698 <USB_DeactivateEndpoint+0x2c0>)
 800965a:	430a      	orrs	r2, r1
 800965c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	18d3      	adds	r3, r2, r3
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a0d      	ldr	r2, [pc, #52]	; (80096a0 <USB_DeactivateEndpoint+0x2c8>)
 800966c:	4013      	ands	r3, r2
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	18d3      	adds	r3, r2, r3
 800967a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800967c:	4906      	ldr	r1, [pc, #24]	; (8009698 <USB_DeactivateEndpoint+0x2c0>)
 800967e:	430a      	orrs	r2, r1
 8009680:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	0018      	movs	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	b016      	add	sp, #88	; 0x58
 800968a:	bd80      	pop	{r7, pc}
 800968c:	07ff8f8f 	.word	0x07ff8f8f
 8009690:	000080c0 	.word	0x000080c0
 8009694:	07ff8fbf 	.word	0x07ff8fbf
 8009698:	00008080 	.word	0x00008080
 800969c:	0000c080 	.word	0x0000c080
 80096a0:	07ffbf8f 	.word	0x07ffbf8f

080096a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80096a4:	b590      	push	{r4, r7, lr}
 80096a6:	b097      	sub	sp, #92	; 0x5c
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d001      	beq.n	80096ba <USB_EPStartXfer+0x16>
 80096b6:	f000 fcbf 	bl	800a038 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d903      	bls.n	80096ce <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	657b      	str	r3, [r7, #84]	; 0x54
 80096cc:	e002      	b.n	80096d4 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	7b1b      	ldrb	r3, [r3, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d12b      	bne.n	8009734 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6959      	ldr	r1, [r3, #20]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	88da      	ldrh	r2, [r3, #6]
 80096e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 f97f 	bl	800a9ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4ace      	ldr	r2, [pc, #824]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80096f6:	4694      	mov	ip, r2
 80096f8:	4463      	add	r3, ip
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	49cb      	ldr	r1, [pc, #812]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009704:	468c      	mov	ip, r1
 8009706:	4463      	add	r3, ip
 8009708:	0412      	lsls	r2, r2, #16
 800970a:	0c12      	lsrs	r2, r2, #16
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	4ac6      	ldr	r2, [pc, #792]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009716:	4694      	mov	ip, r2
 8009718:	4463      	add	r3, ip
 800971a:	6819      	ldr	r1, [r3, #0]
 800971c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800971e:	041a      	lsls	r2, r3, #16
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	48c2      	ldr	r0, [pc, #776]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009728:	4684      	mov	ip, r0
 800972a:	4463      	add	r3, ip
 800972c:	430a      	orrs	r2, r1
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	f000 fc67 	bl	800a002 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	78db      	ldrb	r3, [r3, #3]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d000      	beq.n	800973e <USB_EPStartXfer+0x9a>
 800973c:	e31a      	b.n	8009d74 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	429a      	cmp	r2, r3
 8009748:	d800      	bhi.n	800974c <USB_EPStartXfer+0xa8>
 800974a:	e2c7      	b.n	8009cdc <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	18d3      	adds	r3, r2, r3
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4ab6      	ldr	r2, [pc, #728]	; (8009a34 <USB_EPStartXfer+0x390>)
 800975a:	4013      	ands	r3, r2
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	18d3      	adds	r3, r2, r3
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	49b3      	ldr	r1, [pc, #716]	; (8009a38 <USB_EPStartXfer+0x394>)
 800976c:	430a      	orrs	r2, r1
 800976e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	6a1a      	ldr	r2, [r3, #32]
 8009774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009776:	1ad2      	subs	r2, r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	18d3      	adds	r3, r2, r3
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2240      	movs	r2, #64	; 0x40
 800978a:	4013      	ands	r3, r2
 800978c:	d100      	bne.n	8009790 <USB_EPStartXfer+0xec>
 800978e:	e155      	b.n	8009a3c <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d162      	bne.n	800985e <USB_EPStartXfer+0x1ba>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	4aa4      	ldr	r2, [pc, #656]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80097a0:	4694      	mov	ip, r2
 80097a2:	4463      	add	r3, ip
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	49a0      	ldr	r1, [pc, #640]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80097ae:	468c      	mov	ip, r1
 80097b0:	4463      	add	r3, ip
 80097b2:	0192      	lsls	r2, r2, #6
 80097b4:	0992      	lsrs	r2, r2, #6
 80097b6:	605a      	str	r2, [r3, #4]
 80097b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ba:	2b3e      	cmp	r3, #62	; 0x3e
 80097bc:	d91e      	bls.n	80097fc <USB_EPStartXfer+0x158>
 80097be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097c0:	095b      	lsrs	r3, r3, #5
 80097c2:	653b      	str	r3, [r7, #80]	; 0x50
 80097c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097c6:	221f      	movs	r2, #31
 80097c8:	4013      	ands	r3, r2
 80097ca:	d102      	bne.n	80097d2 <USB_EPStartXfer+0x12e>
 80097cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ce:	3b01      	subs	r3, #1
 80097d0:	653b      	str	r3, [r7, #80]	; 0x50
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	4a95      	ldr	r2, [pc, #596]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80097da:	4694      	mov	ip, r2
 80097dc:	4463      	add	r3, ip
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e2:	069b      	lsls	r3, r3, #26
 80097e4:	431a      	orrs	r2, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	4990      	ldr	r1, [pc, #576]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80097ee:	468c      	mov	ip, r1
 80097f0:	4463      	add	r3, ip
 80097f2:	2180      	movs	r1, #128	; 0x80
 80097f4:	0609      	lsls	r1, r1, #24
 80097f6:	430a      	orrs	r2, r1
 80097f8:	605a      	str	r2, [r3, #4]
 80097fa:	e055      	b.n	80098a8 <USB_EPStartXfer+0x204>
 80097fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d111      	bne.n	8009826 <USB_EPStartXfer+0x182>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	4a89      	ldr	r2, [pc, #548]	; (8009a30 <USB_EPStartXfer+0x38c>)
 800980a:	4694      	mov	ip, r2
 800980c:	4463      	add	r3, ip
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	4986      	ldr	r1, [pc, #536]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009818:	468c      	mov	ip, r1
 800981a:	4463      	add	r3, ip
 800981c:	2180      	movs	r1, #128	; 0x80
 800981e:	0609      	lsls	r1, r1, #24
 8009820:	430a      	orrs	r2, r1
 8009822:	605a      	str	r2, [r3, #4]
 8009824:	e040      	b.n	80098a8 <USB_EPStartXfer+0x204>
 8009826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009828:	085b      	lsrs	r3, r3, #1
 800982a:	653b      	str	r3, [r7, #80]	; 0x50
 800982c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800982e:	2201      	movs	r2, #1
 8009830:	4013      	ands	r3, r2
 8009832:	d002      	beq.n	800983a <USB_EPStartXfer+0x196>
 8009834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009836:	3301      	adds	r3, #1
 8009838:	653b      	str	r3, [r7, #80]	; 0x50
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	4a7b      	ldr	r2, [pc, #492]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009842:	4694      	mov	ip, r2
 8009844:	4463      	add	r3, ip
 8009846:	6859      	ldr	r1, [r3, #4]
 8009848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984a:	069a      	lsls	r2, r3, #26
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	4877      	ldr	r0, [pc, #476]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009854:	4684      	mov	ip, r0
 8009856:	4463      	add	r3, ip
 8009858:	430a      	orrs	r2, r1
 800985a:	605a      	str	r2, [r3, #4]
 800985c:	e024      	b.n	80098a8 <USB_EPStartXfer+0x204>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	785b      	ldrb	r3, [r3, #1]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d120      	bne.n	80098a8 <USB_EPStartXfer+0x204>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	4a70      	ldr	r2, [pc, #448]	; (8009a30 <USB_EPStartXfer+0x38c>)
 800986e:	4694      	mov	ip, r2
 8009870:	4463      	add	r3, ip
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	496d      	ldr	r1, [pc, #436]	; (8009a30 <USB_EPStartXfer+0x38c>)
 800987c:	468c      	mov	ip, r1
 800987e:	4463      	add	r3, ip
 8009880:	0412      	lsls	r2, r2, #16
 8009882:	0c12      	lsrs	r2, r2, #16
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	4a68      	ldr	r2, [pc, #416]	; (8009a30 <USB_EPStartXfer+0x38c>)
 800988e:	4694      	mov	ip, r2
 8009890:	4463      	add	r3, ip
 8009892:	6859      	ldr	r1, [r3, #4]
 8009894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009896:	041a      	lsls	r2, r3, #16
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	4864      	ldr	r0, [pc, #400]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80098a0:	4684      	mov	ip, r0
 80098a2:	4463      	add	r3, ip
 80098a4:	430a      	orrs	r2, r1
 80098a6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80098a8:	201a      	movs	r0, #26
 80098aa:	183b      	adds	r3, r7, r0
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	8952      	ldrh	r2, [r2, #10]
 80098b0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6959      	ldr	r1, [r3, #20]
 80098b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b8:	b29c      	uxth	r4, r3
 80098ba:	183b      	adds	r3, r7, r0
 80098bc:	881a      	ldrh	r2, [r3, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	0023      	movs	r3, r4
 80098c2:	f001 f893 	bl	800a9ec <USB_WritePMA>
            ep->xfer_buff += len;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098cc:	18d2      	adds	r2, r2, r3
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6a1a      	ldr	r2, [r3, #32]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d906      	bls.n	80098ec <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	6a1a      	ldr	r2, [r3, #32]
 80098e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e4:	1ad2      	subs	r2, r2, r3
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	621a      	str	r2, [r3, #32]
 80098ea:	e005      	b.n	80098f8 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2200      	movs	r2, #0
 80098f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d162      	bne.n	80099c6 <USB_EPStartXfer+0x322>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	4a4a      	ldr	r2, [pc, #296]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009908:	4694      	mov	ip, r2
 800990a:	4463      	add	r3, ip
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	4946      	ldr	r1, [pc, #280]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009916:	468c      	mov	ip, r1
 8009918:	4463      	add	r3, ip
 800991a:	0192      	lsls	r2, r2, #6
 800991c:	0992      	lsrs	r2, r2, #6
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009922:	2b3e      	cmp	r3, #62	; 0x3e
 8009924:	d91e      	bls.n	8009964 <USB_EPStartXfer+0x2c0>
 8009926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009928:	095b      	lsrs	r3, r3, #5
 800992a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800992c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992e:	221f      	movs	r2, #31
 8009930:	4013      	ands	r3, r2
 8009932:	d102      	bne.n	800993a <USB_EPStartXfer+0x296>
 8009934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009936:	3b01      	subs	r3, #1
 8009938:	64fb      	str	r3, [r7, #76]	; 0x4c
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	4a3b      	ldr	r2, [pc, #236]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009942:	4694      	mov	ip, r2
 8009944:	4463      	add	r3, ip
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800994a:	069b      	lsls	r3, r3, #26
 800994c:	431a      	orrs	r2, r3
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	4936      	ldr	r1, [pc, #216]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009956:	468c      	mov	ip, r1
 8009958:	4463      	add	r3, ip
 800995a:	2180      	movs	r1, #128	; 0x80
 800995c:	0609      	lsls	r1, r1, #24
 800995e:	430a      	orrs	r2, r1
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	e055      	b.n	8009a10 <USB_EPStartXfer+0x36c>
 8009964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009966:	2b00      	cmp	r3, #0
 8009968:	d111      	bne.n	800998e <USB_EPStartXfer+0x2ea>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4a2f      	ldr	r2, [pc, #188]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009972:	4694      	mov	ip, r2
 8009974:	4463      	add	r3, ip
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	492c      	ldr	r1, [pc, #176]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009980:	468c      	mov	ip, r1
 8009982:	4463      	add	r3, ip
 8009984:	2180      	movs	r1, #128	; 0x80
 8009986:	0609      	lsls	r1, r1, #24
 8009988:	430a      	orrs	r2, r1
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	e040      	b.n	8009a10 <USB_EPStartXfer+0x36c>
 800998e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009990:	085b      	lsrs	r3, r3, #1
 8009992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009996:	2201      	movs	r2, #1
 8009998:	4013      	ands	r3, r2
 800999a:	d002      	beq.n	80099a2 <USB_EPStartXfer+0x2fe>
 800999c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800999e:	3301      	adds	r3, #1
 80099a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	4a21      	ldr	r2, [pc, #132]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80099aa:	4694      	mov	ip, r2
 80099ac:	4463      	add	r3, ip
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b2:	069a      	lsls	r2, r3, #26
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	481d      	ldr	r0, [pc, #116]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80099bc:	4684      	mov	ip, r0
 80099be:	4463      	add	r3, ip
 80099c0:	430a      	orrs	r2, r1
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e024      	b.n	8009a10 <USB_EPStartXfer+0x36c>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d120      	bne.n	8009a10 <USB_EPStartXfer+0x36c>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	4a16      	ldr	r2, [pc, #88]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80099d6:	4694      	mov	ip, r2
 80099d8:	4463      	add	r3, ip
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	4913      	ldr	r1, [pc, #76]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80099e4:	468c      	mov	ip, r1
 80099e6:	4463      	add	r3, ip
 80099e8:	0412      	lsls	r2, r2, #16
 80099ea:	0c12      	lsrs	r2, r2, #16
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	4a0e      	ldr	r2, [pc, #56]	; (8009a30 <USB_EPStartXfer+0x38c>)
 80099f6:	4694      	mov	ip, r2
 80099f8:	4463      	add	r3, ip
 80099fa:	6819      	ldr	r1, [r3, #0]
 80099fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fe:	041a      	lsls	r2, r3, #16
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	480a      	ldr	r0, [pc, #40]	; (8009a30 <USB_EPStartXfer+0x38c>)
 8009a08:	4684      	mov	ip, r0
 8009a0a:	4463      	add	r3, ip
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a10:	201a      	movs	r0, #26
 8009a12:	183b      	adds	r3, r7, r0
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	8912      	ldrh	r2, [r2, #8]
 8009a18:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	6959      	ldr	r1, [r3, #20]
 8009a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a20:	b29c      	uxth	r4, r3
 8009a22:	183b      	adds	r3, r7, r0
 8009a24:	881a      	ldrh	r2, [r3, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	0023      	movs	r3, r4
 8009a2a:	f000 ffdf 	bl	800a9ec <USB_WritePMA>
 8009a2e:	e2e8      	b.n	800a002 <USB_EPStartXfer+0x95e>
 8009a30:	40009800 	.word	0x40009800
 8009a34:	07ff8f8f 	.word	0x07ff8f8f
 8009a38:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d162      	bne.n	8009b0a <USB_EPStartXfer+0x466>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	4ac7      	ldr	r2, [pc, #796]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009a4c:	4694      	mov	ip, r2
 8009a4e:	4463      	add	r3, ip
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	49c3      	ldr	r1, [pc, #780]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009a5a:	468c      	mov	ip, r1
 8009a5c:	4463      	add	r3, ip
 8009a5e:	0192      	lsls	r2, r2, #6
 8009a60:	0992      	lsrs	r2, r2, #6
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a66:	2b3e      	cmp	r3, #62	; 0x3e
 8009a68:	d91e      	bls.n	8009aa8 <USB_EPStartXfer+0x404>
 8009a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a6c:	095b      	lsrs	r3, r3, #5
 8009a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a72:	221f      	movs	r2, #31
 8009a74:	4013      	ands	r3, r2
 8009a76:	d102      	bne.n	8009a7e <USB_EPStartXfer+0x3da>
 8009a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	4ab8      	ldr	r2, [pc, #736]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009a86:	4694      	mov	ip, r2
 8009a88:	4463      	add	r3, ip
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a8e:	069b      	lsls	r3, r3, #26
 8009a90:	431a      	orrs	r2, r3
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	49b3      	ldr	r1, [pc, #716]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009a9a:	468c      	mov	ip, r1
 8009a9c:	4463      	add	r3, ip
 8009a9e:	2180      	movs	r1, #128	; 0x80
 8009aa0:	0609      	lsls	r1, r1, #24
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	e055      	b.n	8009b54 <USB_EPStartXfer+0x4b0>
 8009aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d111      	bne.n	8009ad2 <USB_EPStartXfer+0x42e>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	4aac      	ldr	r2, [pc, #688]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009ab6:	4694      	mov	ip, r2
 8009ab8:	4463      	add	r3, ip
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	00db      	lsls	r3, r3, #3
 8009ac2:	49a9      	ldr	r1, [pc, #676]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009ac4:	468c      	mov	ip, r1
 8009ac6:	4463      	add	r3, ip
 8009ac8:	2180      	movs	r1, #128	; 0x80
 8009aca:	0609      	lsls	r1, r1, #24
 8009acc:	430a      	orrs	r2, r1
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	e040      	b.n	8009b54 <USB_EPStartXfer+0x4b0>
 8009ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad4:	085b      	lsrs	r3, r3, #1
 8009ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ada:	2201      	movs	r2, #1
 8009adc:	4013      	ands	r3, r2
 8009ade:	d002      	beq.n	8009ae6 <USB_EPStartXfer+0x442>
 8009ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	4a9e      	ldr	r2, [pc, #632]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009aee:	4694      	mov	ip, r2
 8009af0:	4463      	add	r3, ip
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009af6:	069a      	lsls	r2, r3, #26
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	489a      	ldr	r0, [pc, #616]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009b00:	4684      	mov	ip, r0
 8009b02:	4463      	add	r3, ip
 8009b04:	430a      	orrs	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	e024      	b.n	8009b54 <USB_EPStartXfer+0x4b0>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d120      	bne.n	8009b54 <USB_EPStartXfer+0x4b0>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	4a93      	ldr	r2, [pc, #588]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009b1a:	4694      	mov	ip, r2
 8009b1c:	4463      	add	r3, ip
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	00db      	lsls	r3, r3, #3
 8009b26:	4990      	ldr	r1, [pc, #576]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009b28:	468c      	mov	ip, r1
 8009b2a:	4463      	add	r3, ip
 8009b2c:	0412      	lsls	r2, r2, #16
 8009b2e:	0c12      	lsrs	r2, r2, #16
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4a8b      	ldr	r2, [pc, #556]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009b3a:	4694      	mov	ip, r2
 8009b3c:	4463      	add	r3, ip
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b42:	041a      	lsls	r2, r3, #16
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	4887      	ldr	r0, [pc, #540]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009b4c:	4684      	mov	ip, r0
 8009b4e:	4463      	add	r3, ip
 8009b50:	430a      	orrs	r2, r1
 8009b52:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b54:	201a      	movs	r0, #26
 8009b56:	183b      	adds	r3, r7, r0
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	8912      	ldrh	r2, [r2, #8]
 8009b5c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	6959      	ldr	r1, [r3, #20]
 8009b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b64:	b29c      	uxth	r4, r3
 8009b66:	183b      	adds	r3, r7, r0
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	0023      	movs	r3, r4
 8009b6e:	f000 ff3d 	bl	800a9ec <USB_WritePMA>
            ep->xfer_buff += len;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b78:	18d2      	adds	r2, r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6a1a      	ldr	r2, [r3, #32]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d906      	bls.n	8009b98 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	6a1a      	ldr	r2, [r3, #32]
 8009b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b90:	1ad2      	subs	r2, r2, r3
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	621a      	str	r2, [r3, #32]
 8009b96:	e005      	b.n	8009ba4 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d162      	bne.n	8009c72 <USB_EPStartXfer+0x5ce>
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	4a6d      	ldr	r2, [pc, #436]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009bb4:	4694      	mov	ip, r2
 8009bb6:	4463      	add	r3, ip
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	4969      	ldr	r1, [pc, #420]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009bc2:	468c      	mov	ip, r1
 8009bc4:	4463      	add	r3, ip
 8009bc6:	0192      	lsls	r2, r2, #6
 8009bc8:	0992      	lsrs	r2, r2, #6
 8009bca:	605a      	str	r2, [r3, #4]
 8009bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bce:	2b3e      	cmp	r3, #62	; 0x3e
 8009bd0:	d91e      	bls.n	8009c10 <USB_EPStartXfer+0x56c>
 8009bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd4:	095b      	lsrs	r3, r3, #5
 8009bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8009bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bda:	221f      	movs	r2, #31
 8009bdc:	4013      	ands	r3, r2
 8009bde:	d102      	bne.n	8009be6 <USB_EPStartXfer+0x542>
 8009be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be2:	3b01      	subs	r3, #1
 8009be4:	647b      	str	r3, [r7, #68]	; 0x44
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	4a5e      	ldr	r2, [pc, #376]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009bee:	4694      	mov	ip, r2
 8009bf0:	4463      	add	r3, ip
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bf6:	069b      	lsls	r3, r3, #26
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4959      	ldr	r1, [pc, #356]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009c02:	468c      	mov	ip, r1
 8009c04:	4463      	add	r3, ip
 8009c06:	2180      	movs	r1, #128	; 0x80
 8009c08:	0609      	lsls	r1, r1, #24
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
 8009c0e:	e055      	b.n	8009cbc <USB_EPStartXfer+0x618>
 8009c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d111      	bne.n	8009c3a <USB_EPStartXfer+0x596>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	4a52      	ldr	r2, [pc, #328]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009c1e:	4694      	mov	ip, r2
 8009c20:	4463      	add	r3, ip
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	00db      	lsls	r3, r3, #3
 8009c2a:	494f      	ldr	r1, [pc, #316]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009c2c:	468c      	mov	ip, r1
 8009c2e:	4463      	add	r3, ip
 8009c30:	2180      	movs	r1, #128	; 0x80
 8009c32:	0609      	lsls	r1, r1, #24
 8009c34:	430a      	orrs	r2, r1
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	e040      	b.n	8009cbc <USB_EPStartXfer+0x618>
 8009c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c42:	2201      	movs	r2, #1
 8009c44:	4013      	ands	r3, r2
 8009c46:	d002      	beq.n	8009c4e <USB_EPStartXfer+0x5aa>
 8009c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	4a44      	ldr	r2, [pc, #272]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009c56:	4694      	mov	ip, r2
 8009c58:	4463      	add	r3, ip
 8009c5a:	6859      	ldr	r1, [r3, #4]
 8009c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c5e:	069a      	lsls	r2, r3, #26
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	4840      	ldr	r0, [pc, #256]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009c68:	4684      	mov	ip, r0
 8009c6a:	4463      	add	r3, ip
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	605a      	str	r2, [r3, #4]
 8009c70:	e024      	b.n	8009cbc <USB_EPStartXfer+0x618>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d120      	bne.n	8009cbc <USB_EPStartXfer+0x618>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	4a39      	ldr	r2, [pc, #228]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009c82:	4694      	mov	ip, r2
 8009c84:	4463      	add	r3, ip
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	4936      	ldr	r1, [pc, #216]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009c90:	468c      	mov	ip, r1
 8009c92:	4463      	add	r3, ip
 8009c94:	0412      	lsls	r2, r2, #16
 8009c96:	0c12      	lsrs	r2, r2, #16
 8009c98:	605a      	str	r2, [r3, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	4a31      	ldr	r2, [pc, #196]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009ca2:	4694      	mov	ip, r2
 8009ca4:	4463      	add	r3, ip
 8009ca6:	6859      	ldr	r1, [r3, #4]
 8009ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009caa:	041a      	lsls	r2, r3, #16
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	482d      	ldr	r0, [pc, #180]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009cb4:	4684      	mov	ip, r0
 8009cb6:	4463      	add	r3, ip
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8009cbc:	201a      	movs	r0, #26
 8009cbe:	183b      	adds	r3, r7, r0
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	8952      	ldrh	r2, [r2, #10]
 8009cc4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	6959      	ldr	r1, [r3, #20]
 8009cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ccc:	b29c      	uxth	r4, r3
 8009cce:	183b      	adds	r3, r7, r0
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	0023      	movs	r3, r4
 8009cd6:	f000 fe89 	bl	800a9ec <USB_WritePMA>
 8009cda:	e192      	b.n	800a002 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	18d3      	adds	r3, r2, r3
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a1f      	ldr	r2, [pc, #124]	; (8009d6c <USB_EPStartXfer+0x6c8>)
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	18d3      	adds	r3, r2, r3
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	491b      	ldr	r1, [pc, #108]	; (8009d70 <USB_EPStartXfer+0x6cc>)
 8009d02:	430a      	orrs	r2, r1
 8009d04:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	4a16      	ldr	r2, [pc, #88]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009d0e:	4694      	mov	ip, r2
 8009d10:	4463      	add	r3, ip
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	4913      	ldr	r1, [pc, #76]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009d1c:	468c      	mov	ip, r1
 8009d1e:	4463      	add	r3, ip
 8009d20:	0412      	lsls	r2, r2, #16
 8009d22:	0c12      	lsrs	r2, r2, #16
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	4a0e      	ldr	r2, [pc, #56]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009d2e:	4694      	mov	ip, r2
 8009d30:	4463      	add	r3, ip
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d36:	041a      	lsls	r2, r3, #16
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	480a      	ldr	r0, [pc, #40]	; (8009d68 <USB_EPStartXfer+0x6c4>)
 8009d40:	4684      	mov	ip, r0
 8009d42:	4463      	add	r3, ip
 8009d44:	430a      	orrs	r2, r1
 8009d46:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d48:	201a      	movs	r0, #26
 8009d4a:	183b      	adds	r3, r7, r0
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	8912      	ldrh	r2, [r2, #8]
 8009d50:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	6959      	ldr	r1, [r3, #20]
 8009d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d58:	b29c      	uxth	r4, r3
 8009d5a:	183b      	adds	r3, r7, r0
 8009d5c:	881a      	ldrh	r2, [r3, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	0023      	movs	r3, r4
 8009d62:	f000 fe43 	bl	800a9ec <USB_WritePMA>
 8009d66:	e14c      	b.n	800a002 <USB_EPStartXfer+0x95e>
 8009d68:	40009800 	.word	0x40009800
 8009d6c:	07ff8e8f 	.word	0x07ff8e8f
 8009d70:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6a1a      	ldr	r2, [r3, #32]
 8009d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	18d3      	adds	r3, r2, r3
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2240      	movs	r2, #64	; 0x40
 8009d8e:	4013      	ands	r3, r2
 8009d90:	d100      	bne.n	8009d94 <USB_EPStartXfer+0x6f0>
 8009d92:	e09b      	b.n	8009ecc <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d162      	bne.n	8009e62 <USB_EPStartXfer+0x7be>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	4ad6      	ldr	r2, [pc, #856]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009da4:	4694      	mov	ip, r2
 8009da6:	4463      	add	r3, ip
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	00db      	lsls	r3, r3, #3
 8009db0:	49d2      	ldr	r1, [pc, #840]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009db2:	468c      	mov	ip, r1
 8009db4:	4463      	add	r3, ip
 8009db6:	0192      	lsls	r2, r2, #6
 8009db8:	0992      	lsrs	r2, r2, #6
 8009dba:	605a      	str	r2, [r3, #4]
 8009dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8009dc0:	d91e      	bls.n	8009e00 <USB_EPStartXfer+0x75c>
 8009dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dc4:	095b      	lsrs	r3, r3, #5
 8009dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8009dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dca:	221f      	movs	r2, #31
 8009dcc:	4013      	ands	r3, r2
 8009dce:	d102      	bne.n	8009dd6 <USB_EPStartXfer+0x732>
 8009dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	4ac7      	ldr	r2, [pc, #796]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009dde:	4694      	mov	ip, r2
 8009de0:	4463      	add	r3, ip
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de6:	069b      	lsls	r3, r3, #26
 8009de8:	431a      	orrs	r2, r3
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	49c2      	ldr	r1, [pc, #776]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009df2:	468c      	mov	ip, r1
 8009df4:	4463      	add	r3, ip
 8009df6:	2180      	movs	r1, #128	; 0x80
 8009df8:	0609      	lsls	r1, r1, #24
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	605a      	str	r2, [r3, #4]
 8009dfe:	e055      	b.n	8009eac <USB_EPStartXfer+0x808>
 8009e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d111      	bne.n	8009e2a <USB_EPStartXfer+0x786>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	4abb      	ldr	r2, [pc, #748]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009e0e:	4694      	mov	ip, r2
 8009e10:	4463      	add	r3, ip
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	49b8      	ldr	r1, [pc, #736]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009e1c:	468c      	mov	ip, r1
 8009e1e:	4463      	add	r3, ip
 8009e20:	2180      	movs	r1, #128	; 0x80
 8009e22:	0609      	lsls	r1, r1, #24
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]
 8009e28:	e040      	b.n	8009eac <USB_EPStartXfer+0x808>
 8009e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e32:	2201      	movs	r2, #1
 8009e34:	4013      	ands	r3, r2
 8009e36:	d002      	beq.n	8009e3e <USB_EPStartXfer+0x79a>
 8009e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	00db      	lsls	r3, r3, #3
 8009e44:	4aad      	ldr	r2, [pc, #692]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009e46:	4694      	mov	ip, r2
 8009e48:	4463      	add	r3, ip
 8009e4a:	6859      	ldr	r1, [r3, #4]
 8009e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4e:	069a      	lsls	r2, r3, #26
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	48a9      	ldr	r0, [pc, #676]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009e58:	4684      	mov	ip, r0
 8009e5a:	4463      	add	r3, ip
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]
 8009e60:	e024      	b.n	8009eac <USB_EPStartXfer+0x808>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	785b      	ldrb	r3, [r3, #1]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d120      	bne.n	8009eac <USB_EPStartXfer+0x808>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	4aa2      	ldr	r2, [pc, #648]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009e72:	4694      	mov	ip, r2
 8009e74:	4463      	add	r3, ip
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	499f      	ldr	r1, [pc, #636]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009e80:	468c      	mov	ip, r1
 8009e82:	4463      	add	r3, ip
 8009e84:	0412      	lsls	r2, r2, #16
 8009e86:	0c12      	lsrs	r2, r2, #16
 8009e88:	605a      	str	r2, [r3, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4a9a      	ldr	r2, [pc, #616]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009e92:	4694      	mov	ip, r2
 8009e94:	4463      	add	r3, ip
 8009e96:	6859      	ldr	r1, [r3, #4]
 8009e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e9a:	041a      	lsls	r2, r3, #16
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	4896      	ldr	r0, [pc, #600]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009ea4:	4684      	mov	ip, r0
 8009ea6:	4463      	add	r3, ip
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8009eac:	201a      	movs	r0, #26
 8009eae:	183b      	adds	r3, r7, r0
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	8952      	ldrh	r2, [r2, #10]
 8009eb4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	6959      	ldr	r1, [r3, #20]
 8009eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ebc:	b29c      	uxth	r4, r3
 8009ebe:	183b      	adds	r3, r7, r0
 8009ec0:	881a      	ldrh	r2, [r3, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	0023      	movs	r3, r4
 8009ec6:	f000 fd91 	bl	800a9ec <USB_WritePMA>
 8009eca:	e09a      	b.n	800a002 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	785b      	ldrb	r3, [r3, #1]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d162      	bne.n	8009f9a <USB_EPStartXfer+0x8f6>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	4a88      	ldr	r2, [pc, #544]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009edc:	4694      	mov	ip, r2
 8009ede:	4463      	add	r3, ip
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	4984      	ldr	r1, [pc, #528]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009eea:	468c      	mov	ip, r1
 8009eec:	4463      	add	r3, ip
 8009eee:	0192      	lsls	r2, r2, #6
 8009ef0:	0992      	lsrs	r2, r2, #6
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ef8:	d91e      	bls.n	8009f38 <USB_EPStartXfer+0x894>
 8009efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009efc:	095b      	lsrs	r3, r3, #5
 8009efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f02:	221f      	movs	r2, #31
 8009f04:	4013      	ands	r3, r2
 8009f06:	d102      	bne.n	8009f0e <USB_EPStartXfer+0x86a>
 8009f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	4a79      	ldr	r2, [pc, #484]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009f16:	4694      	mov	ip, r2
 8009f18:	4463      	add	r3, ip
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f1e:	069b      	lsls	r3, r3, #26
 8009f20:	431a      	orrs	r2, r3
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	4974      	ldr	r1, [pc, #464]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009f2a:	468c      	mov	ip, r1
 8009f2c:	4463      	add	r3, ip
 8009f2e:	2180      	movs	r1, #128	; 0x80
 8009f30:	0609      	lsls	r1, r1, #24
 8009f32:	430a      	orrs	r2, r1
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e055      	b.n	8009fe4 <USB_EPStartXfer+0x940>
 8009f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d111      	bne.n	8009f62 <USB_EPStartXfer+0x8be>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	4a6d      	ldr	r2, [pc, #436]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009f46:	4694      	mov	ip, r2
 8009f48:	4463      	add	r3, ip
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	496a      	ldr	r1, [pc, #424]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009f54:	468c      	mov	ip, r1
 8009f56:	4463      	add	r3, ip
 8009f58:	2180      	movs	r1, #128	; 0x80
 8009f5a:	0609      	lsls	r1, r1, #24
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e040      	b.n	8009fe4 <USB_EPStartXfer+0x940>
 8009f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f64:	085b      	lsrs	r3, r3, #1
 8009f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	d002      	beq.n	8009f76 <USB_EPStartXfer+0x8d2>
 8009f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f72:	3301      	adds	r3, #1
 8009f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	4a5f      	ldr	r2, [pc, #380]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009f7e:	4694      	mov	ip, r2
 8009f80:	4463      	add	r3, ip
 8009f82:	6819      	ldr	r1, [r3, #0]
 8009f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f86:	069a      	lsls	r2, r3, #26
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	485b      	ldr	r0, [pc, #364]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009f90:	4684      	mov	ip, r0
 8009f92:	4463      	add	r3, ip
 8009f94:	430a      	orrs	r2, r1
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	e024      	b.n	8009fe4 <USB_EPStartXfer+0x940>
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d120      	bne.n	8009fe4 <USB_EPStartXfer+0x940>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	4a54      	ldr	r2, [pc, #336]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009faa:	4694      	mov	ip, r2
 8009fac:	4463      	add	r3, ip
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	4951      	ldr	r1, [pc, #324]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009fb8:	468c      	mov	ip, r1
 8009fba:	4463      	add	r3, ip
 8009fbc:	0412      	lsls	r2, r2, #16
 8009fbe:	0c12      	lsrs	r2, r2, #16
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	4a4c      	ldr	r2, [pc, #304]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009fca:	4694      	mov	ip, r2
 8009fcc:	4463      	add	r3, ip
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fd2:	041a      	lsls	r2, r3, #16
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	4848      	ldr	r0, [pc, #288]	; (800a0fc <USB_EPStartXfer+0xa58>)
 8009fdc:	4684      	mov	ip, r0
 8009fde:	4463      	add	r3, ip
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009fe4:	201a      	movs	r0, #26
 8009fe6:	183b      	adds	r3, r7, r0
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	8912      	ldrh	r2, [r2, #8]
 8009fec:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6959      	ldr	r1, [r3, #20]
 8009ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ff4:	b29c      	uxth	r4, r3
 8009ff6:	183b      	adds	r3, r7, r0
 8009ff8:	881a      	ldrh	r2, [r3, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	0023      	movs	r3, r4
 8009ffe:	f000 fcf5 	bl	800a9ec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	18d3      	adds	r3, r2, r3
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a3c      	ldr	r2, [pc, #240]	; (800a100 <USB_EPStartXfer+0xa5c>)
 800a010:	4013      	ands	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2210      	movs	r2, #16
 800a018:	4053      	eors	r3, r2
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2220      	movs	r2, #32
 800a020:	4053      	eors	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	18d3      	adds	r3, r2, r3
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4934      	ldr	r1, [pc, #208]	; (800a104 <USB_EPStartXfer+0xa60>)
 800a032:	430a      	orrs	r2, r1
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	e340      	b.n	800a6ba <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	7b1b      	ldrb	r3, [r3, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d000      	beq.n	800a042 <USB_EPStartXfer+0x99e>
 800a040:	e07e      	b.n	800a140 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d909      	bls.n	800a062 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	699a      	ldr	r2, [r3, #24]
 800a058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a05a:	1ad2      	subs	r2, r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	619a      	str	r2, [r3, #24]
 800a060:	e005      	b.n	800a06e <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	00db      	lsls	r3, r3, #3
 800a074:	4a21      	ldr	r2, [pc, #132]	; (800a0fc <USB_EPStartXfer+0xa58>)
 800a076:	4694      	mov	ip, r2
 800a078:	4463      	add	r3, ip
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	00db      	lsls	r3, r3, #3
 800a082:	491e      	ldr	r1, [pc, #120]	; (800a0fc <USB_EPStartXfer+0xa58>)
 800a084:	468c      	mov	ip, r1
 800a086:	4463      	add	r3, ip
 800a088:	0192      	lsls	r2, r2, #6
 800a08a:	0992      	lsrs	r2, r2, #6
 800a08c:	605a      	str	r2, [r3, #4]
 800a08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a090:	2b3e      	cmp	r3, #62	; 0x3e
 800a092:	d91e      	bls.n	800a0d2 <USB_EPStartXfer+0xa2e>
 800a094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	63bb      	str	r3, [r7, #56]	; 0x38
 800a09a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a09c:	221f      	movs	r2, #31
 800a09e:	4013      	ands	r3, r2
 800a0a0:	d102      	bne.n	800a0a8 <USB_EPStartXfer+0xa04>
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	4a13      	ldr	r2, [pc, #76]	; (800a0fc <USB_EPStartXfer+0xa58>)
 800a0b0:	4694      	mov	ip, r2
 800a0b2:	4463      	add	r3, ip
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	069b      	lsls	r3, r3, #26
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	490e      	ldr	r1, [pc, #56]	; (800a0fc <USB_EPStartXfer+0xa58>)
 800a0c4:	468c      	mov	ip, r1
 800a0c6:	4463      	add	r3, ip
 800a0c8:	2180      	movs	r1, #128	; 0x80
 800a0ca:	0609      	lsls	r1, r1, #24
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	605a      	str	r2, [r3, #4]
 800a0d0:	e2d7      	b.n	800a682 <USB_EPStartXfer+0xfde>
 800a0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d117      	bne.n	800a108 <USB_EPStartXfer+0xa64>
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	4a07      	ldr	r2, [pc, #28]	; (800a0fc <USB_EPStartXfer+0xa58>)
 800a0e0:	4694      	mov	ip, r2
 800a0e2:	4463      	add	r3, ip
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	4903      	ldr	r1, [pc, #12]	; (800a0fc <USB_EPStartXfer+0xa58>)
 800a0ee:	468c      	mov	ip, r1
 800a0f0:	4463      	add	r3, ip
 800a0f2:	2180      	movs	r1, #128	; 0x80
 800a0f4:	0609      	lsls	r1, r1, #24
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	605a      	str	r2, [r3, #4]
 800a0fa:	e2c2      	b.n	800a682 <USB_EPStartXfer+0xfde>
 800a0fc:	40009800 	.word	0x40009800
 800a100:	07ff8fbf 	.word	0x07ff8fbf
 800a104:	00008080 	.word	0x00008080
 800a108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a10a:	085b      	lsrs	r3, r3, #1
 800a10c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a110:	2201      	movs	r2, #1
 800a112:	4013      	ands	r3, r2
 800a114:	d002      	beq.n	800a11c <USB_EPStartXfer+0xa78>
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	3301      	adds	r3, #1
 800a11a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	4ac4      	ldr	r2, [pc, #784]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a124:	4694      	mov	ip, r2
 800a126:	4463      	add	r3, ip
 800a128:	6859      	ldr	r1, [r3, #4]
 800a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12c:	069a      	lsls	r2, r3, #26
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	48bf      	ldr	r0, [pc, #764]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a136:	4684      	mov	ip, r0
 800a138:	4463      	add	r3, ip
 800a13a:	430a      	orrs	r2, r1
 800a13c:	605a      	str	r2, [r3, #4]
 800a13e:	e2a0      	b.n	800a682 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	78db      	ldrb	r3, [r3, #3]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d000      	beq.n	800a14a <USB_EPStartXfer+0xaa6>
 800a148:	e15f      	b.n	800a40a <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d168      	bne.n	800a224 <USB_EPStartXfer+0xb80>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	00db      	lsls	r3, r3, #3
 800a158:	4ab6      	ldr	r2, [pc, #728]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a15a:	4694      	mov	ip, r2
 800a15c:	4463      	add	r3, ip
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	49b3      	ldr	r1, [pc, #716]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a168:	468c      	mov	ip, r1
 800a16a:	4463      	add	r3, ip
 800a16c:	0192      	lsls	r2, r2, #6
 800a16e:	0992      	lsrs	r2, r2, #6
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b3e      	cmp	r3, #62	; 0x3e
 800a178:	d920      	bls.n	800a1bc <USB_EPStartXfer+0xb18>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	095b      	lsrs	r3, r3, #5
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	221f      	movs	r2, #31
 800a188:	4013      	ands	r3, r2
 800a18a:	d102      	bne.n	800a192 <USB_EPStartXfer+0xaee>
 800a18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18e:	3b01      	subs	r3, #1
 800a190:	637b      	str	r3, [r7, #52]	; 0x34
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	4aa6      	ldr	r2, [pc, #664]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a19a:	4694      	mov	ip, r2
 800a19c:	4463      	add	r3, ip
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	069b      	lsls	r3, r3, #26
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	49a1      	ldr	r1, [pc, #644]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a1ae:	468c      	mov	ip, r1
 800a1b0:	4463      	add	r3, ip
 800a1b2:	2180      	movs	r1, #128	; 0x80
 800a1b4:	0609      	lsls	r1, r1, #24
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	e059      	b.n	800a270 <USB_EPStartXfer+0xbcc>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d111      	bne.n	800a1e8 <USB_EPStartXfer+0xb44>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	4a9a      	ldr	r2, [pc, #616]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a1cc:	4694      	mov	ip, r2
 800a1ce:	4463      	add	r3, ip
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	4996      	ldr	r1, [pc, #600]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a1da:	468c      	mov	ip, r1
 800a1dc:	4463      	add	r3, ip
 800a1de:	2180      	movs	r1, #128	; 0x80
 800a1e0:	0609      	lsls	r1, r1, #24
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	e043      	b.n	800a270 <USB_EPStartXfer+0xbcc>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	085b      	lsrs	r3, r3, #1
 800a1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	d002      	beq.n	800a200 <USB_EPStartXfer+0xb5c>
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	4a8b      	ldr	r2, [pc, #556]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a208:	4694      	mov	ip, r2
 800a20a:	4463      	add	r3, ip
 800a20c:	6819      	ldr	r1, [r3, #0]
 800a20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a210:	069a      	lsls	r2, r3, #26
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4886      	ldr	r0, [pc, #536]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a21a:	4684      	mov	ip, r0
 800a21c:	4463      	add	r3, ip
 800a21e:	430a      	orrs	r2, r1
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e025      	b.n	800a270 <USB_EPStartXfer+0xbcc>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	785b      	ldrb	r3, [r3, #1]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d121      	bne.n	800a270 <USB_EPStartXfer+0xbcc>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	00db      	lsls	r3, r3, #3
 800a232:	4a80      	ldr	r2, [pc, #512]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a234:	4694      	mov	ip, r2
 800a236:	4463      	add	r3, ip
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	497c      	ldr	r1, [pc, #496]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a242:	468c      	mov	ip, r1
 800a244:	4463      	add	r3, ip
 800a246:	0412      	lsls	r2, r2, #16
 800a248:	0c12      	lsrs	r2, r2, #16
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	4a78      	ldr	r2, [pc, #480]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a254:	4694      	mov	ip, r2
 800a256:	4463      	add	r3, ip
 800a258:	6819      	ldr	r1, [r3, #0]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	041a      	lsls	r2, r3, #16
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	00db      	lsls	r3, r3, #3
 800a266:	4873      	ldr	r0, [pc, #460]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a268:	4684      	mov	ip, r0
 800a26a:	4463      	add	r3, ip
 800a26c:	430a      	orrs	r2, r1
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	785b      	ldrb	r3, [r3, #1]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d168      	bne.n	800a34a <USB_EPStartXfer+0xca6>
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	4a6d      	ldr	r2, [pc, #436]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a280:	4694      	mov	ip, r2
 800a282:	4463      	add	r3, ip
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	4969      	ldr	r1, [pc, #420]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a28e:	468c      	mov	ip, r1
 800a290:	4463      	add	r3, ip
 800a292:	0192      	lsls	r2, r2, #6
 800a294:	0992      	lsrs	r2, r2, #6
 800a296:	605a      	str	r2, [r3, #4]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	2b3e      	cmp	r3, #62	; 0x3e
 800a29e:	d920      	bls.n	800a2e2 <USB_EPStartXfer+0xc3e>
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	095b      	lsrs	r3, r3, #5
 800a2a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	221f      	movs	r2, #31
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	d102      	bne.n	800a2b8 <USB_EPStartXfer+0xc14>
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	633b      	str	r3, [r7, #48]	; 0x30
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	4a5d      	ldr	r2, [pc, #372]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a2c0:	4694      	mov	ip, r2
 800a2c2:	4463      	add	r3, ip
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	069b      	lsls	r3, r3, #26
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	4958      	ldr	r1, [pc, #352]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a2d4:	468c      	mov	ip, r1
 800a2d6:	4463      	add	r3, ip
 800a2d8:	2180      	movs	r1, #128	; 0x80
 800a2da:	0609      	lsls	r1, r1, #24
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	605a      	str	r2, [r3, #4]
 800a2e0:	e059      	b.n	800a396 <USB_EPStartXfer+0xcf2>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d111      	bne.n	800a30e <USB_EPStartXfer+0xc6a>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	4a50      	ldr	r2, [pc, #320]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a2f2:	4694      	mov	ip, r2
 800a2f4:	4463      	add	r3, ip
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	00db      	lsls	r3, r3, #3
 800a2fe:	494d      	ldr	r1, [pc, #308]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a300:	468c      	mov	ip, r1
 800a302:	4463      	add	r3, ip
 800a304:	2180      	movs	r1, #128	; 0x80
 800a306:	0609      	lsls	r1, r1, #24
 800a308:	430a      	orrs	r2, r1
 800a30a:	605a      	str	r2, [r3, #4]
 800a30c:	e043      	b.n	800a396 <USB_EPStartXfer+0xcf2>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	085b      	lsrs	r3, r3, #1
 800a314:	633b      	str	r3, [r7, #48]	; 0x30
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	2201      	movs	r2, #1
 800a31c:	4013      	ands	r3, r2
 800a31e:	d002      	beq.n	800a326 <USB_EPStartXfer+0xc82>
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	3301      	adds	r3, #1
 800a324:	633b      	str	r3, [r7, #48]	; 0x30
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	4a41      	ldr	r2, [pc, #260]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a32e:	4694      	mov	ip, r2
 800a330:	4463      	add	r3, ip
 800a332:	6859      	ldr	r1, [r3, #4]
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	069a      	lsls	r2, r3, #26
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	00db      	lsls	r3, r3, #3
 800a33e:	483d      	ldr	r0, [pc, #244]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a340:	4684      	mov	ip, r0
 800a342:	4463      	add	r3, ip
 800a344:	430a      	orrs	r2, r1
 800a346:	605a      	str	r2, [r3, #4]
 800a348:	e025      	b.n	800a396 <USB_EPStartXfer+0xcf2>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d121      	bne.n	800a396 <USB_EPStartXfer+0xcf2>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	00db      	lsls	r3, r3, #3
 800a358:	4a36      	ldr	r2, [pc, #216]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a35a:	4694      	mov	ip, r2
 800a35c:	4463      	add	r3, ip
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	4933      	ldr	r1, [pc, #204]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a368:	468c      	mov	ip, r1
 800a36a:	4463      	add	r3, ip
 800a36c:	0412      	lsls	r2, r2, #16
 800a36e:	0c12      	lsrs	r2, r2, #16
 800a370:	605a      	str	r2, [r3, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	4a2e      	ldr	r2, [pc, #184]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a37a:	4694      	mov	ip, r2
 800a37c:	4463      	add	r3, ip
 800a37e:	6859      	ldr	r1, [r3, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	041a      	lsls	r2, r3, #16
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	4829      	ldr	r0, [pc, #164]	; (800a434 <USB_EPStartXfer+0xd90>)
 800a38e:	4684      	mov	ip, r0
 800a390:	4463      	add	r3, ip
 800a392:	430a      	orrs	r2, r1
 800a394:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d100      	bne.n	800a3a0 <USB_EPStartXfer+0xcfc>
 800a39e:	e170      	b.n	800a682 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	18d3      	adds	r3, r2, r3
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	2126      	movs	r1, #38	; 0x26
 800a3ae:	187b      	adds	r3, r7, r1
 800a3b0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a3b2:	187b      	adds	r3, r7, r1
 800a3b4:	881a      	ldrh	r2, [r3, #0]
 800a3b6:	2380      	movs	r3, #128	; 0x80
 800a3b8:	01db      	lsls	r3, r3, #7
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	d004      	beq.n	800a3c8 <USB_EPStartXfer+0xd24>
 800a3be:	187b      	adds	r3, r7, r1
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	2240      	movs	r2, #64	; 0x40
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	d10d      	bne.n	800a3e4 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a3c8:	2126      	movs	r1, #38	; 0x26
 800a3ca:	187b      	adds	r3, r7, r1
 800a3cc:	881a      	ldrh	r2, [r3, #0]
 800a3ce:	2380      	movs	r3, #128	; 0x80
 800a3d0:	01db      	lsls	r3, r3, #7
 800a3d2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a3d4:	d000      	beq.n	800a3d8 <USB_EPStartXfer+0xd34>
 800a3d6:	e154      	b.n	800a682 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a3d8:	187b      	adds	r3, r7, r1
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	2240      	movs	r2, #64	; 0x40
 800a3de:	4013      	ands	r3, r2
 800a3e0:	d000      	beq.n	800a3e4 <USB_EPStartXfer+0xd40>
 800a3e2:	e14e      	b.n	800a682 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	18d3      	adds	r3, r2, r3
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a11      	ldr	r2, [pc, #68]	; (800a438 <USB_EPStartXfer+0xd94>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	623b      	str	r3, [r7, #32]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	18d3      	adds	r3, r2, r3
 800a400:	6a3a      	ldr	r2, [r7, #32]
 800a402:	490e      	ldr	r1, [pc, #56]	; (800a43c <USB_EPStartXfer+0xd98>)
 800a404:	430a      	orrs	r2, r1
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e13b      	b.n	800a682 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	78db      	ldrb	r3, [r3, #3]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d000      	beq.n	800a414 <USB_EPStartXfer+0xd70>
 800a412:	e134      	b.n	800a67e <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	699a      	ldr	r2, [r3, #24]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d90f      	bls.n	800a440 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a42c:	1ad2      	subs	r2, r2, r3
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	619a      	str	r2, [r3, #24]
 800a432:	e00b      	b.n	800a44c <USB_EPStartXfer+0xda8>
 800a434:	40009800 	.word	0x40009800
 800a438:	07ff8f8f 	.word	0x07ff8f8f
 800a43c:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2200      	movs	r2, #0
 800a44a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d162      	bne.n	800a51a <USB_EPStartXfer+0xe76>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4a9a      	ldr	r2, [pc, #616]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a45c:	4694      	mov	ip, r2
 800a45e:	4463      	add	r3, ip
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	4996      	ldr	r1, [pc, #600]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a46a:	468c      	mov	ip, r1
 800a46c:	4463      	add	r3, ip
 800a46e:	0192      	lsls	r2, r2, #6
 800a470:	0992      	lsrs	r2, r2, #6
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a476:	2b3e      	cmp	r3, #62	; 0x3e
 800a478:	d91e      	bls.n	800a4b8 <USB_EPStartXfer+0xe14>
 800a47a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a47c:	095b      	lsrs	r3, r3, #5
 800a47e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a482:	221f      	movs	r2, #31
 800a484:	4013      	ands	r3, r2
 800a486:	d102      	bne.n	800a48e <USB_EPStartXfer+0xdea>
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	3b01      	subs	r3, #1
 800a48c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	4a8b      	ldr	r2, [pc, #556]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a496:	4694      	mov	ip, r2
 800a498:	4463      	add	r3, ip
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	069b      	lsls	r3, r3, #26
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	4986      	ldr	r1, [pc, #536]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a4aa:	468c      	mov	ip, r1
 800a4ac:	4463      	add	r3, ip
 800a4ae:	2180      	movs	r1, #128	; 0x80
 800a4b0:	0609      	lsls	r1, r1, #24
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	e055      	b.n	800a564 <USB_EPStartXfer+0xec0>
 800a4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d111      	bne.n	800a4e2 <USB_EPStartXfer+0xe3e>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	4a7f      	ldr	r2, [pc, #508]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a4c6:	4694      	mov	ip, r2
 800a4c8:	4463      	add	r3, ip
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	497c      	ldr	r1, [pc, #496]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a4d4:	468c      	mov	ip, r1
 800a4d6:	4463      	add	r3, ip
 800a4d8:	2180      	movs	r1, #128	; 0x80
 800a4da:	0609      	lsls	r1, r1, #24
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	e040      	b.n	800a564 <USB_EPStartXfer+0xec0>
 800a4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	d002      	beq.n	800a4f6 <USB_EPStartXfer+0xe52>
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	4a71      	ldr	r2, [pc, #452]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a4fe:	4694      	mov	ip, r2
 800a500:	4463      	add	r3, ip
 800a502:	6819      	ldr	r1, [r3, #0]
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	069a      	lsls	r2, r3, #26
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	486d      	ldr	r0, [pc, #436]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a510:	4684      	mov	ip, r0
 800a512:	4463      	add	r3, ip
 800a514:	430a      	orrs	r2, r1
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	e024      	b.n	800a564 <USB_EPStartXfer+0xec0>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d120      	bne.n	800a564 <USB_EPStartXfer+0xec0>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	4a66      	ldr	r2, [pc, #408]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a52a:	4694      	mov	ip, r2
 800a52c:	4463      	add	r3, ip
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	4963      	ldr	r1, [pc, #396]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a538:	468c      	mov	ip, r1
 800a53a:	4463      	add	r3, ip
 800a53c:	0412      	lsls	r2, r2, #16
 800a53e:	0c12      	lsrs	r2, r2, #16
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	4a5e      	ldr	r2, [pc, #376]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a54a:	4694      	mov	ip, r2
 800a54c:	4463      	add	r3, ip
 800a54e:	6819      	ldr	r1, [r3, #0]
 800a550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a552:	041a      	lsls	r2, r3, #16
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	485a      	ldr	r0, [pc, #360]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a55c:	4684      	mov	ip, r0
 800a55e:	4463      	add	r3, ip
 800a560:	430a      	orrs	r2, r1
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d162      	bne.n	800a632 <USB_EPStartXfer+0xf8e>
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	4a54      	ldr	r2, [pc, #336]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a574:	4694      	mov	ip, r2
 800a576:	4463      	add	r3, ip
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	4950      	ldr	r1, [pc, #320]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a582:	468c      	mov	ip, r1
 800a584:	4463      	add	r3, ip
 800a586:	0192      	lsls	r2, r2, #6
 800a588:	0992      	lsrs	r2, r2, #6
 800a58a:	605a      	str	r2, [r3, #4]
 800a58c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a58e:	2b3e      	cmp	r3, #62	; 0x3e
 800a590:	d91e      	bls.n	800a5d0 <USB_EPStartXfer+0xf2c>
 800a592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a594:	095b      	lsrs	r3, r3, #5
 800a596:	62bb      	str	r3, [r7, #40]	; 0x28
 800a598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a59a:	221f      	movs	r2, #31
 800a59c:	4013      	ands	r3, r2
 800a59e:	d102      	bne.n	800a5a6 <USB_EPStartXfer+0xf02>
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	4a45      	ldr	r2, [pc, #276]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a5ae:	4694      	mov	ip, r2
 800a5b0:	4463      	add	r3, ip
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	069b      	lsls	r3, r3, #26
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	4940      	ldr	r1, [pc, #256]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a5c2:	468c      	mov	ip, r1
 800a5c4:	4463      	add	r3, ip
 800a5c6:	2180      	movs	r1, #128	; 0x80
 800a5c8:	0609      	lsls	r1, r1, #24
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	605a      	str	r2, [r3, #4]
 800a5ce:	e058      	b.n	800a682 <USB_EPStartXfer+0xfde>
 800a5d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d111      	bne.n	800a5fa <USB_EPStartXfer+0xf56>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	4a39      	ldr	r2, [pc, #228]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a5de:	4694      	mov	ip, r2
 800a5e0:	4463      	add	r3, ip
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	4936      	ldr	r1, [pc, #216]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a5ec:	468c      	mov	ip, r1
 800a5ee:	4463      	add	r3, ip
 800a5f0:	2180      	movs	r1, #128	; 0x80
 800a5f2:	0609      	lsls	r1, r1, #24
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	605a      	str	r2, [r3, #4]
 800a5f8:	e043      	b.n	800a682 <USB_EPStartXfer+0xfde>
 800a5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fc:	085b      	lsrs	r3, r3, #1
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800a600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a602:	2201      	movs	r2, #1
 800a604:	4013      	ands	r3, r2
 800a606:	d002      	beq.n	800a60e <USB_EPStartXfer+0xf6a>
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	3301      	adds	r3, #1
 800a60c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	4a2b      	ldr	r2, [pc, #172]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a616:	4694      	mov	ip, r2
 800a618:	4463      	add	r3, ip
 800a61a:	6859      	ldr	r1, [r3, #4]
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	069a      	lsls	r2, r3, #26
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	4827      	ldr	r0, [pc, #156]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a628:	4684      	mov	ip, r0
 800a62a:	4463      	add	r3, ip
 800a62c:	430a      	orrs	r2, r1
 800a62e:	605a      	str	r2, [r3, #4]
 800a630:	e027      	b.n	800a682 <USB_EPStartXfer+0xfde>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d123      	bne.n	800a682 <USB_EPStartXfer+0xfde>
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	4a20      	ldr	r2, [pc, #128]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a642:	4694      	mov	ip, r2
 800a644:	4463      	add	r3, ip
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	491d      	ldr	r1, [pc, #116]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a650:	468c      	mov	ip, r1
 800a652:	4463      	add	r3, ip
 800a654:	0412      	lsls	r2, r2, #16
 800a656:	0c12      	lsrs	r2, r2, #16
 800a658:	605a      	str	r2, [r3, #4]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	4a18      	ldr	r2, [pc, #96]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a662:	4694      	mov	ip, r2
 800a664:	4463      	add	r3, ip
 800a666:	6859      	ldr	r1, [r3, #4]
 800a668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a66a:	041a      	lsls	r2, r3, #16
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	00db      	lsls	r3, r3, #3
 800a672:	4814      	ldr	r0, [pc, #80]	; (800a6c4 <USB_EPStartXfer+0x1020>)
 800a674:	4684      	mov	ip, r0
 800a676:	4463      	add	r3, ip
 800a678:	430a      	orrs	r2, r1
 800a67a:	605a      	str	r2, [r3, #4]
 800a67c:	e001      	b.n	800a682 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e01c      	b.n	800a6bc <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	18d3      	adds	r3, r2, r3
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a0e      	ldr	r2, [pc, #56]	; (800a6c8 <USB_EPStartXfer+0x1024>)
 800a690:	4013      	ands	r3, r2
 800a692:	61fb      	str	r3, [r7, #28]
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	2280      	movs	r2, #128	; 0x80
 800a698:	0152      	lsls	r2, r2, #5
 800a69a:	4053      	eors	r3, r2
 800a69c:	61fb      	str	r3, [r7, #28]
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	2280      	movs	r2, #128	; 0x80
 800a6a2:	0192      	lsls	r2, r2, #6
 800a6a4:	4053      	eors	r3, r2
 800a6a6:	61fb      	str	r3, [r7, #28]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	18d3      	adds	r3, r2, r3
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	4905      	ldr	r1, [pc, #20]	; (800a6cc <USB_EPStartXfer+0x1028>)
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	0018      	movs	r0, r3
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	b017      	add	sp, #92	; 0x5c
 800a6c2:	bd90      	pop	{r4, r7, pc}
 800a6c4:	40009800 	.word	0x40009800
 800a6c8:	07ffbf8f 	.word	0x07ffbf8f
 800a6cc:	00008080 	.word	0x00008080

0800a6d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	785b      	ldrb	r3, [r3, #1]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d016      	beq.n	800a710 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	18d3      	adds	r3, r2, r3
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a16      	ldr	r2, [pc, #88]	; (800a748 <USB_EPSetStall+0x78>)
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	60bb      	str	r3, [r7, #8]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2210      	movs	r2, #16
 800a6f8:	4053      	eors	r3, r2
 800a6fa:	60bb      	str	r3, [r7, #8]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	18d3      	adds	r3, r2, r3
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	4910      	ldr	r1, [pc, #64]	; (800a74c <USB_EPSetStall+0x7c>)
 800a70a:	430a      	orrs	r2, r1
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e016      	b.n	800a73e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	18d3      	adds	r3, r2, r3
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a0c      	ldr	r2, [pc, #48]	; (800a750 <USB_EPSetStall+0x80>)
 800a71e:	4013      	ands	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2280      	movs	r2, #128	; 0x80
 800a726:	0152      	lsls	r2, r2, #5
 800a728:	4053      	eors	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	18d3      	adds	r3, r2, r3
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	4904      	ldr	r1, [pc, #16]	; (800a74c <USB_EPSetStall+0x7c>)
 800a73a:	430a      	orrs	r2, r1
 800a73c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	0018      	movs	r0, r3
 800a742:	46bd      	mov	sp, r7
 800a744:	b004      	add	sp, #16
 800a746:	bd80      	pop	{r7, pc}
 800a748:	07ff8fbf 	.word	0x07ff8fbf
 800a74c:	00008080 	.word	0x00008080
 800a750:	07ffbf8f 	.word	0x07ffbf8f

0800a754 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	7b1b      	ldrb	r3, [r3, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d000      	beq.n	800a768 <USB_EPClearStall+0x14>
 800a766:	e075      	b.n	800a854 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	785b      	ldrb	r3, [r3, #1]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d037      	beq.n	800a7e0 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	18d3      	adds	r3, r2, r3
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	613b      	str	r3, [r7, #16]
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2240      	movs	r2, #64	; 0x40
 800a782:	4013      	ands	r3, r2
 800a784:	d011      	beq.n	800a7aa <USB_EPClearStall+0x56>
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	18d3      	adds	r3, r2, r3
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a33      	ldr	r2, [pc, #204]	; (800a860 <USB_EPClearStall+0x10c>)
 800a794:	4013      	ands	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	18d3      	adds	r3, r2, r3
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	492f      	ldr	r1, [pc, #188]	; (800a864 <USB_EPClearStall+0x110>)
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	78db      	ldrb	r3, [r3, #3]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d050      	beq.n	800a854 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	18d3      	adds	r3, r2, r3
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a2a      	ldr	r2, [pc, #168]	; (800a868 <USB_EPClearStall+0x114>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	60bb      	str	r3, [r7, #8]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	4053      	eors	r3, r2
 800a7ca:	60bb      	str	r3, [r7, #8]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	18d3      	adds	r3, r2, r3
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	4924      	ldr	r1, [pc, #144]	; (800a86c <USB_EPClearStall+0x118>)
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e039      	b.n	800a854 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	18d3      	adds	r3, r2, r3
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	69fa      	ldr	r2, [r7, #28]
 800a7f0:	2380      	movs	r3, #128	; 0x80
 800a7f2:	01db      	lsls	r3, r3, #7
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	d011      	beq.n	800a81c <USB_EPClearStall+0xc8>
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	18d3      	adds	r3, r2, r3
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a16      	ldr	r2, [pc, #88]	; (800a860 <USB_EPClearStall+0x10c>)
 800a806:	4013      	ands	r3, r2
 800a808:	61bb      	str	r3, [r7, #24]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	18d3      	adds	r3, r2, r3
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4916      	ldr	r1, [pc, #88]	; (800a870 <USB_EPClearStall+0x11c>)
 800a818:	430a      	orrs	r2, r1
 800a81a:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	18d3      	adds	r3, r2, r3
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a12      	ldr	r2, [pc, #72]	; (800a874 <USB_EPClearStall+0x120>)
 800a82a:	4013      	ands	r3, r2
 800a82c:	617b      	str	r3, [r7, #20]
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2280      	movs	r2, #128	; 0x80
 800a832:	0152      	lsls	r2, r2, #5
 800a834:	4053      	eors	r3, r2
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2280      	movs	r2, #128	; 0x80
 800a83c:	0192      	lsls	r2, r2, #6
 800a83e:	4053      	eors	r3, r2
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	18d3      	adds	r3, r2, r3
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	4907      	ldr	r1, [pc, #28]	; (800a86c <USB_EPClearStall+0x118>)
 800a850:	430a      	orrs	r2, r1
 800a852:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	0018      	movs	r0, r3
 800a858:	46bd      	mov	sp, r7
 800a85a:	b008      	add	sp, #32
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	46c0      	nop			; (mov r8, r8)
 800a860:	07ff8f8f 	.word	0x07ff8f8f
 800a864:	000080c0 	.word	0x000080c0
 800a868:	07ff8fbf 	.word	0x07ff8fbf
 800a86c:	00008080 	.word	0x00008080
 800a870:	0000c080 	.word	0x0000c080
 800a874:	07ffbf8f 	.word	0x07ffbf8f

0800a878 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d131      	bne.n	800a8ee <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	7b1b      	ldrb	r3, [r3, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d15f      	bne.n	800a952 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	78db      	ldrb	r3, [r3, #3]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d016      	beq.n	800a8c8 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	18d3      	adds	r3, r2, r3
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a2d      	ldr	r2, [pc, #180]	; (800a95c <USB_EPStopXfer+0xe4>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	60bb      	str	r3, [r7, #8]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	4053      	eors	r3, r2
 800a8b2:	60bb      	str	r3, [r7, #8]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	18d3      	adds	r3, r2, r3
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4927      	ldr	r1, [pc, #156]	; (800a960 <USB_EPStopXfer+0xe8>)
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	e044      	b.n	800a952 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	18d3      	adds	r3, r2, r3
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a21      	ldr	r2, [pc, #132]	; (800a95c <USB_EPStopXfer+0xe4>)
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	18d3      	adds	r3, r2, r3
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	491e      	ldr	r1, [pc, #120]	; (800a960 <USB_EPStopXfer+0xe8>)
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	e031      	b.n	800a952 <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	7b1b      	ldrb	r3, [r3, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d12d      	bne.n	800a952 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	78db      	ldrb	r3, [r3, #3]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d017      	beq.n	800a92e <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	18d3      	adds	r3, r2, r3
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a16      	ldr	r2, [pc, #88]	; (800a964 <USB_EPStopXfer+0xec>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	613b      	str	r3, [r7, #16]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2280      	movs	r2, #128	; 0x80
 800a914:	0192      	lsls	r2, r2, #6
 800a916:	4053      	eors	r3, r2
 800a918:	613b      	str	r3, [r7, #16]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	18d3      	adds	r3, r2, r3
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	490e      	ldr	r1, [pc, #56]	; (800a960 <USB_EPStopXfer+0xe8>)
 800a928:	430a      	orrs	r2, r1
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	e011      	b.n	800a952 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	18d3      	adds	r3, r2, r3
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a0a      	ldr	r2, [pc, #40]	; (800a964 <USB_EPStopXfer+0xec>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	18d3      	adds	r3, r2, r3
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4904      	ldr	r1, [pc, #16]	; (800a960 <USB_EPStopXfer+0xe8>)
 800a94e:	430a      	orrs	r2, r1
 800a950:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	0018      	movs	r0, r3
 800a956:	46bd      	mov	sp, r7
 800a958:	b006      	add	sp, #24
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	07ff8fbf 	.word	0x07ff8fbf
 800a960:	00008080 	.word	0x00008080
 800a964:	07ffbf8f 	.word	0x07ffbf8f

0800a968 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	000a      	movs	r2, r1
 800a972:	1cfb      	adds	r3, r7, #3
 800a974:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a976:	1cfb      	adds	r3, r7, #3
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d102      	bne.n	800a984 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2280      	movs	r2, #128	; 0x80
 800a982:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	0018      	movs	r0, r3
 800a988:	46bd      	mov	sp, r7
 800a98a:	b002      	add	sp, #8
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99a:	2280      	movs	r2, #128	; 0x80
 800a99c:	0212      	lsls	r2, r2, #8
 800a99e:	431a      	orrs	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9bc:	4a04      	ldr	r2, [pc, #16]	; (800a9d0 <USB_DevDisconnect+0x20>)
 800a9be:	401a      	ands	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	b002      	add	sp, #8
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	ffff7fff 	.word	0xffff7fff

0800a9d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	b004      	add	sp, #16
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08a      	sub	sp, #40	; 0x28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	0019      	movs	r1, r3
 800a9f8:	1dbb      	adds	r3, r7, #6
 800a9fa:	801a      	strh	r2, [r3, #0]
 800a9fc:	1d3b      	adds	r3, r7, #4
 800a9fe:	1c0a      	adds	r2, r1, #0
 800aa00:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800aa02:	1d3b      	adds	r3, r7, #4
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	3303      	adds	r3, #3
 800aa08:	089b      	lsrs	r3, r3, #2
 800aa0a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800aa0c:	2016      	movs	r0, #22
 800aa0e:	183b      	adds	r3, r7, r0
 800aa10:	1d3a      	adds	r2, r7, #4
 800aa12:	8812      	ldrh	r2, [r2, #0]
 800aa14:	2103      	movs	r1, #3
 800aa16:	400a      	ands	r2, r1
 800aa18:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800aa1e:	183b      	adds	r3, r7, r0
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d002      	beq.n	800aa2c <USB_WritePMA+0x40>
  {
    NbWords--;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800aa2c:	1dbb      	adds	r3, r7, #6
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	4a28      	ldr	r2, [pc, #160]	; (800aad4 <USB_WritePMA+0xe8>)
 800aa32:	4694      	mov	ip, r2
 800aa34:	4463      	add	r3, ip
 800aa36:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	623b      	str	r3, [r7, #32]
 800aa3c:	e01f      	b.n	800aa7e <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	7859      	ldrb	r1, [r3, #1]
 800aa44:	0209      	lsls	r1, r1, #8
 800aa46:	430a      	orrs	r2, r1
 800aa48:	7899      	ldrb	r1, [r3, #2]
 800aa4a:	0409      	lsls	r1, r1, #16
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	78db      	ldrb	r3, [r3, #3]
 800aa50:	061b      	lsls	r3, r3, #24
 800aa52:	4313      	orrs	r3, r2
 800aa54:	001a      	movs	r2, r3
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3301      	adds	r3, #1
 800aa64:	613b      	str	r3, [r7, #16]
    pBuf++;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]
    pBuf++;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	613b      	str	r3, [r7, #16]
    pBuf++;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	623b      	str	r3, [r7, #32]
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1dc      	bne.n	800aa3e <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800aa84:	2316      	movs	r3, #22
 800aa86:	18fb      	adds	r3, r7, r3
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d01e      	beq.n	800aacc <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	001a      	movs	r2, r3
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	409a      	lsls	r2, r3
 800aa9e:	0013      	movs	r3, r2
 800aaa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	623b      	str	r3, [r7, #32]
      pBuf++;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	3301      	adds	r3, #1
 800aab0:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800aab2:	2116      	movs	r1, #22
 800aab4:	187b      	adds	r3, r7, r1
 800aab6:	881a      	ldrh	r2, [r3, #0]
 800aab8:	187b      	adds	r3, r7, r1
 800aaba:	3a01      	subs	r2, #1
 800aabc:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800aabe:	187b      	adds	r3, r7, r1
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e5      	bne.n	800aa92 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaca:	601a      	str	r2, [r3, #0]
  }
}
 800aacc:	46c0      	nop			; (mov r8, r8)
 800aace:	46bd      	mov	sp, r7
 800aad0:	b00a      	add	sp, #40	; 0x28
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	40009800 	.word	0x40009800

0800aad8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b08b      	sub	sp, #44	; 0x2c
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	0019      	movs	r1, r3
 800aae4:	1dbb      	adds	r3, r7, #6
 800aae6:	801a      	strh	r2, [r3, #0]
 800aae8:	1d3b      	adds	r3, r7, #4
 800aaea:	1c0a      	adds	r2, r1, #0
 800aaec:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800aaee:	1d3b      	adds	r3, r7, #4
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	3303      	adds	r3, #3
 800aaf4:	089b      	lsrs	r3, r3, #2
 800aaf6:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800aaf8:	201a      	movs	r0, #26
 800aafa:	183b      	adds	r3, r7, r0
 800aafc:	1d3a      	adds	r2, r7, #4
 800aafe:	8812      	ldrh	r2, [r2, #0]
 800ab00:	2103      	movs	r1, #3
 800ab02:	400a      	ands	r2, r1
 800ab04:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800ab0a:	1dbb      	adds	r3, r7, #6
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	4a39      	ldr	r2, [pc, #228]	; (800abf4 <USB_ReadPMA+0x11c>)
 800ab10:	4694      	mov	ip, r2
 800ab12:	4463      	add	r3, ip
 800ab14:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800ab16:	183b      	adds	r3, r7, r0
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	627b      	str	r3, [r7, #36]	; 0x24
 800ab28:	e03c      	b.n	800aba4 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	21ff      	movs	r1, #255	; 0xff
 800ab32:	4011      	ands	r1, r2
 800ab34:	000c      	movs	r4, r1
 800ab36:	7819      	ldrb	r1, [r3, #0]
 800ab38:	2000      	movs	r0, #0
 800ab3a:	4001      	ands	r1, r0
 800ab3c:	1c08      	adds	r0, r1, #0
 800ab3e:	1c21      	adds	r1, r4, #0
 800ab40:	4301      	orrs	r1, r0
 800ab42:	7019      	strb	r1, [r3, #0]
 800ab44:	0a11      	lsrs	r1, r2, #8
 800ab46:	20ff      	movs	r0, #255	; 0xff
 800ab48:	4001      	ands	r1, r0
 800ab4a:	000c      	movs	r4, r1
 800ab4c:	7859      	ldrb	r1, [r3, #1]
 800ab4e:	2000      	movs	r0, #0
 800ab50:	4001      	ands	r1, r0
 800ab52:	1c08      	adds	r0, r1, #0
 800ab54:	1c21      	adds	r1, r4, #0
 800ab56:	4301      	orrs	r1, r0
 800ab58:	7059      	strb	r1, [r3, #1]
 800ab5a:	0c11      	lsrs	r1, r2, #16
 800ab5c:	20ff      	movs	r0, #255	; 0xff
 800ab5e:	4001      	ands	r1, r0
 800ab60:	000c      	movs	r4, r1
 800ab62:	7899      	ldrb	r1, [r3, #2]
 800ab64:	2000      	movs	r0, #0
 800ab66:	4001      	ands	r1, r0
 800ab68:	1c08      	adds	r0, r1, #0
 800ab6a:	1c21      	adds	r1, r4, #0
 800ab6c:	4301      	orrs	r1, r0
 800ab6e:	7099      	strb	r1, [r3, #2]
 800ab70:	0e10      	lsrs	r0, r2, #24
 800ab72:	78da      	ldrb	r2, [r3, #3]
 800ab74:	2100      	movs	r1, #0
 800ab76:	400a      	ands	r2, r1
 800ab78:	1c11      	adds	r1, r2, #0
 800ab7a:	1c02      	adds	r2, r0, #0
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	3304      	adds	r3, #4
 800ab84:	623b      	str	r3, [r7, #32]
    pBuf++;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	3301      	adds	r3, #1
 800ab96:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	3b01      	subs	r3, #1
 800aba2:	627b      	str	r3, [r7, #36]	; 0x24
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1bf      	bne.n	800ab2a <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800abaa:	231a      	movs	r3, #26
 800abac:	18fb      	adds	r3, r7, r3
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01b      	beq.n	800abec <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800abb4:	6a3b      	ldr	r3, [r7, #32]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	40da      	lsrs	r2, r3
 800abc4:	0013      	movs	r3, r2
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	701a      	strb	r2, [r3, #0]
      count++;
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	3301      	adds	r3, #1
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	3301      	adds	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800abd8:	211a      	movs	r1, #26
 800abda:	187b      	adds	r3, r7, r1
 800abdc:	881a      	ldrh	r2, [r3, #0]
 800abde:	187b      	adds	r3, r7, r1
 800abe0:	3a01      	subs	r2, #1
 800abe2:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800abe4:	187b      	adds	r3, r7, r1
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e6      	bne.n	800abba <USB_ReadPMA+0xe2>
  }
}
 800abec:	46c0      	nop			; (mov r8, r8)
 800abee:	46bd      	mov	sp, r7
 800abf0:	b00b      	add	sp, #44	; 0x2c
 800abf2:	bd90      	pop	{r4, r7, pc}
 800abf4:	40009800 	.word	0x40009800

0800abf8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b094      	sub	sp, #80	; 0x50
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	3303      	adds	r3, #3
 800ac0a:	2203      	movs	r2, #3
 800ac0c:	4393      	bics	r3, r2
 800ac0e:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ac10:	f3ef 8310 	mrs	r3, PRIMASK
 800ac14:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ac16:	b672      	cpsid	i
    return(primask_value);
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800ac1a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ac1c:	4b56      	ldr	r3, [pc, #344]	; (800ad78 <_tx_byte_allocate+0x180>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac2a:	621a      	str	r2, [r3, #32]
 800ac2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac2e:	627b      	str	r3, [r7, #36]	; 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	f383 8810 	msr	PRIMASK, r3
}
 800ac36:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	0011      	movs	r1, r2
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f000 f9c0 	bl	800afc4 <_tx_byte_pool_search>
 800ac44:	0003      	movs	r3, r0
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ac48:	f3ef 8310 	mrs	r3, PRIMASK
 800ac4c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ac4e:	b672      	cpsid	i
    return(primask_value);
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800ac52:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800ac54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <_tx_byte_allocate+0x68>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	647b      	str	r3, [r7, #68]	; 0x44
 800ac5e:	e006      	b.n	800ac6e <_tx_byte_allocate+0x76>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d101      	bne.n	800ac6e <_tx_byte_allocate+0x76>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 800ac6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0d8      	beq.n	800ac26 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac78:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d008      	beq.n	800ac92 <_tx_byte_allocate+0x9a>
 800ac80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac82:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	f383 8810 	msr	PRIMASK, r3
}
 800ac8a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac90:	e06d      	b.n	800ad6e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d062      	beq.n	800ad5e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800ac98:	4b38      	ldr	r3, [pc, #224]	; (800ad7c <_tx_byte_allocate+0x184>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d007      	beq.n	800acb0 <_tx_byte_allocate+0xb8>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800aca0:	2310      	movs	r3, #16
 800aca2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	f383 8810 	msr	PRIMASK, r3
}
 800acae:	e05e      	b.n	800ad6e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800acb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb2:	4a33      	ldr	r2, [pc, #204]	; (800ad80 <_tx_byte_allocate+0x188>)
 800acb4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800acb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800acbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800acc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800acc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acca:	22ac      	movs	r2, #172	; 0xac
 800accc:	589b      	ldr	r3, [r3, r2]
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd2:	21ac      	movs	r1, #172	; 0xac
 800acd4:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acda:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d109      	bne.n	800ad00 <_tx_byte_allocate+0x108>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acf0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800acf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acf6:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800acf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acfc:	675a      	str	r2, [r3, #116]	; 0x74
 800acfe:	e011      	b.n	800ad24 <_tx_byte_allocate+0x12c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ad06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad0a:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad10:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ad12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad16:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad1c:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad22:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800ad24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad26:	2209      	movs	r2, #9
 800ad28:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ad2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ad30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ad36:	4b11      	ldr	r3, [pc, #68]	; (800ad7c <_tx_byte_allocate+0x184>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <_tx_byte_allocate+0x184>)
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad42:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	f383 8810 	msr	PRIMASK, r3
}
 800ad4a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ad4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f002 fede 	bl	800db10 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ad54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad56:	2284      	movs	r2, #132	; 0x84
 800ad58:	589b      	ldr	r3, [r3, r2]
 800ad5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad5c:	e007      	b.n	800ad6e <_tx_byte_allocate+0x176>
 800ad5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad60:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f383 8810 	msr	PRIMASK, r3
}
 800ad68:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800ad6a:	2310      	movs	r3, #16
 800ad6c:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800ad6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ad70:	0018      	movs	r0, r3
 800ad72:	46bd      	mov	sp, r7
 800ad74:	b014      	add	sp, #80	; 0x50
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	2000486c 	.word	0x2000486c
 800ad7c:	20004904 	.word	0x20004904
 800ad80:	0800ad85 	.word	0x0800ad85

0800ad84 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08c      	sub	sp, #48	; 0x30
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ad8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad92:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ad94:	b672      	cpsid	i
    return(primask_value);
 800ad96:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800ad98:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad9e:	4b32      	ldr	r3, [pc, #200]	; (800ae68 <_tx_byte_pool_cleanup+0xe4>)
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d157      	bne.n	800ae54 <_tx_byte_pool_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	22ac      	movs	r2, #172	; 0xac
 800ada8:	589b      	ldr	r3, [r3, r2]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d151      	bne.n	800ae54 <_tx_byte_pool_cleanup+0xd0>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d04b      	beq.n	800ae54 <_tx_byte_pool_cleanup+0xd0>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a2a      	ldr	r2, [pc, #168]	; (800ae6c <_tx_byte_pool_cleanup+0xe8>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d146      	bne.n	800ae54 <_tx_byte_pool_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800adc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d042      	beq.n	800ae54 <_tx_byte_pool_cleanup+0xd0>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d103      	bne.n	800adf2 <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	2200      	movs	r2, #0
 800adee:	625a      	str	r2, [r3, #36]	; 0x24
 800adf0:	e013      	b.n	800ae1a <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf6:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adfc:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	6a3a      	ldr	r2, [r7, #32]
 800ae08:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d102      	bne.n	800ae1a <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	6a3a      	ldr	r2, [r7, #32]
 800ae18:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1e:	2b09      	cmp	r3, #9
 800ae20:	d118      	bne.n	800ae54 <_tx_byte_pool_cleanup+0xd0>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2284      	movs	r2, #132	; 0x84
 800ae26:	2110      	movs	r1, #16
 800ae28:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ae2a:	4b11      	ldr	r3, [pc, #68]	; (800ae70 <_tx_byte_pool_cleanup+0xec>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	4b0f      	ldr	r3, [pc, #60]	; (800ae70 <_tx_byte_pool_cleanup+0xec>)
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f383 8810 	msr	PRIMASK, r3
}
 800ae3e:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	0018      	movs	r0, r3
 800ae44:	f002 fd64 	bl	800d910 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ae48:	f3ef 8310 	mrs	r3, PRIMASK
 800ae4c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ae4e:	b672      	cpsid	i
    return(primask_value);
 800ae50:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ae52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f383 8810 	msr	PRIMASK, r3
}
 800ae5e:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ae60:	46c0      	nop			; (mov r8, r8)
 800ae62:	46bd      	mov	sp, r7
 800ae64:	b00c      	add	sp, #48	; 0x30
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	0800ad85 	.word	0x0800ad85
 800ae6c:	42595445 	.word	0x42595445
 800ae70:	20004904 	.word	0x20004904

0800ae74 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b092      	sub	sp, #72	; 0x48
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	647b      	str	r3, [r7, #68]	; 0x44
 800ae86:	233f      	movs	r3, #63	; 0x3f
 800ae88:	18fb      	adds	r3, r7, r3
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	2334      	movs	r3, #52	; 0x34
 800ae90:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae92:	2300      	movs	r3, #0
 800ae94:	643b      	str	r3, [r7, #64]	; 0x40
 800ae96:	e009      	b.n	800aeac <_tx_byte_pool_create+0x38>
 800ae98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	647a      	str	r2, [r7, #68]	; 0x44
 800ae9e:	223f      	movs	r2, #63	; 0x3f
 800aea0:	18ba      	adds	r2, r7, r2
 800aea2:	7812      	ldrb	r2, [r2, #0]
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea8:	3301      	adds	r3, #1
 800aeaa:	643b      	str	r3, [r7, #64]	; 0x40
 800aeac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d3f1      	bcc.n	800ae98 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	4393      	bics	r3, r2
 800aeba:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	3b08      	subs	r3, #8
 800aede:	001a      	movs	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2202      	movs	r2, #2
 800aee8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800aeee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	18d3      	adds	r3, r2, r3
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800aef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef8:	3b04      	subs	r3, #4
 800aefa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800af00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af02:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af08:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0c:	3b04      	subs	r3, #4
 800af0e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800af10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af26:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800af2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af2e:	3304      	adds	r3, #4
 800af30:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800af32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af34:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	4a1e      	ldr	r2, [pc, #120]	; (800afb4 <_tx_byte_pool_create+0x140>)
 800af3a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800af42:	f3ef 8310 	mrs	r3, PRIMASK
 800af46:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800af48:	b672      	cpsid	i
    return(primask_value);
 800af4a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	4a19      	ldr	r2, [pc, #100]	; (800afb8 <_tx_byte_pool_create+0x144>)
 800af52:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800af54:	4b19      	ldr	r3, [pc, #100]	; (800afbc <_tx_byte_pool_create+0x148>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800af5c:	4b18      	ldr	r3, [pc, #96]	; (800afc0 <_tx_byte_pool_create+0x14c>)
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	631a      	str	r2, [r3, #48]	; 0x30
 800af6e:	e011      	b.n	800af94 <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800af70:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <_tx_byte_pool_create+0x14c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6a3a      	ldr	r2, [r7, #32]
 800af92:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800af94:	4b09      	ldr	r3, [pc, #36]	; (800afbc <_tx_byte_pool_create+0x148>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	4b08      	ldr	r3, [pc, #32]	; (800afbc <_tx_byte_pool_create+0x148>)
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f383 8810 	msr	PRIMASK, r3
}
 800afa8:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800afaa:	2300      	movs	r3, #0
}
 800afac:	0018      	movs	r0, r3
 800afae:	46bd      	mov	sp, r7
 800afb0:	b012      	add	sp, #72	; 0x48
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	ffffeeee 	.word	0xffffeeee
 800afb8:	42595445 	.word	0x42595445
 800afbc:	20004860 	.word	0x20004860
 800afc0:	2000485c 	.word	0x2000485c

0800afc4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b094      	sub	sp, #80	; 0x50
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800afd2:	f3ef 8310 	mrs	r3, PRIMASK
 800afd6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800afd8:	b672      	cpsid	i
    return(primask_value);
 800afda:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800afdc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	3b02      	subs	r3, #2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	18d3      	adds	r3, r2, r3
 800afec:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d308      	bcc.n	800b008 <_tx_byte_pool_search+0x44>
 800aff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	f383 8810 	msr	PRIMASK, r3
}
 800b000:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	64bb      	str	r3, [r7, #72]	; 0x48
 800b006:	e0db      	b.n	800b1c0 <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b008:	4b70      	ldr	r3, [pc, #448]	; (800b1cc <_tx_byte_pool_search+0x208>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b012:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	3301      	adds	r3, #1
 800b020:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 800b022:	2300      	movs	r3, #0
 800b024:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b028:	3304      	adds	r3, #4
 800b02a:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a66      	ldr	r2, [pc, #408]	; (800b1d0 <_tx_byte_pool_search+0x20c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d143      	bne.n	800b0c2 <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d104      	bne.n	800b04a <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b044:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b046:	2301      	movs	r3, #1
 800b048:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b04a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b04c:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b05e:	3b08      	subs	r3, #8
 800b060:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d255      	bcs.n	800b116 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b06a:	2300      	movs	r3, #0
 800b06c:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	3304      	adds	r3, #4
 800b072:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a54      	ldr	r2, [pc, #336]	; (800b1d0 <_tx_byte_pool_search+0x20c>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d113      	bne.n	800b0aa <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	1e5a      	subs	r2, r3, #1
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d114      	bne.n	800b0cc <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0a6:	615a      	str	r2, [r3, #20]
 800b0a8:	e010      	b.n	800b0cc <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d008      	beq.n	800b0cc <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 800b0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	643b      	str	r3, [r7, #64]	; 0x40
 800b0c0:	e004      	b.n	800b0cc <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0c4:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	643b      	str	r3, [r7, #64]	; 0x40
 800b0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0da:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f383 8810 	msr	PRIMASK, r3
}
 800b0e2:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b0e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b0e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b0ea:	b672      	cpsid	i
    return(primask_value);
 800b0ec:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b0ee:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a1b      	ldr	r3, [r3, #32]
 800b0f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d009      	beq.n	800b10e <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	3301      	adds	r3, #1
 800b106:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b10c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b110:	2b00      	cmp	r3, #0
 800b112:	d188      	bne.n	800b026 <_tx_byte_pool_search+0x62>
 800b114:	e000      	b.n	800b118 <_tx_byte_pool_search+0x154>
                    break;
 800b116:	46c0      	nop			; (mov r8, r8)

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d048      	beq.n	800b1b0 <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b11e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	2b13      	cmp	r3, #19
 800b126:	d91e      	bls.n	800b166 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b12e:	18d3      	adds	r3, r2, r3
 800b130:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b138:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	3304      	adds	r3, #4
 800b146:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	4a20      	ldr	r2, [pc, #128]	; (800b1d0 <_tx_byte_pool_search+0x20c>)
 800b150:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b160:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b168:	3304      	adds	r3, #4
 800b16a:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	689a      	ldr	r2, [r3, #8]
 800b17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	3b08      	subs	r3, #8
 800b180:	001a      	movs	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d105      	bne.n	800b19c <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b192:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	615a      	str	r2, [r3, #20]
 800b19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f383 8810 	msr	PRIMASK, r3
}
 800b1a6:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1ae:	e007      	b.n	800b1c0 <_tx_byte_pool_search+0x1fc>
 800b1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f383 8810 	msr	PRIMASK, r3
}
 800b1ba:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b1c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	b014      	add	sp, #80	; 0x50
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	46c0      	nop			; (mov r8, r8)
 800b1cc:	2000486c 	.word	0x2000486c
 800b1d0:	ffffeeee 	.word	0xffffeeee

0800b1d4 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08c      	sub	sp, #48	; 0x30
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b1de:	f3ef 8310 	mrs	r3, PRIMASK
 800b1e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b1e4:	b672      	cpsid	i
    return(primask_value);
 800b1e6:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b1ee:	4b37      	ldr	r3, [pc, #220]	; (800b2cc <_tx_event_flags_cleanup+0xf8>)
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d161      	bne.n	800b2b8 <_tx_event_flags_cleanup+0xe4>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	22ac      	movs	r2, #172	; 0xac
 800b1f8:	589b      	ldr	r3, [r3, r2]
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d15b      	bne.n	800b2b8 <_tx_event_flags_cleanup+0xe4>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d055      	beq.n	800b2b8 <_tx_event_flags_cleanup+0xe4>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a2f      	ldr	r2, [pc, #188]	; (800b2d0 <_tx_event_flags_cleanup+0xfc>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d150      	bne.n	800b2b8 <_tx_event_flags_cleanup+0xe4>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d04c      	beq.n	800b2b8 <_tx_event_flags_cleanup+0xe4>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d020      	beq.n	800b278 <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	3b01      	subs	r3, #1
 800b23a:	627b      	str	r3, [r7, #36]	; 0x24

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b240:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d103      	bne.n	800b250 <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	2200      	movs	r2, #0
 800b24c:	611a      	str	r2, [r3, #16]
 800b24e:	e016      	b.n	800b27e <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b254:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b25a:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	69ba      	ldr	r2, [r7, #24]
 800b260:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	69fa      	ldr	r2, [r7, #28]
 800b266:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800b268:	6a3a      	ldr	r2, [r7, #32]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d106      	bne.n	800b27e <_tx_event_flags_cleanup+0xaa>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	69fa      	ldr	r2, [r7, #28]
 800b274:	611a      	str	r2, [r3, #16]
 800b276:	e002      	b.n	800b27e <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	2201      	movs	r2, #1
 800b27c:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	2b07      	cmp	r3, #7
 800b284:	d118      	bne.n	800b2b8 <_tx_event_flags_cleanup+0xe4>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2284      	movs	r2, #132	; 0x84
 800b28a:	2107      	movs	r1, #7
 800b28c:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b28e:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <_tx_event_flags_cleanup+0x100>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <_tx_event_flags_cleanup+0x100>)
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f383 8810 	msr	PRIMASK, r3
}
 800b2a2:	46c0      	nop			; (mov r8, r8)
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	f002 fb32 	bl	800d910 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b2ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b2b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b2b2:	b672      	cpsid	i
    return(primask_value);
 800b2b4:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f383 8810 	msr	PRIMASK, r3
}
 800b2c2:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b2c4:	46c0      	nop			; (mov r8, r8)
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	b00c      	add	sp, #48	; 0x30
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	0800b1d5 	.word	0x0800b1d5
 800b2d0:	4456444e 	.word	0x4456444e
 800b2d4:	20004904 	.word	0x20004904

0800b2d8 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08c      	sub	sp, #48	; 0x30
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2e6:	2327      	movs	r3, #39	; 0x27
 800b2e8:	18fb      	adds	r3, r7, r3
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	2324      	movs	r3, #36	; 0x24
 800b2f0:	623b      	str	r3, [r7, #32]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2f6:	e009      	b.n	800b30c <_tx_event_flags_create+0x34>
 800b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2fe:	2227      	movs	r2, #39	; 0x27
 800b300:	18ba      	adds	r2, r7, r2
 800b302:	7812      	ldrb	r2, [r2, #0]
 800b304:	701a      	strb	r2, [r3, #0]
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	3301      	adds	r3, #1
 800b30a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	429a      	cmp	r2, r3
 800b312:	d3f1      	bcc.n	800b2f8 <_tx_event_flags_create+0x20>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b31a:	f3ef 8310 	mrs	r3, PRIMASK
 800b31e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b320:	b672      	cpsid	i
    return(primask_value);
 800b322:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800b324:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a18      	ldr	r2, [pc, #96]	; (800b38c <_tx_event_flags_create+0xb4>)
 800b32a:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800b32c:	4b18      	ldr	r3, [pc, #96]	; (800b390 <_tx_event_flags_create+0xb8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d109      	bne.n	800b348 <_tx_event_flags_create+0x70>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800b334:	4b17      	ldr	r3, [pc, #92]	; (800b394 <_tx_event_flags_create+0xbc>)
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	601a      	str	r2, [r3, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	61da      	str	r2, [r3, #28]
 800b346:	e011      	b.n	800b36c <_tx_event_flags_create+0x94>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800b348:	4b12      	ldr	r3, [pc, #72]	; (800b394 <_tx_event_flags_create+0xbc>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	69ba      	ldr	r2, [r7, #24]
 800b36a:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800b36c:	4b08      	ldr	r3, [pc, #32]	; (800b390 <_tx_event_flags_create+0xb8>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <_tx_event_flags_create+0xb8>)
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f383 8810 	msr	PRIMASK, r3
}
 800b380:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b382:	2300      	movs	r3, #0
}
 800b384:	0018      	movs	r0, r3
 800b386:	46bd      	mov	sp, r7
 800b388:	b00c      	add	sp, #48	; 0x30
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	4456444e 	.word	0x4456444e
 800b390:	20004848 	.word	0x20004848
 800b394:	20004844 	.word	0x20004844

0800b398 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b094      	sub	sp, #80	; 0x50
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b3a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b3ac:	b672      	cpsid	i
    return(primask_value);
 800b3ae:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800b3b0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	4013      	ands	r3, r2
 800b3be:	63bb      	str	r3, [r7, #56]	; 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ce:	43da      	mvns	r2, r3
 800b3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d10a      	bne.n	800b3f2 <_tx_event_flags_get+0x5a>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800b3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800b3e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d006      	beq.n	800b3fa <_tx_event_flags_get+0x62>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	643b      	str	r3, [r7, #64]	; 0x40
 800b3f0:	e003      	b.n	800b3fa <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800b3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800b3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d029      	beq.n	800b454 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b404:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	4013      	ands	r3, r2
 800b40c:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d11c      	bne.n	800b44e <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800b414:	2300      	movs	r3, #0
 800b416:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <_tx_event_flags_get+0x94>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800b428:	2301      	movs	r3, #1
 800b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800b42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d106      	bne.n	800b440 <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6a1a      	ldr	r2, [r3, #32]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	621a      	str	r2, [r3, #32]
 800b43e:	e006      	b.n	800b44e <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	43d2      	mvns	r2, r2
 800b448:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800b44e:	2300      	movs	r3, #0
 800b450:	64bb      	str	r3, [r7, #72]	; 0x48
 800b452:	e06f      	b.n	800b534 <_tx_event_flags_get+0x19c>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b456:	2b00      	cmp	r3, #0
 800b458:	d06a      	beq.n	800b530 <_tx_event_flags_get+0x198>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b45a:	4b3c      	ldr	r3, [pc, #240]	; (800b54c <_tx_event_flags_get+0x1b4>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <_tx_event_flags_get+0xd0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 800b462:	2307      	movs	r3, #7
 800b464:	64bb      	str	r3, [r7, #72]	; 0x48
 800b466:	e065      	b.n	800b534 <_tx_event_flags_get+0x19c>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800b468:	4b39      	ldr	r3, [pc, #228]	; (800b550 <_tx_event_flags_get+0x1b8>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	633b      	str	r3, [r7, #48]	; 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	4a38      	ldr	r2, [pc, #224]	; (800b554 <_tx_event_flags_get+0x1bc>)
 800b472:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2180      	movs	r1, #128	; 0x80
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	505a      	str	r2, [r3, r1]

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	22ac      	movs	r2, #172	; 0xac
 800b492:	589b      	ldr	r3, [r3, r2]
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	21ac      	movs	r1, #172	; 0xac
 800b49a:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d109      	bne.n	800b4bc <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ac:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b2:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b8:	675a      	str	r2, [r3, #116]	; 0x74
 800b4ba:	e011      	b.n	800b4e0 <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c6:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4cc:	627b      	str	r3, [r7, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d8:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4de:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	2207      	movs	r2, #7
 800b4ee:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4fa:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b4fc:	4b13      	ldr	r3, [pc, #76]	; (800b54c <_tx_event_flags_get+0x1b4>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	4b12      	ldr	r3, [pc, #72]	; (800b54c <_tx_event_flags_get+0x1b4>)
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b508:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f383 8810 	msr	PRIMASK, r3
}
 800b510:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	0018      	movs	r0, r3
 800b516:	f002 fafb 	bl	800db10 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b51a:	f3ef 8310 	mrs	r3, PRIMASK
 800b51e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b520:	b672      	cpsid	i
    return(primask_value);
 800b522:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800b524:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	2284      	movs	r2, #132	; 0x84
 800b52a:	589b      	ldr	r3, [r3, r2]
 800b52c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b52e:	e001      	b.n	800b534 <_tx_event_flags_get+0x19c>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800b530:	2307      	movs	r3, #7
 800b532:	64bb      	str	r3, [r7, #72]	; 0x48
 800b534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b536:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f383 8810 	msr	PRIMASK, r3
}
 800b53e:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800b540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b542:	0018      	movs	r0, r3
 800b544:	46bd      	mov	sp, r7
 800b546:	b014      	add	sp, #80	; 0x50
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	46c0      	nop			; (mov r8, r8)
 800b54c:	20004904 	.word	0x20004904
 800b550:	2000486c 	.word	0x2000486c
 800b554:	0800b1d5 	.word	0x0800b1d5

0800b558 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b0a3      	sub	sp, #140	; 0x8c
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b564:	f3ef 8310 	mrs	r3, PRIMASK
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b56a:	b672      	cpsid	i
    return(primask_value);
 800b56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800b56e:	2284      	movs	r2, #132	; 0x84
 800b570:	18ba      	adds	r2, r7, r2
 800b572:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2202      	movs	r2, #2
 800b578:	4013      	ands	r3, r2
 800b57a:	d024      	beq.n	800b5c6 <_tx_event_flags_set+0x6e>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800b57c:	2300      	movs	r3, #0
 800b57e:	663b      	str	r3, [r7, #96]	; 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d005      	beq.n	800b594 <_tx_event_flags_set+0x3c>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800b590:	2301      	movs	r3, #1
 800b592:	663b      	str	r3, [r7, #96]	; 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800b594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b596:	2b01      	cmp	r3, #1
 800b598:	d107      	bne.n	800b5aa <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6a1a      	ldr	r2, [r3, #32]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	621a      	str	r2, [r3, #32]
 800b5a8:	e005      	b.n	800b5b6 <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	609a      	str	r2, [r3, #8]
 800b5b6:	2384      	movs	r3, #132	; 0x84
 800b5b8:	18fb      	adds	r3, r7, r3
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c0:	f383 8810 	msr	PRIMASK, r3
}
 800b5c4:	e1ce      	b.n	800b964 <_tx_event_flags_set+0x40c>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d006      	beq.n	800b5e8 <_tx_event_flags_set+0x90>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6a1b      	ldr	r3, [r3, #32]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	43d2      	mvns	r2, r2
 800b5e2:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d100      	bne.n	800b5fc <_tx_event_flags_set+0xa4>
 800b5fa:	e19f      	b.n	800b93c <_tx_event_flags_set+0x3e4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800b5fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d16c      	bne.n	800b6dc <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	2280      	movs	r2, #128	; 0x80
 800b608:	18b9      	adds	r1, r7, r2
 800b60a:	600b      	str	r3, [r1, #0]

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800b612:	18bb      	adds	r3, r7, r2
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b618:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800b61a:	18bb      	adds	r3, r7, r2
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2280      	movs	r2, #128	; 0x80
 800b620:	589b      	ldr	r3, [r3, r2]
 800b622:	657b      	str	r3, [r7, #84]	; 0x54

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800b624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b626:	2202      	movs	r2, #2
 800b628:	4013      	ands	r3, r2
 800b62a:	653b      	str	r3, [r7, #80]	; 0x50

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800b62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d10a      	bne.n	800b648 <_tx_event_flags_set+0xf0>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800b632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b636:	4013      	ands	r3, r2
 800b638:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800b63a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b63c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b63e:	429a      	cmp	r2, r3
 800b640:	d006      	beq.n	800b650 <_tx_event_flags_set+0xf8>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800b642:	2300      	movs	r3, #0
 800b644:	66bb      	str	r3, [r7, #104]	; 0x68
 800b646:	e003      	b.n	800b650 <_tx_event_flags_set+0xf8>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800b648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b64a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b64c:	4013      	ands	r3, r2
 800b64e:	66bb      	str	r3, [r7, #104]	; 0x68
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800b650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b652:	2b00      	cmp	r3, #0
 800b654:	d100      	bne.n	800b658 <_tx_event_flags_set+0x100>
 800b656:	e178      	b.n	800b94a <_tx_event_flags_set+0x3f2>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800b658:	2301      	movs	r3, #1
 800b65a:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b65c:	2380      	movs	r3, #128	; 0x80
 800b65e:	18fb      	adds	r3, r7, r3
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b664:	64fb      	str	r3, [r7, #76]	; 0x4c
                    *suspend_info_ptr =  current_event_flags;
 800b666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b66a:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b66c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b66e:	2201      	movs	r2, #1
 800b670:	4013      	ands	r3, r2
 800b672:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800b674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b676:	2b01      	cmp	r3, #1
 800b678:	d106      	bne.n	800b688 <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b680:	43d2      	mvns	r2, r2
 800b682:	401a      	ands	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b694:	2080      	movs	r0, #128	; 0x80
 800b696:	183b      	adds	r3, r7, r0
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2200      	movs	r2, #0
 800b69c:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b69e:	183b      	adds	r3, r7, r0
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2284      	movs	r2, #132	; 0x84
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	5099      	str	r1, [r3, r2]
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800b6a8:	4bb1      	ldr	r3, [pc, #708]	; (800b970 <_tx_event_flags_set+0x418>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	1c5a      	adds	r2, r3, #1
 800b6ae:	4bb0      	ldr	r3, [pc, #704]	; (800b970 <_tx_event_flags_set+0x418>)
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	2484      	movs	r4, #132	; 0x84
 800b6b4:	193b      	adds	r3, r7, r4
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	f383 8810 	msr	PRIMASK, r3
}
 800b6c0:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800b6c2:	183b      	adds	r3, r7, r0
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	0018      	movs	r0, r3
 800b6c8:	f002 f922 	bl	800d910 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b6d0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b6d2:	b672      	cpsid	i
    return(primask_value);
 800b6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800b6d6:	193a      	adds	r2, r7, r4
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	e136      	b.n	800b94a <_tx_event_flags_set+0x3f2>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	677b      	str	r3, [r7, #116]	; 0x74
                thread_ptr =      suspended_list;
 800b6e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6e4:	2280      	movs	r2, #128	; 0x80
 800b6e6:	18ba      	adds	r2, r7, r2
 800b6e8:	6013      	str	r3, [r2, #0]

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	67fb      	str	r3, [r7, #124]	; 0x7c
                last_satisfied =  TX_NULL;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800b6fe:	4b9c      	ldr	r3, [pc, #624]	; (800b970 <_tx_event_flags_set+0x418>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	4b9a      	ldr	r3, [pc, #616]	; (800b970 <_tx_event_flags_set+0x418>)
 800b706:	601a      	str	r2, [r3, #0]
 800b708:	2284      	movs	r2, #132	; 0x84
 800b70a:	18bb      	adds	r3, r7, r2
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f383 8810 	msr	PRIMASK, r3
}
 800b716:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b718:	f3ef 8310 	mrs	r3, PRIMASK
 800b71c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b71e:	b672      	cpsid	i
    return(primask_value);
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800b722:	18ba      	adds	r2, r7, r2
 800b724:	6013      	str	r3, [r2, #0]
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00e      	beq.n	800b74c <_tx_event_flags_set+0x1f4>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800b734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b736:	2280      	movs	r2, #128	; 0x80
 800b738:	18ba      	adds	r2, r7, r2
 800b73a:	6013      	str	r3, [r2, #0]

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b748:	4313      	orrs	r3, r2
 800b74a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b74c:	2280      	movs	r2, #128	; 0x80
 800b74e:	18bb      	adds	r3, r7, r2
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b754:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800b756:	18bb      	adds	r3, r7, r2
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b75c:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800b75e:	18bb      	adds	r3, r7, r2
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2280      	movs	r2, #128	; 0x80
 800b764:	589b      	ldr	r3, [r3, r2]
 800b766:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800b768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b76a:	2202      	movs	r2, #2
 800b76c:	4013      	ands	r3, r2
 800b76e:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800b770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b772:	2b02      	cmp	r3, #2
 800b774:	d10a      	bne.n	800b78c <_tx_event_flags_set+0x234>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800b776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b77a:	4013      	ands	r3, r2
 800b77c:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800b77e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b782:	429a      	cmp	r2, r3
 800b784:	d006      	beq.n	800b794 <_tx_event_flags_set+0x23c>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800b786:	2300      	movs	r3, #0
 800b788:	66bb      	str	r3, [r7, #104]	; 0x68
 800b78a:	e003      	b.n	800b794 <_tx_event_flags_set+0x23c>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800b78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b78e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b790:	4013      	ands	r3, r2
 800b792:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	18fb      	adds	r3, r7, r3
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79c:	2b07      	cmp	r3, #7
 800b79e:	d001      	beq.n	800b7a4 <_tx_event_flags_set+0x24c>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800b7a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d069      	beq.n	800b87e <_tx_event_flags_set+0x326>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	667b      	str	r3, [r7, #100]	; 0x64

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800b7ae:	2280      	movs	r2, #128	; 0x80
 800b7b0:	18bb      	adds	r3, r7, r2
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b6:	2b07      	cmp	r3, #7
 800b7b8:	d11e      	bne.n	800b7f8 <_tx_event_flags_set+0x2a0>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b7ba:	18bb      	adds	r3, r7, r2
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
                            *suspend_info_ptr =  current_event_flags;
 800b7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7c6:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b7c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	64bb      	str	r3, [r7, #72]	; 0x48

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800b7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d106      	bne.n	800b7e4 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7dc:	43d2      	mvns	r2, r2
 800b7de:	401a      	ands	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b7e4:	2180      	movs	r1, #128	; 0x80
 800b7e6:	187b      	adds	r3, r7, r1
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b7ee:	187b      	adds	r3, r7, r1
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2284      	movs	r2, #132	; 0x84
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	5099      	str	r1, [r3, r2]

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b7f8:	2280      	movs	r2, #128	; 0x80
 800b7fa:	18bb      	adds	r3, r7, r2
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b800:	18ba      	adds	r2, r7, r2
 800b802:	6812      	ldr	r2, [r2, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d102      	bne.n	800b80e <_tx_event_flags_set+0x2b6>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800b808:	2300      	movs	r3, #0
 800b80a:	677b      	str	r3, [r7, #116]	; 0x74
 800b80c:	e017      	b.n	800b83e <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800b80e:	2180      	movs	r1, #128	; 0x80
 800b810:	187b      	adds	r3, r7, r1
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b816:	647b      	str	r3, [r7, #68]	; 0x44
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b818:	187b      	adds	r3, r7, r1
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b81e:	643b      	str	r3, [r7, #64]	; 0x40
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b824:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800b826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b82a:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800b82c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b82e:	187b      	adds	r3, r7, r1
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d103      	bne.n	800b83e <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800b836:	187b      	adds	r3, r7, r1
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83c:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	1e5a      	subs	r2, r3, #1
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800b848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10b      	bne.n	800b866 <_tx_event_flags_set+0x30e>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800b84e:	2280      	movs	r2, #128	; 0x80
 800b850:	18bb      	adds	r3, r7, r2
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	67fb      	str	r3, [r7, #124]	; 0x7c
                            last_satisfied =  thread_ptr;
 800b856:	18bb      	adds	r3, r7, r2
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	67bb      	str	r3, [r7, #120]	; 0x78

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800b85c:	18bb      	adds	r3, r7, r2
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2200      	movs	r2, #0
 800b862:	671a      	str	r2, [r3, #112]	; 0x70
 800b864:	e00b      	b.n	800b87e <_tx_event_flags_set+0x326>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800b866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b868:	2180      	movs	r1, #128	; 0x80
 800b86a:	187a      	adds	r2, r7, r1
 800b86c:	6812      	ldr	r2, [r2, #0]
 800b86e:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800b870:	187b      	adds	r3, r7, r1
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2200      	movs	r2, #0
 800b876:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800b878:	187b      	adds	r3, r7, r1
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	67bb      	str	r3, [r7, #120]	; 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800b87e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b880:	2280      	movs	r2, #128	; 0x80
 800b882:	18ba      	adds	r2, r7, r2
 800b884:	6013      	str	r3, [r2, #0]

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800b886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b888:	3b01      	subs	r3, #1
 800b88a:	673b      	str	r3, [r7, #112]	; 0x70

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800b88c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d000      	beq.n	800b894 <_tx_event_flags_set+0x33c>
 800b892:	e739      	b.n	800b708 <_tx_event_flags_set+0x1b0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b898:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00a      	beq.n	800b8b8 <_tx_event_flags_set+0x360>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	43db      	mvns	r3, r3
 800b8ac:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	621a      	str	r2, [r3, #32]
 800b8b8:	2384      	movs	r3, #132	; 0x84
 800b8ba:	18fb      	adds	r3, r7, r3
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	f383 8810 	msr	PRIMASK, r3
}
 800b8c6:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800b8c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b8ca:	2280      	movs	r2, #128	; 0x80
 800b8cc:	18ba      	adds	r2, r7, r2
 800b8ce:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 800b8d0:	e021      	b.n	800b916 <_tx_event_flags_set+0x3be>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b8d2:	2180      	movs	r1, #128	; 0x80
 800b8d4:	187b      	adds	r3, r7, r1
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b8e2:	b672      	cpsid	i
    return(primask_value);
 800b8e4:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800b8e6:	2084      	movs	r0, #132	; 0x84
 800b8e8:	183a      	adds	r2, r7, r0
 800b8ea:	6013      	str	r3, [r2, #0]
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800b8ec:	4b20      	ldr	r3, [pc, #128]	; (800b970 <_tx_event_flags_set+0x418>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	4b1f      	ldr	r3, [pc, #124]	; (800b970 <_tx_event_flags_set+0x418>)
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	183b      	adds	r3, r7, r0
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	f383 8810 	msr	PRIMASK, r3
}
 800b902:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800b904:	000c      	movs	r4, r1
 800b906:	187b      	adds	r3, r7, r1
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	0018      	movs	r0, r3
 800b90c:	f002 f800 	bl	800d910 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800b910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b912:	193a      	adds	r2, r7, r4
 800b914:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 800b916:	2380      	movs	r3, #128	; 0x80
 800b918:	18fb      	adds	r3, r7, r3
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1d8      	bne.n	800b8d2 <_tx_event_flags_set+0x37a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b920:	f3ef 8310 	mrs	r3, PRIMASK
 800b924:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b926:	b672      	cpsid	i
    return(primask_value);
 800b928:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800b92a:	2284      	movs	r2, #132	; 0x84
 800b92c:	18ba      	adds	r2, r7, r2
 800b92e:	6013      	str	r3, [r2, #0]

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800b930:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <_tx_event_flags_set+0x418>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	1e5a      	subs	r2, r3, #1
 800b936:	4b0e      	ldr	r3, [pc, #56]	; (800b970 <_tx_event_flags_set+0x418>)
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	e006      	b.n	800b94a <_tx_event_flags_set+0x3f2>
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <_tx_event_flags_set+0x3f2>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2201      	movs	r2, #1
 800b948:	60da      	str	r2, [r3, #12]
 800b94a:	2384      	movs	r3, #132	; 0x84
 800b94c:	18fb      	adds	r3, r7, r3
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f383 8810 	msr	PRIMASK, r3
}
 800b958:	46c0      	nop			; (mov r8, r8)
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800b95a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d101      	bne.n	800b964 <_tx_event_flags_set+0x40c>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800b960:	f001 ff9e 	bl	800d8a0 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800b964:	2300      	movs	r3, #0
}
 800b966:	0018      	movs	r0, r3
 800b968:	46bd      	mov	sp, r7
 800b96a:	b023      	add	sp, #140	; 0x8c
 800b96c:	bd90      	pop	{r4, r7, pc}
 800b96e:	46c0      	nop			; (mov r8, r8)
 800b970:	20004904 	.word	0x20004904

0800b974 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b978:	f001 fe6e 	bl	800d658 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b97c:	f002 fafa 	bl	800df74 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b980:	4b13      	ldr	r3, [pc, #76]	; (800b9d0 <_tx_initialize_high_level+0x5c>)
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	4b13      	ldr	r3, [pc, #76]	; (800b9d4 <_tx_initialize_high_level+0x60>)
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b98c:	4b12      	ldr	r3, [pc, #72]	; (800b9d8 <_tx_initialize_high_level+0x64>)
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	4b12      	ldr	r3, [pc, #72]	; (800b9dc <_tx_initialize_high_level+0x68>)
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b998:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <_tx_initialize_high_level+0x6c>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
 800b99e:	4b11      	ldr	r3, [pc, #68]	; (800b9e4 <_tx_initialize_high_level+0x70>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b9a4:	4b10      	ldr	r3, [pc, #64]	; (800b9e8 <_tx_initialize_high_level+0x74>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	4b10      	ldr	r3, [pc, #64]	; (800b9ec <_tx_initialize_high_level+0x78>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b9b0:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <_tx_initialize_high_level+0x7c>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <_tx_initialize_high_level+0x80>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <_tx_initialize_high_level+0x84>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	; (800b9fc <_tx_initialize_high_level+0x88>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]
#endif
}
 800b9c8:	46c0      	nop			; (mov r8, r8)
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	20004834 	.word	0x20004834
 800b9d4:	20004838 	.word	0x20004838
 800b9d8:	2000483c 	.word	0x2000483c
 800b9dc:	20004840 	.word	0x20004840
 800b9e0:	20004844 	.word	0x20004844
 800b9e4:	20004848 	.word	0x20004848
 800b9e8:	20004854 	.word	0x20004854
 800b9ec:	20004858 	.word	0x20004858
 800b9f0:	2000485c 	.word	0x2000485c
 800b9f4:	20004860 	.word	0x20004860
 800b9f8:	2000484c 	.word	0x2000484c
 800b9fc:	20004850 	.word	0x20004850

0800ba00 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800ba04:	4b10      	ldr	r3, [pc, #64]	; (800ba48 <_tx_initialize_kernel_enter+0x48>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a10      	ldr	r2, [pc, #64]	; (800ba4c <_tx_initialize_kernel_enter+0x4c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d00b      	beq.n	800ba26 <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ba0e:	4b0e      	ldr	r3, [pc, #56]	; (800ba48 <_tx_initialize_kernel_enter+0x48>)
 800ba10:	4a0f      	ldr	r2, [pc, #60]	; (800ba50 <_tx_initialize_kernel_enter+0x50>)
 800ba12:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800ba14:	f7f4 fb7c 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800ba18:	f7ff ffac 	bl	800b974 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800ba1c:	4b0d      	ldr	r3, [pc, #52]	; (800ba54 <_tx_initialize_kernel_enter+0x54>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	4b0c      	ldr	r3, [pc, #48]	; (800ba54 <_tx_initialize_kernel_enter+0x54>)
 800ba24:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ba26:	4b08      	ldr	r3, [pc, #32]	; (800ba48 <_tx_initialize_kernel_enter+0x48>)
 800ba28:	4a09      	ldr	r2, [pc, #36]	; (800ba50 <_tx_initialize_kernel_enter+0x50>)
 800ba2a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800ba2c:	4b0a      	ldr	r3, [pc, #40]	; (800ba58 <_tx_initialize_kernel_enter+0x58>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	0018      	movs	r0, r3
 800ba32:	f7f5 fcc9 	bl	80013c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800ba36:	4b04      	ldr	r3, [pc, #16]	; (800ba48 <_tx_initialize_kernel_enter+0x48>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800ba3c:	f7f4 fbb0 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ba40:	46c0      	nop			; (mov r8, r8)
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	46c0      	nop			; (mov r8, r8)
 800ba48:	2000000c 	.word	0x2000000c
 800ba4c:	f0f0f0f1 	.word	0xf0f0f0f1
 800ba50:	f0f0f0f0 	.word	0xf0f0f0f0
 800ba54:	20004904 	.word	0x20004904
 800ba58:	20004864 	.word	0x20004864

0800ba5c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b08c      	sub	sp, #48	; 0x30
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ba66:	f3ef 8310 	mrs	r3, PRIMASK
 800ba6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ba6c:	b672      	cpsid	i
    return(primask_value);
 800ba6e:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800ba70:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ba76:	4b32      	ldr	r3, [pc, #200]	; (800bb40 <_tx_mutex_cleanup+0xe4>)
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d157      	bne.n	800bb2c <_tx_mutex_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	22ac      	movs	r2, #172	; 0xac
 800ba80:	589b      	ldr	r3, [r3, r2]
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d151      	bne.n	800bb2c <_tx_mutex_cleanup+0xd0>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba8c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d04b      	beq.n	800bb2c <_tx_mutex_cleanup+0xd0>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800ba94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a2a      	ldr	r2, [pc, #168]	; (800bb44 <_tx_mutex_cleanup+0xe8>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d146      	bne.n	800bb2c <_tx_mutex_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d042      	beq.n	800bb2c <_tx_mutex_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	69db      	ldr	r3, [r3, #28]
 800bab0:	1e5a      	subs	r2, r3, #1
 800bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab4:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	69db      	ldr	r3, [r3, #28]
 800baba:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d103      	bne.n	800baca <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	2200      	movs	r2, #0
 800bac6:	619a      	str	r2, [r3, #24]
 800bac8:	e013      	b.n	800baf2 <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bace:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bad4:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bad6:	6a3b      	ldr	r3, [r7, #32]
 800bad8:	69fa      	ldr	r2, [r7, #28]
 800bada:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	6a3a      	ldr	r2, [r7, #32]
 800bae0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d102      	bne.n	800baf2 <_tx_mutex_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	6a3a      	ldr	r2, [r7, #32]
 800baf0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf6:	2b0d      	cmp	r3, #13
 800baf8:	d118      	bne.n	800bb2c <_tx_mutex_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2284      	movs	r2, #132	; 0x84
 800bafe:	211d      	movs	r1, #29
 800bb00:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800bb02:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <_tx_mutex_cleanup+0xec>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <_tx_mutex_cleanup+0xec>)
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f383 8810 	msr	PRIMASK, r3
}
 800bb16:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	0018      	movs	r0, r3
 800bb1c:	f001 fef8 	bl	800d910 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bb20:	f3ef 8310 	mrs	r3, PRIMASK
 800bb24:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bb26:	b672      	cpsid	i
    return(primask_value);
 800bb28:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800bb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f383 8810 	msr	PRIMASK, r3
}
 800bb36:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800bb38:	46c0      	nop			; (mov r8, r8)
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	b00c      	add	sp, #48	; 0x30
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	0800ba5d 	.word	0x0800ba5d
 800bb44:	4d555445 	.word	0x4d555445
 800bb48:	20004904 	.word	0x20004904

0800bb4c <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bb54:	f3ef 8310 	mrs	r3, PRIMASK
 800bb58:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bb5a:	b672      	cpsid	i
    return(primask_value);
 800bb5c:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800bb5e:	61fb      	str	r3, [r7, #28]

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bb60:	4b1a      	ldr	r3, [pc, #104]	; (800bbcc <_tx_mutex_thread_release+0x80>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	4b19      	ldr	r3, [pc, #100]	; (800bbcc <_tx_mutex_thread_release+0x80>)
 800bb68:	601a      	str	r2, [r3, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	22a4      	movs	r2, #164	; 0xa4
 800bb6e:	589b      	ldr	r3, [r3, r2]
 800bb70:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d016      	beq.n	800bba6 <_tx_mutex_thread_release+0x5a>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	609a      	str	r2, [r3, #8]
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f383 8810 	msr	PRIMASK, r3
}
 800bb88:	46c0      	nop			; (mov r8, r8)
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	f000 fb9f 	bl	800c2d0 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bb92:	f3ef 8310 	mrs	r3, PRIMASK
 800bb96:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bb98:	b672      	cpsid	i
    return(primask_value);
 800bb9a:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800bb9c:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	22a4      	movs	r2, #164	; 0xa4
 800bba2:	589b      	ldr	r3, [r3, r2]
 800bba4:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1de      	bne.n	800bb6a <_tx_mutex_thread_release+0x1e>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800bbac:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <_tx_mutex_thread_release+0x80>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	1e5a      	subs	r2, r3, #1
 800bbb2:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <_tx_mutex_thread_release+0x80>)
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	f383 8810 	msr	PRIMASK, r3
}
 800bbc0:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE
}
 800bbc2:	46c0      	nop			; (mov r8, r8)
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	b008      	add	sp, #32
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	20004904 	.word	0x20004904

0800bbd0 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b08e      	sub	sp, #56	; 0x38
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	637b      	str	r3, [r7, #52]	; 0x34
 800bbe0:	232f      	movs	r3, #47	; 0x2f
 800bbe2:	18fb      	adds	r3, r7, r3
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	2334      	movs	r3, #52	; 0x34
 800bbea:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbec:	2300      	movs	r3, #0
 800bbee:	633b      	str	r3, [r7, #48]	; 0x30
 800bbf0:	e009      	b.n	800bc06 <_tx_mutex_create+0x36>
 800bbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	637a      	str	r2, [r7, #52]	; 0x34
 800bbf8:	222f      	movs	r2, #47	; 0x2f
 800bbfa:	18ba      	adds	r2, r7, r2
 800bbfc:	7812      	ldrb	r2, [r2, #0]
 800bbfe:	701a      	strb	r2, [r3, #0]
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	3301      	adds	r3, #1
 800bc04:	633b      	str	r3, [r7, #48]	; 0x30
 800bc06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d3f1      	bcc.n	800bbf2 <_tx_mutex_create+0x22>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bc1a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc1e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bc20:	b672      	cpsid	i
    return(primask_value);
 800bc22:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800bc24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	4a1a      	ldr	r2, [pc, #104]	; (800bc94 <_tx_mutex_create+0xc4>)
 800bc2a:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800bc2c:	4b1a      	ldr	r3, [pc, #104]	; (800bc98 <_tx_mutex_create+0xc8>)
 800bc2e:	4a1b      	ldr	r2, [pc, #108]	; (800bc9c <_tx_mutex_create+0xcc>)
 800bc30:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800bc32:	4b1b      	ldr	r3, [pc, #108]	; (800bca0 <_tx_mutex_create+0xd0>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d109      	bne.n	800bc4e <_tx_mutex_create+0x7e>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800bc3a:	4b1a      	ldr	r3, [pc, #104]	; (800bca4 <_tx_mutex_create+0xd4>)
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	601a      	str	r2, [r3, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	625a      	str	r2, [r3, #36]	; 0x24
 800bc4c:	e011      	b.n	800bc72 <_tx_mutex_create+0xa2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800bc4e:	4b15      	ldr	r3, [pc, #84]	; (800bca4 <_tx_mutex_create+0xd4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	69fa      	ldr	r2, [r7, #28]
 800bc6a:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a3a      	ldr	r2, [r7, #32]
 800bc70:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800bc72:	4b0b      	ldr	r3, [pc, #44]	; (800bca0 <_tx_mutex_create+0xd0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <_tx_mutex_create+0xd0>)
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f383 8810 	msr	PRIMASK, r3
}
 800bc86:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	b00e      	add	sp, #56	; 0x38
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	46c0      	nop			; (mov r8, r8)
 800bc94:	4d555445 	.word	0x4d555445
 800bc98:	20004908 	.word	0x20004908
 800bc9c:	0800bb4d 	.word	0x0800bb4d
 800bca0:	20004850 	.word	0x20004850
 800bca4:	2000484c 	.word	0x2000484c

0800bca8 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b092      	sub	sp, #72	; 0x48
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bcb0:	f3ef 8310 	mrs	r3, PRIMASK
 800bcb4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bcb6:	b672      	cpsid	i
    return(primask_value);
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800bcba:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800bcc2:	4b48      	ldr	r3, [pc, #288]	; (800bde4 <_tx_mutex_delete+0x13c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	1e5a      	subs	r2, r3, #1
 800bcc8:	4b46      	ldr	r3, [pc, #280]	; (800bde4 <_tx_mutex_delete+0x13c>)
 800bcca:	601a      	str	r2, [r3, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800bccc:	4b45      	ldr	r3, [pc, #276]	; (800bde4 <_tx_mutex_delete+0x13c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d103      	bne.n	800bcdc <_tx_mutex_delete+0x34>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800bcd4:	4b44      	ldr	r3, [pc, #272]	; (800bde8 <_tx_mutex_delete+0x140>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	e013      	b.n	800bd04 <_tx_mutex_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a1b      	ldr	r3, [r3, #32]
 800bce0:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	637b      	str	r3, [r7, #52]	; 0x34
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcec:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcf2:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800bcf4:	4b3c      	ldr	r3, [pc, #240]	; (800bde8 <_tx_mutex_delete+0x140>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d102      	bne.n	800bd04 <_tx_mutex_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800bcfe:	4b3a      	ldr	r3, [pc, #232]	; (800bde8 <_tx_mutex_delete+0x140>)
 800bd00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd02:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bd04:	4b39      	ldr	r3, [pc, #228]	; (800bdec <_tx_mutex_delete+0x144>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	4b38      	ldr	r3, [pc, #224]	; (800bdec <_tx_mutex_delete+0x144>)
 800bd0c:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	643b      	str	r3, [r7, #64]	; 0x40
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d012      	beq.n	800bd58 <_tx_mutex_delete+0xb0>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	609a      	str	r2, [r3, #8]
 800bd38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd3a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	f383 8810 	msr	PRIMASK, r3
}
 800bd42:	46c0      	nop			; (mov r8, r8)
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	0018      	movs	r0, r3
 800bd48:	f000 fac2 	bl	800c2d0 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bd4c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bd52:	b672      	cpsid	i
    return(primask_value);
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800bd56:	647b      	str	r3, [r7, #68]	; 0x44
 800bd58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	f383 8810 	msr	PRIMASK, r3
}
 800bd62:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800bd64:	e023      	b.n	800bdae <_tx_mutex_delete+0x106>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800bd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bd6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd70:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bd72:	b672      	cpsid	i
    return(primask_value);
 800bd74:	697b      	ldr	r3, [r7, #20]

        /* Lockout interrupts.  */
        TX_DISABLE
 800bd76:	647b      	str	r3, [r7, #68]	; 0x44

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800bd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd80:	2284      	movs	r2, #132	; 0x84
 800bd82:	2101      	movs	r1, #1
 800bd84:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800bd86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800bd8c:	4b17      	ldr	r3, [pc, #92]	; (800bdec <_tx_mutex_delete+0x144>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	4b16      	ldr	r3, [pc, #88]	; (800bdec <_tx_mutex_delete+0x144>)
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd98:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	f383 8810 	msr	PRIMASK, r3
}
 800bda0:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bda4:	0018      	movs	r0, r3
 800bda6:	f001 fdb3 	bl	800d910 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdac:	643b      	str	r3, [r7, #64]	; 0x40
    while (suspended_count != ((ULONG) 0))
 800bdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1d8      	bne.n	800bd66 <_tx_mutex_delete+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bdb4:	f3ef 8310 	mrs	r3, PRIMASK
 800bdb8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bdba:	b672      	cpsid	i
    return(primask_value);
 800bdbc:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800bdbe:	647b      	str	r3, [r7, #68]	; 0x44

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800bdc0:	4b0a      	ldr	r3, [pc, #40]	; (800bdec <_tx_mutex_delete+0x144>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	1e5a      	subs	r2, r3, #1
 800bdc6:	4b09      	ldr	r3, [pc, #36]	; (800bdec <_tx_mutex_delete+0x144>)
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f383 8810 	msr	PRIMASK, r3
}
 800bdd4:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800bdd6:	f001 fd63 	bl	800d8a0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	0018      	movs	r0, r3
 800bdde:	46bd      	mov	sp, r7
 800bde0:	b012      	add	sp, #72	; 0x48
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20004850 	.word	0x20004850
 800bde8:	2000484c 	.word	0x2000484c
 800bdec:	20004904 	.word	0x20004904

0800bdf0 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b090      	sub	sp, #64	; 0x40
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bdfa:	f3ef 8310 	mrs	r3, PRIMASK
 800bdfe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800be00:	b672      	cpsid	i
    return(primask_value);
 800be02:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800be04:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800be06:	4b7b      	ldr	r3, [pc, #492]	; (800bff4 <_tx_mutex_get+0x204>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d144      	bne.n	800be9e <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be1e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800be20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be22:	2b00      	cmp	r3, #0
 800be24:	d032      	beq.n	800be8c <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d106      	bne.n	800be3c <_tx_mutex_get+0x4c>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2220      	movs	r2, #32
 800be3a:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800be3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3e:	22a4      	movs	r2, #164	; 0xa4
 800be40:	589b      	ldr	r3, [r3, r2]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00f      	beq.n	800be6a <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4e:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a3a      	ldr	r2, [r7, #32]
 800be60:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be66:	62da      	str	r2, [r3, #44]	; 0x2c
 800be68:	e009      	b.n	800be7e <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800be6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6c:	21a4      	movs	r1, #164	; 0xa4
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	505a      	str	r2, [r3, r1]
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800be7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be80:	22a0      	movs	r2, #160	; 0xa0
 800be82:	589b      	ldr	r3, [r3, r2]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	21a0      	movs	r1, #160	; 0xa0
 800be8a:	505a      	str	r2, [r3, r1]
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	f383 8810 	msr	PRIMASK, r3
}
 800be96:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800be98:	2300      	movs	r3, #0
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be9c:	e0a4      	b.n	800bfe8 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d10d      	bne.n	800bec4 <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	609a      	str	r2, [r3, #8]
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f383 8810 	msr	PRIMASK, r3
}
 800bebc:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800bebe:	2300      	movs	r3, #0
 800bec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bec2:	e091      	b.n	800bfe8 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d100      	bne.n	800becc <_tx_mutex_get+0xdc>
 800beca:	e085      	b.n	800bfd8 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800becc:	4b4a      	ldr	r3, [pc, #296]	; (800bff8 <_tx_mutex_get+0x208>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d008      	beq.n	800bee6 <_tx_mutex_get+0xf6>
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f383 8810 	msr	PRIMASK, r3
}
 800bede:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800bee0:	231d      	movs	r3, #29
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bee4:	e080      	b.n	800bfe8 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	633b      	str	r3, [r7, #48]	; 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800beec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beee:	4a43      	ldr	r2, [pc, #268]	; (800bffc <_tx_mutex_get+0x20c>)
 800bef0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800bef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800bef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befa:	22ac      	movs	r2, #172	; 0xac
 800befc:	589b      	ldr	r3, [r3, r2]
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf02:	21ac      	movs	r1, #172	; 0xac
 800bf04:	505a      	str	r2, [r3, r1]
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf12:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf18:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf1e:	675a      	str	r2, [r3, #116]	; 0x74
 800bf20:	e011      	b.n	800bf46 <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf2c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf32:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf38:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf3e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf44:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800bf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf52:	220d      	movs	r2, #13
 800bf54:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf58:	2201      	movs	r2, #1
 800bf5a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bf62:	4b25      	ldr	r3, [pc, #148]	; (800bff8 <_tx_mutex_get+0x208>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	4b23      	ldr	r3, [pc, #140]	; (800bff8 <_tx_mutex_get+0x208>)
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f383 8810 	msr	PRIMASK, r3
}
 800bf76:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d122      	bne.n	800bfc6 <_tx_mutex_get+0x1d6>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d903      	bls.n	800bf94 <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800bf8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	219c      	movs	r1, #156	; 0x9c
 800bf9c:	585b      	ldr	r3, [r3, r1]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d204      	bcs.n	800bfac <_tx_mutex_get+0x1bc>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800bfa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	219c      	movs	r1, #156	; 0x9c
 800bfaa:	505a      	str	r2, [r3, r1]
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d906      	bls.n	800bfc6 <_tx_mutex_get+0x1d6>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	0011      	movs	r1, r2
 800bfc0:	0018      	movs	r0, r3
 800bfc2:	f000 f8cb 	bl	800c15c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc8:	0018      	movs	r0, r3
 800bfca:	f001 fda1 	bl	800db10 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800bfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd0:	2284      	movs	r2, #132	; 0x84
 800bfd2:	589b      	ldr	r3, [r3, r2]
 800bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfd6:	e007      	b.n	800bfe8 <_tx_mutex_get+0x1f8>
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f383 8810 	msr	PRIMASK, r3
}
 800bfe2:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800bfe4:	231d      	movs	r3, #29
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bfea:	0018      	movs	r0, r3
 800bfec:	46bd      	mov	sp, r7
 800bfee:	b010      	add	sp, #64	; 0x40
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	46c0      	nop			; (mov r8, r8)
 800bff4:	2000486c 	.word	0x2000486c
 800bff8:	20004904 	.word	0x20004904
 800bffc:	0800ba5d 	.word	0x0800ba5d

0800c000 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b090      	sub	sp, #64	; 0x40
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c008:	f3ef 8310 	mrs	r3, PRIMASK
 800c00c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c00e:	b672      	cpsid	i
    return(primask_value);
 800c010:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800c012:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	69db      	ldr	r3, [r3, #28]
 800c018:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800c01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d805      	bhi.n	800c02c <_tx_mutex_prioritize+0x2c>
 800c020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c022:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	f383 8810 	msr	PRIMASK, r3
}
 800c02a:	e090      	b.n	800c14e <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d114      	bne.n	800c05c <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c046:	429a      	cmp	r2, r3
 800c048:	d202      	bcs.n	800c050 <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c04e:	619a      	str	r2, [r3, #24]
 800c050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c052:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f383 8810 	msr	PRIMASK, r3
}
 800c05a:	e078      	b.n	800c14e <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c06a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800c06c:	4b3a      	ldr	r3, [pc, #232]	; (800c158 <_tx_mutex_prioritize+0x158>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	4b39      	ldr	r3, [pc, #228]	; (800c158 <_tx_mutex_prioritize+0x158>)
 800c074:	601a      	str	r2, [r3, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800c076:	2300      	movs	r3, #0
 800c078:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c082:	429a      	cmp	r2, r3
 800c084:	d201      	bcs.n	800c08a <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	637b      	str	r3, [r7, #52]	; 0x34
 800c08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f383 8810 	msr	PRIMASK, r3
}
 800c094:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c096:	f3ef 8310 	mrs	r3, PRIMASK
 800c09a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c09c:	b672      	cpsid	i
    return(primask_value);
 800c09e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c0a0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	699b      	ldr	r3, [r3, #24]
 800c0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d002      	beq.n	800c0b2 <_tx_mutex_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0b0:	e006      	b.n	800c0c0 <_tx_mutex_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d001      	beq.n	800c0c0 <_tx_mutex_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0cc:	e00c      	b.n	800c0e8 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e2:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 800c0e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d1c4      	bne.n	800c07a <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800c0f0:	4b19      	ldr	r3, [pc, #100]	; (800c158 <_tx_mutex_prioritize+0x158>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	1e5a      	subs	r2, r3, #1
 800c0f6:	4b18      	ldr	r3, [pc, #96]	; (800c158 <_tx_mutex_prioritize+0x158>)
 800c0f8:	601a      	str	r2, [r3, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800c0fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d01d      	beq.n	800c13e <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800c102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c106:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800c108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c10c:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	6a3a      	ldr	r2, [r7, #32]
 800c112:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800c114:	6a3b      	ldr	r3, [r7, #32]
 800c116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c118:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c11e:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c124:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c128:	6a3a      	ldr	r2, [r7, #32]
 800c12a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c130:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c136:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c13c:	619a      	str	r2, [r3, #24]
 800c13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c140:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f383 8810 	msr	PRIMASK, r3
}
 800c148:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c14a:	f001 fba9 	bl	800d8a0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800c14e:	2300      	movs	r3, #0
#endif
}
 800c150:	0018      	movs	r0, r3
 800c152:	46bd      	mov	sp, r7
 800c154:	b010      	add	sp, #64	; 0x40
 800c156:	bd80      	pop	{r7, pc}
 800c158:	20004904 	.word	0x20004904

0800c15c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08e      	sub	sp, #56	; 0x38
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c166:	f3ef 8310 	mrs	r3, PRIMASK
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c16c:	b672      	cpsid	i
    return(primask_value);
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c170:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c176:	2b00      	cmp	r3, #0
 800c178:	d017      	beq.n	800c1aa <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2298      	movs	r2, #152	; 0x98
 800c184:	589b      	ldr	r3, [r3, r2]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d905      	bls.n	800c198 <_tx_mutex_priority_change+0x3c>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2298      	movs	r2, #152	; 0x98
 800c190:	589a      	ldr	r2, [r3, r2]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	63da      	str	r2, [r3, #60]	; 0x3c
 800c196:	e002      	b.n	800c19e <_tx_mutex_priority_change+0x42>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	63da      	str	r2, [r3, #60]	; 0x3c
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a0:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	f383 8810 	msr	PRIMASK, r3
}
 800c1a8:	e087      	b.n	800c2ba <_tx_mutex_priority_change+0x15e>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800c1aa:	4b46      	ldr	r3, [pc, #280]	; (800c2c4 <_tx_mutex_priority_change+0x168>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800c1b6:	4b44      	ldr	r3, [pc, #272]	; (800c2c8 <_tx_mutex_priority_change+0x16c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	1c9a      	adds	r2, r3, #2
 800c1bc:	4b42      	ldr	r3, [pc, #264]	; (800c2c8 <_tx_mutex_priority_change+0x16c>)
 800c1be:	601a      	str	r2, [r3, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	220e      	movs	r2, #14
 800c1c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	64da      	str	r2, [r3, #76]	; 0x4c
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	f383 8810 	msr	PRIMASK, r3
}
 800c1dc:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	f001 fc95 	bl	800db10 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c1e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c1ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c1ec:	b672      	cpsid	i
    return(primask_value);
 800c1ee:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800c1f0:	637b      	str	r3, [r7, #52]	; 0x34

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2298      	movs	r2, #152	; 0x98
 800c1fc:	589b      	ldr	r3, [r3, r2]
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d905      	bls.n	800c210 <_tx_mutex_priority_change+0xb4>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2298      	movs	r2, #152	; 0x98
 800c208:	589a      	ldr	r2, [r3, r2]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	63da      	str	r2, [r3, #60]	; 0x3c
 800c20e:	e002      	b.n	800c216 <_tx_mutex_priority_change+0xba>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	63da      	str	r2, [r3, #60]	; 0x3c
 800c216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c218:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	f383 8810 	msr	PRIMASK, r3
}
 800c220:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	0018      	movs	r0, r3
 800c226:	f001 fb73 	bl	800d910 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c22a:	f3ef 8310 	mrs	r3, PRIMASK
 800c22e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c230:	b672      	cpsid	i
    return(primask_value);
 800c232:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800c234:	637b      	str	r3, [r7, #52]	; 0x34
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800c236:	4b23      	ldr	r3, [pc, #140]	; (800c2c4 <_tx_mutex_priority_change+0x168>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	429a      	cmp	r2, r3
 800c242:	d034      	beq.n	800c2ae <_tx_mutex_priority_change+0x152>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d130      	bne.n	800c2ae <_tx_mutex_priority_change+0x152>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	429a      	cmp	r2, r3
 800c256:	d811      	bhi.n	800c27c <_tx_mutex_priority_change+0x120>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d126      	bne.n	800c2ae <_tx_mutex_priority_change+0x152>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800c260:	4b18      	ldr	r3, [pc, #96]	; (800c2c4 <_tx_mutex_priority_change+0x168>)
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	601a      	str	r2, [r3, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800c266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d21f      	bcs.n	800c2ae <_tx_mutex_priority_change+0x152>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c272:	4b16      	ldr	r3, [pc, #88]	; (800c2cc <_tx_mutex_priority_change+0x170>)
 800c274:	0092      	lsls	r2, r2, #2
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	50d1      	str	r1, [r2, r3]
 800c27a:	e018      	b.n	800c2ae <_tx_mutex_priority_change+0x152>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	429a      	cmp	r2, r3
 800c286:	d212      	bcs.n	800c2ae <_tx_mutex_priority_change+0x152>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c290:	429a      	cmp	r2, r3
 800c292:	d80c      	bhi.n	800c2ae <_tx_mutex_priority_change+0x152>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <_tx_mutex_priority_change+0x168>)
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	601a      	str	r2, [r3, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800c29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d205      	bcs.n	800c2ae <_tx_mutex_priority_change+0x152>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a6:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <_tx_mutex_priority_change+0x170>)
 800c2a8:	0092      	lsls	r2, r2, #2
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	50d1      	str	r1, [r2, r3]
 800c2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f383 8810 	msr	PRIMASK, r3
}
 800c2b8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c2ba:	46c0      	nop			; (mov r8, r8)
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	b00e      	add	sp, #56	; 0x38
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	46c0      	nop			; (mov r8, r8)
 800c2c4:	20004870 	.word	0x20004870
 800c2c8:	20004904 	.word	0x20004904
 800c2cc:	20004884 	.word	0x20004884

0800c2d0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b0a0      	sub	sp, #128	; 0x80
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800c2d8:	2320      	movs	r3, #32
 800c2da:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c2dc:	f3ef 8310 	mrs	r3, PRIMASK
 800c2e0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c2e2:	b672      	cpsid	i
    return(primask_value);
 800c2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800c2e6:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d100      	bne.n	800c2f2 <_tx_mutex_put+0x22>
 800c2f0:	e1c5      	b.n	800c67e <_tx_mutex_put+0x3ae>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800c2f8:	4bb4      	ldr	r3, [pc, #720]	; (800c5cc <_tx_mutex_put+0x2fc>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	663b      	str	r3, [r7, #96]	; 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c304:	429a      	cmp	r2, r3
 800c306:	d00b      	beq.n	800c320 <_tx_mutex_put+0x50>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800c308:	4bb1      	ldr	r3, [pc, #708]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d107      	bne.n	800c320 <_tx_mutex_put+0x50>
 800c310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c312:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c316:	f383 8810 	msr	PRIMASK, r3
}
 800c31a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800c31c:	231e      	movs	r3, #30
 800c31e:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800c320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c322:	2b20      	cmp	r3, #32
 800c324:	d000      	beq.n	800c328 <_tx_mutex_put+0x58>
 800c326:	e1b2      	b.n	800c68e <_tx_mutex_put+0x3be>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	1e5a      	subs	r2, r3, #1
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d008      	beq.n	800c34c <_tx_mutex_put+0x7c>
 800c33a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c33c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c340:	f383 8810 	msr	PRIMASK, r3
}
 800c344:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800c346:	2300      	movs	r3, #0
 800c348:	673b      	str	r3, [r7, #112]	; 0x70
 800c34a:	e1a0      	b.n	800c68e <_tx_mutex_put+0x3be>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800c34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d108      	bne.n	800c364 <_tx_mutex_put+0x94>
 800c352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c354:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	f383 8810 	msr	PRIMASK, r3
}
 800c35c:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800c35e:	2300      	movs	r3, #0
 800c360:	673b      	str	r3, [r7, #112]	; 0x70
 800c362:	e194      	b.n	800c68e <_tx_mutex_put+0x3be>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800c364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c366:	22a0      	movs	r2, #160	; 0xa0
 800c368:	589b      	ldr	r3, [r3, r2]
 800c36a:	1e5a      	subs	r2, r3, #1
 800c36c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c36e:	21a0      	movs	r1, #160	; 0xa0
 800c370:	505a      	str	r2, [r3, r1]

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800c372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c374:	22a0      	movs	r2, #160	; 0xa0
 800c376:	589b      	ldr	r3, [r3, r2]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d104      	bne.n	800c386 <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800c37c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c37e:	22a4      	movs	r2, #164	; 0xa4
 800c380:	2100      	movs	r1, #0
 800c382:	5099      	str	r1, [r3, r2]
 800c384:	e015      	b.n	800c3b2 <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	66fb      	str	r3, [r7, #108]	; 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c390:	65fb      	str	r3, [r7, #92]	; 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800c392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c396:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800c398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c39a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c39c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800c39e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3a0:	22a4      	movs	r2, #164	; 0xa4
 800c3a2:	589b      	ldr	r3, [r3, r2]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d103      	bne.n	800c3b2 <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800c3aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3ac:	21a4      	movs	r1, #164	; 0xa4
 800c3ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c3b0:	505a      	str	r2, [r3, r1]
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10e      	bne.n	800c3d8 <_tx_mutex_put+0x108>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	60da      	str	r2, [r3, #12]
 800c3c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3ca:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ce:	f383 8810 	msr	PRIMASK, r3
}
 800c3d2:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	673b      	str	r3, [r7, #112]	; 0x70
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800c3d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3da:	2b20      	cmp	r3, #32
 800c3dc:	d000      	beq.n	800c3e0 <_tx_mutex_put+0x110>
 800c3de:	e156      	b.n	800c68e <_tx_mutex_put+0x3be>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	67bb      	str	r3, [r7, #120]	; 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800c3e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3e6:	2294      	movs	r2, #148	; 0x94
 800c3e8:	589b      	ldr	r3, [r3, r2]
 800c3ea:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d140      	bne.n	800c476 <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c3f4:	4b76      	ldr	r3, [pc, #472]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	4b75      	ldr	r3, [pc, #468]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c400:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	f383 8810 	msr	PRIMASK, r3
}
 800c408:	46c0      	nop			; (mov r8, r8)
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c40a:	2320      	movs	r3, #32
 800c40c:	66bb      	str	r3, [r7, #104]	; 0x68

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800c40e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c410:	22a4      	movs	r2, #164	; 0xa4
 800c412:	589b      	ldr	r3, [r3, r2]
 800c414:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800c416:	e016      	b.n	800c446 <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800c418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d107      	bne.n	800c430 <_tx_mutex_put+0x160>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800c420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c426:	429a      	cmp	r2, r3
 800c428:	d902      	bls.n	800c430 <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800c42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42e:	66bb      	str	r3, [r7, #104]	; 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800c430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	66fb      	str	r3, [r7, #108]	; 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800c436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c438:	22a4      	movs	r2, #164	; 0xa4
 800c43a:	589b      	ldr	r3, [r3, r2]
 800c43c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c43e:	429a      	cmp	r2, r3
 800c440:	d101      	bne.n	800c446 <_tx_mutex_put+0x176>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800c446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e5      	bne.n	800c418 <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c44c:	f3ef 8310 	mrs	r3, PRIMASK
 800c450:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c452:	b672      	cpsid	i
    return(primask_value);
 800c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c456:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800c458:	4b5d      	ldr	r3, [pc, #372]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	1e5a      	subs	r2, r3, #1
 800c45e:	4b5c      	ldr	r3, [pc, #368]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c460:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800c462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c464:	219c      	movs	r1, #156	; 0x9c
 800c466:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c468:	505a      	str	r2, [r3, r1]

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800c46a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c46c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c46e:	429a      	cmp	r2, r3
 800c470:	d201      	bcs.n	800c476 <_tx_mutex_put+0x1a6>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800c472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c474:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d91d      	bls.n	800c4ba <_tx_mutex_put+0x1ea>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d119      	bne.n	800c4ba <_tx_mutex_put+0x1ea>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800c486:	4b52      	ldr	r3, [pc, #328]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	4b50      	ldr	r3, [pc, #320]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c492:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	f383 8810 	msr	PRIMASK, r3
}
 800c49a:	46c0      	nop			; (mov r8, r8)
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	0018      	movs	r0, r3
 800c4a0:	f7ff fdae 	bl	800c000 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c4a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c4a8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c4aa:	b672      	cpsid	i
    return(primask_value);
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800c4ae:	67fb      	str	r3, [r7, #124]	; 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800c4b0:	4b47      	ldr	r3, [pc, #284]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	1e5a      	subs	r2, r3, #1
 800c4b6:	4b46      	ldr	r3, [pc, #280]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c4b8:	601a      	str	r2, [r3, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d133      	bne.n	800c52a <_tx_mutex_put+0x25a>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c4c2:	4b43      	ldr	r3, [pc, #268]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	4b41      	ldr	r3, [pc, #260]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c4ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	f383 8810 	msr	PRIMASK, r3
}
 800c4d6:	46c0      	nop			; (mov r8, r8)
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d006      	beq.n	800c4f8 <_tx_mutex_put+0x228>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c4f0:	0011      	movs	r1, r2
 800c4f2:	0018      	movs	r0, r3
 800c4f4:	f7ff fe32 	bl	800c15c <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c4f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c4fc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c4fe:	b672      	cpsid	i
    return(primask_value);
 800c500:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800c502:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800c504:	4b32      	ldr	r3, [pc, #200]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	1e5a      	subs	r2, r3, #1
 800c50a:	4b31      	ldr	r3, [pc, #196]	; (800c5d0 <_tx_mutex_put+0x300>)
 800c50c:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	60da      	str	r2, [r3, #12]
 800c514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c516:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	f383 8810 	msr	PRIMASK, r3
}
 800c51e:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800c520:	f001 f9be 	bl	800d8a0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800c524:	2300      	movs	r3, #0
 800c526:	673b      	str	r3, [r7, #112]	; 0x70
 800c528:	e0b1      	b.n	800c68e <_tx_mutex_put+0x3be>
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d109      	bne.n	800c54c <_tx_mutex_put+0x27c>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	67bb      	str	r3, [r7, #120]	; 0x78

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800c53e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2220      	movs	r2, #32
 800c54a:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800c54c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c54e:	22a0      	movs	r2, #160	; 0xa0
 800c550:	589b      	ldr	r3, [r3, r2]
 800c552:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800c554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10a      	bne.n	800c570 <_tx_mutex_put+0x2a0>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800c55a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c55c:	21a4      	movs	r1, #164	; 0xa4
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	505a      	str	r2, [r3, r1]
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	631a      	str	r2, [r3, #48]	; 0x30
 800c56e:	e012      	b.n	800c596 <_tx_mutex_put+0x2c6>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800c570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c572:	22a4      	movs	r2, #164	; 0xa4
 800c574:	589b      	ldr	r3, [r3, r2]
 800c576:	66fb      	str	r3, [r7, #108]	; 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800c578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57c:	65fb      	str	r3, [r7, #92]	; 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800c57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800c584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c58e:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c594:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800c596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c59c:	21a0      	movs	r1, #160	; 0xa0
 800c59e:	505a      	str	r2, [r3, r1]

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5aa:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	69db      	ldr	r3, [r3, #28]
 800c5b0:	1e5a      	subs	r2, r3, #1
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	69db      	ldr	r3, [r3, #28]
 800c5ba:	657b      	str	r3, [r7, #84]	; 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800c5bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d108      	bne.n	800c5d4 <_tx_mutex_put+0x304>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	619a      	str	r2, [r3, #24]
 800c5c8:	e013      	b.n	800c5f2 <_tx_mutex_put+0x322>
 800c5ca:	46c0      	nop			; (mov r8, r8)
 800c5cc:	2000486c 	.word	0x2000486c
 800c5d0:	20004904 	.word	0x20004904
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800c5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d8:	653b      	str	r3, [r7, #80]	; 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5de:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800c5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5ea:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800c5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5f0:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c5f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c5f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5fa:	2284      	movs	r2, #132	; 0x84
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	5099      	str	r1, [r3, r2]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c600:	4b25      	ldr	r3, [pc, #148]	; (800c698 <_tx_mutex_put+0x3c8>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	4b24      	ldr	r3, [pc, #144]	; (800c698 <_tx_mutex_put+0x3c8>)
 800c608:	601a      	str	r2, [r3, #0]
 800c60a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c60c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f383 8810 	msr	PRIMASK, r3
}
 800c614:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d128      	bne.n	800c670 <_tx_mutex_put+0x3a0>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d019      	beq.n	800c65a <_tx_mutex_put+0x38a>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	0018      	movs	r0, r3
 800c62a:	f7ff fce9 	bl	800c000 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c62e:	f3ef 8310 	mrs	r3, PRIMASK
 800c632:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c634:	b672      	cpsid	i
    return(primask_value);
 800c636:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800c638:	67fb      	str	r3, [r7, #124]	; 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	64bb      	str	r3, [r7, #72]	; 0x48
                                    if (suspended_thread != TX_NULL)
 800c640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <_tx_mutex_put+0x37e>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800c646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	629a      	str	r2, [r3, #40]	; 0x28
 800c64e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c650:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f383 8810 	msr	PRIMASK, r3
}
 800c658:	46c0      	nop			; (mov r8, r8)

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800c65a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c660:	429a      	cmp	r2, r3
 800c662:	d005      	beq.n	800c670 <_tx_mutex_put+0x3a0>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800c664:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c668:	0011      	movs	r1, r2
 800c66a:	0018      	movs	r0, r3
 800c66c:	f7ff fd76 	bl	800c15c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800c670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c672:	0018      	movs	r0, r3
 800c674:	f001 f94c 	bl	800d910 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800c678:	2300      	movs	r3, #0
 800c67a:	673b      	str	r3, [r7, #112]	; 0x70
 800c67c:	e007      	b.n	800c68e <_tx_mutex_put+0x3be>
 800c67e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c680:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	f383 8810 	msr	PRIMASK, r3
}
 800c688:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800c68a:	231e      	movs	r3, #30
 800c68c:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Return the completion status.  */
    return(status);
 800c68e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800c690:	0018      	movs	r0, r3
 800c692:	46bd      	mov	sp, r7
 800c694:	b020      	add	sp, #128	; 0x80
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20004904 	.word	0x20004904

0800c69c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08c      	sub	sp, #48	; 0x30
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c6a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c6aa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c6ac:	b672      	cpsid	i
    return(primask_value);
 800c6ae:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800c6b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c6b6:	4b37      	ldr	r3, [pc, #220]	; (800c794 <_tx_queue_cleanup+0xf8>)
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d160      	bne.n	800c77e <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	22ac      	movs	r2, #172	; 0xac
 800c6c0:	589b      	ldr	r3, [r3, r2]
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d15a      	bne.n	800c77e <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6cc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d054      	beq.n	800c77e <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a2f      	ldr	r2, [pc, #188]	; (800c798 <_tx_queue_cleanup+0xfc>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d14f      	bne.n	800c77e <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d04b      	beq.n	800c77e <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f0:	1e5a      	subs	r2, r3, #1
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fa:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d103      	bne.n	800c70a <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	2200      	movs	r2, #0
 800c706:	629a      	str	r2, [r3, #40]	; 0x28
 800c708:	e013      	b.n	800c732 <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c714:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	69fa      	ldr	r2, [r7, #28]
 800c71a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	6a3a      	ldr	r2, [r7, #32]
 800c720:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d102      	bne.n	800c732 <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	6a3a      	ldr	r2, [r7, #32]
 800c730:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c736:	2b05      	cmp	r3, #5
 800c738:	d121      	bne.n	800c77e <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d004      	beq.n	800c74c <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2284      	movs	r2, #132	; 0x84
 800c746:	210b      	movs	r1, #11
 800c748:	5099      	str	r1, [r3, r2]
 800c74a:	e003      	b.n	800c754 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2284      	movs	r2, #132	; 0x84
 800c750:	210a      	movs	r1, #10
 800c752:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c754:	4b11      	ldr	r3, [pc, #68]	; (800c79c <_tx_queue_cleanup+0x100>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	4b10      	ldr	r3, [pc, #64]	; (800c79c <_tx_queue_cleanup+0x100>)
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	f383 8810 	msr	PRIMASK, r3
}
 800c768:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	0018      	movs	r0, r3
 800c76e:	f001 f8cf 	bl	800d910 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c772:	f3ef 8310 	mrs	r3, PRIMASK
 800c776:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c778:	b672      	cpsid	i
    return(primask_value);
 800c77a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c780:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f383 8810 	msr	PRIMASK, r3
}
 800c788:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c78a:	46c0      	nop			; (mov r8, r8)
 800c78c:	46bd      	mov	sp, r7
 800c78e:	b00c      	add	sp, #48	; 0x30
 800c790:	bd80      	pop	{r7, pc}
 800c792:	46c0      	nop			; (mov r8, r8)
 800c794:	0800c69d 	.word	0x0800c69d
 800c798:	51554555 	.word	0x51554555
 800c79c:	20004904 	.word	0x20004904

0800c7a0 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b090      	sub	sp, #64	; 0x40
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]
 800c7ac:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7b2:	2337      	movs	r3, #55	; 0x37
 800c7b4:	18fb      	adds	r3, r7, r3
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	2338      	movs	r3, #56	; 0x38
 800c7bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c7be:	2300      	movs	r3, #0
 800c7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7c2:	e009      	b.n	800c7d8 <_tx_queue_create+0x38>
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c7ca:	2237      	movs	r2, #55	; 0x37
 800c7cc:	18ba      	adds	r2, r7, r2
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d3f1      	bcc.n	800c7c4 <_tx_queue_create+0x24>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	0019      	movs	r1, r3
 800c7f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c7f4:	f7f3 fdc4 	bl	8000380 <__udivsi3>
 800c7f8:	0003      	movs	r3, r0
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	4353      	muls	r3, r2
 800c802:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	18d2      	adds	r2, r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c828:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82e:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c830:	f3ef 8310 	mrs	r3, PRIMASK
 800c834:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c836:	b672      	cpsid	i
    return(primask_value);
 800c838:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4a19      	ldr	r2, [pc, #100]	; (800c8a4 <_tx_queue_create+0x104>)
 800c840:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800c842:	4b19      	ldr	r3, [pc, #100]	; (800c8a8 <_tx_queue_create+0x108>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d109      	bne.n	800c85e <_tx_queue_create+0xbe>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800c84a:	4b18      	ldr	r3, [pc, #96]	; (800c8ac <_tx_queue_create+0x10c>)
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	601a      	str	r2, [r3, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	635a      	str	r2, [r3, #52]	; 0x34
 800c85c:	e011      	b.n	800c882 <_tx_queue_create+0xe2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800c85e:	4b13      	ldr	r3, [pc, #76]	; (800c8ac <_tx_queue_create+0x10c>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c868:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	69fa      	ldr	r2, [r7, #28]
 800c87a:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6a3a      	ldr	r2, [r7, #32]
 800c880:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800c882:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <_tx_queue_create+0x108>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	4b07      	ldr	r3, [pc, #28]	; (800c8a8 <_tx_queue_create+0x108>)
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	f383 8810 	msr	PRIMASK, r3
}
 800c896:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c898:	2300      	movs	r3, #0
}
 800c89a:	0018      	movs	r0, r3
 800c89c:	46bd      	mov	sp, r7
 800c89e:	b010      	add	sp, #64	; 0x40
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	46c0      	nop			; (mov r8, r8)
 800c8a4:	51554555 	.word	0x51554555
 800c8a8:	20004840 	.word	0x20004840
 800c8ac:	2000483c 	.word	0x2000483c

0800c8b0 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b094      	sub	sp, #80	; 0x50
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c8c0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8c4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c8c6:	b672      	cpsid	i
    return(primask_value);
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d100      	bne.n	800c8dc <_tx_queue_receive+0x2c>
 800c8da:	e137      	b.n	800cb4c <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d13c      	bne.n	800c95c <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c8f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8f4:	1d13      	adds	r3, r2, #4
 800c8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fa:	1d19      	adds	r1, r3, #4
 800c8fc:	64b9      	str	r1, [r7, #72]	; 0x48
 800c8fe:	6812      	ldr	r2, [r2, #0]
 800c900:	601a      	str	r2, [r3, #0]
 800c902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c904:	2b01      	cmp	r3, #1
 800c906:	d90e      	bls.n	800c926 <_tx_queue_receive+0x76>
 800c908:	e007      	b.n	800c91a <_tx_queue_receive+0x6a>
 800c90a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c90c:	1d13      	adds	r3, r2, #4
 800c90e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c912:	1d19      	adds	r1, r3, #4
 800c914:	64b9      	str	r1, [r7, #72]	; 0x48
 800c916:	6812      	ldr	r2, [r2, #0]
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c91c:	3b01      	subs	r3, #1
 800c91e:	647b      	str	r3, [r7, #68]	; 0x44
 800c920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1f1      	bne.n	800c90a <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d102      	bne.n	800c936 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c93a:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	695b      	ldr	r3, [r3, #20]
 800c940:	1c5a      	adds	r2, r3, #1
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	1e5a      	subs	r2, r3, #1
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	611a      	str	r2, [r3, #16]
 800c950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c952:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	f383 8810 	msr	PRIMASK, r3
}
 800c95a:	e166      	b.n	800cc2a <_tx_queue_receive+0x37a>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c960:	637b      	str	r3, [r7, #52]	; 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800c962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c964:	2280      	movs	r2, #128	; 0x80
 800c966:	589b      	ldr	r3, [r3, r2]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d154      	bne.n	800ca16 <_tx_queue_receive+0x166>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c970:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c97c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c97e:	1d13      	adds	r3, r2, #4
 800c980:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c984:	1d19      	adds	r1, r3, #4
 800c986:	64b9      	str	r1, [r7, #72]	; 0x48
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d90e      	bls.n	800c9b0 <_tx_queue_receive+0x100>
 800c992:	e007      	b.n	800c9a4 <_tx_queue_receive+0xf4>
 800c994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c996:	1d13      	adds	r3, r2, #4
 800c998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c99c:	1d19      	adds	r1, r3, #4
 800c99e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c9a0:	6812      	ldr	r2, [r2, #0]
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c9aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1f1      	bne.n	800c994 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d103      	bne.n	800c9c4 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	629a      	str	r2, [r3, #40]	; 0x28
 800c9c2:	e00e      	b.n	800c9e2 <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c8:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ce:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800c9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9da:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9e6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f0:	2284      	movs	r2, #132	; 0x84
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c9f6:	4b8f      	ldr	r3, [pc, #572]	; (800cc34 <_tx_queue_receive+0x384>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	4b8d      	ldr	r3, [pc, #564]	; (800cc34 <_tx_queue_receive+0x384>)
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca02:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	f383 8810 	msr	PRIMASK, r3
}
 800ca0a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	0018      	movs	r0, r3
 800ca10:	f000 ff7e 	bl	800d910 <_tx_thread_system_resume>
 800ca14:	e109      	b.n	800cc2a <_tx_queue_receive+0x37a>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800ca26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca28:	1d13      	adds	r3, r2, #4
 800ca2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca2e:	1d19      	adds	r1, r3, #4
 800ca30:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca32:	6812      	ldr	r2, [r2, #0]
 800ca34:	601a      	str	r2, [r3, #0]
 800ca36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d90e      	bls.n	800ca5a <_tx_queue_receive+0x1aa>
 800ca3c:	e007      	b.n	800ca4e <_tx_queue_receive+0x19e>
 800ca3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca40:	1d13      	adds	r3, r2, #4
 800ca42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca46:	1d19      	adds	r1, r3, #4
 800ca48:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca4a:	6812      	ldr	r2, [r2, #0]
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca50:	3b01      	subs	r3, #1
 800ca52:	647b      	str	r3, [r7, #68]	; 0x44
 800ca54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1f1      	bne.n	800ca3e <_tx_queue_receive+0x18e>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d102      	bne.n	800ca6a <_tx_queue_receive+0x1ba>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	699b      	ldr	r3, [r3, #24]
 800ca68:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca6e:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800ca70:	4b70      	ldr	r3, [pc, #448]	; (800cc34 <_tx_queue_receive+0x384>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	4b6f      	ldr	r3, [pc, #444]	; (800cc34 <_tx_queue_receive+0x384>)
 800ca78:	601a      	str	r2, [r3, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800ca7a:	4b6e      	ldr	r3, [pc, #440]	; (800cc34 <_tx_queue_receive+0x384>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	1e5a      	subs	r2, r3, #1
 800ca80:	4b6c      	ldr	r3, [pc, #432]	; (800cc34 <_tx_queue_receive+0x384>)
 800ca82:	601a      	str	r2, [r3, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800ca84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca88:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  queue_ptr -> tx_queue_write;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8e:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800ca96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca98:	1d13      	adds	r3, r2, #4
 800ca9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca9e:	1d19      	adds	r1, r3, #4
 800caa0:	64b9      	str	r1, [r7, #72]	; 0x48
 800caa2:	6812      	ldr	r2, [r2, #0]
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d90e      	bls.n	800caca <_tx_queue_receive+0x21a>
 800caac:	e007      	b.n	800cabe <_tx_queue_receive+0x20e>
 800caae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cab0:	1d13      	adds	r3, r2, #4
 800cab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cab6:	1d19      	adds	r1, r3, #4
 800cab8:	64b9      	str	r1, [r7, #72]	; 0x48
 800caba:	6812      	ldr	r2, [r2, #0]
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cac0:	3b01      	subs	r3, #1
 800cac2:	647b      	str	r3, [r7, #68]	; 0x44
 800cac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1f1      	bne.n	800caae <_tx_queue_receive+0x1fe>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	69db      	ldr	r3, [r3, #28]
 800cace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d102      	bne.n	800cada <_tx_queue_receive+0x22a>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cade:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	3b01      	subs	r3, #1
 800caea:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d103      	bne.n	800cafa <_tx_queue_receive+0x24a>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	629a      	str	r2, [r3, #40]	; 0x28
 800caf8:	e00e      	b.n	800cb18 <_tx_queue_receive+0x268>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800cafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafe:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb04:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800cb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb10:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb16:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb1c:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb20:	2200      	movs	r2, #0
 800cb22:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb26:	2284      	movs	r2, #132	; 0x84
 800cb28:	2100      	movs	r1, #0
 800cb2a:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800cb2c:	4b41      	ldr	r3, [pc, #260]	; (800cc34 <_tx_queue_receive+0x384>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	4b40      	ldr	r3, [pc, #256]	; (800cc34 <_tx_queue_receive+0x384>)
 800cb34:	601a      	str	r2, [r3, #0]
 800cb36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb38:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	f383 8810 	msr	PRIMASK, r3
}
 800cb40:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	0018      	movs	r0, r3
 800cb46:	f000 fee3 	bl	800d910 <_tx_thread_system_resume>
 800cb4a:	e06e      	b.n	800cc2a <_tx_queue_receive+0x37a>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d063      	beq.n	800cc1a <_tx_queue_receive+0x36a>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cb52:	4b38      	ldr	r3, [pc, #224]	; (800cc34 <_tx_queue_receive+0x384>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d008      	beq.n	800cb6c <_tx_queue_receive+0x2bc>
 800cb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	f383 8810 	msr	PRIMASK, r3
}
 800cb64:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800cb66:	230a      	movs	r3, #10
 800cb68:	643b      	str	r3, [r7, #64]	; 0x40
 800cb6a:	e05e      	b.n	800cc2a <_tx_queue_receive+0x37a>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cb6c:	4b32      	ldr	r3, [pc, #200]	; (800cc38 <_tx_queue_receive+0x388>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800cb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb74:	4a31      	ldr	r2, [pc, #196]	; (800cc3c <_tx_queue_receive+0x38c>)
 800cb76:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800cb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800cb7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800cb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb86:	2280      	movs	r2, #128	; 0x80
 800cb88:	2100      	movs	r1, #0
 800cb8a:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8e:	22ac      	movs	r2, #172	; 0xac
 800cb90:	589b      	ldr	r3, [r3, r2]
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb96:	21ac      	movs	r1, #172	; 0xac
 800cb98:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d109      	bne.n	800cbb4 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cba4:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800cba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbaa:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbb0:	675a      	str	r2, [r3, #116]	; 0x74
 800cbb2:	e011      	b.n	800cbd8 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb8:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800cbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbbe:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800cbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbca:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbd0:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbd6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	2205      	movs	r2, #5
 800cbe4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	2201      	movs	r2, #1
 800cbea:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cbf2:	4b10      	ldr	r3, [pc, #64]	; (800cc34 <_tx_queue_receive+0x384>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	4b0e      	ldr	r3, [pc, #56]	; (800cc34 <_tx_queue_receive+0x384>)
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbfe:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f383 8810 	msr	PRIMASK, r3
}
 800cc06:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0a:	0018      	movs	r0, r3
 800cc0c:	f000 ff80 	bl	800db10 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc12:	2284      	movs	r2, #132	; 0x84
 800cc14:	589b      	ldr	r3, [r3, r2]
 800cc16:	643b      	str	r3, [r7, #64]	; 0x40
 800cc18:	e007      	b.n	800cc2a <_tx_queue_receive+0x37a>
 800cc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc1c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	f383 8810 	msr	PRIMASK, r3
}
 800cc24:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800cc26:	230a      	movs	r3, #10
 800cc28:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800cc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	b014      	add	sp, #80	; 0x50
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20004904 	.word	0x20004904
 800cc38:	2000486c 	.word	0x2000486c
 800cc3c:	0800c69d 	.word	0x0800c69d

0800cc40 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b094      	sub	sp, #80	; 0x50
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800cc50:	f3ef 8310 	mrs	r3, PRIMASK
 800cc54:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800cc56:	b672      	cpsid	i
    return(primask_value);
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800cc5a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d100      	bne.n	800cc6c <_tx_queue_send+0x2c>
 800cc6a:	e09b      	b.n	800cda4 <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d13c      	bne.n	800ccec <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	695b      	ldr	r3, [r3, #20]
 800cc76:	1e5a      	subs	r2, r3, #1
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8e:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800cc96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc98:	1d13      	adds	r3, r2, #4
 800cc9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc9e:	1d19      	adds	r1, r3, #4
 800cca0:	64b9      	str	r1, [r7, #72]	; 0x48
 800cca2:	6812      	ldr	r2, [r2, #0]
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d90e      	bls.n	800ccca <_tx_queue_send+0x8a>
 800ccac:	e007      	b.n	800ccbe <_tx_queue_send+0x7e>
 800ccae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccb0:	1d13      	adds	r3, r2, #4
 800ccb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccb6:	1d19      	adds	r1, r3, #4
 800ccb8:	64b9      	str	r1, [r7, #72]	; 0x48
 800ccba:	6812      	ldr	r2, [r2, #0]
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	647b      	str	r3, [r7, #68]	; 0x44
 800ccc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1f1      	bne.n	800ccae <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d102      	bne.n	800ccda <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccde:	625a      	str	r2, [r3, #36]	; 0x24
 800cce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	f383 8810 	msr	PRIMASK, r3
}
 800ccea:	e0ca      	b.n	800ce82 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf0:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d103      	bne.n	800cd06 <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	629a      	str	r2, [r3, #40]	; 0x28
 800cd04:	e012      	b.n	800cd2c <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800cd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd12:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd18:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800cd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800cd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd24:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd30:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd34:	2200      	movs	r2, #0
 800cd36:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800cd3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd40:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800cd48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd4a:	1d13      	adds	r3, r2, #4
 800cd4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd50:	1d19      	adds	r1, r3, #4
 800cd52:	64b9      	str	r1, [r7, #72]	; 0x48
 800cd54:	6812      	ldr	r2, [r2, #0]
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d90e      	bls.n	800cd7c <_tx_queue_send+0x13c>
 800cd5e:	e007      	b.n	800cd70 <_tx_queue_send+0x130>
 800cd60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd62:	1d13      	adds	r3, r2, #4
 800cd64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd68:	1d19      	adds	r1, r3, #4
 800cd6a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cd6c:	6812      	ldr	r2, [r2, #0]
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd72:	3b01      	subs	r3, #1
 800cd74:	647b      	str	r3, [r7, #68]	; 0x44
 800cd76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1f1      	bne.n	800cd60 <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7e:	2284      	movs	r2, #132	; 0x84
 800cd80:	2100      	movs	r1, #0
 800cd82:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cd84:	4b41      	ldr	r3, [pc, #260]	; (800ce8c <_tx_queue_send+0x24c>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	4b40      	ldr	r3, [pc, #256]	; (800ce8c <_tx_queue_send+0x24c>)
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd90:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cd92:	6a3b      	ldr	r3, [r7, #32]
 800cd94:	f383 8810 	msr	PRIMASK, r3
}
 800cd98:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	0018      	movs	r0, r3
 800cd9e:	f000 fdb7 	bl	800d910 <_tx_thread_system_resume>
 800cda2:	e06e      	b.n	800ce82 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d063      	beq.n	800ce72 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cdaa:	4b38      	ldr	r3, [pc, #224]	; (800ce8c <_tx_queue_send+0x24c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d008      	beq.n	800cdc4 <_tx_queue_send+0x184>
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	f383 8810 	msr	PRIMASK, r3
}
 800cdbc:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800cdbe:	230b      	movs	r3, #11
 800cdc0:	643b      	str	r3, [r7, #64]	; 0x40
 800cdc2:	e05e      	b.n	800ce82 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cdc4:	4b32      	ldr	r3, [pc, #200]	; (800ce90 <_tx_queue_send+0x250>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	4a31      	ldr	r2, [pc, #196]	; (800ce94 <_tx_queue_send+0x254>)
 800cdce:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800cdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800cddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdde:	2280      	movs	r2, #128	; 0x80
 800cde0:	2100      	movs	r1, #0
 800cde2:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800cde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde6:	22ac      	movs	r2, #172	; 0xac
 800cde8:	589b      	ldr	r3, [r3, r2]
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdee:	21ac      	movs	r1, #172	; 0xac
 800cdf0:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d109      	bne.n	800ce0c <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdfc:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce02:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800ce04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce08:	675a      	str	r2, [r3, #116]	; 0x74
 800ce0a:	e011      	b.n	800ce30 <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce10:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce16:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ce1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce22:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce28:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce2e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800ce38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3a:	2205      	movs	r2, #5
 800ce3c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce40:	2201      	movs	r2, #1
 800ce42:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ce44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ce4a:	4b10      	ldr	r3, [pc, #64]	; (800ce8c <_tx_queue_send+0x24c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	1c5a      	adds	r2, r3, #1
 800ce50:	4b0e      	ldr	r3, [pc, #56]	; (800ce8c <_tx_queue_send+0x24c>)
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	f383 8810 	msr	PRIMASK, r3
}
 800ce5e:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ce60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce62:	0018      	movs	r0, r3
 800ce64:	f000 fe54 	bl	800db10 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ce68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6a:	2284      	movs	r2, #132	; 0x84
 800ce6c:	589b      	ldr	r3, [r3, r2]
 800ce6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce70:	e007      	b.n	800ce82 <_tx_queue_send+0x242>
 800ce72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce74:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	f383 8810 	msr	PRIMASK, r3
}
 800ce7c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800ce7e:	230b      	movs	r3, #11
 800ce80:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800ce82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800ce84:	0018      	movs	r0, r3
 800ce86:	46bd      	mov	sp, r7
 800ce88:	b014      	add	sp, #80	; 0x50
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	20004904 	.word	0x20004904
 800ce90:	2000486c 	.word	0x2000486c
 800ce94:	0800c69d 	.word	0x0800c69d

0800ce98 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08c      	sub	sp, #48	; 0x30
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800cea2:	f3ef 8310 	mrs	r3, PRIMASK
 800cea6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800cea8:	b672      	cpsid	i
    return(primask_value);
 800ceaa:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800ceac:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ceb2:	4b32      	ldr	r3, [pc, #200]	; (800cf7c <_tx_semaphore_cleanup+0xe4>)
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d157      	bne.n	800cf68 <_tx_semaphore_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	22ac      	movs	r2, #172	; 0xac
 800cebc:	589b      	ldr	r3, [r3, r2]
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d151      	bne.n	800cf68 <_tx_semaphore_cleanup+0xd0>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cec8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800ceca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d04b      	beq.n	800cf68 <_tx_semaphore_cleanup+0xd0>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800ced0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a2a      	ldr	r2, [pc, #168]	; (800cf80 <_tx_semaphore_cleanup+0xe8>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d146      	bne.n	800cf68 <_tx_semaphore_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d042      	beq.n	800cf68 <_tx_semaphore_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	1e5a      	subs	r2, r3, #1
 800ceee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800cef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d103      	bne.n	800cf06 <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	2200      	movs	r2, #0
 800cf02:	60da      	str	r2, [r3, #12]
 800cf04:	e013      	b.n	800cf2e <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf10:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	69fa      	ldr	r2, [r7, #28]
 800cf16:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	6a3a      	ldr	r2, [r7, #32]
 800cf1c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d102      	bne.n	800cf2e <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800cf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2a:	6a3a      	ldr	r2, [r7, #32]
 800cf2c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf32:	2b06      	cmp	r3, #6
 800cf34:	d118      	bne.n	800cf68 <_tx_semaphore_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2284      	movs	r2, #132	; 0x84
 800cf3a:	210d      	movs	r1, #13
 800cf3c:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800cf3e:	4b11      	ldr	r3, [pc, #68]	; (800cf84 <_tx_semaphore_cleanup+0xec>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	1c5a      	adds	r2, r3, #1
 800cf44:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <_tx_semaphore_cleanup+0xec>)
 800cf46:	601a      	str	r2, [r3, #0]
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	f383 8810 	msr	PRIMASK, r3
}
 800cf52:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	0018      	movs	r0, r3
 800cf58:	f000 fcda 	bl	800d910 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800cf5c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf60:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800cf62:	b672      	cpsid	i
    return(primask_value);
 800cf64:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800cf66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f383 8810 	msr	PRIMASK, r3
}
 800cf72:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800cf74:	46c0      	nop			; (mov r8, r8)
 800cf76:	46bd      	mov	sp, r7
 800cf78:	b00c      	add	sp, #48	; 0x30
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	0800ce99 	.word	0x0800ce99
 800cf80:	53454d41 	.word	0x53454d41
 800cf84:	20004904 	.word	0x20004904

0800cf88 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08e      	sub	sp, #56	; 0x38
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	637b      	str	r3, [r7, #52]	; 0x34
 800cf98:	232f      	movs	r3, #47	; 0x2f
 800cf9a:	18fb      	adds	r3, r7, r3
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	231c      	movs	r3, #28
 800cfa2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	633b      	str	r3, [r7, #48]	; 0x30
 800cfa8:	e009      	b.n	800cfbe <_tx_semaphore_create+0x36>
 800cfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	637a      	str	r2, [r7, #52]	; 0x34
 800cfb0:	222f      	movs	r2, #47	; 0x2f
 800cfb2:	18ba      	adds	r2, r7, r2
 800cfb4:	7812      	ldrb	r2, [r2, #0]
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfba:	3301      	adds	r3, #1
 800cfbc:	633b      	str	r3, [r7, #48]	; 0x30
 800cfbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d3f1      	bcc.n	800cfaa <_tx_semaphore_create+0x22>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800cfd2:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800cfd8:	b672      	cpsid	i
    return(primask_value);
 800cfda:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	4a18      	ldr	r2, [pc, #96]	; (800d044 <_tx_semaphore_create+0xbc>)
 800cfe2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800cfe4:	4b18      	ldr	r3, [pc, #96]	; (800d048 <_tx_semaphore_create+0xc0>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d109      	bne.n	800d000 <_tx_semaphore_create+0x78>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800cfec:	4b17      	ldr	r3, [pc, #92]	; (800d04c <_tx_semaphore_create+0xc4>)
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	601a      	str	r2, [r3, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	68fa      	ldr	r2, [r7, #12]
 800cffc:	619a      	str	r2, [r3, #24]
 800cffe:	e011      	b.n	800d024 <_tx_semaphore_create+0x9c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800d000:	4b12      	ldr	r3, [pc, #72]	; (800d04c <_tx_semaphore_create+0xc4>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6a3a      	ldr	r2, [r7, #32]
 800d022:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800d024:	4b08      	ldr	r3, [pc, #32]	; (800d048 <_tx_semaphore_create+0xc0>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	1c5a      	adds	r2, r3, #1
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <_tx_semaphore_create+0xc0>)
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f383 8810 	msr	PRIMASK, r3
}
 800d038:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	0018      	movs	r0, r3
 800d03e:	46bd      	mov	sp, r7
 800d040:	b00e      	add	sp, #56	; 0x38
 800d042:	bd80      	pop	{r7, pc}
 800d044:	53454d41 	.word	0x53454d41
 800d048:	20004838 	.word	0x20004838
 800d04c:	20004834 	.word	0x20004834

0800d050 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08e      	sub	sp, #56	; 0x38
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d058:	f3ef 8310 	mrs	r3, PRIMASK
 800d05c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d05e:	b672      	cpsid	i
    return(primask_value);
 800d060:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800d062:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800d06a:	4b3c      	ldr	r3, [pc, #240]	; (800d15c <_tx_semaphore_delete+0x10c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	1e5a      	subs	r2, r3, #1
 800d070:	4b3a      	ldr	r3, [pc, #232]	; (800d15c <_tx_semaphore_delete+0x10c>)
 800d072:	601a      	str	r2, [r3, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800d074:	4b39      	ldr	r3, [pc, #228]	; (800d15c <_tx_semaphore_delete+0x10c>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d103      	bne.n	800d084 <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800d07c:	4b38      	ldr	r3, [pc, #224]	; (800d160 <_tx_semaphore_delete+0x110>)
 800d07e:	2200      	movs	r2, #0
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	e013      	b.n	800d0ac <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	695b      	ldr	r3, [r3, #20]
 800d088:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	627b      	str	r3, [r7, #36]	; 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d094:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d09a:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800d09c:	4b30      	ldr	r3, [pc, #192]	; (800d160 <_tx_semaphore_delete+0x110>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d102      	bne.n	800d0ac <_tx_semaphore_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 800d0a6:	4b2e      	ldr	r3, [pc, #184]	; (800d160 <_tx_semaphore_delete+0x110>)
 800d0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0aa:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d0ac:	4b2d      	ldr	r3, [pc, #180]	; (800d164 <_tx_semaphore_delete+0x114>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	1c5a      	adds	r2, r3, #1
 800d0b2:	4b2c      	ldr	r3, [pc, #176]	; (800d164 <_tx_semaphore_delete+0x114>)
 800d0b4:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	637b      	str	r3, [r7, #52]	; 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	691b      	ldr	r3, [r3, #16]
 800d0c6:	633b      	str	r3, [r7, #48]	; 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	611a      	str	r2, [r3, #16]
 800d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	f383 8810 	msr	PRIMASK, r3
}
 800d0d8:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800d0da:	e023      	b.n	800d124 <_tx_semaphore_delete+0xd4>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d0e2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d0e8:	b672      	cpsid	i
    return(primask_value);
 800d0ea:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 800d0ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800d0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f6:	2284      	movs	r2, #132	; 0x84
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800d0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d100:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800d102:	4b18      	ldr	r3, [pc, #96]	; (800d164 <_tx_semaphore_delete+0x114>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	1c5a      	adds	r2, r3, #1
 800d108:	4b16      	ldr	r3, [pc, #88]	; (800d164 <_tx_semaphore_delete+0x114>)
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	f383 8810 	msr	PRIMASK, r3
}
 800d116:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	0018      	movs	r0, r3
 800d11c:	f000 fbf8 	bl	800d910 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1d8      	bne.n	800d0dc <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d12a:	f3ef 8310 	mrs	r3, PRIMASK
 800d12e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d130:	b672      	cpsid	i
    return(primask_value);
 800d132:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800d134:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800d136:	4b0b      	ldr	r3, [pc, #44]	; (800d164 <_tx_semaphore_delete+0x114>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	1e5a      	subs	r2, r3, #1
 800d13c:	4b09      	ldr	r3, [pc, #36]	; (800d164 <_tx_semaphore_delete+0x114>)
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f383 8810 	msr	PRIMASK, r3
}
 800d14a:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800d14c:	f000 fba8 	bl	800d8a0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d150:	2300      	movs	r3, #0
}
 800d152:	0018      	movs	r0, r3
 800d154:	46bd      	mov	sp, r7
 800d156:	b00e      	add	sp, #56	; 0x38
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	46c0      	nop			; (mov r8, r8)
 800d15c:	20004838 	.word	0x20004838
 800d160:	20004834 	.word	0x20004834
 800d164:	20004904 	.word	0x20004904

0800d168 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b08c      	sub	sp, #48	; 0x30
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800d172:	2300      	movs	r3, #0
 800d174:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d176:	f3ef 8310 	mrs	r3, PRIMASK
 800d17a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d17c:	b672      	cpsid	i
    return(primask_value);
 800d17e:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800d180:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00a      	beq.n	800d1a0 <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	1e5a      	subs	r2, r3, #1
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	609a      	str	r2, [r3, #8]
 800d194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d196:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f383 8810 	msr	PRIMASK, r3
}
 800d19e:	e069      	b.n	800d274 <_tx_semaphore_get+0x10c>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d05e      	beq.n	800d264 <_tx_semaphore_get+0xfc>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d1a6:	4b36      	ldr	r3, [pc, #216]	; (800d280 <_tx_semaphore_get+0x118>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d008      	beq.n	800d1c0 <_tx_semaphore_get+0x58>
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	f383 8810 	msr	PRIMASK, r3
}
 800d1b8:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800d1ba:	230d      	movs	r3, #13
 800d1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1be:	e059      	b.n	800d274 <_tx_semaphore_get+0x10c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d1c0:	4b30      	ldr	r3, [pc, #192]	; (800d284 <_tx_semaphore_get+0x11c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	4a2f      	ldr	r2, [pc, #188]	; (800d288 <_tx_semaphore_get+0x120>)
 800d1ca:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	22ac      	movs	r2, #172	; 0xac
 800d1d6:	589b      	ldr	r3, [r3, r2]
 800d1d8:	1c5a      	adds	r2, r3, #1
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	21ac      	movs	r1, #172	; 0xac
 800d1de:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d109      	bne.n	800d1fc <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ec:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1f2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1f8:	675a      	str	r2, [r3, #116]	; 0x74
 800d1fa:	e011      	b.n	800d220 <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d204:	6a3a      	ldr	r2, [r7, #32]
 800d206:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d20c:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	69fa      	ldr	r2, [r7, #28]
 800d212:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d218:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d21e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	2206      	movs	r2, #6
 800d22e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	2201      	movs	r2, #1
 800d234:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d23c:	4b10      	ldr	r3, [pc, #64]	; (800d280 <_tx_semaphore_get+0x118>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	4b0f      	ldr	r3, [pc, #60]	; (800d280 <_tx_semaphore_get+0x118>)
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f383 8810 	msr	PRIMASK, r3
}
 800d250:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	0018      	movs	r0, r3
 800d256:	f000 fc5b 	bl	800db10 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25c:	2284      	movs	r2, #132	; 0x84
 800d25e:	589b      	ldr	r3, [r3, r2]
 800d260:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d262:	e007      	b.n	800d274 <_tx_semaphore_get+0x10c>
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	f383 8810 	msr	PRIMASK, r3
}
 800d26e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800d270:	230d      	movs	r3, #13
 800d272:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Return completion status.  */
    return(status);
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d276:	0018      	movs	r0, r3
 800d278:	46bd      	mov	sp, r7
 800d27a:	b00c      	add	sp, #48	; 0x30
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	46c0      	nop			; (mov r8, r8)
 800d280:	20004904 	.word	0x20004904
 800d284:	2000486c 	.word	0x2000486c
 800d288:	0800ce99 	.word	0x0800ce99

0800d28c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08a      	sub	sp, #40	; 0x28
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d294:	f3ef 8310 	mrs	r3, PRIMASK
 800d298:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d29a:	b672      	cpsid	i
    return(primask_value);
 800d29c:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800d29e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	609a      	str	r2, [r3, #8]
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f383 8810 	msr	PRIMASK, r3
}
 800d2c0:	e034      	b.n	800d32c <_tx_semaphore_put+0xa0>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800d2c8:	6a3b      	ldr	r3, [r7, #32]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d103      	bne.n	800d2dc <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	60da      	str	r2, [r3, #12]
 800d2da:	e00e      	b.n	800d2fa <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2e0:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	69ba      	ldr	r2, [r7, #24]
 800d2e6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ec:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	697a      	ldr	r2, [r7, #20]
 800d2f2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	69ba      	ldr	r2, [r7, #24]
 800d2f8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a3a      	ldr	r2, [r7, #32]
 800d2fe:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	2200      	movs	r2, #0
 800d304:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	2284      	movs	r2, #132	; 0x84
 800d30a:	2100      	movs	r1, #0
 800d30c:	5099      	str	r1, [r3, r2]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d30e:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <_tx_semaphore_put+0xac>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	4b08      	ldr	r3, [pc, #32]	; (800d338 <_tx_semaphore_put+0xac>)
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	f383 8810 	msr	PRIMASK, r3
}
 800d322:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	0018      	movs	r0, r3
 800d328:	f000 faf2 	bl	800d910 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	0018      	movs	r0, r3
 800d330:	46bd      	mov	sp, r7
 800d332:	b00a      	add	sp, #40	; 0x28
 800d334:	bd80      	pop	{r7, pc}
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	20004904 	.word	0x20004904

0800d33c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b098      	sub	sp, #96	; 0x60
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800d34a:	2300      	movs	r3, #0
 800d34c:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800d34e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d350:	657b      	str	r3, [r7, #84]	; 0x54
 800d352:	2347      	movs	r3, #71	; 0x47
 800d354:	18fb      	adds	r3, r7, r3
 800d356:	22ef      	movs	r2, #239	; 0xef
 800d358:	701a      	strb	r2, [r3, #0]
 800d35a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d35c:	643b      	str	r3, [r7, #64]	; 0x40
 800d35e:	2300      	movs	r3, #0
 800d360:	653b      	str	r3, [r7, #80]	; 0x50
 800d362:	e009      	b.n	800d378 <_tx_thread_create+0x3c>
 800d364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	657a      	str	r2, [r7, #84]	; 0x54
 800d36a:	2247      	movs	r2, #71	; 0x47
 800d36c:	18ba      	adds	r2, r7, r2
 800d36e:	7812      	ldrb	r2, [r2, #0]
 800d370:	701a      	strb	r2, [r3, #0]
 800d372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d374:	3301      	adds	r3, #1
 800d376:	653b      	str	r3, [r7, #80]	; 0x50
 800d378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d3f1      	bcc.n	800d364 <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d384:	233f      	movs	r3, #63	; 0x3f
 800d386:	18fb      	adds	r3, r7, r3
 800d388:	2200      	movs	r2, #0
 800d38a:	701a      	strb	r2, [r3, #0]
 800d38c:	23b0      	movs	r3, #176	; 0xb0
 800d38e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d390:	2300      	movs	r3, #0
 800d392:	64bb      	str	r3, [r7, #72]	; 0x48
 800d394:	e009      	b.n	800d3aa <_tx_thread_create+0x6e>
 800d396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d398:	1c5a      	adds	r2, r3, #1
 800d39a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d39c:	223f      	movs	r2, #63	; 0x3f
 800d39e:	18ba      	adds	r2, r7, r2
 800d3a0:	7812      	ldrb	r2, [r2, #0]
 800d3a2:	701a      	strb	r2, [r3, #0]
 800d3a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d3f1      	bcc.n	800d396 <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3c8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3ce:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3d4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2194      	movs	r1, #148	; 0x94
 800d3da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3dc:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3e2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3e8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	229c      	movs	r2, #156	; 0x9c
 800d3ee:	2120      	movs	r1, #32
 800d3f0:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d3f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3f4:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800d3f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3fc:	18d3      	adds	r3, r2, r3
 800d3fe:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d404:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800d406:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d007      	beq.n	800d41e <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2298      	movs	r2, #152	; 0x98
 800d418:	2100      	movs	r1, #0
 800d41a:	5099      	str	r1, [r3, r2]
 800d41c:	e006      	b.n	800d42c <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d422:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2198      	movs	r1, #152	; 0x98
 800d428:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d42a:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2203      	movs	r2, #3
 800d430:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4a48      	ldr	r2, [pc, #288]	; (800d558 <_tx_thread_create+0x21c>)
 800d436:	655a      	str	r2, [r3, #84]	; 0x54
 800d438:	68fa      	ldr	r2, [r7, #12]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800d43e:	4a47      	ldr	r2, [pc, #284]	; (800d55c <_tx_thread_create+0x220>)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	0011      	movs	r1, r2
 800d444:	0018      	movs	r0, r3
 800d446:	f7f2 ff0b 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d44a:	f3ef 8310 	mrs	r3, PRIMASK
 800d44e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d450:	b672      	cpsid	i
    return(primask_value);
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800d454:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	4a41      	ldr	r2, [pc, #260]	; (800d560 <_tx_thread_create+0x224>)
 800d45a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800d45c:	4b41      	ldr	r3, [pc, #260]	; (800d564 <_tx_thread_create+0x228>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d10b      	bne.n	800d47c <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800d464:	4b40      	ldr	r3, [pc, #256]	; (800d568 <_tx_thread_create+0x22c>)
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2188      	movs	r1, #136	; 0x88
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	218c      	movs	r1, #140	; 0x8c
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	505a      	str	r2, [r3, r1]
 800d47a:	e016      	b.n	800d4aa <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800d47c:	4b3a      	ldr	r3, [pc, #232]	; (800d568 <_tx_thread_create+0x22c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 800d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d484:	228c      	movs	r2, #140	; 0x8c
 800d486:	589b      	ldr	r3, [r3, r2]
 800d488:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	218c      	movs	r1, #140	; 0x8c
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	2188      	movs	r1, #136	; 0x88
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	218c      	movs	r1, #140	; 0x8c
 800d49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a0:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2188      	movs	r1, #136	; 0x88
 800d4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4a8:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800d4aa:	4b2e      	ldr	r3, [pc, #184]	; (800d564 <_tx_thread_create+0x228>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	4b2c      	ldr	r3, [pc, #176]	; (800d564 <_tx_thread_create+0x228>)
 800d4b2:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d4b4:	4b2d      	ldr	r3, [pc, #180]	; (800d56c <_tx_thread_create+0x230>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	1c5a      	adds	r2, r3, #1
 800d4ba:	4b2c      	ldr	r3, [pc, #176]	; (800d56c <_tx_thread_create+0x230>)
 800d4bc:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800d4be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d12a      	bne.n	800d51a <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d4c4:	f3ef 8305 	mrs	r3, IPSR
 800d4c8:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 800d4ca:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d4cc:	4b28      	ldr	r3, [pc, #160]	; (800d570 <_tx_thread_create+0x234>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	4a28      	ldr	r2, [pc, #160]	; (800d574 <_tx_thread_create+0x238>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d90d      	bls.n	800d4f4 <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d4d8:	4b27      	ldr	r3, [pc, #156]	; (800d578 <_tx_thread_create+0x23c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d009      	beq.n	800d4f8 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d4e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e8:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d4ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4f0:	63da      	str	r2, [r3, #60]	; 0x3c
 800d4f2:	e001      	b.n	800d4f8 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	f383 8810 	msr	PRIMASK, r3
}
 800d502:	46c0      	nop			; (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	0018      	movs	r0, r3
 800d508:	f000 fa02 	bl	800d910 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d50c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d01c      	beq.n	800d54c <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d516:	63da      	str	r2, [r3, #60]	; 0x3c
 800d518:	e018      	b.n	800d54c <_tx_thread_create+0x210>
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	f383 8810 	msr	PRIMASK, r3
}
 800d524:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d526:	f3ef 8310 	mrs	r3, PRIMASK
 800d52a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d52c:	b672      	cpsid	i
    return(primask_value);
 800d52e:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800d530:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800d532:	4b0e      	ldr	r3, [pc, #56]	; (800d56c <_tx_thread_create+0x230>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	1e5a      	subs	r2, r3, #1
 800d538:	4b0c      	ldr	r3, [pc, #48]	; (800d56c <_tx_thread_create+0x230>)
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	f383 8810 	msr	PRIMASK, r3
}
 800d546:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d548:	f000 f9aa 	bl	800d8a0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	0018      	movs	r0, r3
 800d550:	46bd      	mov	sp, r7
 800d552:	b018      	add	sp, #96	; 0x60
 800d554:	bd80      	pop	{r7, pc}
 800d556:	46c0      	nop			; (mov r8, r8)
 800d558:	0800debd 	.word	0x0800debd
 800d55c:	0800d729 	.word	0x0800d729
 800d560:	54485244 	.word	0x54485244
 800d564:	20004878 	.word	0x20004878
 800d568:	20004874 	.word	0x20004874
 800d56c:	20004904 	.word	0x20004904
 800d570:	2000000c 	.word	0x2000000c
 800d574:	f0f0f0ef 	.word	0xf0f0f0ef
 800d578:	20004870 	.word	0x20004870

0800d57c <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d582:	f3ef 8310 	mrs	r3, PRIMASK
 800d586:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d588:	b672      	cpsid	i
    return(primask_value);
 800d58a:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d58c:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d58e:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <_tx_thread_identify+0x30>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60bb      	str	r3, [r7, #8]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f383 8810 	msr	PRIMASK, r3
}
 800d59e:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800d5a0:	68bb      	ldr	r3, [r7, #8]
}
 800d5a2:	0018      	movs	r0, r3
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	b004      	add	sp, #16
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	46c0      	nop			; (mov r8, r8)
 800d5ac:	2000486c 	.word	0x2000486c

0800d5b0 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b088      	sub	sp, #32
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
 800d5bc:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d5be:	f3ef 8310 	mrs	r3, PRIMASK
 800d5c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d5c4:	b672      	cpsid	i
    return(primask_value);
 800d5c6:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800d5c8:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d003      	beq.n	800d5d8 <_tx_thread_info_get+0x28>
    {

        *name =  thread_ptr -> tx_thread_name;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <_tx_thread_info_get+0x36>
    {

        *state =  thread_ptr -> tx_thread_state;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <_tx_thread_info_get+0x44>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d004      	beq.n	800d604 <_tx_thread_info_get+0x54>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2294      	movs	r2, #148	; 0x94
 800d5fe:	589a      	ldr	r2, [r3, r2]
 800d600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d602:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <_tx_thread_info_get+0x64>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2298      	movs	r2, #152	; 0x98
 800d60e:	589a      	ldr	r2, [r3, r2]
 800d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d612:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	2b00      	cmp	r3, #0
 800d618:	d003      	beq.n	800d622 <_tx_thread_info_get+0x72>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	699a      	ldr	r2, [r3, #24]
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	2b00      	cmp	r3, #0
 800d626:	d004      	beq.n	800d632 <_tx_thread_info_get+0x82>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2288      	movs	r2, #136	; 0x88
 800d62c:	589a      	ldr	r2, [r3, r2]
 800d62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d630:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	2b00      	cmp	r3, #0
 800d636:	d003      	beq.n	800d640 <_tx_thread_info_get+0x90>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f383 8810 	msr	PRIMASK, r3
}
 800d64a:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	0018      	movs	r0, r3
 800d650:	46bd      	mov	sp, r7
 800d652:	b008      	add	sp, #32
 800d654:	bd80      	pop	{r7, pc}
	...

0800d658 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b088      	sub	sp, #32
 800d65c:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d65e:	4b28      	ldr	r3, [pc, #160]	; (800d700 <_tx_thread_initialize+0xa8>)
 800d660:	2200      	movs	r2, #0
 800d662:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800d664:	4b27      	ldr	r3, [pc, #156]	; (800d704 <_tx_thread_initialize+0xac>)
 800d666:	2200      	movs	r2, #0
 800d668:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800d66a:	4b27      	ldr	r3, [pc, #156]	; (800d708 <_tx_thread_initialize+0xb0>)
 800d66c:	61fb      	str	r3, [r7, #28]
 800d66e:	230f      	movs	r3, #15
 800d670:	18fb      	adds	r3, r7, r3
 800d672:	2200      	movs	r2, #0
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	2304      	movs	r3, #4
 800d678:	60bb      	str	r3, [r7, #8]
 800d67a:	2300      	movs	r3, #0
 800d67c:	61bb      	str	r3, [r7, #24]
 800d67e:	e009      	b.n	800d694 <_tx_thread_initialize+0x3c>
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	61fa      	str	r2, [r7, #28]
 800d686:	220f      	movs	r2, #15
 800d688:	18ba      	adds	r2, r7, r2
 800d68a:	7812      	ldrb	r2, [r2, #0]
 800d68c:	701a      	strb	r2, [r3, #0]
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	3301      	adds	r3, #1
 800d692:	61bb      	str	r3, [r7, #24]
 800d694:	69ba      	ldr	r2, [r7, #24]
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d3f1      	bcc.n	800d680 <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d69c:	4b1b      	ldr	r3, [pc, #108]	; (800d70c <_tx_thread_initialize+0xb4>)
 800d69e:	2220      	movs	r2, #32
 800d6a0:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d6a2:	4b1b      	ldr	r3, [pc, #108]	; (800d710 <_tx_thread_initialize+0xb8>)
 800d6a4:	617b      	str	r3, [r7, #20]
 800d6a6:	1dfb      	adds	r3, r7, #7
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	701a      	strb	r2, [r3, #0]
 800d6ac:	2380      	movs	r3, #128	; 0x80
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	613b      	str	r3, [r7, #16]
 800d6b4:	e008      	b.n	800d6c8 <_tx_thread_initialize+0x70>
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	1c5a      	adds	r2, r3, #1
 800d6ba:	617a      	str	r2, [r7, #20]
 800d6bc:	1dfa      	adds	r2, r7, #7
 800d6be:	7812      	ldrb	r2, [r2, #0]
 800d6c0:	701a      	strb	r2, [r3, #0]
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	613b      	str	r3, [r7, #16]
 800d6c8:	693a      	ldr	r2, [r7, #16]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d3f2      	bcc.n	800d6b6 <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800d6d0:	4b10      	ldr	r3, [pc, #64]	; (800d714 <_tx_thread_initialize+0xbc>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800d6d6:	4b10      	ldr	r3, [pc, #64]	; (800d718 <_tx_thread_initialize+0xc0>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d6dc:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <_tx_thread_initialize+0xc4>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800d6e2:	4b0f      	ldr	r3, [pc, #60]	; (800d720 <_tx_thread_initialize+0xc8>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800d6e8:	4b0e      	ldr	r3, [pc, #56]	; (800d724 <_tx_thread_initialize+0xcc>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2285      	movs	r2, #133	; 0x85
 800d6ee:	0452      	lsls	r2, r2, #17
 800d6f0:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 800d6f2:	4b0c      	ldr	r3, [pc, #48]	; (800d724 <_tx_thread_initialize+0xcc>)
 800d6f4:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800d6f6:	46c0      	nop			; (mov r8, r8)
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	b008      	add	sp, #32
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	46c0      	nop			; (mov r8, r8)
 800d700:	2000486c 	.word	0x2000486c
 800d704:	20004870 	.word	0x20004870
 800d708:	2000487c 	.word	0x2000487c
 800d70c:	20004880 	.word	0x20004880
 800d710:	20004884 	.word	0x20004884
 800d714:	20004874 	.word	0x20004874
 800d718:	20004878 	.word	0x20004878
 800d71c:	20004904 	.word	0x20004904
 800d720:	20004908 	.word	0x20004908
 800d724:	2000490c 	.word	0x2000490c

0800d728 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d72e:	4b1a      	ldr	r3, [pc, #104]	; (800d798 <_tx_thread_shell_entry+0x70>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d73c:	0018      	movs	r0, r3
 800d73e:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d740:	4b16      	ldr	r3, [pc, #88]	; (800d79c <_tx_thread_shell_entry+0x74>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d004      	beq.n	800d752 <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d748:	4b14      	ldr	r3, [pc, #80]	; (800d79c <_tx_thread_shell_entry+0x74>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	0010      	movs	r0, r2
 800d750:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d752:	f3ef 8310 	mrs	r3, PRIMASK
 800d756:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d758:	b672      	cpsid	i
    return(primask_value);
 800d75a:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d75c:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2201      	movs	r2, #1
 800d762:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2201      	movs	r2, #1
 800d768:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d770:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <_tx_thread_shell_entry+0x78>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	4b0a      	ldr	r3, [pc, #40]	; (800d7a0 <_tx_thread_shell_entry+0x78>)
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f383 8810 	msr	PRIMASK, r3
}
 800d784:	46c0      	nop			; (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	0018      	movs	r0, r3
 800d78a:	f000 f9c1 	bl	800db10 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d78e:	46c0      	nop			; (mov r8, r8)
 800d790:	46bd      	mov	sp, r7
 800d792:	b004      	add	sp, #16
 800d794:	bd80      	pop	{r7, pc}
 800d796:	46c0      	nop			; (mov r8, r8)
 800d798:	2000486c 	.word	0x2000486c
 800d79c:	20004908 	.word	0x20004908
 800d7a0:	20004904 	.word	0x20004904

0800d7a4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b08e      	sub	sp, #56	; 0x38
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d7b0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d7b2:	b672      	cpsid	i
    return(primask_value);
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d7b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d7b8:	4b35      	ldr	r3, [pc, #212]	; (800d890 <_tx_thread_sleep+0xec>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d108      	bne.n	800d7d6 <_tx_thread_sleep+0x32>
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	f383 8810 	msr	PRIMASK, r3
}
 800d7ce:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d7d0:	2313      	movs	r3, #19
 800d7d2:	637b      	str	r3, [r7, #52]	; 0x34
 800d7d4:	e056      	b.n	800d884 <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7d6:	f3ef 8305 	mrs	r3, IPSR
 800d7da:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 800d7dc:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d7de:	4b2d      	ldr	r3, [pc, #180]	; (800d894 <_tx_thread_sleep+0xf0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	d008      	beq.n	800d7f8 <_tx_thread_sleep+0x54>
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	f383 8810 	msr	PRIMASK, r3
}
 800d7f0:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d7f2:	2313      	movs	r3, #19
 800d7f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d7f6:	e045      	b.n	800d884 <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7fa:	4b27      	ldr	r3, [pc, #156]	; (800d898 <_tx_thread_sleep+0xf4>)
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d108      	bne.n	800d812 <_tx_thread_sleep+0x6e>
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	f383 8810 	msr	PRIMASK, r3
}
 800d80a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d80c:	2313      	movs	r3, #19
 800d80e:	637b      	str	r3, [r7, #52]	; 0x34
 800d810:	e038      	b.n	800d884 <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d108      	bne.n	800d82a <_tx_thread_sleep+0x86>
 800d818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	f383 8810 	msr	PRIMASK, r3
}
 800d822:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d824:	2300      	movs	r3, #0
 800d826:	637b      	str	r3, [r7, #52]	; 0x34
 800d828:	e02c      	b.n	800d884 <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d82a:	4b1c      	ldr	r3, [pc, #112]	; (800d89c <_tx_thread_sleep+0xf8>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d008      	beq.n	800d844 <_tx_thread_sleep+0xa0>
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	f383 8810 	msr	PRIMASK, r3
}
 800d83c:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d83e:	2313      	movs	r3, #19
 800d840:	637b      	str	r3, [r7, #52]	; 0x34
 800d842:	e01f      	b.n	800d884 <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	2204      	movs	r2, #4
 800d848:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	2201      	movs	r2, #1
 800d84e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d852:	2284      	movs	r2, #132	; 0x84
 800d854:	2100      	movs	r1, #0
 800d856:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d85e:	4b0f      	ldr	r3, [pc, #60]	; (800d89c <_tx_thread_sleep+0xf8>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	4b0d      	ldr	r3, [pc, #52]	; (800d89c <_tx_thread_sleep+0xf8>)
 800d866:	601a      	str	r2, [r3, #0]
 800d868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f383 8810 	msr	PRIMASK, r3
}
 800d872:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	0018      	movs	r0, r3
 800d878:	f000 f94a 	bl	800db10 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	2284      	movs	r2, #132	; 0x84
 800d880:	589b      	ldr	r3, [r3, r2]
 800d882:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800d884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d886:	0018      	movs	r0, r3
 800d888:	46bd      	mov	sp, r7
 800d88a:	b00e      	add	sp, #56	; 0x38
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	46c0      	nop			; (mov r8, r8)
 800d890:	2000486c 	.word	0x2000486c
 800d894:	2000000c 	.word	0x2000000c
 800d898:	200049b4 	.word	0x200049b4
 800d89c:	20004904 	.word	0x20004904

0800d8a0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b088      	sub	sp, #32
 800d8a4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d8a6:	4b16      	ldr	r3, [pc, #88]	; (800d900 <_tx_thread_system_preempt_check+0x60>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d121      	bne.n	800d8f6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d8b2:	4b14      	ldr	r3, [pc, #80]	; (800d904 <_tx_thread_system_preempt_check+0x64>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d8b8:	4b13      	ldr	r3, [pc, #76]	; (800d908 <_tx_thread_system_preempt_check+0x68>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d8be:	69ba      	ldr	r2, [r7, #24]
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d017      	beq.n	800d8f6 <_tx_thread_system_preempt_check+0x56>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d8c6:	4b11      	ldr	r3, [pc, #68]	; (800d90c <_tx_thread_system_preempt_check+0x6c>)
 800d8c8:	2280      	movs	r2, #128	; 0x80
 800d8ca:	0552      	lsls	r2, r2, #21
 800d8cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8ce:	f3ef 8305 	mrs	r3, IPSR
 800d8d2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d8d4:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10c      	bne.n	800d8f4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d8da:	f3ef 8310 	mrs	r3, PRIMASK
 800d8de:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 800d8e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800d8e4:	b662      	cpsie	i
}
 800d8e6:	46c0      	nop			; (mov r8, r8)
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f383 8810 	msr	PRIMASK, r3
}
 800d8f2:	46c0      	nop			; (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 800d8f4:	46c0      	nop			; (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d8f6:	46c0      	nop			; (mov r8, r8)
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	b008      	add	sp, #32
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	46c0      	nop			; (mov r8, r8)
 800d900:	20004904 	.word	0x20004904
 800d904:	2000486c 	.word	0x2000486c
 800d908:	20004870 	.word	0x20004870
 800d90c:	e000ed04 	.word	0xe000ed04

0800d910 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b096      	sub	sp, #88	; 0x58
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d918:	f3ef 8310 	mrs	r3, PRIMASK
 800d91c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d91e:	b672      	cpsid	i
    return(primask_value);
 800d920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d922:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d005      	beq.n	800d938 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	334c      	adds	r3, #76	; 0x4c
 800d930:	0018      	movs	r0, r3
 800d932:	f000 fc1f 	bl	800e174 <_tx_timer_system_deactivate>
 800d936:	e002      	b.n	800d93e <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d93e:	4b6d      	ldr	r3, [pc, #436]	; (800daf4 <_tx_thread_system_resume+0x1e4>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	1e5a      	subs	r2, r3, #1
 800d944:	4b6b      	ldr	r3, [pc, #428]	; (800daf4 <_tx_thread_system_resume+0x1e4>)
 800d946:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d000      	beq.n	800d952 <_tx_thread_system_resume+0x42>
 800d950:	e084      	b.n	800da5c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d956:	2b00      	cmp	r3, #0
 800d958:	d100      	bne.n	800d95c <_tx_thread_system_resume+0x4c>
 800d95a:	e098      	b.n	800da8e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d960:	2b00      	cmp	r3, #0
 800d962:	d000      	beq.n	800d966 <_tx_thread_system_resume+0x56>
 800d964:	e073      	b.n	800da4e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d972:	4b61      	ldr	r3, [pc, #388]	; (800daf8 <_tx_thread_system_resume+0x1e8>)
 800d974:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d976:	0092      	lsls	r2, r2, #2
 800d978:	58d3      	ldr	r3, [r2, r3]
 800d97a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800d97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d155      	bne.n	800da2e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d982:	4b5d      	ldr	r3, [pc, #372]	; (800daf8 <_tx_thread_system_resume+0x1e8>)
 800d984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d986:	0092      	lsls	r2, r2, #2
 800d988:	6879      	ldr	r1, [r7, #4]
 800d98a:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d998:	2201      	movs	r2, #1
 800d99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d99c:	409a      	lsls	r2, r3
 800d99e:	0013      	movs	r3, r2
 800d9a0:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d9a2:	4b56      	ldr	r3, [pc, #344]	; (800dafc <_tx_thread_system_resume+0x1ec>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a8:	431a      	orrs	r2, r3
 800d9aa:	4b54      	ldr	r3, [pc, #336]	; (800dafc <_tx_thread_system_resume+0x1ec>)
 800d9ac:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d9ae:	4b54      	ldr	r3, [pc, #336]	; (800db00 <_tx_thread_system_resume+0x1f0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d26a      	bcs.n	800da8e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d9b8:	4b51      	ldr	r3, [pc, #324]	; (800db00 <_tx_thread_system_resume+0x1f0>)
 800d9ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9bc:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d9be:	4b51      	ldr	r3, [pc, #324]	; (800db04 <_tx_thread_system_resume+0x1f4>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d103      	bne.n	800d9d2 <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d9ca:	4b4e      	ldr	r3, [pc, #312]	; (800db04 <_tx_thread_system_resume+0x1f4>)
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	e05d      	b.n	800da8e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d258      	bcs.n	800da8e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d9dc:	4b49      	ldr	r3, [pc, #292]	; (800db04 <_tx_thread_system_resume+0x1f4>)
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	601a      	str	r2, [r3, #0]
 800d9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9e4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	f383 8810 	msr	PRIMASK, r3
}
 800d9ec:	46c0      	nop			; (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d9ee:	4b41      	ldr	r3, [pc, #260]	; (800daf4 <_tx_thread_system_resume+0x1e4>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800d9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d000      	beq.n	800d9fc <_tx_thread_system_resume+0xec>
 800d9fa:	e074      	b.n	800dae6 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d9fc:	4b42      	ldr	r3, [pc, #264]	; (800db08 <_tx_thread_system_resume+0x1f8>)
 800d9fe:	2280      	movs	r2, #128	; 0x80
 800da00:	0552      	lsls	r2, r2, #21
 800da02:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800da04:	f3ef 8305 	mrs	r3, IPSR
 800da08:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10c      	bne.n	800da2a <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800da10:	f3ef 8310 	mrs	r3, PRIMASK
 800da14:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
 800da18:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800da1a:	b662      	cpsie	i
}
 800da1c:	46c0      	nop			; (mov r8, r8)
 800da1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da20:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	f383 8810 	msr	PRIMASK, r3
}
 800da28:	46c0      	nop			; (mov r8, r8)
}
 800da2a:	46c0      	nop			; (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800da2c:	e05b      	b.n	800dae6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800da2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da32:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800da34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800da3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da44:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da4a:	621a      	str	r2, [r3, #32]
 800da4c:	e01f      	b.n	800da8e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2203      	movs	r2, #3
 800da58:	631a      	str	r2, [r3, #48]	; 0x30
 800da5a:	e018      	b.n	800da8e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da60:	2b01      	cmp	r3, #1
 800da62:	d014      	beq.n	800da8e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da68:	2b02      	cmp	r3, #2
 800da6a:	d010      	beq.n	800da8e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da70:	2b00      	cmp	r3, #0
 800da72:	d106      	bne.n	800da82 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	631a      	str	r2, [r3, #48]	; 0x30
 800da80:	e005      	b.n	800da8e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2203      	movs	r2, #3
 800da8c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800da8e:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <_tx_thread_system_resume+0x1fc>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	63bb      	str	r3, [r7, #56]	; 0x38
 800da94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da96:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	f383 8810 	msr	PRIMASK, r3
}
 800da9e:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800daa0:	4b18      	ldr	r3, [pc, #96]	; (800db04 <_tx_thread_system_resume+0x1f4>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d020      	beq.n	800daec <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800daaa:	4b12      	ldr	r3, [pc, #72]	; (800daf4 <_tx_thread_system_resume+0x1e4>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800dab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d11a      	bne.n	800daec <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dab6:	4b14      	ldr	r3, [pc, #80]	; (800db08 <_tx_thread_system_resume+0x1f8>)
 800dab8:	2280      	movs	r2, #128	; 0x80
 800daba:	0552      	lsls	r2, r2, #21
 800dabc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dabe:	f3ef 8305 	mrs	r3, IPSR
 800dac2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dac4:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10f      	bne.n	800daea <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800daca:	f3ef 8310 	mrs	r3, PRIMASK
 800dace:	617b      	str	r3, [r7, #20]
    return(primask_value);
 800dad0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 800dad2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800dad4:	b662      	cpsie	i
}
 800dad6:	46c0      	nop			; (mov r8, r8)
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f383 8810 	msr	PRIMASK, r3
}
 800dae2:	46c0      	nop			; (mov r8, r8)
}
 800dae4:	e001      	b.n	800daea <_tx_thread_system_resume+0x1da>
                                return;
 800dae6:	46c0      	nop			; (mov r8, r8)
 800dae8:	e000      	b.n	800daec <_tx_thread_system_resume+0x1dc>
 800daea:	46c0      	nop			; (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800daec:	46bd      	mov	sp, r7
 800daee:	b016      	add	sp, #88	; 0x58
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	46c0      	nop			; (mov r8, r8)
 800daf4:	20004904 	.word	0x20004904
 800daf8:	20004884 	.word	0x20004884
 800dafc:	2000487c 	.word	0x2000487c
 800db00:	20004880 	.word	0x20004880
 800db04:	20004870 	.word	0x20004870
 800db08:	e000ed04 	.word	0xe000ed04
 800db0c:	2000486c 	.word	0x2000486c

0800db10 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b09c      	sub	sp, #112	; 0x70
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800db18:	4bb9      	ldr	r3, [pc, #740]	; (800de00 <_tx_thread_system_suspend+0x2f0>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800db1e:	f3ef 8310 	mrs	r3, PRIMASK
 800db22:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 800db24:	b672      	cpsid	i
    return(primask_value);
 800db26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800db28:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db2e:	429a      	cmp	r2, r3
 800db30:	d111      	bne.n	800db56 <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db36:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800db38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d007      	beq.n	800db4e <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800db3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db40:	3301      	adds	r3, #1
 800db42:	d004      	beq.n	800db4e <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	334c      	adds	r3, #76	; 0x4c
 800db48:	0018      	movs	r0, r3
 800db4a:	f000 fab5 	bl	800e0b8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	69da      	ldr	r2, [r3, #28]
 800db52:	4bac      	ldr	r3, [pc, #688]	; (800de04 <_tx_thread_system_suspend+0x2f4>)
 800db54:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800db56:	4bac      	ldr	r3, [pc, #688]	; (800de08 <_tx_thread_system_suspend+0x2f8>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	1e5a      	subs	r2, r3, #1
 800db5c:	4baa      	ldr	r3, [pc, #680]	; (800de08 <_tx_thread_system_suspend+0x2f8>)
 800db5e:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db64:	2b01      	cmp	r3, #1
 800db66:	d000      	beq.n	800db6a <_tx_thread_system_suspend+0x5a>
 800db68:	e118      	b.n	800dd9c <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db74:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a1b      	ldr	r3, [r3, #32]
 800db7a:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800db7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	429a      	cmp	r2, r3
 800db82:	d016      	beq.n	800dbb2 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db88:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800db8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db8e:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800db90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db94:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800db96:	4b9d      	ldr	r3, [pc, #628]	; (800de0c <_tx_thread_system_suspend+0x2fc>)
 800db98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db9a:	0092      	lsls	r2, r2, #2
 800db9c:	58d3      	ldr	r3, [r2, r3]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d000      	beq.n	800dba6 <_tx_thread_system_suspend+0x96>
 800dba4:	e0c9      	b.n	800dd3a <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800dba6:	4b99      	ldr	r3, [pc, #612]	; (800de0c <_tx_thread_system_suspend+0x2fc>)
 800dba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbaa:	0092      	lsls	r2, r2, #2
 800dbac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dbae:	50d1      	str	r1, [r2, r3]
 800dbb0:	e0c3      	b.n	800dd3a <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800dbb2:	4b96      	ldr	r3, [pc, #600]	; (800de0c <_tx_thread_system_suspend+0x2fc>)
 800dbb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbb6:	0092      	lsls	r2, r2, #2
 800dbb8:	2100      	movs	r1, #0
 800dbba:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbc0:	409a      	lsls	r2, r3
 800dbc2:	0013      	movs	r3, r2
 800dbc4:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800dbc6:	4b92      	ldr	r3, [pc, #584]	; (800de10 <_tx_thread_system_suspend+0x300>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbcc:	43d2      	mvns	r2, r2
 800dbce:	401a      	ands	r2, r3
 800dbd0:	4b8f      	ldr	r3, [pc, #572]	; (800de10 <_tx_thread_system_suspend+0x300>)
 800dbd2:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	653b      	str	r3, [r7, #80]	; 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800dbd8:	4b8d      	ldr	r3, [pc, #564]	; (800de10 <_tx_thread_system_suspend+0x300>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800dbde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d12b      	bne.n	800dc3c <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dbe4:	4b8b      	ldr	r3, [pc, #556]	; (800de14 <_tx_thread_system_suspend+0x304>)
 800dbe6:	2220      	movs	r2, #32
 800dbe8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800dbea:	4b8b      	ldr	r3, [pc, #556]	; (800de18 <_tx_thread_system_suspend+0x308>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbf2:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dbf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf6:	f383 8810 	msr	PRIMASK, r3
}
 800dbfa:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dbfc:	4b82      	ldr	r3, [pc, #520]	; (800de08 <_tx_thread_system_suspend+0x2f8>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (combined_flags == ((ULONG) 0))
 800dc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d000      	beq.n	800dc0a <_tx_thread_system_suspend+0xfa>
 800dc08:	e0f2      	b.n	800ddf0 <_tx_thread_system_suspend+0x2e0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dc0a:	4b84      	ldr	r3, [pc, #528]	; (800de1c <_tx_thread_system_suspend+0x30c>)
 800dc0c:	2280      	movs	r2, #128	; 0x80
 800dc0e:	0552      	lsls	r2, r2, #21
 800dc10:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc12:	f3ef 8305 	mrs	r3, IPSR
 800dc16:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(ipsr_value);
 800dc18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    if (__get_ipsr_value() == 0)
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10c      	bne.n	800dc38 <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dc1e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc22:	63bb      	str	r3, [r7, #56]	; 0x38
    return(primask_value);
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        interrupt_save = __get_primask_value();
 800dc26:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800dc28:	b662      	cpsie	i
}
 800dc2a:	46c0      	nop			; (mov r8, r8)
 800dc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	f383 8810 	msr	PRIMASK, r3
}
 800dc36:	46c0      	nop			; (mov r8, r8)
}
 800dc38:	46c0      	nop			; (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800dc3a:	e0d9      	b.n	800ddf0 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc42:	425a      	negs	r2, r3
 800dc44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc46:	4013      	ands	r3, r2
 800dc48:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc4c:	2b0f      	cmp	r3, #15
 800dc4e:	d80e      	bhi.n	800dc6e <_tx_thread_system_suspend+0x15e>
 800dc50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc52:	2b03      	cmp	r3, #3
 800dc54:	d905      	bls.n	800dc62 <_tx_thread_system_suspend+0x152>
 800dc56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc58:	089b      	lsrs	r3, r3, #2
 800dc5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc5e:	3302      	adds	r3, #2
 800dc60:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc64:	085b      	lsrs	r3, r3, #1
 800dc66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc68:	18d3      	adds	r3, r2, r3
 800dc6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc6c:	e060      	b.n	800dd30 <_tx_thread_system_suspend+0x220>
 800dc6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc70:	2bff      	cmp	r3, #255	; 0xff
 800dc72:	d814      	bhi.n	800dc9e <_tx_thread_system_suspend+0x18e>
 800dc74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc76:	091b      	lsrs	r3, r3, #4
 800dc78:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc7c:	3304      	adds	r3, #4
 800dc7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d905      	bls.n	800dc92 <_tx_thread_system_suspend+0x182>
 800dc86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc88:	089b      	lsrs	r3, r3, #2
 800dc8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc8e:	3302      	adds	r3, #2
 800dc90:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc94:	085b      	lsrs	r3, r3, #1
 800dc96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc98:	18d3      	adds	r3, r2, r3
 800dc9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc9c:	e048      	b.n	800dd30 <_tx_thread_system_suspend+0x220>
 800dc9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dca0:	2380      	movs	r3, #128	; 0x80
 800dca2:	025b      	lsls	r3, r3, #9
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d21d      	bcs.n	800dce4 <_tx_thread_system_suspend+0x1d4>
 800dca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcaa:	0a1b      	lsrs	r3, r3, #8
 800dcac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcb6:	2b0f      	cmp	r3, #15
 800dcb8:	d905      	bls.n	800dcc6 <_tx_thread_system_suspend+0x1b6>
 800dcba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcbc:	091b      	lsrs	r3, r3, #4
 800dcbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcc8:	2b03      	cmp	r3, #3
 800dcca:	d905      	bls.n	800dcd8 <_tx_thread_system_suspend+0x1c8>
 800dccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcce:	089b      	lsrs	r3, r3, #2
 800dcd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcd4:	3302      	adds	r3, #2
 800dcd6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcda:	085b      	lsrs	r3, r3, #1
 800dcdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dcde:	18d3      	adds	r3, r2, r3
 800dce0:	66bb      	str	r3, [r7, #104]	; 0x68
 800dce2:	e025      	b.n	800dd30 <_tx_thread_system_suspend+0x220>
 800dce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce6:	0c1b      	lsrs	r3, r3, #16
 800dce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcec:	3310      	adds	r3, #16
 800dcee:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcf2:	2bff      	cmp	r3, #255	; 0xff
 800dcf4:	d905      	bls.n	800dd02 <_tx_thread_system_suspend+0x1f2>
 800dcf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcf8:	0a1b      	lsrs	r3, r3, #8
 800dcfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcfe:	3308      	adds	r3, #8
 800dd00:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd04:	2b0f      	cmp	r3, #15
 800dd06:	d905      	bls.n	800dd14 <_tx_thread_system_suspend+0x204>
 800dd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd0a:	091b      	lsrs	r3, r3, #4
 800dd0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd10:	3304      	adds	r3, #4
 800dd12:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d905      	bls.n	800dd26 <_tx_thread_system_suspend+0x216>
 800dd1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd1c:	089b      	lsrs	r3, r3, #2
 800dd1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd22:	3302      	adds	r3, #2
 800dd24:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd28:	085b      	lsrs	r3, r3, #1
 800dd2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd2c:	18d3      	adds	r3, r2, r3
 800dd2e:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800dd30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd34:	18d2      	adds	r2, r2, r3
 800dd36:	4b37      	ldr	r3, [pc, #220]	; (800de14 <_tx_thread_system_suspend+0x304>)
 800dd38:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800dd3a:	4b37      	ldr	r3, [pc, #220]	; (800de18 <_tx_thread_system_suspend+0x308>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d12b      	bne.n	800dd9c <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dd44:	4b33      	ldr	r3, [pc, #204]	; (800de14 <_tx_thread_system_suspend+0x304>)
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	4b30      	ldr	r3, [pc, #192]	; (800de0c <_tx_thread_system_suspend+0x2fc>)
 800dd4a:	0092      	lsls	r2, r2, #2
 800dd4c:	58d2      	ldr	r2, [r2, r3]
 800dd4e:	4b32      	ldr	r3, [pc, #200]	; (800de18 <_tx_thread_system_suspend+0x308>)
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd54:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd58:	f383 8810 	msr	PRIMASK, r3
}
 800dd5c:	46c0      	nop			; (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dd5e:	4b2a      	ldr	r3, [pc, #168]	; (800de08 <_tx_thread_system_suspend+0x2f8>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (combined_flags == ((ULONG) 0))
 800dd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d144      	bne.n	800ddf4 <_tx_thread_system_suspend+0x2e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dd6a:	4b2c      	ldr	r3, [pc, #176]	; (800de1c <_tx_thread_system_suspend+0x30c>)
 800dd6c:	2280      	movs	r2, #128	; 0x80
 800dd6e:	0552      	lsls	r2, r2, #21
 800dd70:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dd72:	f3ef 8305 	mrs	r3, IPSR
 800dd76:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10c      	bne.n	800dd98 <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dd7e:	f3ef 8310 	mrs	r3, PRIMASK
 800dd82:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 800dd86:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800dd88:	b662      	cpsie	i
}
 800dd8a:	46c0      	nop			; (mov r8, r8)
 800dd8c:	6a3b      	ldr	r3, [r7, #32]
 800dd8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f383 8810 	msr	PRIMASK, r3
}
 800dd96:	46c0      	nop			; (mov r8, r8)
}
 800dd98:	46c0      	nop			; (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800dd9a:	e02b      	b.n	800ddf4 <_tx_thread_system_suspend+0x2e4>
 800dd9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd9e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	f383 8810 	msr	PRIMASK, r3
}
 800dda6:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800dda8:	4b1b      	ldr	r3, [pc, #108]	; (800de18 <_tx_thread_system_suspend+0x308>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d022      	beq.n	800ddf8 <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ddb2:	4b15      	ldr	r3, [pc, #84]	; (800de08 <_tx_thread_system_suspend+0x2f8>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (combined_flags == ((ULONG) 0))
 800ddb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d11c      	bne.n	800ddf8 <_tx_thread_system_suspend+0x2e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ddbe:	4b17      	ldr	r3, [pc, #92]	; (800de1c <_tx_thread_system_suspend+0x30c>)
 800ddc0:	2280      	movs	r2, #128	; 0x80
 800ddc2:	0552      	lsls	r2, r2, #21
 800ddc4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddc6:	f3ef 8305 	mrs	r3, IPSR
 800ddca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ddcc:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10c      	bne.n	800ddec <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ddd2:	f3ef 8310 	mrs	r3, PRIMASK
 800ddd6:	613b      	str	r3, [r7, #16]
    return(primask_value);
 800ddd8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 800ddda:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800dddc:	b662      	cpsie	i
}
 800ddde:	46c0      	nop			; (mov r8, r8)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	f383 8810 	msr	PRIMASK, r3
}
 800ddea:	46c0      	nop			; (mov r8, r8)
}
 800ddec:	46c0      	nop			; (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800ddee:	e003      	b.n	800ddf8 <_tx_thread_system_suspend+0x2e8>
                return;
 800ddf0:	46c0      	nop			; (mov r8, r8)
 800ddf2:	e002      	b.n	800ddfa <_tx_thread_system_suspend+0x2ea>
            return;
 800ddf4:	46c0      	nop			; (mov r8, r8)
 800ddf6:	e000      	b.n	800ddfa <_tx_thread_system_suspend+0x2ea>
    return;
 800ddf8:	46c0      	nop			; (mov r8, r8)
}
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	b01c      	add	sp, #112	; 0x70
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	2000486c 	.word	0x2000486c
 800de04:	20004e70 	.word	0x20004e70
 800de08:	20004904 	.word	0x20004904
 800de0c:	20004884 	.word	0x20004884
 800de10:	2000487c 	.word	0x2000487c
 800de14:	20004880 	.word	0x20004880
 800de18:	20004870 	.word	0x20004870
 800de1c:	e000ed04 	.word	0xe000ed04

0800de20 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800de26:	4b1f      	ldr	r3, [pc, #124]	; (800dea4 <_tx_thread_time_slice+0x84>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800de2c:	f3ef 8310 	mrs	r3, PRIMASK
 800de30:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800de32:	b672      	cpsid	i
    return(primask_value);
 800de34:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800de36:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800de38:	4b1b      	ldr	r3, [pc, #108]	; (800dea8 <_tx_thread_time_slice+0x88>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d024      	beq.n	800de8e <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d120      	bne.n	800de8e <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	69da      	ldr	r2, [r3, #28]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	699a      	ldr	r2, [r3, #24]
 800de58:	4b14      	ldr	r3, [pc, #80]	; (800deac <_tx_thread_time_slice+0x8c>)
 800de5a:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	429a      	cmp	r2, r3
 800de64:	d013      	beq.n	800de8e <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6e:	429a      	cmp	r2, r3
 800de70:	d10d      	bne.n	800de8e <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6a19      	ldr	r1, [r3, #32]
 800de7a:	4b0d      	ldr	r3, [pc, #52]	; (800deb0 <_tx_thread_time_slice+0x90>)
 800de7c:	0092      	lsls	r2, r2, #2
 800de7e:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800de80:	4b0c      	ldr	r3, [pc, #48]	; (800deb4 <_tx_thread_time_slice+0x94>)
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <_tx_thread_time_slice+0x90>)
 800de86:	0092      	lsls	r2, r2, #2
 800de88:	58d2      	ldr	r2, [r2, r3]
 800de8a:	4b0b      	ldr	r3, [pc, #44]	; (800deb8 <_tx_thread_time_slice+0x98>)
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	f383 8810 	msr	PRIMASK, r3
}
 800de98:	46c0      	nop			; (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800de9a:	46c0      	nop			; (mov r8, r8)
 800de9c:	46bd      	mov	sp, r7
 800de9e:	b004      	add	sp, #16
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	46c0      	nop			; (mov r8, r8)
 800dea4:	2000486c 	.word	0x2000486c
 800dea8:	20004914 	.word	0x20004914
 800deac:	20004e70 	.word	0x20004e70
 800deb0:	20004884 	.word	0x20004884
 800deb4:	20004880 	.word	0x20004880
 800deb8:	20004870 	.word	0x20004870

0800debc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08a      	sub	sp, #40	; 0x28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dec8:	f3ef 8310 	mrs	r3, PRIMASK
 800decc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dece:	b672      	cpsid	i
    return(primask_value);
 800ded0:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 800ded2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded8:	2b04      	cmp	r3, #4
 800deda:	d10f      	bne.n	800defc <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800dedc:	4b14      	ldr	r3, [pc, #80]	; (800df30 <_tx_thread_timeout+0x74>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	1c5a      	adds	r2, r3, #1
 800dee2:	4b13      	ldr	r3, [pc, #76]	; (800df30 <_tx_thread_timeout+0x74>)
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	6a3b      	ldr	r3, [r7, #32]
 800dee8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	f383 8810 	msr	PRIMASK, r3
}
 800def0:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800def2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def4:	0018      	movs	r0, r3
 800def6:	f7ff fd0b 	bl	800d910 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800defa:	e014      	b.n	800df26 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df00:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	22ac      	movs	r2, #172	; 0xac
 800df06:	589b      	ldr	r3, [r3, r2]
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f383 8810 	msr	PRIMASK, r3
}
 800df14:	46c0      	nop			; (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800df1c:	69b9      	ldr	r1, [r7, #24]
 800df1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	0010      	movs	r0, r2
 800df24:	4798      	blx	r3
}
 800df26:	46c0      	nop			; (mov r8, r8)
 800df28:	46bd      	mov	sp, r7
 800df2a:	b00a      	add	sp, #40	; 0x28
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	46c0      	nop			; (mov r8, r8)
 800df30:	20004904 	.word	0x20004904

0800df34 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800df3a:	f3ef 8310 	mrs	r3, PRIMASK
 800df3e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800df40:	b672      	cpsid	i
    return(primask_value);
 800df42:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800df44:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800df46:	4b09      	ldr	r3, [pc, #36]	; (800df6c <_tx_timer_expiration_process+0x38>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	4b07      	ldr	r3, [pc, #28]	; (800df6c <_tx_timer_expiration_process+0x38>)
 800df4e:	601a      	str	r2, [r3, #0]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	f383 8810 	msr	PRIMASK, r3
}
 800df5a:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800df5c:	4b04      	ldr	r3, [pc, #16]	; (800df70 <_tx_timer_expiration_process+0x3c>)
 800df5e:	0018      	movs	r0, r3
 800df60:	f7ff fcd6 	bl	800d910 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800df64:	46c0      	nop			; (mov r8, r8)
 800df66:	46bd      	mov	sp, r7
 800df68:	b004      	add	sp, #16
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20004904 	.word	0x20004904
 800df70:	200049b4 	.word	0x200049b4

0800df74 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800df74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df76:	46ce      	mov	lr, r9
 800df78:	4647      	mov	r7, r8
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b08d      	sub	sp, #52	; 0x34
 800df7e:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800df80:	4b39      	ldr	r3, [pc, #228]	; (800e068 <_tx_timer_initialize+0xf4>)
 800df82:	2200      	movs	r2, #0
 800df84:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800df86:	4b39      	ldr	r3, [pc, #228]	; (800e06c <_tx_timer_initialize+0xf8>)
 800df88:	2200      	movs	r2, #0
 800df8a:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800df8c:	4b38      	ldr	r3, [pc, #224]	; (800e070 <_tx_timer_initialize+0xfc>)
 800df8e:	2200      	movs	r2, #0
 800df90:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800df92:	4b38      	ldr	r3, [pc, #224]	; (800e074 <_tx_timer_initialize+0x100>)
 800df94:	2200      	movs	r2, #0
 800df96:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800df98:	4b37      	ldr	r3, [pc, #220]	; (800e078 <_tx_timer_initialize+0x104>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800df9e:	4b37      	ldr	r3, [pc, #220]	; (800e07c <_tx_timer_initialize+0x108>)
 800dfa0:	617b      	str	r3, [r7, #20]
 800dfa2:	230f      	movs	r3, #15
 800dfa4:	18fb      	adds	r3, r7, r3
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	701a      	strb	r2, [r3, #0]
 800dfaa:	2380      	movs	r3, #128	; 0x80
 800dfac:	60bb      	str	r3, [r7, #8]
 800dfae:	2300      	movs	r3, #0
 800dfb0:	613b      	str	r3, [r7, #16]
 800dfb2:	e009      	b.n	800dfc8 <_tx_timer_initialize+0x54>
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	1c5a      	adds	r2, r3, #1
 800dfb8:	617a      	str	r2, [r7, #20]
 800dfba:	220f      	movs	r2, #15
 800dfbc:	18ba      	adds	r2, r7, r2
 800dfbe:	7812      	ldrb	r2, [r2, #0]
 800dfc0:	701a      	strb	r2, [r3, #0]
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	613b      	str	r3, [r7, #16]
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d3f1      	bcc.n	800dfb4 <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800dfd0:	4b2b      	ldr	r3, [pc, #172]	; (800e080 <_tx_timer_initialize+0x10c>)
 800dfd2:	4a2a      	ldr	r2, [pc, #168]	; (800e07c <_tx_timer_initialize+0x108>)
 800dfd4:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800dfd6:	4b2b      	ldr	r3, [pc, #172]	; (800e084 <_tx_timer_initialize+0x110>)
 800dfd8:	4a28      	ldr	r2, [pc, #160]	; (800e07c <_tx_timer_initialize+0x108>)
 800dfda:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800dfdc:	4b2a      	ldr	r3, [pc, #168]	; (800e088 <_tx_timer_initialize+0x114>)
 800dfde:	4a2b      	ldr	r2, [pc, #172]	; (800e08c <_tx_timer_initialize+0x118>)
 800dfe0:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800dfe2:	4b29      	ldr	r3, [pc, #164]	; (800e088 <_tx_timer_initialize+0x114>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	1d1a      	adds	r2, r3, #4
 800dfe8:	4b27      	ldr	r3, [pc, #156]	; (800e088 <_tx_timer_initialize+0x114>)
 800dfea:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800dfec:	4b28      	ldr	r3, [pc, #160]	; (800e090 <_tx_timer_initialize+0x11c>)
 800dfee:	4a29      	ldr	r2, [pc, #164]	; (800e094 <_tx_timer_initialize+0x120>)
 800dff0:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800dff2:	4b29      	ldr	r3, [pc, #164]	; (800e098 <_tx_timer_initialize+0x124>)
 800dff4:	2280      	movs	r2, #128	; 0x80
 800dff6:	00d2      	lsls	r2, r2, #3
 800dff8:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800dffa:	4b28      	ldr	r3, [pc, #160]	; (800e09c <_tx_timer_initialize+0x128>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800e000:	4b23      	ldr	r3, [pc, #140]	; (800e090 <_tx_timer_initialize+0x11c>)
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	4b24      	ldr	r3, [pc, #144]	; (800e098 <_tx_timer_initialize+0x124>)
 800e006:	6819      	ldr	r1, [r3, #0]
 800e008:	4b24      	ldr	r3, [pc, #144]	; (800e09c <_tx_timer_initialize+0x128>)
 800e00a:	6818      	ldr	r0, [r3, #0]
 800e00c:	4b23      	ldr	r3, [pc, #140]	; (800e09c <_tx_timer_initialize+0x128>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4699      	mov	r9, r3
 800e012:	4c23      	ldr	r4, [pc, #140]	; (800e0a0 <_tx_timer_initialize+0x12c>)
 800e014:	46a0      	mov	r8, r4
 800e016:	4e23      	ldr	r6, [pc, #140]	; (800e0a4 <_tx_timer_initialize+0x130>)
 800e018:	4d23      	ldr	r5, [pc, #140]	; (800e0a8 <_tx_timer_initialize+0x134>)
 800e01a:	4c24      	ldr	r4, [pc, #144]	; (800e0ac <_tx_timer_initialize+0x138>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	469c      	mov	ip, r3
 800e020:	4663      	mov	r3, ip
 800e022:	9305      	str	r3, [sp, #20]
 800e024:	2300      	movs	r3, #0
 800e026:	469c      	mov	ip, r3
 800e028:	4663      	mov	r3, ip
 800e02a:	9304      	str	r3, [sp, #16]
 800e02c:	464b      	mov	r3, r9
 800e02e:	9303      	str	r3, [sp, #12]
 800e030:	9002      	str	r0, [sp, #8]
 800e032:	9101      	str	r1, [sp, #4]
 800e034:	9200      	str	r2, [sp, #0]
 800e036:	4643      	mov	r3, r8
 800e038:	0032      	movs	r2, r6
 800e03a:	0029      	movs	r1, r5
 800e03c:	0020      	movs	r0, r4
 800e03e:	f7ff f97d 	bl	800d33c <_tx_thread_create>
 800e042:	0003      	movs	r3, r0
 800e044:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1d9      	bne.n	800e000 <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800e04c:	4b18      	ldr	r3, [pc, #96]	; (800e0b0 <_tx_timer_initialize+0x13c>)
 800e04e:	2200      	movs	r2, #0
 800e050:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800e052:	4b18      	ldr	r3, [pc, #96]	; (800e0b4 <_tx_timer_initialize+0x140>)
 800e054:	2200      	movs	r2, #0
 800e056:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800e058:	46c0      	nop			; (mov r8, r8)
 800e05a:	46bd      	mov	sp, r7
 800e05c:	b007      	add	sp, #28
 800e05e:	bcc0      	pop	{r6, r7}
 800e060:	46b9      	mov	r9, r7
 800e062:	46b0      	mov	r8, r6
 800e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e066:	46c0      	nop			; (mov r8, r8)
 800e068:	20004910 	.word	0x20004910
 800e06c:	20004e70 	.word	0x20004e70
 800e070:	20004914 	.word	0x20004914
 800e074:	200049a4 	.word	0x200049a4
 800e078:	200049b0 	.word	0x200049b0
 800e07c:	20004918 	.word	0x20004918
 800e080:	20004998 	.word	0x20004998
 800e084:	200049a0 	.word	0x200049a0
 800e088:	2000499c 	.word	0x2000499c
 800e08c:	20004994 	.word	0x20004994
 800e090:	20004a64 	.word	0x20004a64
 800e094:	20004a70 	.word	0x20004a70
 800e098:	20004a68 	.word	0x20004a68
 800e09c:	20004a6c 	.word	0x20004a6c
 800e0a0:	4154494d 	.word	0x4154494d
 800e0a4:	0800e1e1 	.word	0x0800e1e1
 800e0a8:	08014880 	.word	0x08014880
 800e0ac:	200049b4 	.word	0x200049b4
 800e0b0:	200049a8 	.word	0x200049a8
 800e0b4:	200049ac 	.word	0x200049ac

0800e0b8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b088      	sub	sp, #32
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d049      	beq.n	800e160 <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	d046      	beq.n	800e160 <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	699b      	ldr	r3, [r3, #24]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d142      	bne.n	800e160 <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	2b20      	cmp	r3, #32
 800e0de:	d902      	bls.n	800e0e6 <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800e0e0:	231f      	movs	r3, #31
 800e0e2:	61bb      	str	r3, [r7, #24]
 800e0e4:	e002      	b.n	800e0ec <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800e0ec:	4b1e      	ldr	r3, [pc, #120]	; (800e168 <_tx_timer_system_activate+0xb0>)
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	18d3      	adds	r3, r2, r3
 800e0f6:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800e0f8:	4b1c      	ldr	r3, [pc, #112]	; (800e16c <_tx_timer_system_activate+0xb4>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	69fa      	ldr	r2, [r7, #28]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d30b      	bcc.n	800e11a <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800e102:	4b1a      	ldr	r3, [pc, #104]	; (800e16c <_tx_timer_system_activate+0xb4>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	69fa      	ldr	r2, [r7, #28]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	109b      	asrs	r3, r3, #2
 800e10c:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800e10e:	4b18      	ldr	r3, [pc, #96]	; (800e170 <_tx_timer_system_activate+0xb8>)
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	18d3      	adds	r3, r2, r3
 800e118:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d109      	bne.n	800e136 <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	e011      	b.n	800e15a <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	695b      	ldr	r3, [r3, #20]
 800e140:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	69fa      	ldr	r2, [r7, #28]
 800e15e:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800e160:	46c0      	nop			; (mov r8, r8)
 800e162:	46bd      	mov	sp, r7
 800e164:	b008      	add	sp, #32
 800e166:	bd80      	pop	{r7, pc}
 800e168:	200049a0 	.word	0x200049a0
 800e16c:	2000499c 	.word	0x2000499c
 800e170:	20004998 	.word	0x20004998

0800e174 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d026      	beq.n	800e1d6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	429a      	cmp	r2, r3
 800e194:	d108      	bne.n	800e1a8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d117      	bne.n	800e1d0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	e013      	b.n	800e1d0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d105      	bne.n	800e1d0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	693a      	ldr	r2, [r7, #16]
 800e1ce:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	619a      	str	r2, [r3, #24]
    }
}
 800e1d6:	46c0      	nop			; (mov r8, r8)
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	b006      	add	sp, #24
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b094      	sub	sp, #80	; 0x50
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a70      	ldr	r2, [pc, #448]	; (800e3b0 <_tx_timer_thread_entry+0x1d0>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d000      	beq.n	800e1f6 <_tx_timer_thread_entry+0x16>
 800e1f4:	e0d8      	b.n	800e3a8 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e1f6:	f3ef 8310 	mrs	r3, PRIMASK
 800e1fa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e1fc:	b672      	cpsid	i
    return(primask_value);
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800e200:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800e202:	4b6c      	ldr	r3, [pc, #432]	; (800e3b4 <_tx_timer_thread_entry+0x1d4>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d003      	beq.n	800e218 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	220c      	movs	r2, #12
 800e214:	18ba      	adds	r2, r7, r2
 800e216:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800e218:	4b66      	ldr	r3, [pc, #408]	; (800e3b4 <_tx_timer_thread_entry+0x1d4>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2200      	movs	r2, #0
 800e21e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800e220:	4b64      	ldr	r3, [pc, #400]	; (800e3b4 <_tx_timer_thread_entry+0x1d4>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	1d1a      	adds	r2, r3, #4
 800e226:	4b63      	ldr	r3, [pc, #396]	; (800e3b4 <_tx_timer_thread_entry+0x1d4>)
 800e228:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800e22a:	4b62      	ldr	r3, [pc, #392]	; (800e3b4 <_tx_timer_thread_entry+0x1d4>)
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	4b62      	ldr	r3, [pc, #392]	; (800e3b8 <_tx_timer_thread_entry+0x1d8>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	429a      	cmp	r2, r3
 800e234:	d103      	bne.n	800e23e <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e236:	4b61      	ldr	r3, [pc, #388]	; (800e3bc <_tx_timer_thread_entry+0x1dc>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	4b5e      	ldr	r3, [pc, #376]	; (800e3b4 <_tx_timer_thread_entry+0x1d4>)
 800e23c:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800e23e:	4b60      	ldr	r3, [pc, #384]	; (800e3c0 <_tx_timer_thread_entry+0x1e0>)
 800e240:	2200      	movs	r2, #0
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	f383 8810 	msr	PRIMASK, r3
}
 800e24e:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e250:	f3ef 8310 	mrs	r3, PRIMASK
 800e254:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e256:	b672      	cpsid	i
    return(primask_value);
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e25a:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800e25c:	e07d      	b.n	800e35a <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800e26c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e270:	429a      	cmp	r2, r3
 800e272:	d102      	bne.n	800e27a <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800e274:	2300      	movs	r3, #0
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	e00e      	b.n	800e298 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e284:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e28a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	220c      	movs	r2, #12
 800e290:	18ba      	adds	r2, r7, r2
 800e292:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800e294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e296:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b20      	cmp	r3, #32
 800e29e:	d911      	bls.n	800e2c4 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3b20      	subs	r3, #32
 800e2a6:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 800e2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2aa:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b2:	2208      	movs	r2, #8
 800e2b4:	18ba      	adds	r2, r7, r2
 800e2b6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2bc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c0:	60bb      	str	r3, [r7, #8]
 800e2c2:	e01a      	b.n	800e2fa <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d009      	beq.n	800e2f4 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e2:	2208      	movs	r2, #8
 800e2e4:	18ba      	adds	r2, r7, r2
 800e2e6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2ec:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800e2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f0:	60bb      	str	r3, [r7, #8]
 800e2f2:	e002      	b.n	800e2fa <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e2fa:	4b32      	ldr	r3, [pc, #200]	; (800e3c4 <_tx_timer_thread_entry+0x1e4>)
 800e2fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e302:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	f383 8810 	msr	PRIMASK, r3
}
 800e30a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800e30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d003      	beq.n	800e31a <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 800e312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e316:	0010      	movs	r0, r2
 800e318:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e31a:	f3ef 8310 	mrs	r3, PRIMASK
 800e31e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e320:	b672      	cpsid	i
    return(primask_value);
 800e322:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e324:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e326:	4b27      	ldr	r3, [pc, #156]	; (800e3c4 <_tx_timer_thread_entry+0x1e4>)
 800e328:	2200      	movs	r2, #0
 800e32a:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e330:	429a      	cmp	r2, r3
 800e332:	d106      	bne.n	800e342 <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e336:	2200      	movs	r2, #0
 800e338:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800e33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e33c:	0018      	movs	r0, r3
 800e33e:	f7ff febb 	bl	800e0b8 <_tx_timer_system_activate>
 800e342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e344:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	f383 8810 	msr	PRIMASK, r3
}
 800e34c:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e34e:	f3ef 8310 	mrs	r3, PRIMASK
 800e352:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e354:	b672      	cpsid	i
    return(primask_value);
 800e356:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e358:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d000      	beq.n	800e362 <_tx_timer_thread_entry+0x182>
 800e360:	e77d      	b.n	800e25e <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e362:	4b17      	ldr	r3, [pc, #92]	; (800e3c0 <_tx_timer_thread_entry+0x1e0>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d117      	bne.n	800e39a <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800e36a:	4b17      	ldr	r3, [pc, #92]	; (800e3c8 <_tx_timer_thread_entry+0x1e8>)
 800e36c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e36e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e370:	2203      	movs	r2, #3
 800e372:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e376:	2201      	movs	r2, #1
 800e378:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e37a:	4b14      	ldr	r3, [pc, #80]	; (800e3cc <_tx_timer_thread_entry+0x1ec>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	4b12      	ldr	r3, [pc, #72]	; (800e3cc <_tx_timer_thread_entry+0x1ec>)
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e386:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	f383 8810 	msr	PRIMASK, r3
}
 800e38e:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e392:	0018      	movs	r0, r3
 800e394:	f7ff fbbc 	bl	800db10 <_tx_thread_system_suspend>
 800e398:	e72d      	b.n	800e1f6 <_tx_timer_thread_entry+0x16>
 800e39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e39c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	f383 8810 	msr	PRIMASK, r3
}
 800e3a4:	46c0      	nop			; (mov r8, r8)
            TX_DISABLE
 800e3a6:	e726      	b.n	800e1f6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800e3a8:	46c0      	nop			; (mov r8, r8)
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	b014      	add	sp, #80	; 0x50
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	4154494d 	.word	0x4154494d
 800e3b4:	200049a0 	.word	0x200049a0
 800e3b8:	2000499c 	.word	0x2000499c
 800e3bc:	20004998 	.word	0x20004998
 800e3c0:	200049a4 	.word	0x200049a4
 800e3c4:	200049b0 	.word	0x200049b0
 800e3c8:	200049b4 	.word	0x200049b4
 800e3cc:	20004904 	.word	0x20004904

0800e3d0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08a      	sub	sp, #40	; 0x28
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d102      	bne.n	800e3ee <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ec:	e028      	b.n	800e440 <_txe_byte_allocate+0x70>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4a2d      	ldr	r2, [pc, #180]	; (800e4a8 <_txe_byte_allocate+0xd8>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d002      	beq.n	800e3fe <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e3fc:	e020      	b.n	800e440 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d102      	bne.n	800e40a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e404:	2303      	movs	r3, #3
 800e406:	627b      	str	r3, [r7, #36]	; 0x24
 800e408:	e01a      	b.n	800e440 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d102      	bne.n	800e416 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800e410:	2305      	movs	r3, #5
 800e412:	627b      	str	r3, [r7, #36]	; 0x24
 800e414:	e014      	b.n	800e440 <_txe_byte_allocate+0x70>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d902      	bls.n	800e426 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800e420:	2305      	movs	r3, #5
 800e422:	627b      	str	r3, [r7, #36]	; 0x24
 800e424:	e00c      	b.n	800e440 <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d009      	beq.n	800e440 <_txe_byte_allocate+0x70>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e42c:	f3ef 8305 	mrs	r3, IPSR
 800e430:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800e432:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e434:	4b1d      	ldr	r3, [pc, #116]	; (800e4ac <_txe_byte_allocate+0xdc>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4313      	orrs	r3, r2
 800e43a:	d001      	beq.n	800e440 <_txe_byte_allocate+0x70>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e43c:	2304      	movs	r3, #4
 800e43e:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800e440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e442:	2b00      	cmp	r3, #0
 800e444:	d108      	bne.n	800e458 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e446:	4b1a      	ldr	r3, [pc, #104]	; (800e4b0 <_txe_byte_allocate+0xe0>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800e44c:	6a3a      	ldr	r2, [r7, #32]
 800e44e:	4b19      	ldr	r3, [pc, #100]	; (800e4b4 <_txe_byte_allocate+0xe4>)
 800e450:	429a      	cmp	r2, r3
 800e452:	d101      	bne.n	800e458 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800e454:	2313      	movs	r3, #19
 800e456:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800e458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d113      	bne.n	800e486 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e45e:	f3ef 8305 	mrs	r3, IPSR
 800e462:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e464:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e466:	4b11      	ldr	r3, [pc, #68]	; (800e4ac <_txe_byte_allocate+0xdc>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	d00b      	beq.n	800e486 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e46e:	f3ef 8305 	mrs	r3, IPSR
 800e472:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e474:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e476:	4b0d      	ldr	r3, [pc, #52]	; (800e4ac <_txe_byte_allocate+0xdc>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	4a0e      	ldr	r2, [pc, #56]	; (800e4b8 <_txe_byte_allocate+0xe8>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d801      	bhi.n	800e486 <_txe_byte_allocate+0xb6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e482:	2313      	movs	r3, #19
 800e484:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d107      	bne.n	800e49c <_txe_byte_allocate+0xcc>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	68b9      	ldr	r1, [r7, #8]
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f7fc fbb0 	bl	800abf8 <_tx_byte_allocate>
 800e498:	0003      	movs	r3, r0
 800e49a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800e49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e49e:	0018      	movs	r0, r3
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	b00a      	add	sp, #40	; 0x28
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	46c0      	nop			; (mov r8, r8)
 800e4a8:	42595445 	.word	0x42595445
 800e4ac:	2000000c 	.word	0x2000000c
 800e4b0:	2000486c 	.word	0x2000486c
 800e4b4:	200049b4 	.word	0x200049b4
 800e4b8:	f0f0f0ef 	.word	0xf0f0f0ef

0800e4bc <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b090      	sub	sp, #64	; 0x40
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d102      	bne.n	800e4da <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e4d4:	2302      	movs	r3, #2
 800e4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4d8:	e070      	b.n	800e5bc <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4dc:	2b34      	cmp	r3, #52	; 0x34
 800e4de:	d002      	beq.n	800e4e6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4e4:	e06a      	b.n	800e5bc <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e4e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e4ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e4ec:	b672      	cpsid	i
    return(primask_value);
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e4f0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e4f2:	4b3a      	ldr	r3, [pc, #232]	; (800e5dc <_txe_byte_pool_create+0x120>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	4b38      	ldr	r3, [pc, #224]	; (800e5dc <_txe_byte_pool_create+0x120>)
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	f383 8810 	msr	PRIMASK, r3
}
 800e506:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e508:	4b35      	ldr	r3, [pc, #212]	; (800e5e0 <_txe_byte_pool_create+0x124>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e50e:	2300      	movs	r3, #0
 800e510:	63bb      	str	r3, [r7, #56]	; 0x38
 800e512:	e009      	b.n	800e528 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e518:	429a      	cmp	r2, r3
 800e51a:	d00b      	beq.n	800e534 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e524:	3301      	adds	r3, #1
 800e526:	63bb      	str	r3, [r7, #56]	; 0x38
 800e528:	4b2e      	ldr	r3, [pc, #184]	; (800e5e4 <_txe_byte_pool_create+0x128>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e52e:	429a      	cmp	r2, r3
 800e530:	d3f0      	bcc.n	800e514 <_txe_byte_pool_create+0x58>
 800e532:	e000      	b.n	800e536 <_txe_byte_pool_create+0x7a>
                break;
 800e534:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e536:	f3ef 8310 	mrs	r3, PRIMASK
 800e53a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e53c:	b672      	cpsid	i
    return(primask_value);
 800e53e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e540:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e542:	4b26      	ldr	r3, [pc, #152]	; (800e5dc <_txe_byte_pool_create+0x120>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	1e5a      	subs	r2, r3, #1
 800e548:	4b24      	ldr	r3, [pc, #144]	; (800e5dc <_txe_byte_pool_create+0x120>)
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e550:	6a3b      	ldr	r3, [r7, #32]
 800e552:	f383 8810 	msr	PRIMASK, r3
}
 800e556:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e558:	f7ff f9a2 	bl	800d8a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e560:	429a      	cmp	r2, r3
 800e562:	d102      	bne.n	800e56a <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e564:	2302      	movs	r3, #2
 800e566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e568:	e028      	b.n	800e5bc <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d102      	bne.n	800e576 <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e570:	2303      	movs	r3, #3
 800e572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e574:	e022      	b.n	800e5bc <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b63      	cmp	r3, #99	; 0x63
 800e57a:	d802      	bhi.n	800e582 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e57c:	2305      	movs	r3, #5
 800e57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e580:	e01c      	b.n	800e5bc <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e582:	4b19      	ldr	r3, [pc, #100]	; (800e5e8 <_txe_byte_pool_create+0x12c>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e58a:	4b18      	ldr	r3, [pc, #96]	; (800e5ec <_txe_byte_pool_create+0x130>)
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d101      	bne.n	800e594 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e590:	2313      	movs	r3, #19
 800e592:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e594:	f3ef 8305 	mrs	r3, IPSR
 800e598:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e59a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e59c:	4b14      	ldr	r3, [pc, #80]	; (800e5f0 <_txe_byte_pool_create+0x134>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	d00b      	beq.n	800e5bc <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e5a4:	f3ef 8305 	mrs	r3, IPSR
 800e5a8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e5aa:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e5ac:	4b10      	ldr	r3, [pc, #64]	; (800e5f0 <_txe_byte_pool_create+0x134>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	4a10      	ldr	r2, [pc, #64]	; (800e5f4 <_txe_byte_pool_create+0x138>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d801      	bhi.n	800e5bc <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e5b8:	2313      	movs	r3, #19
 800e5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d107      	bne.n	800e5d2 <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	68b9      	ldr	r1, [r7, #8]
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f7fc fc53 	bl	800ae74 <_tx_byte_pool_create>
 800e5ce:	0003      	movs	r3, r0
 800e5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800e5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e5d4:	0018      	movs	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	b010      	add	sp, #64	; 0x40
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	20004904 	.word	0x20004904
 800e5e0:	2000485c 	.word	0x2000485c
 800e5e4:	20004860 	.word	0x20004860
 800e5e8:	2000486c 	.word	0x2000486c
 800e5ec:	200049b4 	.word	0x200049b4
 800e5f0:	2000000c 	.word	0x2000000c
 800e5f4:	f0f0f0ef 	.word	0xf0f0f0ef

0800e5f8 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b090      	sub	sp, #64	; 0x40
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e604:	2300      	movs	r3, #0
 800e606:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d102      	bne.n	800e614 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e60e:	2306      	movs	r3, #6
 800e610:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e612:	e064      	b.n	800e6de <_txe_event_flags_create+0xe6>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b24      	cmp	r3, #36	; 0x24
 800e618:	d002      	beq.n	800e620 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e61a:	2306      	movs	r3, #6
 800e61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e61e:	e05e      	b.n	800e6de <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e620:	f3ef 8310 	mrs	r3, PRIMASK
 800e624:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e626:	b672      	cpsid	i
    return(primask_value);
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e62a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e62c:	4b34      	ldr	r3, [pc, #208]	; (800e700 <_txe_event_flags_create+0x108>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	4b33      	ldr	r3, [pc, #204]	; (800e700 <_txe_event_flags_create+0x108>)
 800e634:	601a      	str	r2, [r3, #0]
 800e636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e638:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63c:	f383 8810 	msr	PRIMASK, r3
}
 800e640:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800e642:	4b30      	ldr	r3, [pc, #192]	; (800e704 <_txe_event_flags_create+0x10c>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e648:	2300      	movs	r3, #0
 800e64a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e64c:	e009      	b.n	800e662 <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e652:	429a      	cmp	r2, r3
 800e654:	d00b      	beq.n	800e66e <_txe_event_flags_create+0x76>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800e656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e658:	699b      	ldr	r3, [r3, #24]
 800e65a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65e:	3301      	adds	r3, #1
 800e660:	63bb      	str	r3, [r7, #56]	; 0x38
 800e662:	4b29      	ldr	r3, [pc, #164]	; (800e708 <_txe_event_flags_create+0x110>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e668:	429a      	cmp	r2, r3
 800e66a:	d3f0      	bcc.n	800e64e <_txe_event_flags_create+0x56>
 800e66c:	e000      	b.n	800e670 <_txe_event_flags_create+0x78>
                break;
 800e66e:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e670:	f3ef 8310 	mrs	r3, PRIMASK
 800e674:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e676:	b672      	cpsid	i
    return(primask_value);
 800e678:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e67a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e67c:	4b20      	ldr	r3, [pc, #128]	; (800e700 <_txe_event_flags_create+0x108>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	1e5a      	subs	r2, r3, #1
 800e682:	4b1f      	ldr	r3, [pc, #124]	; (800e700 <_txe_event_flags_create+0x108>)
 800e684:	601a      	str	r2, [r3, #0]
 800e686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e688:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e68a:	6a3b      	ldr	r3, [r7, #32]
 800e68c:	f383 8810 	msr	PRIMASK, r3
}
 800e690:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e692:	f7ff f905 	bl	800d8a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d102      	bne.n	800e6a4 <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800e69e:	2306      	movs	r3, #6
 800e6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6a2:	e01c      	b.n	800e6de <_txe_event_flags_create+0xe6>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e6a4:	4b19      	ldr	r3, [pc, #100]	; (800e70c <_txe_event_flags_create+0x114>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ac:	4b18      	ldr	r3, [pc, #96]	; (800e710 <_txe_event_flags_create+0x118>)
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d101      	bne.n	800e6b6 <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e6b2:	2313      	movs	r3, #19
 800e6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e6b6:	f3ef 8305 	mrs	r3, IPSR
 800e6ba:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e6bc:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e6be:	4b15      	ldr	r3, [pc, #84]	; (800e714 <_txe_event_flags_create+0x11c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	d00b      	beq.n	800e6de <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e6c6:	f3ef 8305 	mrs	r3, IPSR
 800e6ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e6cc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e6ce:	4b11      	ldr	r3, [pc, #68]	; (800e714 <_txe_event_flags_create+0x11c>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	4a10      	ldr	r2, [pc, #64]	; (800e718 <_txe_event_flags_create+0x120>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d801      	bhi.n	800e6de <_txe_event_flags_create+0xe6>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e6da:	2313      	movs	r3, #19
 800e6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d107      	bne.n	800e6f4 <_txe_event_flags_create+0xfc>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	0011      	movs	r1, r2
 800e6ea:	0018      	movs	r0, r3
 800e6ec:	f7fc fdf4 	bl	800b2d8 <_tx_event_flags_create>
 800e6f0:	0003      	movs	r3, r0
 800e6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800e6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	b010      	add	sp, #64	; 0x40
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	46c0      	nop			; (mov r8, r8)
 800e700:	20004904 	.word	0x20004904
 800e704:	20004844 	.word	0x20004844
 800e708:	20004848 	.word	0x20004848
 800e70c:	2000486c 	.word	0x2000486c
 800e710:	200049b4 	.word	0x200049b4
 800e714:	2000000c 	.word	0x2000000c
 800e718:	f0f0f0ef 	.word	0xf0f0f0ef

0800e71c <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800e71c:	b590      	push	{r4, r7, lr}
 800e71e:	b08b      	sub	sp, #44	; 0x2c
 800e720:	af02      	add	r7, sp, #8
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e72a:	2300      	movs	r3, #0
 800e72c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d102      	bne.n	800e73a <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e734:	2306      	movs	r3, #6
 800e736:	61fb      	str	r3, [r7, #28]
 800e738:	e024      	b.n	800e784 <_txe_event_flags_get+0x68>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a1f      	ldr	r2, [pc, #124]	; (800e7bc <_txe_event_flags_get+0xa0>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d002      	beq.n	800e74a <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e744:	2306      	movs	r3, #6
 800e746:	61fb      	str	r3, [r7, #28]
 800e748:	e01c      	b.n	800e784 <_txe_event_flags_get+0x68>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d102      	bne.n	800e756 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e750:	2303      	movs	r3, #3
 800e752:	61fb      	str	r3, [r7, #28]
 800e754:	e016      	b.n	800e784 <_txe_event_flags_get+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d013      	beq.n	800e784 <_txe_event_flags_get+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e75c:	f3ef 8305 	mrs	r3, IPSR
 800e760:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e762:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e764:	4b16      	ldr	r3, [pc, #88]	; (800e7c0 <_txe_event_flags_get+0xa4>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4313      	orrs	r3, r2
 800e76a:	d002      	beq.n	800e772 <_txe_event_flags_get+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e76c:	2304      	movs	r3, #4
 800e76e:	61fb      	str	r3, [r7, #28]
 800e770:	e008      	b.n	800e784 <_txe_event_flags_get+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e772:	4b14      	ldr	r3, [pc, #80]	; (800e7c4 <_txe_event_flags_get+0xa8>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e778:	69ba      	ldr	r2, [r7, #24]
 800e77a:	4b13      	ldr	r3, [pc, #76]	; (800e7c8 <_txe_event_flags_get+0xac>)
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d101      	bne.n	800e784 <_txe_event_flags_get+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e780:	2304      	movs	r3, #4
 800e782:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d104      	bne.n	800e794 <_txe_event_flags_get+0x78>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2b03      	cmp	r3, #3
 800e78e:	d901      	bls.n	800e794 <_txe_event_flags_get+0x78>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800e790:	2308      	movs	r3, #8
 800e792:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10a      	bne.n	800e7b0 <_txe_event_flags_get+0x94>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800e79a:	683c      	ldr	r4, [r7, #0]
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	68b9      	ldr	r1, [r7, #8]
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	0023      	movs	r3, r4
 800e7a8:	f7fc fdf6 	bl	800b398 <_tx_event_flags_get>
 800e7ac:	0003      	movs	r3, r0
 800e7ae:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e7b0:	69fb      	ldr	r3, [r7, #28]
}
 800e7b2:	0018      	movs	r0, r3
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	b009      	add	sp, #36	; 0x24
 800e7b8:	bd90      	pop	{r4, r7, pc}
 800e7ba:	46c0      	nop			; (mov r8, r8)
 800e7bc:	4456444e 	.word	0x4456444e
 800e7c0:	2000000c 	.word	0x2000000c
 800e7c4:	2000486c 	.word	0x2000486c
 800e7c8:	200049b4 	.word	0x200049b4

0800e7cc <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d102      	bne.n	800e7e8 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e7e2:	2306      	movs	r3, #6
 800e7e4:	617b      	str	r3, [r7, #20]
 800e7e6:	e00f      	b.n	800e808 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a0e      	ldr	r2, [pc, #56]	; (800e828 <_txe_event_flags_set+0x5c>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d002      	beq.n	800e7f8 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e7f2:	2306      	movs	r3, #6
 800e7f4:	617b      	str	r3, [r7, #20]
 800e7f6:	e007      	b.n	800e808 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d004      	beq.n	800e808 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800e804:	2308      	movs	r3, #8
 800e806:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d107      	bne.n	800e81e <_txe_event_flags_set+0x52>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	68b9      	ldr	r1, [r7, #8]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	0018      	movs	r0, r3
 800e816:	f7fc fe9f 	bl	800b558 <_tx_event_flags_set>
 800e81a:	0003      	movs	r3, r0
 800e81c:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e81e:	697b      	ldr	r3, [r7, #20]
}
 800e820:	0018      	movs	r0, r3
 800e822:	46bd      	mov	sp, r7
 800e824:	b006      	add	sp, #24
 800e826:	bd80      	pop	{r7, pc}
 800e828:	4456444e 	.word	0x4456444e

0800e82c <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b090      	sub	sp, #64	; 0x40
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e83a:	2300      	movs	r3, #0
 800e83c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d102      	bne.n	800e84a <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800e844:	231c      	movs	r3, #28
 800e846:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e848:	e04f      	b.n	800e8ea <_txe_mutex_create+0xbe>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	2b34      	cmp	r3, #52	; 0x34
 800e84e:	d002      	beq.n	800e856 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800e850:	231c      	movs	r3, #28
 800e852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e854:	e049      	b.n	800e8ea <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e856:	f3ef 8310 	mrs	r3, PRIMASK
 800e85a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e85c:	b672      	cpsid	i
    return(primask_value);
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e860:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e862:	4b3a      	ldr	r3, [pc, #232]	; (800e94c <_txe_mutex_create+0x120>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	1c5a      	adds	r2, r3, #1
 800e868:	4b38      	ldr	r3, [pc, #224]	; (800e94c <_txe_mutex_create+0x120>)
 800e86a:	601a      	str	r2, [r3, #0]
 800e86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	f383 8810 	msr	PRIMASK, r3
}
 800e876:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800e878:	4b35      	ldr	r3, [pc, #212]	; (800e950 <_txe_mutex_create+0x124>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800e87e:	2300      	movs	r3, #0
 800e880:	63bb      	str	r3, [r7, #56]	; 0x38
 800e882:	e009      	b.n	800e898 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e888:	429a      	cmp	r2, r3
 800e88a:	d00b      	beq.n	800e8a4 <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800e88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88e:	6a1b      	ldr	r3, [r3, #32]
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800e892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e894:	3301      	adds	r3, #1
 800e896:	63bb      	str	r3, [r7, #56]	; 0x38
 800e898:	4b2e      	ldr	r3, [pc, #184]	; (800e954 <_txe_mutex_create+0x128>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d3f0      	bcc.n	800e884 <_txe_mutex_create+0x58>
 800e8a2:	e000      	b.n	800e8a6 <_txe_mutex_create+0x7a>
                break;
 800e8a4:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e8aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e8ac:	b672      	cpsid	i
    return(primask_value);
 800e8ae:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e8b0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e8b2:	4b26      	ldr	r3, [pc, #152]	; (800e94c <_txe_mutex_create+0x120>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	1e5a      	subs	r2, r3, #1
 800e8b8:	4b24      	ldr	r3, [pc, #144]	; (800e94c <_txe_mutex_create+0x120>)
 800e8ba:	601a      	str	r2, [r3, #0]
 800e8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8be:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e8c0:	6a3b      	ldr	r3, [r7, #32]
 800e8c2:	f383 8810 	msr	PRIMASK, r3
}
 800e8c6:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e8c8:	f7fe ffea 	bl	800d8a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d102      	bne.n	800e8da <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800e8d4:	231c      	movs	r3, #28
 800e8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8d8:	e007      	b.n	800e8ea <_txe_mutex_create+0xbe>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d004      	beq.n	800e8ea <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <_txe_mutex_create+0xbe>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800e8e6:	231f      	movs	r3, #31
 800e8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d11c      	bne.n	800e92a <_txe_mutex_create+0xfe>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e8f0:	4b19      	ldr	r3, [pc, #100]	; (800e958 <_txe_mutex_create+0x12c>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800e8f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8f8:	4b18      	ldr	r3, [pc, #96]	; (800e95c <_txe_mutex_create+0x130>)
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d101      	bne.n	800e902 <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800e8fe:	2313      	movs	r3, #19
 800e900:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e902:	f3ef 8305 	mrs	r3, IPSR
 800e906:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e908:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e90a:	4b15      	ldr	r3, [pc, #84]	; (800e960 <_txe_mutex_create+0x134>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4313      	orrs	r3, r2
 800e910:	d00b      	beq.n	800e92a <_txe_mutex_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e912:	f3ef 8305 	mrs	r3, IPSR
 800e916:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e918:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e91a:	4b11      	ldr	r3, [pc, #68]	; (800e960 <_txe_mutex_create+0x134>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4313      	orrs	r3, r2
 800e920:	4a10      	ldr	r2, [pc, #64]	; (800e964 <_txe_mutex_create+0x138>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d801      	bhi.n	800e92a <_txe_mutex_create+0xfe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e926:	2313      	movs	r3, #19
 800e928:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d107      	bne.n	800e940 <_txe_mutex_create+0x114>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	68b9      	ldr	r1, [r7, #8]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	0018      	movs	r0, r3
 800e938:	f7fd f94a 	bl	800bbd0 <_tx_mutex_create>
 800e93c:	0003      	movs	r3, r0
 800e93e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800e940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e942:	0018      	movs	r0, r3
 800e944:	46bd      	mov	sp, r7
 800e946:	b010      	add	sp, #64	; 0x40
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	46c0      	nop			; (mov r8, r8)
 800e94c:	20004904 	.word	0x20004904
 800e950:	2000484c 	.word	0x2000484c
 800e954:	20004850 	.word	0x20004850
 800e958:	2000486c 	.word	0x2000486c
 800e95c:	200049b4 	.word	0x200049b4
 800e960:	2000000c 	.word	0x2000000c
 800e964:	f0f0f0ef 	.word	0xf0f0f0ef

0800e968 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e970:	2300      	movs	r3, #0
 800e972:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d102      	bne.n	800e980 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800e97a:	231c      	movs	r3, #28
 800e97c:	617b      	str	r3, [r7, #20]
 800e97e:	e024      	b.n	800e9ca <_txe_mutex_delete+0x62>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a13      	ldr	r2, [pc, #76]	; (800e9d4 <_txe_mutex_delete+0x6c>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d002      	beq.n	800e990 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800e98a:	231c      	movs	r3, #28
 800e98c:	617b      	str	r3, [r7, #20]
 800e98e:	e01c      	b.n	800e9ca <_txe_mutex_delete+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e990:	f3ef 8305 	mrs	r3, IPSR
 800e994:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e996:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e998:	4b0f      	ldr	r3, [pc, #60]	; (800e9d8 <_txe_mutex_delete+0x70>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	d002      	beq.n	800e9a6 <_txe_mutex_delete+0x3e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800e9a0:	2313      	movs	r3, #19
 800e9a2:	617b      	str	r3, [r7, #20]
 800e9a4:	e011      	b.n	800e9ca <_txe_mutex_delete+0x62>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	; (800e9dc <_txe_mutex_delete+0x74>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800e9ac:	693a      	ldr	r2, [r7, #16]
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <_txe_mutex_delete+0x78>)
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d101      	bne.n	800e9b8 <_txe_mutex_delete+0x50>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800e9b4:	2313      	movs	r3, #19
 800e9b6:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d105      	bne.n	800e9ca <_txe_mutex_delete+0x62>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	0018      	movs	r0, r3
 800e9c2:	f7fd f971 	bl	800bca8 <_tx_mutex_delete>
 800e9c6:	0003      	movs	r3, r0
 800e9c8:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800e9ca:	697b      	ldr	r3, [r7, #20]
}
 800e9cc:	0018      	movs	r0, r3
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	b006      	add	sp, #24
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	4d555445 	.word	0x4d555445
 800e9d8:	2000000c 	.word	0x2000000c
 800e9dc:	2000486c 	.word	0x2000486c
 800e9e0:	200049b4 	.word	0x200049b4

0800e9e4 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b088      	sub	sp, #32
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800e9f8:	231c      	movs	r3, #28
 800e9fa:	61fb      	str	r3, [r7, #28]
 800e9fc:	e01e      	b.n	800ea3c <_txe_mutex_get+0x58>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a22      	ldr	r2, [pc, #136]	; (800ea8c <_txe_mutex_get+0xa8>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d002      	beq.n	800ea0e <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800ea08:	231c      	movs	r3, #28
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	e016      	b.n	800ea3c <_txe_mutex_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d013      	beq.n	800ea3c <_txe_mutex_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ea14:	f3ef 8305 	mrs	r3, IPSR
 800ea18:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ea1a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ea1c:	4b1c      	ldr	r3, [pc, #112]	; (800ea90 <_txe_mutex_get+0xac>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	d002      	beq.n	800ea2a <_txe_mutex_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ea24:	2304      	movs	r3, #4
 800ea26:	61fb      	str	r3, [r7, #28]
 800ea28:	e008      	b.n	800ea3c <_txe_mutex_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ea2a:	4b1a      	ldr	r3, [pc, #104]	; (800ea94 <_txe_mutex_get+0xb0>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ea30:	69ba      	ldr	r2, [r7, #24]
 800ea32:	4b19      	ldr	r3, [pc, #100]	; (800ea98 <_txe_mutex_get+0xb4>)
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d101      	bne.n	800ea3c <_txe_mutex_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ea38:	2304      	movs	r3, #4
 800ea3a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d113      	bne.n	800ea6a <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ea42:	f3ef 8305 	mrs	r3, IPSR
 800ea46:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ea48:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ea4a:	4b11      	ldr	r3, [pc, #68]	; (800ea90 <_txe_mutex_get+0xac>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	d00b      	beq.n	800ea6a <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ea52:	f3ef 8305 	mrs	r3, IPSR
 800ea56:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ea58:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ea5a:	4b0d      	ldr	r3, [pc, #52]	; (800ea90 <_txe_mutex_get+0xac>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	4a0e      	ldr	r2, [pc, #56]	; (800ea9c <_txe_mutex_get+0xb8>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d801      	bhi.n	800ea6a <_txe_mutex_get+0x86>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ea66:	2313      	movs	r3, #19
 800ea68:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d107      	bne.n	800ea80 <_txe_mutex_get+0x9c>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	0011      	movs	r1, r2
 800ea76:	0018      	movs	r0, r3
 800ea78:	f7fd f9ba 	bl	800bdf0 <_tx_mutex_get>
 800ea7c:	0003      	movs	r3, r0
 800ea7e:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ea80:	69fb      	ldr	r3, [r7, #28]
}
 800ea82:	0018      	movs	r0, r3
 800ea84:	46bd      	mov	sp, r7
 800ea86:	b008      	add	sp, #32
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	46c0      	nop			; (mov r8, r8)
 800ea8c:	4d555445 	.word	0x4d555445
 800ea90:	2000000c 	.word	0x2000000c
 800ea94:	2000486c 	.word	0x2000486c
 800ea98:	200049b4 	.word	0x200049b4
 800ea9c:	f0f0f0ef 	.word	0xf0f0f0ef

0800eaa0 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d102      	bne.n	800eab8 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800eab2:	231c      	movs	r3, #28
 800eab4:	617b      	str	r3, [r7, #20]
 800eab6:	e01b      	b.n	800eaf0 <_txe_mutex_put+0x50>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a13      	ldr	r2, [pc, #76]	; (800eb0c <_txe_mutex_put+0x6c>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d002      	beq.n	800eac8 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800eac2:	231c      	movs	r3, #28
 800eac4:	617b      	str	r3, [r7, #20]
 800eac6:	e013      	b.n	800eaf0 <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eac8:	f3ef 8305 	mrs	r3, IPSR
 800eacc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800eace:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ead0:	4b0f      	ldr	r3, [pc, #60]	; (800eb10 <_txe_mutex_put+0x70>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4313      	orrs	r3, r2
 800ead6:	d00b      	beq.n	800eaf0 <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ead8:	f3ef 8305 	mrs	r3, IPSR
 800eadc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800eade:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800eae0:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <_txe_mutex_put+0x70>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4313      	orrs	r3, r2
 800eae6:	4a0b      	ldr	r2, [pc, #44]	; (800eb14 <_txe_mutex_put+0x74>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d801      	bhi.n	800eaf0 <_txe_mutex_put+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800eaec:	2313      	movs	r3, #19
 800eaee:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d105      	bne.n	800eb02 <_txe_mutex_put+0x62>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	0018      	movs	r0, r3
 800eafa:	f7fd fbe9 	bl	800c2d0 <_tx_mutex_put>
 800eafe:	0003      	movs	r3, r0
 800eb00:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800eb02:	697b      	ldr	r3, [r7, #20]
}
 800eb04:	0018      	movs	r0, r3
 800eb06:	46bd      	mov	sp, r7
 800eb08:	b006      	add	sp, #24
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	4d555445 	.word	0x4d555445
 800eb10:	2000000c 	.word	0x2000000c
 800eb14:	f0f0f0ef 	.word	0xf0f0f0ef

0800eb18 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800eb18:	b590      	push	{r4, r7, lr}
 800eb1a:	b093      	sub	sp, #76	; 0x4c
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800eb26:	2300      	movs	r3, #0
 800eb28:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800eb30:	2309      	movs	r3, #9
 800eb32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb34:	e07e      	b.n	800ec34 <_txe_queue_create+0x11c>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800eb36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb38:	2b38      	cmp	r3, #56	; 0x38
 800eb3a:	d002      	beq.n	800eb42 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800eb3c:	2309      	movs	r3, #9
 800eb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb40:	e078      	b.n	800ec34 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eb42:	f3ef 8310 	mrs	r3, PRIMASK
 800eb46:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eb48:	b672      	cpsid	i
    return(primask_value);
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800eb4c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800eb4e:	4b43      	ldr	r3, [pc, #268]	; (800ec5c <_txe_queue_create+0x144>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	1c5a      	adds	r2, r3, #1
 800eb54:	4b41      	ldr	r3, [pc, #260]	; (800ec5c <_txe_queue_create+0x144>)
 800eb56:	601a      	str	r2, [r3, #0]
 800eb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	f383 8810 	msr	PRIMASK, r3
}
 800eb62:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800eb64:	4b3e      	ldr	r3, [pc, #248]	; (800ec60 <_txe_queue_create+0x148>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb6e:	e009      	b.n	800eb84 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d00b      	beq.n	800eb90 <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800eb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb7c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	3301      	adds	r3, #1
 800eb82:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb84:	4b37      	ldr	r3, [pc, #220]	; (800ec64 <_txe_queue_create+0x14c>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d3f0      	bcc.n	800eb70 <_txe_queue_create+0x58>
 800eb8e:	e000      	b.n	800eb92 <_txe_queue_create+0x7a>
                break;
 800eb90:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eb92:	f3ef 8310 	mrs	r3, PRIMASK
 800eb96:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eb98:	b672      	cpsid	i
    return(primask_value);
 800eb9a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800eb9c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800eb9e:	4b2f      	ldr	r3, [pc, #188]	; (800ec5c <_txe_queue_create+0x144>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	1e5a      	subs	r2, r3, #1
 800eba4:	4b2d      	ldr	r3, [pc, #180]	; (800ec5c <_txe_queue_create+0x144>)
 800eba6:	601a      	str	r2, [r3, #0]
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	f383 8810 	msr	PRIMASK, r3
}
 800ebb2:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ebb4:	f7fe fe74 	bl	800d8a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d102      	bne.n	800ebc6 <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800ebc0:	2309      	movs	r3, #9
 800ebc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebc4:	e036      	b.n	800ec34 <_txe_queue_create+0x11c>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d102      	bne.n	800ebd2 <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800ebcc:	2303      	movs	r3, #3
 800ebce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebd0:	e030      	b.n	800ec34 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d102      	bne.n	800ebde <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800ebd8:	2305      	movs	r3, #5
 800ebda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebdc:	e02a      	b.n	800ec34 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2b10      	cmp	r3, #16
 800ebe2:	d902      	bls.n	800ebea <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800ebe4:	2305      	movs	r3, #5
 800ebe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebe8:	e024      	b.n	800ec34 <_txe_queue_create+0x11c>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800ebea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebec:	089b      	lsrs	r3, r3, #2
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d902      	bls.n	800ebfa <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800ebf4:	2305      	movs	r3, #5
 800ebf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebf8:	e01c      	b.n	800ec34 <_txe_queue_create+0x11c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ebfa:	4b1b      	ldr	r3, [pc, #108]	; (800ec68 <_txe_queue_create+0x150>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ec00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec02:	4b1a      	ldr	r3, [pc, #104]	; (800ec6c <_txe_queue_create+0x154>)
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d101      	bne.n	800ec0c <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ec08:	2313      	movs	r3, #19
 800ec0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ec0c:	f3ef 8305 	mrs	r3, IPSR
 800ec10:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ec12:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ec14:	4b16      	ldr	r3, [pc, #88]	; (800ec70 <_txe_queue_create+0x158>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	d00b      	beq.n	800ec34 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ec1c:	f3ef 8305 	mrs	r3, IPSR
 800ec20:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ec22:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ec24:	4b12      	ldr	r3, [pc, #72]	; (800ec70 <_txe_queue_create+0x158>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	4a12      	ldr	r2, [pc, #72]	; (800ec74 <_txe_queue_create+0x15c>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d801      	bhi.n	800ec34 <_txe_queue_create+0x11c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ec30:	2313      	movs	r3, #19
 800ec32:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ec34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10a      	bne.n	800ec50 <_txe_queue_create+0x138>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800ec3a:	683c      	ldr	r4, [r7, #0]
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	68b9      	ldr	r1, [r7, #8]
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	0023      	movs	r3, r4
 800ec48:	f7fd fdaa 	bl	800c7a0 <_tx_queue_create>
 800ec4c:	0003      	movs	r3, r0
 800ec4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800ec50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ec52:	0018      	movs	r0, r3
 800ec54:	46bd      	mov	sp, r7
 800ec56:	b011      	add	sp, #68	; 0x44
 800ec58:	bd90      	pop	{r4, r7, pc}
 800ec5a:	46c0      	nop			; (mov r8, r8)
 800ec5c:	20004904 	.word	0x20004904
 800ec60:	2000483c 	.word	0x2000483c
 800ec64:	20004840 	.word	0x20004840
 800ec68:	2000486c 	.word	0x2000486c
 800ec6c:	200049b4 	.word	0x200049b4
 800ec70:	2000000c 	.word	0x2000000c
 800ec74:	f0f0f0ef 	.word	0xf0f0f0ef

0800ec78 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b088      	sub	sp, #32
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ec84:	2300      	movs	r3, #0
 800ec86:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d102      	bne.n	800ec94 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ec8e:	2309      	movs	r3, #9
 800ec90:	61fb      	str	r3, [r7, #28]
 800ec92:	e024      	b.n	800ecde <_txe_queue_receive+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a19      	ldr	r2, [pc, #100]	; (800ed00 <_txe_queue_receive+0x88>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d002      	beq.n	800eca4 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ec9e:	2309      	movs	r3, #9
 800eca0:	61fb      	str	r3, [r7, #28]
 800eca2:	e01c      	b.n	800ecde <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d102      	bne.n	800ecb0 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	61fb      	str	r3, [r7, #28]
 800ecae:	e016      	b.n	800ecde <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d013      	beq.n	800ecde <_txe_queue_receive+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ecb6:	f3ef 8305 	mrs	r3, IPSR
 800ecba:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ecbc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ecbe:	4b11      	ldr	r3, [pc, #68]	; (800ed04 <_txe_queue_receive+0x8c>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	d002      	beq.n	800eccc <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ecc6:	2304      	movs	r3, #4
 800ecc8:	61fb      	str	r3, [r7, #28]
 800ecca:	e008      	b.n	800ecde <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800eccc:	4b0e      	ldr	r3, [pc, #56]	; (800ed08 <_txe_queue_receive+0x90>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ecd2:	69ba      	ldr	r2, [r7, #24]
 800ecd4:	4b0d      	ldr	r3, [pc, #52]	; (800ed0c <_txe_queue_receive+0x94>)
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d101      	bne.n	800ecde <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ecda:	2304      	movs	r3, #4
 800ecdc:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d107      	bne.n	800ecf4 <_txe_queue_receive+0x7c>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	68b9      	ldr	r1, [r7, #8]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	0018      	movs	r0, r3
 800ecec:	f7fd fde0 	bl	800c8b0 <_tx_queue_receive>
 800ecf0:	0003      	movs	r3, r0
 800ecf2:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ecf4:	69fb      	ldr	r3, [r7, #28]
}
 800ecf6:	0018      	movs	r0, r3
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	b008      	add	sp, #32
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	46c0      	nop			; (mov r8, r8)
 800ed00:	51554555 	.word	0x51554555
 800ed04:	2000000c 	.word	0x2000000c
 800ed08:	2000486c 	.word	0x2000486c
 800ed0c:	200049b4 	.word	0x200049b4

0800ed10 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d102      	bne.n	800ed2c <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ed26:	2309      	movs	r3, #9
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	e024      	b.n	800ed76 <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a19      	ldr	r2, [pc, #100]	; (800ed98 <_txe_queue_send+0x88>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d002      	beq.n	800ed3c <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ed36:	2309      	movs	r3, #9
 800ed38:	61fb      	str	r3, [r7, #28]
 800ed3a:	e01c      	b.n	800ed76 <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d102      	bne.n	800ed48 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ed42:	2303      	movs	r3, #3
 800ed44:	61fb      	str	r3, [r7, #28]
 800ed46:	e016      	b.n	800ed76 <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d013      	beq.n	800ed76 <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ed4e:	f3ef 8305 	mrs	r3, IPSR
 800ed52:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ed54:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ed56:	4b11      	ldr	r3, [pc, #68]	; (800ed9c <_txe_queue_send+0x8c>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	d002      	beq.n	800ed64 <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ed5e:	2304      	movs	r3, #4
 800ed60:	61fb      	str	r3, [r7, #28]
 800ed62:	e008      	b.n	800ed76 <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ed64:	4b0e      	ldr	r3, [pc, #56]	; (800eda0 <_txe_queue_send+0x90>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	4b0d      	ldr	r3, [pc, #52]	; (800eda4 <_txe_queue_send+0x94>)
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d101      	bne.n	800ed76 <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ed72:	2304      	movs	r3, #4
 800ed74:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d107      	bne.n	800ed8c <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	68b9      	ldr	r1, [r7, #8]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	0018      	movs	r0, r3
 800ed84:	f7fd ff5c 	bl	800cc40 <_tx_queue_send>
 800ed88:	0003      	movs	r3, r0
 800ed8a:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ed8c:	69fb      	ldr	r3, [r7, #28]
}
 800ed8e:	0018      	movs	r0, r3
 800ed90:	46bd      	mov	sp, r7
 800ed92:	b008      	add	sp, #32
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	46c0      	nop			; (mov r8, r8)
 800ed98:	51554555 	.word	0x51554555
 800ed9c:	2000000c 	.word	0x2000000c
 800eda0:	2000486c 	.word	0x2000486c
 800eda4:	200049b4 	.word	0x200049b4

0800eda8 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b090      	sub	sp, #64	; 0x40
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800edb6:	2300      	movs	r3, #0
 800edb8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d102      	bne.n	800edc6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800edc0:	230c      	movs	r3, #12
 800edc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edc4:	e050      	b.n	800ee68 <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b1c      	cmp	r3, #28
 800edca:	d002      	beq.n	800edd2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800edcc:	230c      	movs	r3, #12
 800edce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edd0:	e04a      	b.n	800ee68 <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800edd2:	f3ef 8310 	mrs	r3, PRIMASK
 800edd6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800edd8:	b672      	cpsid	i
    return(primask_value);
 800edda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800eddc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800edde:	4b36      	ldr	r3, [pc, #216]	; (800eeb8 <_txe_semaphore_create+0x110>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	1c5a      	adds	r2, r3, #1
 800ede4:	4b34      	ldr	r3, [pc, #208]	; (800eeb8 <_txe_semaphore_create+0x110>)
 800ede6:	601a      	str	r2, [r3, #0]
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800edec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edee:	f383 8810 	msr	PRIMASK, r3
}
 800edf2:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800edf4:	4b31      	ldr	r3, [pc, #196]	; (800eebc <_txe_semaphore_create+0x114>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800edfa:	2300      	movs	r3, #0
 800edfc:	63bb      	str	r3, [r7, #56]	; 0x38
 800edfe:	e009      	b.n	800ee14 <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d00b      	beq.n	800ee20 <_txe_semaphore_create+0x78>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800ee08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee0a:	695b      	ldr	r3, [r3, #20]
 800ee0c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800ee0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee10:	3301      	adds	r3, #1
 800ee12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee14:	4b2a      	ldr	r3, [pc, #168]	; (800eec0 <_txe_semaphore_create+0x118>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d3f0      	bcc.n	800ee00 <_txe_semaphore_create+0x58>
 800ee1e:	e000      	b.n	800ee22 <_txe_semaphore_create+0x7a>
                break;
 800ee20:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ee22:	f3ef 8310 	mrs	r3, PRIMASK
 800ee26:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ee28:	b672      	cpsid	i
    return(primask_value);
 800ee2a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ee2c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ee2e:	4b22      	ldr	r3, [pc, #136]	; (800eeb8 <_txe_semaphore_create+0x110>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	1e5a      	subs	r2, r3, #1
 800ee34:	4b20      	ldr	r3, [pc, #128]	; (800eeb8 <_txe_semaphore_create+0x110>)
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	f383 8810 	msr	PRIMASK, r3
}
 800ee42:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ee44:	f7fe fd2c 	bl	800d8a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d102      	bne.n	800ee56 <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800ee50:	230c      	movs	r3, #12
 800ee52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee54:	e008      	b.n	800ee68 <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ee56:	4b1b      	ldr	r3, [pc, #108]	; (800eec4 <_txe_semaphore_create+0x11c>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ee5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee5e:	4b1a      	ldr	r3, [pc, #104]	; (800eec8 <_txe_semaphore_create+0x120>)
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d101      	bne.n	800ee68 <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ee64:	2313      	movs	r3, #19
 800ee66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ee68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d113      	bne.n	800ee96 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ee6e:	f3ef 8305 	mrs	r3, IPSR
 800ee72:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ee74:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ee76:	4b15      	ldr	r3, [pc, #84]	; (800eecc <_txe_semaphore_create+0x124>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	d00b      	beq.n	800ee96 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ee7e:	f3ef 8305 	mrs	r3, IPSR
 800ee82:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ee84:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ee86:	4b11      	ldr	r3, [pc, #68]	; (800eecc <_txe_semaphore_create+0x124>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	4a10      	ldr	r2, [pc, #64]	; (800eed0 <_txe_semaphore_create+0x128>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d801      	bhi.n	800ee96 <_txe_semaphore_create+0xee>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ee92:	2313      	movs	r3, #19
 800ee94:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ee96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d107      	bne.n	800eeac <_txe_semaphore_create+0x104>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	68b9      	ldr	r1, [r7, #8]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	0018      	movs	r0, r3
 800eea4:	f7fe f870 	bl	800cf88 <_tx_semaphore_create>
 800eea8:	0003      	movs	r3, r0
 800eeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800eeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eeae:	0018      	movs	r0, r3
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	b010      	add	sp, #64	; 0x40
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	46c0      	nop			; (mov r8, r8)
 800eeb8:	20004904 	.word	0x20004904
 800eebc:	20004834 	.word	0x20004834
 800eec0:	20004838 	.word	0x20004838
 800eec4:	2000486c 	.word	0x2000486c
 800eec8:	200049b4 	.word	0x200049b4
 800eecc:	2000000c 	.word	0x2000000c
 800eed0:	f0f0f0ef 	.word	0xf0f0f0ef

0800eed4 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800eedc:	2300      	movs	r3, #0
 800eede:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d102      	bne.n	800eeec <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800eee6:	230c      	movs	r3, #12
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	e01b      	b.n	800ef24 <_txe_semaphore_delete+0x50>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a13      	ldr	r2, [pc, #76]	; (800ef40 <_txe_semaphore_delete+0x6c>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d002      	beq.n	800eefc <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800eef6:	230c      	movs	r3, #12
 800eef8:	617b      	str	r3, [r7, #20]
 800eefa:	e013      	b.n	800ef24 <_txe_semaphore_delete+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eefc:	f3ef 8305 	mrs	r3, IPSR
 800ef00:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ef02:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ef04:	4b0f      	ldr	r3, [pc, #60]	; (800ef44 <_txe_semaphore_delete+0x70>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	d002      	beq.n	800ef12 <_txe_semaphore_delete+0x3e>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800ef0c:	2313      	movs	r3, #19
 800ef0e:	617b      	str	r3, [r7, #20]
 800ef10:	e008      	b.n	800ef24 <_txe_semaphore_delete+0x50>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ef12:	4b0d      	ldr	r3, [pc, #52]	; (800ef48 <_txe_semaphore_delete+0x74>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	4b0c      	ldr	r3, [pc, #48]	; (800ef4c <_txe_semaphore_delete+0x78>)
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d101      	bne.n	800ef24 <_txe_semaphore_delete+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ef20:	2313      	movs	r3, #19
 800ef22:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d105      	bne.n	800ef36 <_txe_semaphore_delete+0x62>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	0018      	movs	r0, r3
 800ef2e:	f7fe f88f 	bl	800d050 <_tx_semaphore_delete>
 800ef32:	0003      	movs	r3, r0
 800ef34:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800ef36:	697b      	ldr	r3, [r7, #20]
}
 800ef38:	0018      	movs	r0, r3
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	b006      	add	sp, #24
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	53454d41 	.word	0x53454d41
 800ef44:	2000000c 	.word	0x2000000c
 800ef48:	2000486c 	.word	0x2000486c
 800ef4c:	200049b4 	.word	0x200049b4

0800ef50 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b086      	sub	sp, #24
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d102      	bne.n	800ef6a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ef64:	230c      	movs	r3, #12
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	e01e      	b.n	800efa8 <_txe_semaphore_get+0x58>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a16      	ldr	r2, [pc, #88]	; (800efc8 <_txe_semaphore_get+0x78>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d002      	beq.n	800ef7a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ef74:	230c      	movs	r3, #12
 800ef76:	617b      	str	r3, [r7, #20]
 800ef78:	e016      	b.n	800efa8 <_txe_semaphore_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d013      	beq.n	800efa8 <_txe_semaphore_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ef80:	f3ef 8305 	mrs	r3, IPSR
 800ef84:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ef86:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ef88:	4b10      	ldr	r3, [pc, #64]	; (800efcc <_txe_semaphore_get+0x7c>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	d002      	beq.n	800ef96 <_txe_semaphore_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ef90:	2304      	movs	r3, #4
 800ef92:	617b      	str	r3, [r7, #20]
 800ef94:	e008      	b.n	800efa8 <_txe_semaphore_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ef96:	4b0e      	ldr	r3, [pc, #56]	; (800efd0 <_txe_semaphore_get+0x80>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	4b0d      	ldr	r3, [pc, #52]	; (800efd4 <_txe_semaphore_get+0x84>)
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d101      	bne.n	800efa8 <_txe_semaphore_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800efa4:	2304      	movs	r3, #4
 800efa6:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d107      	bne.n	800efbe <_txe_semaphore_get+0x6e>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	0011      	movs	r1, r2
 800efb4:	0018      	movs	r0, r3
 800efb6:	f7fe f8d7 	bl	800d168 <_tx_semaphore_get>
 800efba:	0003      	movs	r3, r0
 800efbc:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800efbe:	697b      	ldr	r3, [r7, #20]
}
 800efc0:	0018      	movs	r0, r3
 800efc2:	46bd      	mov	sp, r7
 800efc4:	b006      	add	sp, #24
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	53454d41 	.word	0x53454d41
 800efcc:	2000000c 	.word	0x2000000c
 800efd0:	2000486c 	.word	0x2000486c
 800efd4:	200049b4 	.word	0x200049b4

0800efd8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d102      	bne.n	800efec <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800efe6:	230c      	movs	r3, #12
 800efe8:	60fb      	str	r3, [r7, #12]
 800efea:	e00d      	b.n	800f008 <_txe_semaphore_put+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a08      	ldr	r2, [pc, #32]	; (800f014 <_txe_semaphore_put+0x3c>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d002      	beq.n	800effc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800eff6:	230c      	movs	r3, #12
 800eff8:	60fb      	str	r3, [r7, #12]
 800effa:	e005      	b.n	800f008 <_txe_semaphore_put+0x30>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	0018      	movs	r0, r3
 800f000:	f7fe f944 	bl	800d28c <_tx_semaphore_put>
 800f004:	0003      	movs	r3, r0
 800f006:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800f008:	68fb      	ldr	r3, [r7, #12]
}
 800f00a:	0018      	movs	r0, r3
 800f00c:	46bd      	mov	sp, r7
 800f00e:	b004      	add	sp, #16
 800f010:	bd80      	pop	{r7, pc}
 800f012:	46c0      	nop			; (mov r8, r8)
 800f014:	53454d41 	.word	0x53454d41

0800f018 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800f018:	b590      	push	{r4, r7, lr}
 800f01a:	b099      	sub	sp, #100	; 0x64
 800f01c:	af06      	add	r7, sp, #24
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
 800f024:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f026:	2300      	movs	r3, #0
 800f028:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d102      	bne.n	800f036 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f030:	230e      	movs	r3, #14
 800f032:	647b      	str	r3, [r7, #68]	; 0x44
 800f034:	e0b6      	b.n	800f1a4 <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800f036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f038:	2bb0      	cmp	r3, #176	; 0xb0
 800f03a:	d002      	beq.n	800f042 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f03c:	230e      	movs	r3, #14
 800f03e:	647b      	str	r3, [r7, #68]	; 0x44
 800f040:	e0b0      	b.n	800f1a4 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f042:	f3ef 8310 	mrs	r3, PRIMASK
 800f046:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f048:	b672      	cpsid	i
    return(primask_value);
 800f04a:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f04c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f04e:	4b64      	ldr	r3, [pc, #400]	; (800f1e0 <_txe_thread_create+0x1c8>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	1c5a      	adds	r2, r3, #1
 800f054:	4b62      	ldr	r3, [pc, #392]	; (800f1e0 <_txe_thread_create+0x1c8>)
 800f056:	601a      	str	r2, [r3, #0]
 800f058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05e:	f383 8810 	msr	PRIMASK, r3
}
 800f062:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800f064:	2300      	movs	r3, #0
 800f066:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
 800f068:	4b5e      	ldr	r3, [pc, #376]	; (800f1e4 <_txe_thread_create+0x1cc>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800f06e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f070:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800f072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f074:	3b01      	subs	r3, #1
 800f076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f078:	18d3      	adds	r3, r2, r3
 800f07a:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f080:	2300      	movs	r3, #0
 800f082:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f084:	e02b      	b.n	800f0de <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d101      	bne.n	800f092 <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800f08e:	2301      	movs	r3, #1
 800f090:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800f092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f094:	2b01      	cmp	r3, #1
 800f096:	d028      	beq.n	800f0ea <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800f098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d308      	bcc.n	800f0b4 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800f0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d203      	bcs.n	800f0b4 <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d308      	bcc.n	800f0d0 <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800f0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c0:	691b      	ldr	r3, [r3, #16]
 800f0c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d203      	bcs.n	800f0d0 <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	2288      	movs	r2, #136	; 0x88
 800f0d4:	589b      	ldr	r3, [r3, r2]
 800f0d6:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0da:	3301      	adds	r3, #1
 800f0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0de:	4b42      	ldr	r3, [pc, #264]	; (800f1e8 <_txe_thread_create+0x1d0>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d3ce      	bcc.n	800f086 <_txe_thread_create+0x6e>
 800f0e8:	e000      	b.n	800f0ec <_txe_thread_create+0xd4>
                break;
 800f0ea:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f0ec:	f3ef 8310 	mrs	r3, PRIMASK
 800f0f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f0f2:	b672      	cpsid	i
    return(primask_value);
 800f0f4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f0f6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f0f8:	4b39      	ldr	r3, [pc, #228]	; (800f1e0 <_txe_thread_create+0x1c8>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	1e5a      	subs	r2, r3, #1
 800f0fe:	4b38      	ldr	r3, [pc, #224]	; (800f1e0 <_txe_thread_create+0x1c8>)
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f104:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	f383 8810 	msr	PRIMASK, r3
}
 800f10c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f10e:	f7fe fbc7 	bl	800d8a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f116:	429a      	cmp	r2, r3
 800f118:	d102      	bne.n	800f120 <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800f11a:	230e      	movs	r3, #14
 800f11c:	647b      	str	r3, [r7, #68]	; 0x44
 800f11e:	e041      	b.n	800f1a4 <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800f120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f122:	2b00      	cmp	r3, #0
 800f124:	d102      	bne.n	800f12c <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f126:	2303      	movs	r3, #3
 800f128:	647b      	str	r3, [r7, #68]	; 0x44
 800f12a:	e03b      	b.n	800f1a4 <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d102      	bne.n	800f138 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f132:	2303      	movs	r3, #3
 800f134:	647b      	str	r3, [r7, #68]	; 0x44
 800f136:	e035      	b.n	800f1a4 <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800f138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f13a:	2bc7      	cmp	r3, #199	; 0xc7
 800f13c:	d802      	bhi.n	800f144 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800f13e:	2305      	movs	r3, #5
 800f140:	647b      	str	r3, [r7, #68]	; 0x44
 800f142:	e02f      	b.n	800f1a4 <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800f144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f146:	2b1f      	cmp	r3, #31
 800f148:	d902      	bls.n	800f150 <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800f14a:	230f      	movs	r3, #15
 800f14c:	647b      	str	r3, [r7, #68]	; 0x44
 800f14e:	e029      	b.n	800f1a4 <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800f150:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f154:	429a      	cmp	r2, r3
 800f156:	d902      	bls.n	800f15e <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800f158:	2318      	movs	r3, #24
 800f15a:	647b      	str	r3, [r7, #68]	; 0x44
 800f15c:	e022      	b.n	800f1a4 <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800f15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f160:	2b01      	cmp	r3, #1
 800f162:	d902      	bls.n	800f16a <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800f164:	2310      	movs	r3, #16
 800f166:	647b      	str	r3, [r7, #68]	; 0x44
 800f168:	e01c      	b.n	800f1a4 <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800f16a:	4b20      	ldr	r3, [pc, #128]	; (800f1ec <_txe_thread_create+0x1d4>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800f170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f172:	4b1f      	ldr	r3, [pc, #124]	; (800f1f0 <_txe_thread_create+0x1d8>)
 800f174:	429a      	cmp	r2, r3
 800f176:	d101      	bne.n	800f17c <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f178:	2313      	movs	r3, #19
 800f17a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f17c:	f3ef 8305 	mrs	r3, IPSR
 800f180:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f182:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f184:	4b1b      	ldr	r3, [pc, #108]	; (800f1f4 <_txe_thread_create+0x1dc>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4313      	orrs	r3, r2
 800f18a:	d00b      	beq.n	800f1a4 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f18c:	f3ef 8305 	mrs	r3, IPSR
 800f190:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f192:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f194:	4b17      	ldr	r3, [pc, #92]	; (800f1f4 <_txe_thread_create+0x1dc>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4313      	orrs	r3, r2
 800f19a:	4a17      	ldr	r2, [pc, #92]	; (800f1f8 <_txe_thread_create+0x1e0>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d801      	bhi.n	800f1a4 <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800f1a0:	2313      	movs	r3, #19
 800f1a2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d114      	bne.n	800f1d4 <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800f1aa:	683c      	ldr	r4, [r7, #0]
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	68b9      	ldr	r1, [r7, #8]
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1b4:	9305      	str	r3, [sp, #20]
 800f1b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1b8:	9304      	str	r3, [sp, #16]
 800f1ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f1bc:	9303      	str	r3, [sp, #12]
 800f1be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1c0:	9302      	str	r3, [sp, #8]
 800f1c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1c4:	9301      	str	r3, [sp, #4]
 800f1c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	0023      	movs	r3, r4
 800f1cc:	f7fe f8b6 	bl	800d33c <_tx_thread_create>
 800f1d0:	0003      	movs	r3, r0
 800f1d2:	647b      	str	r3, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800f1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f1d6:	0018      	movs	r0, r3
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	b013      	add	sp, #76	; 0x4c
 800f1dc:	bd90      	pop	{r4, r7, pc}
 800f1de:	46c0      	nop			; (mov r8, r8)
 800f1e0:	20004904 	.word	0x20004904
 800f1e4:	20004874 	.word	0x20004874
 800f1e8:	20004878 	.word	0x20004878
 800f1ec:	2000486c 	.word	0x2000486c
 800f1f0:	200049b4 	.word	0x200049b4
 800f1f4:	2000000c 	.word	0x2000000c
 800f1f8:	f0f0f0ef 	.word	0xf0f0f0ef

0800f1fc <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800f1fc:	b590      	push	{r4, r7, lr}
 800f1fe:	b08d      	sub	sp, #52	; 0x34
 800f200:	af06      	add	r7, sp, #24
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
 800f208:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d102      	bne.n	800f216 <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f210:	230e      	movs	r3, #14
 800f212:	617b      	str	r3, [r7, #20]
 800f214:	e01a      	b.n	800f24c <_txe_thread_info_get+0x50>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a0f      	ldr	r2, [pc, #60]	; (800f258 <_txe_thread_info_get+0x5c>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d002      	beq.n	800f226 <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f220:	230e      	movs	r3, #14
 800f222:	617b      	str	r3, [r7, #20]
 800f224:	e012      	b.n	800f24c <_txe_thread_info_get+0x50>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 800f226:	683c      	ldr	r4, [r7, #0]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	68b9      	ldr	r1, [r7, #8]
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f230:	9304      	str	r3, [sp, #16]
 800f232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f234:	9303      	str	r3, [sp, #12]
 800f236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f238:	9302      	str	r3, [sp, #8]
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	9301      	str	r3, [sp, #4]
 800f23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f240:	9300      	str	r3, [sp, #0]
 800f242:	0023      	movs	r3, r4
 800f244:	f7fe f9b4 	bl	800d5b0 <_tx_thread_info_get>
 800f248:	0003      	movs	r3, r0
 800f24a:	617b      	str	r3, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 800f24c:	697b      	ldr	r3, [r7, #20]
}
 800f24e:	0018      	movs	r0, r3
 800f250:	46bd      	mov	sp, r7
 800f252:	b007      	add	sp, #28
 800f254:	bd90      	pop	{r4, r7, pc}
 800f256:	46c0      	nop			; (mov r8, r8)
 800f258:	54485244 	.word	0x54485244

0800f25c <_ux_device_stack_alternate_setting_get>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f264:	4b1c      	ldr	r3, [pc, #112]	; (800f2d8 <_ux_device_stack_alternate_setting_get+0x7c>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	3320      	adds	r3, #32
 800f26a:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b03      	cmp	r3, #3
 800f272:	d12b      	bne.n	800f2cc <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	22f0      	movs	r2, #240	; 0xf0
 800f278:	589b      	ldr	r3, [r3, r2]
 800f27a:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 800f27c:	e023      	b.n	800f2c6 <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	695b      	ldr	r3, [r3, #20]
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	429a      	cmp	r2, r3
 800f286:	d11b      	bne.n	800f2c0 <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	333c      	adds	r3, #60	; 0x3c
 800f28c:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	3330      	adds	r3, #48	; 0x30
 800f292:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 800f29c:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800f29e:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	2203      	movs	r2, #3
 800f2aa:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	2101      	movs	r1, #1
 800f2b2:	0018      	movs	r0, r3
 800f2b4:	f001 fe5e 	bl	8010f74 <_ux_device_stack_transfer_request>
 800f2b8:	0003      	movs	r3, r0
 800f2ba:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	e006      	b.n	800f2ce <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c4:	61fb      	str	r3, [r7, #28]
        while (interface != UX_NULL)
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1d8      	bne.n	800f27e <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800f2cc:	23ff      	movs	r3, #255	; 0xff
}
 800f2ce:	0018      	movs	r0, r3
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	b008      	add	sp, #32
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	46c0      	nop			; (mov r8, r8)
 800f2d8:	20004e74 	.word	0x20004e74

0800f2dc <_ux_device_stack_alternate_setting_set>:
/*                                            calculated payload size,    */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800f2dc:	b590      	push	{r4, r7, lr}
 800f2de:	b0af      	sub	sp, #188	; 0xbc
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f2e6:	4bdd      	ldr	r3, [pc, #884]	; (800f65c <_ux_device_stack_alternate_setting_set+0x380>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	3320      	adds	r3, #32
 800f2ec:	2298      	movs	r2, #152	; 0x98
 800f2ee:	18b9      	adds	r1, r7, r2
 800f2f0:	600b      	str	r3, [r1, #0]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800f2f2:	18bb      	adds	r3, r7, r2
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d001      	beq.n	800f300 <_ux_device_stack_alternate_setting_set+0x24>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800f2fc:	2354      	movs	r3, #84	; 0x54
 800f2fe:	e270      	b.n	800f7e2 <_ux_device_stack_alternate_setting_set+0x506>

    /* Find the current interface.  */
    interface =  device -> ux_slave_device_first_interface;
 800f300:	2398      	movs	r3, #152	; 0x98
 800f302:	18fb      	adds	r3, r7, r3
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	22f0      	movs	r2, #240	; 0xf0
 800f308:	589b      	ldr	r3, [r3, r2]
 800f30a:	22b4      	movs	r2, #180	; 0xb4
 800f30c:	18ba      	adds	r2, r7, r2
 800f30e:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface != UX_NULL)
 800f310:	e00b      	b.n	800f32a <_ux_device_stack_alternate_setting_set+0x4e>
    {

        if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800f312:	21b4      	movs	r1, #180	; 0xb4
 800f314:	187b      	adds	r3, r7, r1
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	695b      	ldr	r3, [r3, #20]
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d00a      	beq.n	800f336 <_ux_device_stack_alternate_setting_set+0x5a>
            break;
        else
            interface =  interface -> ux_slave_interface_next_interface;
 800f320:	187b      	adds	r3, r7, r1
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f326:	187a      	adds	r2, r7, r1
 800f328:	6013      	str	r3, [r2, #0]
    while (interface != UX_NULL)
 800f32a:	23b4      	movs	r3, #180	; 0xb4
 800f32c:	18fb      	adds	r3, r7, r3
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d1ee      	bne.n	800f312 <_ux_device_stack_alternate_setting_set+0x36>
 800f334:	e000      	b.n	800f338 <_ux_device_stack_alternate_setting_set+0x5c>
            break;
 800f336:	46c0      	nop			; (mov r8, r8)
        interface = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface == UX_NULL)
 800f338:	23b4      	movs	r3, #180	; 0xb4
 800f33a:	18fb      	adds	r3, r7, r3
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d106      	bne.n	800f350 <_ux_device_stack_alternate_setting_set+0x74>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800f342:	2252      	movs	r2, #82	; 0x52
 800f344:	2107      	movs	r1, #7
 800f346:	2002      	movs	r0, #2
 800f348:	f001 fe9a 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800f34c:	2352      	movs	r3, #82	; 0x52
 800f34e:	e248      	b.n	800f7e2 <_ux_device_stack_alternate_setting_set+0x506>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800f350:	23b4      	movs	r3, #180	; 0xb4
 800f352:	18fb      	adds	r3, r7, r3
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d101      	bne.n	800f362 <_ux_device_stack_alternate_setting_set+0x86>
        return(UX_SUCCESS);       
 800f35e:	2300      	movs	r3, #0
 800f360:	e23f      	b.n	800f7e2 <_ux_device_stack_alternate_setting_set+0x506>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800f362:	4bbe      	ldr	r3, [pc, #760]	; (800f65c <_ux_device_stack_alternate_setting_set+0x380>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2294      	movs	r2, #148	; 0x94
 800f368:	18ba      	adds	r2, r7, r2
 800f36a:	6013      	str	r3, [r2, #0]

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800f36c:	4bbb      	ldr	r3, [pc, #748]	; (800f65c <_ux_device_stack_alternate_setting_set+0x380>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	2394      	movs	r3, #148	; 0x94
 800f372:	005b      	lsls	r3, r3, #1
 800f374:	58d3      	ldr	r3, [r2, r3]
 800f376:	22b0      	movs	r2, #176	; 0xb0
 800f378:	18ba      	adds	r2, r7, r2
 800f37a:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800f37c:	4bb7      	ldr	r3, [pc, #732]	; (800f65c <_ux_device_stack_alternate_setting_set+0x380>)
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	2396      	movs	r3, #150	; 0x96
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	58d3      	ldr	r3, [r2, r3]
 800f386:	22ac      	movs	r2, #172	; 0xac
 800f388:	18ba      	adds	r2, r7, r2
 800f38a:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800f38c:	e222      	b.n	800f7d4 <_ux_device_stack_alternate_setting_set+0x4f8>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800f38e:	20b0      	movs	r0, #176	; 0xb0
 800f390:	183b      	adds	r3, r7, r0
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2290      	movs	r2, #144	; 0x90
 800f398:	18ba      	adds	r2, r7, r2
 800f39a:	6013      	str	r3, [r2, #0]

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800f39c:	218f      	movs	r1, #143	; 0x8f
 800f39e:	187b      	adds	r3, r7, r1
 800f3a0:	183a      	adds	r2, r7, r0
 800f3a2:	6812      	ldr	r2, [r2, #0]
 800f3a4:	7852      	ldrb	r2, [r2, #1]
 800f3a6:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800f3a8:	187b      	adds	r3, r7, r1
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d000      	beq.n	800f3b2 <_ux_device_stack_alternate_setting_set+0xd6>
 800f3b0:	e1ff      	b.n	800f7b2 <_ux_device_stack_alternate_setting_set+0x4d6>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800f3b2:	2458      	movs	r4, #88	; 0x58
 800f3b4:	193b      	adds	r3, r7, r4
 800f3b6:	49aa      	ldr	r1, [pc, #680]	; (800f660 <_ux_device_stack_alternate_setting_set+0x384>)
 800f3b8:	183a      	adds	r2, r7, r0
 800f3ba:	6810      	ldr	r0, [r2, #0]
 800f3bc:	2208      	movs	r2, #8
 800f3be:	f001 ff4e 	bl	801125e <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800f3c2:	0020      	movs	r0, r4
 800f3c4:	183b      	adds	r3, r7, r0
 800f3c6:	691a      	ldr	r2, [r3, #16]
 800f3c8:	2398      	movs	r3, #152	; 0x98
 800f3ca:	18fb      	adds	r3, r7, r3
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	21cc      	movs	r1, #204	; 0xcc
 800f3d0:	585b      	ldr	r3, [r3, r1]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d000      	beq.n	800f3d8 <_ux_device_stack_alternate_setting_set+0xfc>
 800f3d6:	e1ec      	b.n	800f7b2 <_ux_device_stack_alternate_setting_set+0x4d6>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800f3d8:	183b      	adds	r3, r7, r0
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	22ac      	movs	r2, #172	; 0xac
 800f3de:	18ba      	adds	r2, r7, r2
 800f3e0:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800f3e2:	e1df      	b.n	800f7a4 <_ux_device_stack_alternate_setting_set+0x4c8>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800f3e4:	20b0      	movs	r0, #176	; 0xb0
 800f3e6:	183b      	adds	r3, r7, r0
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	2290      	movs	r2, #144	; 0x90
 800f3ee:	18ba      	adds	r2, r7, r2
 800f3f0:	6013      	str	r3, [r2, #0]

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800f3f2:	218f      	movs	r1, #143	; 0x8f
 800f3f4:	187b      	adds	r3, r7, r1
 800f3f6:	183a      	adds	r2, r7, r0
 800f3f8:	6812      	ldr	r2, [r2, #0]
 800f3fa:	7852      	ldrb	r2, [r2, #1]
 800f3fc:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800f3fe:	187b      	adds	r3, r7, r1
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	2b04      	cmp	r3, #4
 800f404:	d000      	beq.n	800f408 <_ux_device_stack_alternate_setting_set+0x12c>
 800f406:	e1bc      	b.n	800f782 <_ux_device_stack_alternate_setting_set+0x4a6>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800f408:	2434      	movs	r4, #52	; 0x34
 800f40a:	193b      	adds	r3, r7, r4
 800f40c:	4995      	ldr	r1, [pc, #596]	; (800f664 <_ux_device_stack_alternate_setting_set+0x388>)
 800f40e:	183a      	adds	r2, r7, r0
 800f410:	6810      	ldr	r0, [r2, #0]
 800f412:	2209      	movs	r2, #9
 800f414:	f001 ff23 	bl	801125e <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800f418:	193b      	adds	r3, r7, r4
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d000      	beq.n	800f424 <_ux_device_stack_alternate_setting_set+0x148>
 800f422:	e1ae      	b.n	800f782 <_ux_device_stack_alternate_setting_set+0x4a6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800f424:	193b      	adds	r3, r7, r4
 800f426:	68db      	ldr	r3, [r3, #12]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800f428:	683a      	ldr	r2, [r7, #0]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d000      	beq.n	800f430 <_ux_device_stack_alternate_setting_set+0x154>
 800f42e:	e1a8      	b.n	800f782 <_ux_device_stack_alternate_setting_set+0x4a6>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface -> ux_slave_interface_first_endpoint;
 800f430:	23b4      	movs	r3, #180	; 0xb4
 800f432:	18fb      	adds	r3, r7, r3
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f438:	22a8      	movs	r2, #168	; 0xa8
 800f43a:	18ba      	adds	r2, r7, r2
 800f43c:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 800f43e:	e02c      	b.n	800f49a <_ux_device_stack_alternate_setting_set+0x1be>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800f440:	24a8      	movs	r4, #168	; 0xa8
 800f442:	193b      	adds	r3, r7, r4
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2126      	movs	r1, #38	; 0x26
 800f448:	0018      	movs	r0, r3
 800f44a:	f001 fd7f 	bl	8010f4c <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800f44e:	2194      	movs	r1, #148	; 0x94
 800f450:	187b      	adds	r3, r7, r1
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	699b      	ldr	r3, [r3, #24]
 800f456:	193a      	adds	r2, r7, r4
 800f458:	6812      	ldr	r2, [r2, #0]
 800f45a:	1879      	adds	r1, r7, r1
 800f45c:	6808      	ldr	r0, [r1, #0]
 800f45e:	210f      	movs	r1, #15
 800f460:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800f462:	193b      	adds	r3, r7, r4
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800f46a:	0021      	movs	r1, r4
 800f46c:	187b      	adds	r3, r7, r1
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2200      	movs	r2, #0
 800f472:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800f474:	187b      	adds	r3, r7, r1
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2200      	movs	r2, #0
 800f47a:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800f47c:	187b      	adds	r3, r7, r1
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2200      	movs	r2, #0
 800f482:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800f484:	187b      	adds	r3, r7, r1
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2200      	movs	r2, #0
 800f48a:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800f48c:	187b      	adds	r3, r7, r1
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2200      	movs	r2, #0
 800f492:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800f494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f496:	187a      	adds	r2, r7, r1
 800f498:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 800f49a:	23a8      	movs	r3, #168	; 0xa8
 800f49c:	18fb      	adds	r3, r7, r3
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1cd      	bne.n	800f440 <_ux_device_stack_alternate_setting_set+0x164>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface -> ux_slave_interface_first_endpoint = UX_NULL;
 800f4a4:	23b4      	movs	r3, #180	; 0xb4
 800f4a6:	18fb      	adds	r3, r7, r3
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800f4ae:	21b0      	movs	r1, #176	; 0xb0
 800f4b0:	187b      	adds	r3, r7, r1
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	001a      	movs	r2, r3
 800f4b8:	20ac      	movs	r0, #172	; 0xac
 800f4ba:	183b      	adds	r3, r7, r0
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	1a9b      	subs	r3, r3, r2
 800f4c0:	183a      	adds	r2, r7, r0
 800f4c2:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 800f4c4:	187b      	adds	r3, r7, r1
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	001a      	movs	r2, r3
 800f4cc:	187b      	adds	r3, r7, r1
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	189b      	adds	r3, r3, r2
 800f4d2:	187a      	adds	r2, r7, r1
 800f4d4:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800f4d6:	e10a      	b.n	800f6ee <_ux_device_stack_alternate_setting_set+0x412>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800f4d8:	22b0      	movs	r2, #176	; 0xb0
 800f4da:	18bb      	adds	r3, r7, r2
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2190      	movs	r1, #144	; 0x90
 800f4e2:	1879      	adds	r1, r7, r1
 800f4e4:	600b      	str	r3, [r1, #0]
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800f4e6:	218f      	movs	r1, #143	; 0x8f
 800f4e8:	187b      	adds	r3, r7, r1
 800f4ea:	18ba      	adds	r2, r7, r2
 800f4ec:	6812      	ldr	r2, [r2, #0]
 800f4ee:	7852      	ldrb	r2, [r2, #1]
 800f4f0:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800f4f2:	187b      	adds	r3, r7, r1
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b05      	cmp	r3, #5
 800f4f8:	d008      	beq.n	800f50c <_ux_device_stack_alternate_setting_set+0x230>
 800f4fa:	dd00      	ble.n	800f4fe <_ux_device_stack_alternate_setting_set+0x222>
 800f4fc:	e0e5      	b.n	800f6ca <_ux_device_stack_alternate_setting_set+0x3ee>
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	d100      	bne.n	800f504 <_ux_device_stack_alternate_setting_set+0x228>
 800f502:	e0db      	b.n	800f6bc <_ux_device_stack_alternate_setting_set+0x3e0>
 800f504:	2b04      	cmp	r3, #4
 800f506:	d100      	bne.n	800f50a <_ux_device_stack_alternate_setting_set+0x22e>
 800f508:	e0d8      	b.n	800f6bc <_ux_device_stack_alternate_setting_set+0x3e0>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800f50a:	e0de      	b.n	800f6ca <_ux_device_stack_alternate_setting_set+0x3ee>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800f50c:	2198      	movs	r1, #152	; 0x98
 800f50e:	187b      	adds	r3, r7, r1
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	22fc      	movs	r2, #252	; 0xfc
 800f514:	589b      	ldr	r3, [r3, r2]
 800f516:	22a8      	movs	r2, #168	; 0xa8
 800f518:	18ba      	adds	r2, r7, r2
 800f51a:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800f51c:	187b      	adds	r3, r7, r1
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	2380      	movs	r3, #128	; 0x80
 800f522:	005b      	lsls	r3, r3, #1
 800f524:	58d3      	ldr	r3, [r2, r3]
 800f526:	22a0      	movs	r2, #160	; 0xa0
 800f528:	18ba      	adds	r2, r7, r2
 800f52a:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 800f52c:	e016      	b.n	800f55c <_ux_device_stack_alternate_setting_set+0x280>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800f52e:	22a8      	movs	r2, #168	; 0xa8
 800f530:	18bb      	adds	r3, r7, r2
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d104      	bne.n	800f544 <_ux_device_stack_alternate_setting_set+0x268>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800f53a:	18bb      	adds	r3, r7, r2
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2201      	movs	r2, #1
 800f540:	601a      	str	r2, [r3, #0]
                                            break;
 800f542:	e010      	b.n	800f566 <_ux_device_stack_alternate_setting_set+0x28a>
                                        endpoint++;
 800f544:	22a8      	movs	r2, #168	; 0xa8
 800f546:	18bb      	adds	r3, r7, r2
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	3390      	adds	r3, #144	; 0x90
 800f54c:	18ba      	adds	r2, r7, r2
 800f54e:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 800f550:	22a0      	movs	r2, #160	; 0xa0
 800f552:	18bb      	adds	r3, r7, r2
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	3b01      	subs	r3, #1
 800f558:	18ba      	adds	r2, r7, r2
 800f55a:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 800f55c:	23a0      	movs	r3, #160	; 0xa0
 800f55e:	18fb      	adds	r3, r7, r3
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d1e3      	bne.n	800f52e <_ux_device_stack_alternate_setting_set+0x252>
                                    if (endpoints_pool_number == 0)
 800f566:	23a0      	movs	r3, #160	; 0xa0
 800f568:	18fb      	adds	r3, r7, r3
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d101      	bne.n	800f574 <_ux_device_stack_alternate_setting_set+0x298>
                                        return(UX_MEMORY_INSUFFICIENT);
 800f570:	2312      	movs	r3, #18
 800f572:	e136      	b.n	800f7e2 <_ux_device_stack_alternate_setting_set+0x506>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800f574:	24a8      	movs	r4, #168	; 0xa8
 800f576:	193b      	adds	r3, r7, r4
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800f57c:	493a      	ldr	r1, [pc, #232]	; (800f668 <_ux_device_stack_alternate_setting_set+0x38c>)
 800f57e:	22b0      	movs	r2, #176	; 0xb0
 800f580:	18ba      	adds	r2, r7, r2
 800f582:	6810      	ldr	r0, [r2, #0]
 800f584:	2206      	movs	r2, #6
 800f586:	f001 fe6a 	bl	801125e <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f58a:	0021      	movs	r1, r4
 800f58c:	187b      	adds	r3, r7, r1
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3330      	adds	r3, #48	; 0x30
 800f592:	2280      	movs	r2, #128	; 0x80
 800f594:	18ba      	adds	r2, r7, r2
 800f596:	6013      	str	r3, [r2, #0]
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800f598:	187b      	adds	r3, r7, r1
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 800f59e:	055b      	lsls	r3, r3, #21
 800f5a0:	0d5b      	lsrs	r3, r3, #21
 800f5a2:	209c      	movs	r0, #156	; 0x9c
 800f5a4:	183a      	adds	r2, r7, r0
 800f5a6:	6013      	str	r3, [r2, #0]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f5a8:	4b2c      	ldr	r3, [pc, #176]	; (800f65c <_ux_device_stack_alternate_setting_set+0x380>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	23ce      	movs	r3, #206	; 0xce
 800f5ae:	005b      	lsls	r3, r3, #1
 800f5b0:	58d3      	ldr	r3, [r2, r3]
 800f5b2:	2b02      	cmp	r3, #2
 800f5b4:	d11b      	bne.n	800f5ee <_ux_device_stack_alternate_setting_set+0x312>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800f5b6:	187b      	adds	r3, r7, r1
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	699b      	ldr	r3, [r3, #24]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f5c0:	d015      	beq.n	800f5ee <_ux_device_stack_alternate_setting_set+0x312>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800f5c2:	187b      	adds	r3, r7, r1
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	69da      	ldr	r2, [r3, #28]
 800f5c8:	23c0      	movs	r3, #192	; 0xc0
 800f5ca:	015b      	lsls	r3, r3, #5
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 800f5d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00b      	beq.n	800f5ee <_ux_device_stack_alternate_setting_set+0x312>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800f5d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5d8:	0adb      	lsrs	r3, r3, #11
 800f5da:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 800f5dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5de:	3301      	adds	r3, #1
 800f5e0:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 800f5e2:	183b      	adds	r3, r7, r0
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f5e8:	4353      	muls	r3, r2
 800f5ea:	183a      	adds	r2, r7, r0
 800f5ec:	6013      	str	r3, [r2, #0]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800f5ee:	2180      	movs	r1, #128	; 0x80
 800f5f0:	187b      	adds	r3, r7, r1
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	229c      	movs	r2, #156	; 0x9c
 800f5f6:	18ba      	adds	r2, r7, r2
 800f5f8:	6812      	ldr	r2, [r2, #0]
 800f5fa:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800f5fc:	187b      	adds	r3, r7, r1
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	24a8      	movs	r4, #168	; 0xa8
 800f602:	193a      	adds	r2, r7, r4
 800f604:	6812      	ldr	r2, [r2, #0]
 800f606:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800f608:	187b      	adds	r3, r7, r1
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2201      	movs	r2, #1
 800f60e:	4252      	negs	r2, r2
 800f610:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface;
 800f612:	193b      	adds	r3, r7, r4
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	22b4      	movs	r2, #180	; 0xb4
 800f618:	18ba      	adds	r2, r7, r2
 800f61a:	6812      	ldr	r2, [r2, #0]
 800f61c:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 800f61e:	193b      	adds	r3, r7, r4
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2298      	movs	r2, #152	; 0x98
 800f624:	18ba      	adds	r2, r7, r2
 800f626:	6812      	ldr	r2, [r2, #0]
 800f628:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800f62a:	2194      	movs	r1, #148	; 0x94
 800f62c:	187b      	adds	r3, r7, r1
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	193a      	adds	r2, r7, r4
 800f634:	6812      	ldr	r2, [r2, #0]
 800f636:	1879      	adds	r1, r7, r1
 800f638:	6808      	ldr	r0, [r1, #0]
 800f63a:	210e      	movs	r1, #14
 800f63c:	4798      	blx	r3
 800f63e:	0003      	movs	r3, r0
 800f640:	2184      	movs	r1, #132	; 0x84
 800f642:	187a      	adds	r2, r7, r1
 800f644:	6013      	str	r3, [r2, #0]
                                    if (status != UX_SUCCESS)
 800f646:	187b      	adds	r3, r7, r1
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00e      	beq.n	800f66c <_ux_device_stack_alternate_setting_set+0x390>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800f64e:	193b      	adds	r3, r7, r4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2200      	movs	r2, #0
 800f654:	601a      	str	r2, [r3, #0]
                                        return(status);
 800f656:	187b      	adds	r3, r7, r1
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	e0c2      	b.n	800f7e2 <_ux_device_stack_alternate_setting_set+0x506>
 800f65c:	20004e74 	.word	0x20004e74
 800f660:	20000040 	.word	0x20000040
 800f664:	20000048 	.word	0x20000048
 800f668:	20000028 	.word	0x20000028
                                    if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 800f66c:	22b4      	movs	r2, #180	; 0xb4
 800f66e:	18bb      	adds	r3, r7, r2
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f674:	2b00      	cmp	r3, #0
 800f676:	d106      	bne.n	800f686 <_ux_device_stack_alternate_setting_set+0x3aa>
                                        interface -> ux_slave_interface_first_endpoint =  endpoint;
 800f678:	18bb      	adds	r3, r7, r2
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	22a8      	movs	r2, #168	; 0xa8
 800f67e:	18ba      	adds	r2, r7, r2
 800f680:	6812      	ldr	r2, [r2, #0]
 800f682:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 800f684:	e022      	b.n	800f6cc <_ux_device_stack_alternate_setting_set+0x3f0>
                                        endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 800f686:	23b4      	movs	r3, #180	; 0xb4
 800f688:	18fb      	adds	r3, r7, r3
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68e:	22a4      	movs	r2, #164	; 0xa4
 800f690:	18ba      	adds	r2, r7, r2
 800f692:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800f694:	e005      	b.n	800f6a2 <_ux_device_stack_alternate_setting_set+0x3c6>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800f696:	22a4      	movs	r2, #164	; 0xa4
 800f698:	18bb      	adds	r3, r7, r2
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69e:	18ba      	adds	r2, r7, r2
 800f6a0:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800f6a2:	22a4      	movs	r2, #164	; 0xa4
 800f6a4:	18bb      	adds	r3, r7, r2
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1f3      	bne.n	800f696 <_ux_device_stack_alternate_setting_set+0x3ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800f6ae:	18bb      	adds	r3, r7, r2
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	22a8      	movs	r2, #168	; 0xa8
 800f6b4:	18ba      	adds	r2, r7, r2
 800f6b6:	6812      	ldr	r2, [r2, #0]
 800f6b8:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 800f6ba:	e007      	b.n	800f6cc <_ux_device_stack_alternate_setting_set+0x3f0>
                                    device_framework_length =  descriptor_length;
 800f6bc:	2390      	movs	r3, #144	; 0x90
 800f6be:	18fb      	adds	r3, r7, r3
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	22ac      	movs	r2, #172	; 0xac
 800f6c4:	18ba      	adds	r2, r7, r2
 800f6c6:	6013      	str	r3, [r2, #0]
                                    break;
 800f6c8:	e000      	b.n	800f6cc <_ux_device_stack_alternate_setting_set+0x3f0>
                                    break;
 800f6ca:	46c0      	nop			; (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800f6cc:	21ac      	movs	r1, #172	; 0xac
 800f6ce:	187b      	adds	r3, r7, r1
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	2090      	movs	r0, #144	; 0x90
 800f6d4:	183b      	adds	r3, r7, r0
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	187a      	adds	r2, r7, r1
 800f6dc:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800f6de:	21b0      	movs	r1, #176	; 0xb0
 800f6e0:	187b      	adds	r3, r7, r1
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	183b      	adds	r3, r7, r0
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	18d3      	adds	r3, r2, r3
 800f6ea:	187a      	adds	r2, r7, r1
 800f6ec:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 800f6ee:	23ac      	movs	r3, #172	; 0xac
 800f6f0:	18fb      	adds	r3, r7, r3
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d000      	beq.n	800f6fa <_ux_device_stack_alternate_setting_set+0x41e>
 800f6f8:	e6ee      	b.n	800f4d8 <_ux_device_stack_alternate_setting_set+0x1fc>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800f6fa:	24b4      	movs	r4, #180	; 0xb4
 800f6fc:	193b      	adds	r3, r7, r4
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	330c      	adds	r3, #12
 800f702:	2234      	movs	r2, #52	; 0x34
 800f704:	18b9      	adds	r1, r7, r2
 800f706:	2224      	movs	r2, #36	; 0x24
 800f708:	0018      	movs	r0, r3
 800f70a:	f001 ff6f 	bl	80115ec <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 800f70e:	4b37      	ldr	r3, [pc, #220]	; (800f7ec <_ux_device_stack_alternate_setting_set+0x510>)
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	193b      	adds	r3, r7, r4
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	695b      	ldr	r3, [r3, #20]
 800f718:	3356      	adds	r3, #86	; 0x56
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	18d3      	adds	r3, r2, r3
 800f71e:	3304      	adds	r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2288      	movs	r2, #136	; 0x88
 800f724:	18b9      	adds	r1, r7, r2
 800f726:	600b      	str	r3, [r1, #0]

                            /* Check if class driver is available. */
                            if (class == UX_NULL || class -> ux_slave_class_status == UX_UNUSED)
 800f728:	18bb      	adds	r3, r7, r2
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d004      	beq.n	800f73a <_ux_device_stack_alternate_setting_set+0x45e>
 800f730:	18bb      	adds	r3, r7, r2
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f736:	2b00      	cmp	r3, #0
 800f738:	d101      	bne.n	800f73e <_ux_device_stack_alternate_setting_set+0x462>
                            {

                                return (UX_NO_CLASS_MATCH);
 800f73a:	2357      	movs	r3, #87	; 0x57
 800f73c:	e051      	b.n	800f7e2 <_ux_device_stack_alternate_setting_set+0x506>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800f73e:	2008      	movs	r0, #8
 800f740:	183b      	adds	r3, r7, r0
 800f742:	2206      	movs	r2, #6
 800f744:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface;
 800f746:	183b      	adds	r3, r7, r0
 800f748:	21b4      	movs	r1, #180	; 0xb4
 800f74a:	187a      	adds	r2, r7, r1
 800f74c:	6812      	ldr	r2, [r2, #0]
 800f74e:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class;
 800f750:	183b      	adds	r3, r7, r0
 800f752:	2488      	movs	r4, #136	; 0x88
 800f754:	193a      	adds	r2, r7, r4
 800f756:	6812      	ldr	r2, [r2, #0]
 800f758:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class -> ux_slave_class_interface = interface;
 800f75a:	193b      	adds	r3, r7, r4
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	2388      	movs	r3, #136	; 0x88
 800f760:	005b      	lsls	r3, r3, #1
 800f762:	1879      	adds	r1, r7, r1
 800f764:	6809      	ldr	r1, [r1, #0]
 800f766:	50d1      	str	r1, [r2, r3]
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class -> ux_slave_class_entry_function(&class_command);
 800f768:	193b      	adds	r3, r7, r4
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f76e:	183a      	adds	r2, r7, r0
 800f770:	0010      	movs	r0, r2
 800f772:	4798      	blx	r3
 800f774:	0003      	movs	r3, r0
 800f776:	2284      	movs	r2, #132	; 0x84
 800f778:	18b9      	adds	r1, r7, r2
 800f77a:	600b      	str	r3, [r1, #0]

                            /* We are done here.  */
                            return(status); 
 800f77c:	18bb      	adds	r3, r7, r2
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	e02f      	b.n	800f7e2 <_ux_device_stack_alternate_setting_set+0x506>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800f782:	21ac      	movs	r1, #172	; 0xac
 800f784:	187b      	adds	r3, r7, r1
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	2090      	movs	r0, #144	; 0x90
 800f78a:	183b      	adds	r3, r7, r0
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	187a      	adds	r2, r7, r1
 800f792:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800f794:	21b0      	movs	r1, #176	; 0xb0
 800f796:	187b      	adds	r3, r7, r1
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	183b      	adds	r3, r7, r0
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	18d3      	adds	r3, r2, r3
 800f7a0:	187a      	adds	r2, r7, r1
 800f7a2:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 800f7a4:	23ac      	movs	r3, #172	; 0xac
 800f7a6:	18fb      	adds	r3, r7, r3
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d000      	beq.n	800f7b0 <_ux_device_stack_alternate_setting_set+0x4d4>
 800f7ae:	e619      	b.n	800f3e4 <_ux_device_stack_alternate_setting_set+0x108>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800f7b0:	e016      	b.n	800f7e0 <_ux_device_stack_alternate_setting_set+0x504>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800f7b2:	21ac      	movs	r1, #172	; 0xac
 800f7b4:	187b      	adds	r3, r7, r1
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	2090      	movs	r0, #144	; 0x90
 800f7ba:	183b      	adds	r3, r7, r0
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	187a      	adds	r2, r7, r1
 800f7c2:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800f7c4:	21b0      	movs	r1, #176	; 0xb0
 800f7c6:	187b      	adds	r3, r7, r1
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	183b      	adds	r3, r7, r0
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	18d3      	adds	r3, r2, r3
 800f7d0:	187a      	adds	r2, r7, r1
 800f7d2:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 800f7d4:	23ac      	movs	r3, #172	; 0xac
 800f7d6:	18fb      	adds	r3, r7, r3
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d000      	beq.n	800f7e0 <_ux_device_stack_alternate_setting_set+0x504>
 800f7de:	e5d6      	b.n	800f38e <_ux_device_stack_alternate_setting_set+0xb2>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800f7e0:	23ff      	movs	r3, #255	; 0xff
#endif
}
 800f7e2:	0018      	movs	r0, r3
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	b02f      	add	sp, #188	; 0xbc
 800f7e8:	bd90      	pop	{r4, r7, pc}
 800f7ea:	46c0      	nop			; (mov r8, r8)
 800f7ec:	20004e74 	.word	0x20004e74

0800f7f0 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b092      	sub	sp, #72	; 0x48
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800f7fe:	2300      	movs	r3, #0
 800f800:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800f802:	2310      	movs	r3, #16
 800f804:	18f9      	adds	r1, r7, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	223f      	movs	r2, #63	; 0x3f
 800f80a:	0018      	movs	r0, r3
 800f80c:	f002 f8e4 	bl	80119d8 <_ux_utility_string_length_check>
 800f810:	0003      	movs	r3, r0
 800f812:	647b      	str	r3, [r7, #68]	; 0x44
    if (status)
 800f814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <_ux_device_stack_class_register+0x2e>
        return(status);
 800f81a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f81c:	e03d      	b.n	800f89a <_ux_device_stack_class_register+0xaa>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800f81e:	4b21      	ldr	r3, [pc, #132]	; (800f8a4 <_ux_device_stack_class_register+0xb4>)
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	23ac      	movs	r3, #172	; 0xac
 800f824:	005b      	lsls	r3, r3, #1
 800f826:	58d3      	ldr	r3, [r2, r3]
 800f828:	643b      	str	r3, [r7, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800f82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d132      	bne.n	800f898 <_ux_device_stack_class_register+0xa8>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800f832:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	1c5a      	adds	r2, r3, #1
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	0019      	movs	r1, r3
 800f83c:	f001 fed6 	bl	80115ec <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800f840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f842:	68ba      	ldr	r2, [r7, #8]
 800f844:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800f846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f848:	2382      	movs	r3, #130	; 0x82
 800f84a:	005b      	lsls	r3, r3, #1
 800f84c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f84e:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800f850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f852:	2386      	movs	r3, #134	; 0x86
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	6879      	ldr	r1, [r7, #4]
 800f858:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800f85a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f85c:	2384      	movs	r3, #132	; 0x84
 800f85e:	005b      	lsls	r3, r3, #1
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	50d1      	str	r1, [r2, r3]
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800f864:	2114      	movs	r1, #20
 800f866:	187b      	adds	r3, r7, r1
 800f868:	2205      	movs	r2, #5
 800f86a:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 800f86c:	187b      	adds	r3, r7, r1
 800f86e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f870:	625a      	str	r2, [r3, #36]	; 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800f872:	187b      	adds	r3, r7, r1
 800f874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f876:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800f878:	187a      	adds	r2, r7, r1
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	0010      	movs	r0, r2
 800f87e:	4798      	blx	r3
 800f880:	0003      	movs	r3, r0
 800f882:	647b      	str	r3, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800f884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <_ux_device_stack_class_register+0x9e>
                return(status);
 800f88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f88c:	e005      	b.n	800f89a <_ux_device_stack_class_register+0xaa>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800f88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f890:	2201      	movs	r2, #1
 800f892:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800f894:	2300      	movs	r3, #0
 800f896:	e000      	b.n	800f89a <_ux_device_stack_class_register+0xaa>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800f898:	2312      	movs	r3, #18
}
 800f89a:	0018      	movs	r0, r3
 800f89c:	46bd      	mov	sp, r7
 800f89e:	b012      	add	sp, #72	; 0x48
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	46c0      	nop			; (mov r8, r8)
 800f8a4:	20004e74 	.word	0x20004e74

0800f8a8 <_ux_device_stack_clear_feature>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b08a      	sub	sp, #40	; 0x28
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	60b9      	str	r1, [r7, #8]
 800f8b2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f8b4:	4b2b      	ldr	r3, [pc, #172]	; (800f964 <_ux_device_stack_clear_feature+0xbc>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f8ba:	4b2a      	ldr	r3, [pc, #168]	; (800f964 <_ux_device_stack_clear_feature+0xbc>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3320      	adds	r3, #32
 800f8c0:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	333c      	adds	r3, #60	; 0x3c
 800f8c6:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	d002      	beq.n	800f8d6 <_ux_device_stack_clear_feature+0x2e>
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	d013      	beq.n	800f8fc <_ux_device_stack_clear_feature+0x54>
 800f8d4:	e037      	b.n	800f946 <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d13c      	bne.n	800f956 <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800f8dc:	4b21      	ldr	r3, [pc, #132]	; (800f964 <_ux_device_stack_clear_feature+0xbc>)
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	23d2      	movs	r3, #210	; 0xd2
 800f8e2:	005b      	lsls	r3, r3, #1
 800f8e4:	58d3      	ldr	r3, [r2, r3]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d006      	beq.n	800f8f8 <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800f8ea:	4b1e      	ldr	r3, [pc, #120]	; (800f964 <_ux_device_stack_clear_feature+0xbc>)
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	23d4      	movs	r3, #212	; 0xd4
 800f8f0:	005b      	lsls	r3, r3, #1
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800f8f6:	e02e      	b.n	800f956 <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800f8f8:	2354      	movs	r3, #84	; 0x54
 800f8fa:	e02e      	b.n	800f95a <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	22f0      	movs	r2, #240	; 0xf0
 800f900:	589b      	ldr	r3, [r3, r2]
 800f902:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 800f904:	e01c      	b.n	800f940 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 800f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f90a:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800f90c:	e012      	b.n	800f934 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	695b      	ldr	r3, [r3, #20]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	429a      	cmp	r2, r3
 800f916:	d10a      	bne.n	800f92e <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	699b      	ldr	r3, [r3, #24]
 800f91c:	6a3a      	ldr	r2, [r7, #32]
 800f91e:	69f8      	ldr	r0, [r7, #28]
 800f920:	2110      	movs	r1, #16
 800f922:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800f924:	6a3b      	ldr	r3, [r7, #32]
 800f926:	2200      	movs	r2, #0
 800f928:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800f92a:	2300      	movs	r3, #0
 800f92c:	e015      	b.n	800f95a <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f932:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1e9      	bne.n	800f90e <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f93e:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 800f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f942:	2b00      	cmp	r3, #0
 800f944:	d1df      	bne.n	800f906 <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	697a      	ldr	r2, [r7, #20]
 800f94c:	69f8      	ldr	r0, [r7, #28]
 800f94e:	2114      	movs	r1, #20
 800f950:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800f952:	2300      	movs	r3, #0
 800f954:	e001      	b.n	800f95a <_ux_device_stack_clear_feature+0xb2>
        break;
 800f956:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800f958:	2300      	movs	r3, #0
}
 800f95a:	0018      	movs	r0, r3
 800f95c:	46bd      	mov	sp, r7
 800f95e:	b00a      	add	sp, #40	; 0x28
 800f960:	bd80      	pop	{r7, pc}
 800f962:	46c0      	nop			; (mov r8, r8)
 800f964:	20004e74 	.word	0x20004e74

0800f968 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f96e:	4b10      	ldr	r3, [pc, #64]	; (800f9b0 <_ux_device_stack_configuration_get+0x48>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	3320      	adds	r3, #32
 800f974:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	333c      	adds	r3, #60	; 0x3c
 800f97a:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	3330      	adds	r3, #48	; 0x30
 800f980:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	22cc      	movs	r2, #204	; 0xcc
 800f986:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800f98c:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800f98e:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2203      	movs	r2, #3
 800f994:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2201      	movs	r2, #1
 800f99a:	2101      	movs	r1, #1
 800f99c:	0018      	movs	r0, r3
 800f99e:	f001 fae9 	bl	8010f74 <_ux_device_stack_transfer_request>
 800f9a2:	0003      	movs	r3, r0
 800f9a4:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 800f9a6:	683b      	ldr	r3, [r7, #0]
}
 800f9a8:	0018      	movs	r0, r3
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	b004      	add	sp, #16
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	20004e74 	.word	0x20004e74

0800f9b4 <_ux_device_stack_configuration_set>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800f9b4:	b590      	push	{r4, r7, lr}
 800f9b6:	b0ad      	sub	sp, #180	; 0xb4
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800f9bc:	235c      	movs	r3, #92	; 0x5c
 800f9be:	18fb      	adds	r3, r7, r3
 800f9c0:	0018      	movs	r0, r3
 800f9c2:	2320      	movs	r3, #32
 800f9c4:	001a      	movs	r2, r3
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	f004 fa28 	bl	8013e1c <memset>
UX_SLAVE_INTERFACE              *interface; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	22a0      	movs	r2, #160	; 0xa0
 800f9d0:	18ba      	adds	r2, r7, r2
 800f9d2:	6013      	str	r3, [r2, #0]
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	2298      	movs	r2, #152	; 0x98
 800f9d8:	18ba      	adds	r2, r7, r2
 800f9da:	6013      	str	r3, [r2, #0]
ULONG                           iad_number_interfaces =  0;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	2294      	movs	r2, #148	; 0x94
 800f9e0:	18ba      	adds	r2, r7, r2
 800f9e2:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f9e4:	4bbf      	ldr	r3, [pc, #764]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2290      	movs	r2, #144	; 0x90
 800f9ea:	18ba      	adds	r2, r7, r2
 800f9ec:	6013      	str	r3, [r2, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f9ee:	4bbd      	ldr	r3, [pc, #756]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3320      	adds	r3, #32
 800f9f4:	228c      	movs	r2, #140	; 0x8c
 800f9f6:	18b9      	adds	r1, r7, r2
 800f9f8:	600b      	str	r3, [r1, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	219c      	movs	r1, #156	; 0x9c
 800f9fe:	1879      	adds	r1, r7, r1
 800fa00:	600b      	str	r3, [r1, #0]

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800fa02:	18bb      	adds	r3, r7, r2
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	22cc      	movs	r2, #204	; 0xcc
 800fa08:	589b      	ldr	r3, [r3, r2]
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d101      	bne.n	800fa14 <_ux_device_stack_configuration_set+0x60>
        return(UX_SUCCESS);
 800fa10:	2300      	movs	r3, #0
 800fa12:	e1c9      	b.n	800fda8 <_ux_device_stack_configuration_set+0x3f4>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800fa14:	4bb3      	ldr	r3, [pc, #716]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	2394      	movs	r3, #148	; 0x94
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	58d3      	ldr	r3, [r2, r3]
 800fa1e:	22ac      	movs	r2, #172	; 0xac
 800fa20:	18ba      	adds	r2, r7, r2
 800fa22:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800fa24:	4baf      	ldr	r3, [pc, #700]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	2396      	movs	r3, #150	; 0x96
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	58d3      	ldr	r3, [r2, r3]
 800fa2e:	22a8      	movs	r2, #168	; 0xa8
 800fa30:	18ba      	adds	r2, r7, r2
 800fa32:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800fa34:	e02e      	b.n	800fa94 <_ux_device_stack_configuration_set+0xe0>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800fa36:	20ac      	movs	r0, #172	; 0xac
 800fa38:	183b      	adds	r3, r7, r0
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	2288      	movs	r2, #136	; 0x88
 800fa40:	18ba      	adds	r2, r7, r2
 800fa42:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800fa44:	2187      	movs	r1, #135	; 0x87
 800fa46:	187b      	adds	r3, r7, r1
 800fa48:	183a      	adds	r2, r7, r0
 800fa4a:	6812      	ldr	r2, [r2, #0]
 800fa4c:	7852      	ldrb	r2, [r2, #1]
 800fa4e:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800fa50:	187b      	adds	r3, r7, r1
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	2b02      	cmp	r3, #2
 800fa56:	d10c      	bne.n	800fa72 <_ux_device_stack_configuration_set+0xbe>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800fa58:	245c      	movs	r4, #92	; 0x5c
 800fa5a:	193b      	adds	r3, r7, r4
 800fa5c:	49a2      	ldr	r1, [pc, #648]	; (800fce8 <_ux_device_stack_configuration_set+0x334>)
 800fa5e:	183a      	adds	r2, r7, r0
 800fa60:	6810      	ldr	r0, [r2, #0]
 800fa62:	2208      	movs	r2, #8
 800fa64:	f001 fbfb 	bl	801125e <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800fa68:	193b      	adds	r3, r7, r4
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d016      	beq.n	800faa0 <_ux_device_stack_configuration_set+0xec>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800fa72:	21a8      	movs	r1, #168	; 0xa8
 800fa74:	187b      	adds	r3, r7, r1
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	2088      	movs	r0, #136	; 0x88
 800fa7a:	183b      	adds	r3, r7, r0
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	187a      	adds	r2, r7, r1
 800fa82:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800fa84:	21ac      	movs	r1, #172	; 0xac
 800fa86:	187b      	adds	r3, r7, r1
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	183b      	adds	r3, r7, r0
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	18d3      	adds	r3, r2, r3
 800fa90:	187a      	adds	r2, r7, r1
 800fa92:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 800fa94:	23a8      	movs	r3, #168	; 0xa8
 800fa96:	18fb      	adds	r3, r7, r3
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d1cb      	bne.n	800fa36 <_ux_device_stack_configuration_set+0x82>
 800fa9e:	e000      	b.n	800faa2 <_ux_device_stack_configuration_set+0xee>
                break;
 800faa0:	46c0      	nop			; (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800faa2:	23a8      	movs	r3, #168	; 0xa8
 800faa4:	18fb      	adds	r3, r7, r3
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d104      	bne.n	800fab6 <_ux_device_stack_configuration_set+0x102>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <_ux_device_stack_configuration_set+0x102>
        return(UX_ERROR);
 800fab2:	23ff      	movs	r3, #255	; 0xff
 800fab4:	e178      	b.n	800fda8 <_ux_device_stack_configuration_set+0x3f4>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800fab6:	218c      	movs	r1, #140	; 0x8c
 800fab8:	187b      	adds	r3, r7, r1
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	22cc      	movs	r2, #204	; 0xcc
 800fabe:	589b      	ldr	r3, [r3, r2]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d038      	beq.n	800fb36 <_ux_device_stack_configuration_set+0x182>
    {

        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 800fac4:	187b      	adds	r3, r7, r1
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	22f0      	movs	r2, #240	; 0xf0
 800faca:	589b      	ldr	r3, [r3, r2]
 800facc:	22a4      	movs	r2, #164	; 0xa4
 800face:	18ba      	adds	r2, r7, r2
 800fad0:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface != UX_NULL)
 800fad2:	e02b      	b.n	800fb2c <_ux_device_stack_configuration_set+0x178>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800fad4:	210c      	movs	r1, #12
 800fad6:	187b      	adds	r3, r7, r1
 800fad8:	2203      	movs	r2, #3
 800fada:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 800fadc:	187b      	adds	r3, r7, r1
 800fade:	20a4      	movs	r0, #164	; 0xa4
 800fae0:	183a      	adds	r2, r7, r0
 800fae2:	6812      	ldr	r2, [r2, #0]
 800fae4:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface -> ux_slave_interface_class;
 800fae6:	183b      	adds	r3, r7, r0
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	2280      	movs	r2, #128	; 0x80
 800faee:	18b8      	adds	r0, r7, r2
 800faf0:	6003      	str	r3, [r0, #0]

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800faf2:	187b      	adds	r3, r7, r1
 800faf4:	0010      	movs	r0, r2
 800faf6:	18ba      	adds	r2, r7, r2
 800faf8:	6812      	ldr	r2, [r2, #0]
 800fafa:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800fafc:	0002      	movs	r2, r0
 800fafe:	18bb      	adds	r3, r7, r2
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d005      	beq.n	800fb12 <_ux_device_stack_configuration_set+0x15e>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800fb06:	18bb      	adds	r3, r7, r2
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb0c:	187a      	adds	r2, r7, r1
 800fb0e:	0010      	movs	r0, r2
 800fb10:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 800fb12:	24a4      	movs	r4, #164	; 0xa4
 800fb14:	193b      	adds	r3, r7, r4
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb1a:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 800fb1c:	193b      	adds	r3, r7, r4
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	0018      	movs	r0, r3
 800fb22:	f000 ffbf 	bl	8010aa4 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 800fb26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb28:	193a      	adds	r2, r7, r4
 800fb2a:	6013      	str	r3, [r2, #0]
        while (interface != UX_NULL)
 800fb2c:	23a4      	movs	r3, #164	; 0xa4
 800fb2e:	18fb      	adds	r3, r7, r3
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1ce      	bne.n	800fad4 <_ux_device_stack_configuration_set+0x120>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800fb36:	208c      	movs	r0, #140	; 0x8c
 800fb38:	183b      	adds	r3, r7, r0
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	22cc      	movs	r2, #204	; 0xcc
 800fb3e:	2100      	movs	r1, #0
 800fb40:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800fb42:	183b      	adds	r3, r7, r0
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800fb4a:	2290      	movs	r2, #144	; 0x90
 800fb4c:	18bb      	adds	r3, r7, r2
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	18ba      	adds	r2, r7, r2
 800fb54:	6810      	ldr	r0, [r2, #0]
 800fb56:	2201      	movs	r2, #1
 800fb58:	2113      	movs	r1, #19
 800fb5a:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d101      	bne.n	800fb66 <_ux_device_stack_configuration_set+0x1b2>
        return(UX_SUCCESS);
 800fb62:	2300      	movs	r3, #0
 800fb64:	e120      	b.n	800fda8 <_ux_device_stack_configuration_set+0x3f4>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800fb66:	208c      	movs	r0, #140	; 0x8c
 800fb68:	183b      	adds	r3, r7, r0
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	21cc      	movs	r1, #204	; 0xcc
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800fb72:	183b      	adds	r3, r7, r0
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 800fb78:	495b      	ldr	r1, [pc, #364]	; (800fce8 <_ux_device_stack_configuration_set+0x334>)
 800fb7a:	22ac      	movs	r2, #172	; 0xac
 800fb7c:	18ba      	adds	r2, r7, r2
 800fb7e:	6810      	ldr	r0, [r2, #0]
 800fb80:	2208      	movs	r2, #8
 800fb82:	f001 fb6c 	bl	801125e <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800fb86:	235c      	movs	r3, #92	; 0x5c
 800fb88:	18fb      	adds	r3, r7, r3
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	2240      	movs	r2, #64	; 0x40
 800fb8e:	4013      	ands	r3, r2
 800fb90:	d001      	beq.n	800fb96 <_ux_device_stack_configuration_set+0x1e2>
 800fb92:	2202      	movs	r2, #2
 800fb94:	e000      	b.n	800fb98 <_ux_device_stack_configuration_set+0x1e4>
 800fb96:	2201      	movs	r2, #1
 800fb98:	4b52      	ldr	r3, [pc, #328]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800fb9a:	6819      	ldr	r1, [r3, #0]
 800fb9c:	23d0      	movs	r3, #208	; 0xd0
 800fb9e:	005b      	lsls	r3, r3, #1
 800fba0:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800fba2:	205c      	movs	r0, #92	; 0x5c
 800fba4:	183b      	adds	r3, r7, r0
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	0959      	lsrs	r1, r3, #5
 800fbaa:	4b4e      	ldr	r3, [pc, #312]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	2301      	movs	r3, #1
 800fbb0:	4019      	ands	r1, r3
 800fbb2:	23d2      	movs	r3, #210	; 0xd2
 800fbb4:	005b      	lsls	r3, r3, #1
 800fbb6:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800fbb8:	183b      	adds	r3, r7, r0
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	22a8      	movs	r2, #168	; 0xa8
 800fbbe:	18ba      	adds	r2, r7, r2
 800fbc0:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800fbc2:	e0dc      	b.n	800fd7e <_ux_device_stack_configuration_set+0x3ca>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800fbc4:	21ac      	movs	r1, #172	; 0xac
 800fbc6:	187b      	adds	r3, r7, r1
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	2288      	movs	r2, #136	; 0x88
 800fbce:	18ba      	adds	r2, r7, r2
 800fbd0:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800fbd2:	2087      	movs	r0, #135	; 0x87
 800fbd4:	183b      	adds	r3, r7, r0
 800fbd6:	187a      	adds	r2, r7, r1
 800fbd8:	6812      	ldr	r2, [r2, #0]
 800fbda:	7852      	ldrb	r2, [r2, #1]
 800fbdc:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800fbde:	183b      	adds	r3, r7, r0
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	2b0b      	cmp	r3, #11
 800fbe4:	d111      	bne.n	800fc0a <_ux_device_stack_configuration_set+0x256>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	229c      	movs	r2, #156	; 0x9c
 800fbea:	18ba      	adds	r2, r7, r2
 800fbec:	6013      	str	r3, [r2, #0]

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800fbee:	187b      	adds	r3, r7, r1
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	3302      	adds	r3, #2
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	2298      	movs	r2, #152	; 0x98
 800fbf8:	18ba      	adds	r2, r7, r2
 800fbfa:	6013      	str	r3, [r2, #0]

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800fbfc:	187b      	adds	r3, r7, r1
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	3303      	adds	r3, #3
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	2294      	movs	r2, #148	; 0x94
 800fc06:	18ba      	adds	r2, r7, r2
 800fc08:	6013      	str	r3, [r2, #0]
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800fc0a:	2387      	movs	r3, #135	; 0x87
 800fc0c:	18fb      	adds	r3, r7, r3
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	2b04      	cmp	r3, #4
 800fc12:	d000      	beq.n	800fc16 <_ux_device_stack_configuration_set+0x262>
 800fc14:	e0a2      	b.n	800fd5c <_ux_device_stack_configuration_set+0x3a8>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800fc16:	2438      	movs	r4, #56	; 0x38
 800fc18:	193b      	adds	r3, r7, r4
 800fc1a:	4934      	ldr	r1, [pc, #208]	; (800fcec <_ux_device_stack_configuration_set+0x338>)
 800fc1c:	22ac      	movs	r2, #172	; 0xac
 800fc1e:	18ba      	adds	r2, r7, r2
 800fc20:	6810      	ldr	r0, [r2, #0]
 800fc22:	2209      	movs	r2, #9
 800fc24:	f001 fb1b 	bl	801125e <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800fc28:	193b      	adds	r3, r7, r4
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d000      	beq.n	800fc32 <_ux_device_stack_configuration_set+0x27e>
 800fc30:	e094      	b.n	800fd5c <_ux_device_stack_configuration_set+0x3a8>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800fc32:	239c      	movs	r3, #156	; 0x9c
 800fc34:	18fb      	adds	r3, r7, r3
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d159      	bne.n	800fcf0 <_ux_device_stack_configuration_set+0x33c>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800fc3c:	193b      	adds	r3, r7, r4
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	2298      	movs	r2, #152	; 0x98
 800fc42:	18ba      	adds	r2, r7, r2
 800fc44:	6812      	ldr	r2, [r2, #0]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d130      	bne.n	800fcac <_ux_device_stack_configuration_set+0x2f8>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800fc4a:	4b26      	ldr	r3, [pc, #152]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	23ac      	movs	r3, #172	; 0xac
 800fc50:	005b      	lsls	r3, r3, #1
 800fc52:	58d3      	ldr	r3, [r2, r3]
 800fc54:	2180      	movs	r1, #128	; 0x80
 800fc56:	187a      	adds	r2, r7, r1
 800fc58:	6013      	str	r3, [r2, #0]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800fc5a:	187b      	adds	r3, r7, r1
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d130      	bne.n	800fcc6 <_ux_device_stack_configuration_set+0x312>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800fc64:	193b      	adds	r3, r7, r4
 800fc66:	689a      	ldr	r2, [r3, #8]
 800fc68:	0008      	movs	r0, r1
 800fc6a:	187b      	adds	r3, r7, r1
 800fc6c:	6819      	ldr	r1, [r3, #0]
 800fc6e:	2384      	movs	r3, #132	; 0x84
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	58cb      	ldr	r3, [r1, r3]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d126      	bne.n	800fcc6 <_ux_device_stack_configuration_set+0x312>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800fc78:	0001      	movs	r1, r0
 800fc7a:	187b      	adds	r3, r7, r1
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	2386      	movs	r3, #134	; 0x86
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	58d3      	ldr	r3, [r2, r3]
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d11d      	bne.n	800fcc6 <_ux_device_stack_configuration_set+0x312>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800fc8a:	4b16      	ldr	r3, [pc, #88]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	193b      	adds	r3, r7, r4
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	3356      	adds	r3, #86	; 0x56
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	18d3      	adds	r3, r2, r3
 800fc98:	3304      	adds	r3, #4
 800fc9a:	187a      	adds	r2, r7, r1
 800fc9c:	6812      	ldr	r2, [r2, #0]
 800fc9e:	601a      	str	r2, [r3, #0]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800fca0:	187b      	adds	r3, r7, r1
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	22a0      	movs	r2, #160	; 0xa0
 800fca6:	18ba      	adds	r2, r7, r2
 800fca8:	6013      	str	r3, [r2, #0]
 800fcaa:	e00c      	b.n	800fcc6 <_ux_device_stack_configuration_set+0x312>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800fcac:	4b0d      	ldr	r3, [pc, #52]	; (800fce4 <_ux_device_stack_configuration_set+0x330>)
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	2338      	movs	r3, #56	; 0x38
 800fcb2:	18fb      	adds	r3, r7, r3
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	3356      	adds	r3, #86	; 0x56
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	18d3      	adds	r3, r2, r3
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	22a0      	movs	r2, #160	; 0xa0
 800fcc0:	18ba      	adds	r2, r7, r2
 800fcc2:	6812      	ldr	r2, [r2, #0]
 800fcc4:	601a      	str	r2, [r3, #0]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800fcc6:	2294      	movs	r2, #148	; 0x94
 800fcc8:	18bb      	adds	r3, r7, r2
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	18b9      	adds	r1, r7, r2
 800fcd0:	600b      	str	r3, [r1, #0]

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800fcd2:	18bb      	adds	r3, r7, r2
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d136      	bne.n	800fd48 <_ux_device_stack_configuration_set+0x394>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	229c      	movs	r2, #156	; 0x9c
 800fcde:	18ba      	adds	r2, r7, r2
 800fce0:	6013      	str	r3, [r2, #0]
 800fce2:	e031      	b.n	800fd48 <_ux_device_stack_configuration_set+0x394>
 800fce4:	20004e74 	.word	0x20004e74
 800fce8:	20000040 	.word	0x20000040
 800fcec:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800fcf0:	4b2f      	ldr	r3, [pc, #188]	; (800fdb0 <_ux_device_stack_configuration_set+0x3fc>)
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	23ac      	movs	r3, #172	; 0xac
 800fcf6:	005b      	lsls	r3, r3, #1
 800fcf8:	58d3      	ldr	r3, [r2, r3]
 800fcfa:	2180      	movs	r1, #128	; 0x80
 800fcfc:	187a      	adds	r2, r7, r1
 800fcfe:	6013      	str	r3, [r2, #0]
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800fd00:	187b      	adds	r3, r7, r1
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d11e      	bne.n	800fd48 <_ux_device_stack_configuration_set+0x394>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800fd0a:	2438      	movs	r4, #56	; 0x38
 800fd0c:	193b      	adds	r3, r7, r4
 800fd0e:	689a      	ldr	r2, [r3, #8]
 800fd10:	0008      	movs	r0, r1
 800fd12:	187b      	adds	r3, r7, r1
 800fd14:	6819      	ldr	r1, [r3, #0]
 800fd16:	2384      	movs	r3, #132	; 0x84
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	58cb      	ldr	r3, [r1, r3]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d113      	bne.n	800fd48 <_ux_device_stack_configuration_set+0x394>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800fd20:	0001      	movs	r1, r0
 800fd22:	187b      	adds	r3, r7, r1
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	2386      	movs	r3, #134	; 0x86
 800fd28:	005b      	lsls	r3, r3, #1
 800fd2a:	58d3      	ldr	r3, [r2, r3]
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d10a      	bne.n	800fd48 <_ux_device_stack_configuration_set+0x394>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800fd32:	4b1f      	ldr	r3, [pc, #124]	; (800fdb0 <_ux_device_stack_configuration_set+0x3fc>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	193b      	adds	r3, r7, r4
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	3356      	adds	r3, #86	; 0x56
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	18d3      	adds	r3, r2, r3
 800fd40:	3304      	adds	r3, #4
 800fd42:	187a      	adds	r2, r7, r1
 800fd44:	6812      	ldr	r2, [r2, #0]
 800fd46:	601a      	str	r2, [r3, #0]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800fd48:	23a8      	movs	r3, #168	; 0xa8
 800fd4a:	18fb      	adds	r3, r7, r3
 800fd4c:	6819      	ldr	r1, [r3, #0]
 800fd4e:	23ac      	movs	r3, #172	; 0xac
 800fd50:	18fb      	adds	r3, r7, r3
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2200      	movs	r2, #0
 800fd56:	0018      	movs	r0, r3
 800fd58:	f000 feec 	bl	8010b34 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800fd5c:	21a8      	movs	r1, #168	; 0xa8
 800fd5e:	187b      	adds	r3, r7, r1
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	2088      	movs	r0, #136	; 0x88
 800fd64:	183b      	adds	r3, r7, r0
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	1ad3      	subs	r3, r2, r3
 800fd6a:	187a      	adds	r2, r7, r1
 800fd6c:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800fd6e:	21ac      	movs	r1, #172	; 0xac
 800fd70:	187b      	adds	r3, r7, r1
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	183b      	adds	r3, r7, r0
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	18d3      	adds	r3, r2, r3
 800fd7a:	187a      	adds	r2, r7, r1
 800fd7c:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 800fd7e:	23a8      	movs	r3, #168	; 0xa8
 800fd80:	18fb      	adds	r3, r7, r3
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d000      	beq.n	800fd8a <_ux_device_stack_configuration_set+0x3d6>
 800fd88:	e71c      	b.n	800fbc4 <_ux_device_stack_configuration_set+0x210>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800fd8a:	238c      	movs	r3, #140	; 0x8c
 800fd8c:	18fb      	adds	r3, r7, r3
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2203      	movs	r2, #3
 800fd92:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800fd94:	2290      	movs	r2, #144	; 0x90
 800fd96:	18bb      	adds	r3, r7, r2
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	699b      	ldr	r3, [r3, #24]
 800fd9c:	18ba      	adds	r2, r7, r2
 800fd9e:	6810      	ldr	r0, [r2, #0]
 800fda0:	2203      	movs	r2, #3
 800fda2:	2113      	movs	r1, #19
 800fda4:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800fda6:	2300      	movs	r3, #0
}
 800fda8:	0018      	movs	r0, r3
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	b02d      	add	sp, #180	; 0xb4
 800fdae:	bd90      	pop	{r4, r7, pc}
 800fdb0:	20004e74 	.word	0x20004e74

0800fdb4 <_ux_device_stack_control_request_process>:
/*                                            added printer support,      */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800fdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdb6:	b09d      	sub	sp, #116	; 0x74
 800fdb8:	af02      	add	r7, sp, #8
 800fdba:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800fdbc:	23ff      	movs	r3, #255	; 0xff
 800fdbe:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fdc0:	4ba2      	ldr	r3, [pc, #648]	; (801004c <_ux_device_stack_control_request_process+0x298>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800fdc6:	4ba1      	ldr	r3, [pc, #644]	; (801004c <_ux_device_stack_control_request_process+0x298>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3320      	adds	r3, #32
 800fdcc:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d000      	beq.n	800fdd8 <_ux_device_stack_control_request_process+0x24>
 800fdd6:	e134      	b.n	8010042 <_ux_device_stack_control_request_process+0x28e>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2254      	movs	r2, #84	; 0x54
 800fddc:	5c9b      	ldrb	r3, [r3, r2]
 800fdde:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2255      	movs	r2, #85	; 0x55
 800fde4:	5c9b      	ldrb	r3, [r3, r2]
 800fde6:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	3354      	adds	r3, #84	; 0x54
 800fdec:	3302      	adds	r3, #2
 800fdee:	0018      	movs	r0, r3
 800fdf0:	f001 fdd7 	bl	80119a2 <_ux_utility_short_get>
 800fdf4:	0003      	movs	r3, r0
 800fdf6:	64fb      	str	r3, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	3354      	adds	r3, #84	; 0x54
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	0018      	movs	r0, r3
 800fe00:	f001 fdcf 	bl	80119a2 <_ux_utility_short_get>
 800fe04:	0003      	movs	r3, r0
 800fe06:	64bb      	str	r3, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	3354      	adds	r3, #84	; 0x54
 800fe0c:	3306      	adds	r3, #6
 800fe0e:	0018      	movs	r0, r3
 800fe10:	f001 fdc7 	bl	80119a2 <_ux_utility_short_get>
 800fe14:	0003      	movs	r3, r0
 800fe16:	647b      	str	r3, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800fe18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe1a:	2b06      	cmp	r3, #6
 800fe1c:	d002      	beq.n	800fe24 <_ux_device_stack_control_request_process+0x70>
 800fe1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe20:	2b07      	cmp	r3, #7
 800fe22:	d10c      	bne.n	800fe3e <_ux_device_stack_control_request_process+0x8a>
 800fe24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe26:	0a1b      	lsrs	r3, r3, #8
 800fe28:	2260      	movs	r2, #96	; 0x60
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	d007      	beq.n	800fe3e <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800fe2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe30:	2260      	movs	r2, #96	; 0x60
 800fe32:	4393      	bics	r3, r2
 800fe34:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800fe36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe38:	2220      	movs	r2, #32
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800fe3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe40:	2260      	movs	r2, #96	; 0x60
 800fe42:	4013      	ands	r3, r2
 800fe44:	2b40      	cmp	r3, #64	; 0x40
 800fe46:	d139      	bne.n	800febc <_ux_device_stack_control_request_process+0x108>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800fe48:	4b80      	ldr	r3, [pc, #512]	; (801004c <_ux_device_stack_control_request_process+0x298>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	23e2      	movs	r3, #226	; 0xe2
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	58d3      	ldr	r3, [r2, r3]
 800fe52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d131      	bne.n	800febc <_ux_device_stack_control_request_process+0x108>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800fe58:	2380      	movs	r3, #128	; 0x80
 800fe5a:	005b      	lsls	r3, r3, #1
 800fe5c:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800fe5e:	4b7b      	ldr	r3, [pc, #492]	; (801004c <_ux_device_stack_control_request_process+0x298>)
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	23e4      	movs	r3, #228	; 0xe4
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	58d4      	ldr	r4, [r2, r3]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800fe6e:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800fe70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fe74:	220c      	movs	r2, #12
 800fe76:	18ba      	adds	r2, r7, r2
 800fe78:	9201      	str	r2, [sp, #4]
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	0033      	movs	r3, r6
 800fe7e:	002a      	movs	r2, r5
 800fe80:	47a0      	blx	r4
 800fe82:	0003      	movs	r3, r0
 800fe84:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800fe86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d110      	bne.n	800feae <_ux_device_stack_control_request_process+0xfa>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800fe8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe8e:	333c      	adds	r3, #60	; 0x3c
 800fe90:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800fe92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe94:	3330      	adds	r3, #48	; 0x30
 800fe96:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2203      	movs	r2, #3
 800fe9c:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800fe9e:	68f9      	ldr	r1, [r7, #12]
 800fea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	0018      	movs	r0, r3
 800fea6:	f001 f865 	bl	8010f74 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800feaa:	2300      	movs	r3, #0
 800feac:	e0ca      	b.n	8010044 <_ux_device_stack_control_request_process+0x290>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800feae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb0:	333c      	adds	r3, #60	; 0x3c
 800feb2:	0018      	movs	r0, r3
 800feb4:	f000 fb78 	bl	80105a8 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800feb8:	2300      	movs	r3, #0
 800feba:	e0c3      	b.n	8010044 <_ux_device_stack_control_request_process+0x290>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800febc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800febe:	2260      	movs	r2, #96	; 0x60
 800fec0:	4013      	ands	r3, r2
 800fec2:	2b20      	cmp	r3, #32
 800fec4:	d004      	beq.n	800fed0 <_ux_device_stack_control_request_process+0x11c>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800fec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fec8:	2260      	movs	r2, #96	; 0x60
 800feca:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800fecc:	2b40      	cmp	r3, #64	; 0x40
 800fece:	d152      	bne.n	800ff76 <_ux_device_stack_control_request_process+0x1c2>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800fed0:	2310      	movs	r3, #16
 800fed2:	18fb      	adds	r3, r7, r3
 800fed4:	2204      	movs	r2, #4
 800fed6:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800fed8:	2300      	movs	r3, #0
 800feda:	663b      	str	r3, [r7, #96]	; 0x60
 800fedc:	e03c      	b.n	800ff58 <_ux_device_stack_control_request_process+0x1a4>
            {

                /* Get the class for the interface.  */
                class =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800fede:	4b5b      	ldr	r3, [pc, #364]	; (801004c <_ux_device_stack_control_request_process+0x298>)
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fee4:	3356      	adds	r3, #86	; 0x56
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	18d3      	adds	r3, r2, r3
 800feea:	3304      	adds	r3, #4
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class == UX_NULL)
 800fef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d02a      	beq.n	800ff4c <_ux_device_stack_control_request_process+0x198>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800fef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fef8:	2203      	movs	r2, #3
 800fefa:	4013      	ands	r3, r2
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d116      	bne.n	800ff2e <_ux_device_stack_control_request_process+0x17a>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 800ff00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff02:	22ff      	movs	r2, #255	; 0xff
 800ff04:	4013      	ands	r3, r2
 800ff06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d121      	bne.n	800ff50 <_ux_device_stack_control_request_process+0x19c>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800ff0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff0e:	2388      	movs	r3, #136	; 0x88
 800ff10:	005b      	lsls	r3, r3, #1
 800ff12:	58d3      	ldr	r3, [r2, r3]
 800ff14:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 800ff16:	2b07      	cmp	r3, #7
 800ff18:	d109      	bne.n	800ff2e <_ux_device_stack_control_request_process+0x17a>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800ff1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d106      	bne.n	800ff2e <_ux_device_stack_control_request_process+0x17a>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2259      	movs	r2, #89	; 0x59
 800ff24:	5c9b      	ldrb	r3, [r3, r2]
 800ff26:	001a      	movs	r2, r3
                         (request == 0x00) &&
 800ff28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d110      	bne.n	800ff50 <_ux_device_stack_control_request_process+0x19c>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class;
 800ff2e:	2110      	movs	r1, #16
 800ff30:	187b      	adds	r3, r7, r1
 800ff32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff34:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class -> ux_slave_class_entry_function(&class_command);
 800ff36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff3a:	187a      	adds	r2, r7, r1
 800ff3c:	0010      	movs	r0, r2
 800ff3e:	4798      	blx	r3
 800ff40:	0003      	movs	r3, r0
 800ff42:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800ff44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d00a      	beq.n	800ff60 <_ux_device_stack_control_request_process+0x1ac>
 800ff4a:	e002      	b.n	800ff52 <_ux_device_stack_control_request_process+0x19e>
                    continue;
 800ff4c:	46c0      	nop			; (mov r8, r8)
 800ff4e:	e000      	b.n	800ff52 <_ux_device_stack_control_request_process+0x19e>
                        continue;
 800ff50:	46c0      	nop			; (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800ff52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff54:	3301      	adds	r3, #1
 800ff56:	663b      	str	r3, [r7, #96]	; 0x60
 800ff58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff5a:	2b0f      	cmp	r3, #15
 800ff5c:	d9bf      	bls.n	800fede <_ux_device_stack_control_request_process+0x12a>
 800ff5e:	e000      	b.n	800ff62 <_ux_device_stack_control_request_process+0x1ae>

                    /* We are done, break the loop!  */
                    break;
 800ff60:	46c0      	nop			; (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800ff62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d004      	beq.n	800ff72 <_ux_device_stack_control_request_process+0x1be>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800ff68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff6a:	333c      	adds	r3, #60	; 0x3c
 800ff6c:	0018      	movs	r0, r3
 800ff6e:	f000 fb1b 	bl	80105a8 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800ff72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff74:	e066      	b.n	8010044 <_ux_device_stack_control_request_process+0x290>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800ff76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff78:	2b0c      	cmp	r3, #12
 800ff7a:	d857      	bhi.n	801002c <_ux_device_stack_control_request_process+0x278>
 800ff7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff7e:	009a      	lsls	r2, r3, #2
 800ff80:	4b33      	ldr	r3, [pc, #204]	; (8010050 <_ux_device_stack_control_request_process+0x29c>)
 800ff82:	18d3      	adds	r3, r2, r3
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800ff88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ff8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff8e:	0018      	movs	r0, r3
 800ff90:	f000 fb40 	bl	8010614 <_ux_device_stack_get_status>
 800ff94:	0003      	movs	r3, r0
 800ff96:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800ff98:	e04b      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800ff9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ff9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffa0:	0018      	movs	r0, r3
 800ffa2:	f7ff fc81 	bl	800f8a8 <_ux_device_stack_clear_feature>
 800ffa6:	0003      	movs	r3, r0
 800ffa8:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800ffaa:	e042      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800ffac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ffb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffb2:	0018      	movs	r0, r3
 800ffb4:	f000 ff36 	bl	8010e24 <_ux_device_stack_set_feature>
 800ffb8:	0003      	movs	r3, r0
 800ffba:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800ffbc:	e039      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800ffbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ffc2:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800ffc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ffca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ffcc:	2111      	movs	r1, #17
 800ffce:	4798      	blx	r3
 800ffd0:	0003      	movs	r3, r0
 800ffd2:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800ffd4:	e02d      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800ffd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffd8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ffda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffdc:	0018      	movs	r0, r3
 800ffde:	f000 f839 	bl	8010054 <_ux_device_stack_descriptor_send>
 800ffe2:	0003      	movs	r3, r0
 800ffe4:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800ffe6:	e024      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800ffe8:	2354      	movs	r3, #84	; 0x54
 800ffea:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800ffec:	e021      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800ffee:	f7ff fcbb 	bl	800f968 <_ux_device_stack_configuration_get>
 800fff2:	0003      	movs	r3, r0
 800fff4:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800fff6:	e01c      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800fff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fffa:	0018      	movs	r0, r3
 800fffc:	f7ff fcda 	bl	800f9b4 <_ux_device_stack_configuration_set>
 8010000:	0003      	movs	r3, r0
 8010002:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8010004:	e015      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 8010006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010008:	0018      	movs	r0, r3
 801000a:	f7ff f927 	bl	800f25c <_ux_device_stack_alternate_setting_get>
 801000e:	0003      	movs	r3, r0
 8010010:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8010012:	e00e      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8010014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010018:	0011      	movs	r1, r2
 801001a:	0018      	movs	r0, r3
 801001c:	f7ff f95e 	bl	800f2dc <_ux_device_stack_alternate_setting_set>
 8010020:	0003      	movs	r3, r0
 8010022:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8010024:	e005      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8010026:	2300      	movs	r3, #0
 8010028:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 801002a:	e002      	b.n	8010032 <_ux_device_stack_control_request_process+0x27e>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 801002c:	2354      	movs	r3, #84	; 0x54
 801002e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8010030:	46c0      	nop			; (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 8010032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010034:	2b00      	cmp	r3, #0
 8010036:	d004      	beq.n	8010042 <_ux_device_stack_control_request_process+0x28e>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8010038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801003a:	333c      	adds	r3, #60	; 0x3c
 801003c:	0018      	movs	r0, r3
 801003e:	f000 fab3 	bl	80105a8 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 8010042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8010044:	0018      	movs	r0, r3
 8010046:	46bd      	mov	sp, r7
 8010048:	b01b      	add	sp, #108	; 0x6c
 801004a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801004c:	20004e74 	.word	0x20004e74
 8010050:	08014af4 	.word	0x08014af4

08010054 <_ux_device_stack_descriptor_send>:
/*                                            added BOS support,          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8010054:	b590      	push	{r4, r7, lr}
 8010056:	b0a3      	sub	sp, #140	; 0x8c
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length;
UINT                            status =  UX_ERROR;
 8010060:	23ff      	movs	r3, #255	; 0xff
 8010062:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010064:	4bde      	ldr	r3, [pc, #888]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801006a:	4bdd      	ldr	r3, [pc, #884]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	3320      	adds	r3, #32
 8010070:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8010072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010074:	333c      	adds	r3, #60	; 0x3c
 8010076:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8010078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801007a:	3330      	adds	r3, #48	; 0x30
 801007c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801007e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010080:	2203      	movs	r2, #3
 8010082:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	22ff      	movs	r2, #255	; 0xff
 8010088:	4013      	ands	r3, r2
 801008a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 801008c:	2300      	movs	r3, #0
 801008e:	2284      	movs	r2, #132	; 0x84
 8010090:	18ba      	adds	r2, r7, r2
 8010092:	6013      	str	r3, [r2, #0]

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	0a1b      	lsrs	r3, r3, #8
 8010098:	b2db      	uxtb	r3, r3
 801009a:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2b0f      	cmp	r3, #15
 80100a4:	d900      	bls.n	80100a8 <_ux_device_stack_descriptor_send+0x54>
 80100a6:	e20c      	b.n	80104c2 <_ux_device_stack_descriptor_send+0x46e>
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	009a      	lsls	r2, r3, #2
 80100ac:	4bcd      	ldr	r3, [pc, #820]	; (80103e4 <_ux_device_stack_descriptor_send+0x390>)
 80100ae:	18d3      	adds	r3, r2, r3
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b12      	cmp	r3, #18
 80100b8:	d901      	bls.n	80100be <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 80100ba:	2312      	movs	r3, #18
 80100bc:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2b06      	cmp	r3, #6
 80100c2:	d104      	bne.n	80100ce <_ux_device_stack_descriptor_send+0x7a>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b0a      	cmp	r3, #10
 80100c8:	d901      	bls.n	80100ce <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 80100ca:	230a      	movs	r3, #10
 80100cc:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2b09      	cmp	r3, #9
 80100d2:	d104      	bne.n	80100de <_ux_device_stack_descriptor_send+0x8a>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b05      	cmp	r3, #5
 80100d8:	d901      	bls.n	80100de <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 80100da:	2305      	movs	r3, #5
 80100dc:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80100de:	4bc0      	ldr	r3, [pc, #768]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	2394      	movs	r3, #148	; 0x94
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	58d3      	ldr	r3, [r2, r3]
 80100e8:	2180      	movs	r1, #128	; 0x80
 80100ea:	187a      	adds	r2, r7, r1
 80100ec:	6013      	str	r3, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80100ee:	4bbc      	ldr	r3, [pc, #752]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	2396      	movs	r3, #150	; 0x96
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	58d3      	ldr	r3, [r2, r3]
 80100f8:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 80100fa:	187b      	adds	r3, r7, r1
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010100:	18d3      	adds	r3, r2, r3
 8010102:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8010104:	e029      	b.n	801015a <_ux_device_stack_descriptor_send+0x106>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8010106:	2180      	movs	r1, #128	; 0x80
 8010108:	187b      	adds	r3, r7, r1
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 8010110:	187b      	adds	r3, r7, r1
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	3301      	adds	r3, #1
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	001a      	movs	r2, r3
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	4293      	cmp	r3, r2
 801011e:	d111      	bne.n	8010144 <_ux_device_stack_descriptor_send+0xf0>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8010120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010126:	1879      	adds	r1, r7, r1
 8010128:	6809      	ldr	r1, [r1, #0]
 801012a:	0018      	movs	r0, r3
 801012c:	f001 fa5e 	bl	80115ec <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010136:	0018      	movs	r0, r3
 8010138:	f000 ff1c 	bl	8010f74 <_ux_device_stack_transfer_request>
 801013c:	0003      	movs	r3, r0
 801013e:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8010140:	46c0      	nop			; (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 8010142:	e1c9      	b.n	80104d8 <_ux_device_stack_descriptor_send+0x484>
            device_framework_length -=  descriptor_length;
 8010144:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 801014c:	2180      	movs	r1, #128	; 0x80
 801014e:	187b      	adds	r3, r7, r1
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010154:	18d3      	adds	r3, r2, r3
 8010156:	187a      	adds	r2, r7, r1
 8010158:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 801015a:	2380      	movs	r3, #128	; 0x80
 801015c:	18fb      	adds	r3, r7, r3
 801015e:	681a      	ldr	r2, [r3, #0]
 8010160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010162:	429a      	cmp	r2, r3
 8010164:	d3cf      	bcc.n	8010106 <_ux_device_stack_descriptor_send+0xb2>
        break;
 8010166:	e1b7      	b.n	80104d8 <_ux_device_stack_descriptor_send+0x484>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2b07      	cmp	r3, #7
 801016c:	d113      	bne.n	8010196 <_ux_device_stack_descriptor_send+0x142>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801016e:	4b9c      	ldr	r3, [pc, #624]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	2398      	movs	r3, #152	; 0x98
 8010174:	005b      	lsls	r3, r3, #1
 8010176:	58d3      	ldr	r3, [r2, r3]
 8010178:	2180      	movs	r1, #128	; 0x80
 801017a:	187a      	adds	r2, r7, r1
 801017c:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801017e:	4b98      	ldr	r3, [pc, #608]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	239a      	movs	r3, #154	; 0x9a
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	58d3      	ldr	r3, [r2, r3]
 8010188:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 801018a:	187b      	adds	r3, r7, r1
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010190:	18d3      	adds	r3, r2, r3
 8010192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010194:	e05b      	b.n	801024e <_ux_device_stack_descriptor_send+0x1fa>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8010196:	4b92      	ldr	r3, [pc, #584]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	2394      	movs	r3, #148	; 0x94
 801019c:	005b      	lsls	r3, r3, #1
 801019e:	58d3      	ldr	r3, [r2, r3]
 80101a0:	2180      	movs	r1, #128	; 0x80
 80101a2:	187a      	adds	r2, r7, r1
 80101a4:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80101a6:	4b8e      	ldr	r3, [pc, #568]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	2396      	movs	r3, #150	; 0x96
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	58d3      	ldr	r3, [r2, r3]
 80101b0:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 80101b2:	187b      	adds	r3, r7, r1
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101b8:	18d3      	adds	r3, r2, r3
 80101ba:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 80101bc:	e047      	b.n	801024e <_ux_device_stack_descriptor_send+0x1fa>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 80101be:	2280      	movs	r2, #128	; 0x80
 80101c0:	18bb      	adds	r3, r7, r2
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2b0f      	cmp	r3, #15
 80101cc:	d113      	bne.n	80101f6 <_ux_device_stack_descriptor_send+0x1a2>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 80101ce:	18bb      	adds	r3, r7, r2
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3301      	adds	r3, #1
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2b0f      	cmp	r3, #15
 80101d8:	d12e      	bne.n	8010238 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 80101da:	2414      	movs	r4, #20
 80101dc:	193b      	adds	r3, r7, r4
 80101de:	4982      	ldr	r1, [pc, #520]	; (80103e8 <_ux_device_stack_descriptor_send+0x394>)
 80101e0:	18ba      	adds	r2, r7, r2
 80101e2:	6810      	ldr	r0, [r2, #0]
 80101e4:	2204      	movs	r2, #4
 80101e6:	f001 f83a 	bl	801125e <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 80101ea:	193b      	adds	r3, r7, r4
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 80101f0:	2300      	movs	r3, #0
 80101f2:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 80101f4:	e031      	b.n	801025a <_ux_device_stack_descriptor_send+0x206>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80101f6:	2080      	movs	r0, #128	; 0x80
 80101f8:	183b      	adds	r3, r7, r0
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	3301      	adds	r3, #1
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	2b02      	cmp	r3, #2
 8010202:	d119      	bne.n	8010238 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 8010204:	2384      	movs	r3, #132	; 0x84
 8010206:	18fb      	adds	r3, r7, r3
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801020c:	429a      	cmp	r2, r3
 801020e:	d10d      	bne.n	801022c <_ux_device_stack_descriptor_send+0x1d8>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 8010210:	2424      	movs	r4, #36	; 0x24
 8010212:	193b      	adds	r3, r7, r4
 8010214:	4975      	ldr	r1, [pc, #468]	; (80103ec <_ux_device_stack_descriptor_send+0x398>)
 8010216:	183a      	adds	r2, r7, r0
 8010218:	6810      	ldr	r0, [r2, #0]
 801021a:	2208      	movs	r2, #8
 801021c:	f001 f81f 	bl	801125e <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 8010220:	193b      	adds	r3, r7, r4
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 8010226:	2300      	movs	r3, #0
 8010228:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 801022a:	e016      	b.n	801025a <_ux_device_stack_descriptor_send+0x206>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 801022c:	2284      	movs	r2, #132	; 0x84
 801022e:	18bb      	adds	r3, r7, r2
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	3301      	adds	r3, #1
 8010234:	18ba      	adds	r2, r7, r2
 8010236:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8010238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801023a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801023c:	1ad3      	subs	r3, r2, r3
 801023e:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8010240:	2180      	movs	r1, #128	; 0x80
 8010242:	187b      	adds	r3, r7, r1
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010248:	18d3      	adds	r3, r2, r3
 801024a:	187a      	adds	r2, r7, r1
 801024c:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 801024e:	2380      	movs	r3, #128	; 0x80
 8010250:	18fb      	adds	r3, r7, r3
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010256:	429a      	cmp	r2, r3
 8010258:	d3b1      	bcc.n	80101be <_ux_device_stack_descriptor_send+0x16a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 801025a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801025c:	2b00      	cmp	r3, #0
 801025e:	d000      	beq.n	8010262 <_ux_device_stack_descriptor_send+0x20e>
 8010260:	e137      	b.n	80104d2 <_ux_device_stack_descriptor_send+0x47e>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 8010262:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	429a      	cmp	r2, r3
 8010268:	d202      	bcs.n	8010270 <_ux_device_stack_descriptor_send+0x21c>
                length =  target_descriptor_length;
 801026a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801026c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801026e:	e001      	b.n	8010274 <_ux_device_stack_descriptor_send+0x220>
            else
                length =  host_length;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8010274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010276:	2380      	movs	r3, #128	; 0x80
 8010278:	005b      	lsls	r3, r3, #1
 801027a:	429a      	cmp	r2, r3
 801027c:	d90d      	bls.n	801029a <_ux_device_stack_descriptor_send+0x246>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801027e:	2212      	movs	r2, #18
 8010280:	2109      	movs	r1, #9
 8010282:	2002      	movs	r0, #2
 8010284:	f000 fefc 	bl	8011080 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8010288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801028a:	699b      	ldr	r3, [r3, #24]
 801028c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801028e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8010290:	2114      	movs	r1, #20
 8010292:	4798      	blx	r3
 8010294:	0003      	movs	r3, r0
 8010296:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8010298:	e11e      	b.n	80104d8 <_ux_device_stack_descriptor_send+0x484>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801029a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80102a0:	2180      	movs	r1, #128	; 0x80
 80102a2:	1879      	adds	r1, r7, r1
 80102a4:	6809      	ldr	r1, [r1, #0]
 80102a6:	0018      	movs	r0, r3
 80102a8:	f001 f9a0 	bl	80115ec <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 80102ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	3301      	adds	r3, #1
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	b2d2      	uxtb	r2, r2
 80102b6:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80102bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102be:	0018      	movs	r0, r3
 80102c0:	f000 fe58 	bl	8010f74 <_ux_device_stack_transfer_request>
 80102c4:	0003      	movs	r3, r0
 80102c6:	673b      	str	r3, [r7, #112]	; 0x70
        }
        break;
 80102c8:	e103      	b.n	80104d2 <_ux_device_stack_descriptor_send+0x47e>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 80102ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d153      	bne.n	8010378 <_ux_device_stack_descriptor_send+0x324>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80102d0:	4b43      	ldr	r3, [pc, #268]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	23a6      	movs	r3, #166	; 0xa6
 80102d6:	005b      	lsls	r3, r3, #1
 80102d8:	58d3      	ldr	r3, [r2, r3]
 80102da:	1c9a      	adds	r2, r3, #2
 80102dc:	2380      	movs	r3, #128	; 0x80
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d90d      	bls.n	8010300 <_ux_device_stack_descriptor_send+0x2ac>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80102e4:	2212      	movs	r2, #18
 80102e6:	2109      	movs	r1, #9
 80102e8:	2002      	movs	r0, #2
 80102ea:	f000 fec9 	bl	8011080 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80102ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f0:	699b      	ldr	r3, [r3, #24]
 80102f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80102f6:	2114      	movs	r1, #20
 80102f8:	4798      	blx	r3
 80102fa:	0003      	movs	r3, r0
 80102fc:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 80102fe:	e0eb      	b.n	80104d8 <_ux_device_stack_descriptor_send+0x484>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8010300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8010306:	4b36      	ldr	r3, [pc, #216]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	23a6      	movs	r3, #166	; 0xa6
 801030c:	005b      	lsls	r3, r3, #1
 801030e:	58d3      	ldr	r3, [r2, r3]
 8010310:	b2db      	uxtb	r3, r3
 8010312:	3302      	adds	r3, #2
 8010314:	b2da      	uxtb	r2, r3
 8010316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010318:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 801031a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801031c:	3301      	adds	r3, #1
 801031e:	2203      	movs	r2, #3
 8010320:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8010322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010324:	1c98      	adds	r0, r3, #2
 8010326:	4b2e      	ldr	r3, [pc, #184]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	23a4      	movs	r3, #164	; 0xa4
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	58d1      	ldr	r1, [r2, r3]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 8010330:	4b2b      	ldr	r3, [pc, #172]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010332:	681a      	ldr	r2, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8010334:	23a6      	movs	r3, #166	; 0xa6
 8010336:	005b      	lsls	r3, r3, #1
 8010338:	58d3      	ldr	r3, [r2, r3]
 801033a:	001a      	movs	r2, r3
 801033c:	f001 f956 	bl	80115ec <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8010340:	4b27      	ldr	r3, [pc, #156]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	23a6      	movs	r3, #166	; 0xa6
 8010346:	005b      	lsls	r3, r3, #1
 8010348:	58d3      	ldr	r3, [r2, r3]
 801034a:	3302      	adds	r3, #2
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	429a      	cmp	r2, r3
 8010350:	d907      	bls.n	8010362 <_ux_device_stack_descriptor_send+0x30e>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 8010352:	4b23      	ldr	r3, [pc, #140]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	23a6      	movs	r3, #166	; 0xa6
 8010358:	005b      	lsls	r3, r3, #1
 801035a:	58d3      	ldr	r3, [r2, r3]
 801035c:	3302      	adds	r3, #2
 801035e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010360:	e001      	b.n	8010366 <_ux_device_stack_descriptor_send+0x312>
            else
                length =  host_length;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801036a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801036c:	0018      	movs	r0, r3
 801036e:	f000 fe01 	bl	8010f74 <_ux_device_stack_transfer_request>
 8010372:	0003      	movs	r3, r0
 8010374:	673b      	str	r3, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 8010376:	e0ae      	b.n	80104d6 <_ux_device_stack_descriptor_send+0x482>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 8010378:	4b19      	ldr	r3, [pc, #100]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	23a0      	movs	r3, #160	; 0xa0
 801037e:	005b      	lsls	r3, r3, #1
 8010380:	58d3      	ldr	r3, [r2, r3]
 8010382:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8010384:	4b16      	ldr	r3, [pc, #88]	; (80103e0 <_ux_device_stack_descriptor_send+0x38c>)
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	23a2      	movs	r3, #162	; 0xa2
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	58d3      	ldr	r3, [r2, r3]
 801038e:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 8010390:	e088      	b.n	80104a4 <_ux_device_stack_descriptor_send+0x450>
                if (_ux_utility_short_get(string_framework) == request_index)
 8010392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010394:	0018      	movs	r0, r3
 8010396:	f001 fb04 	bl	80119a2 <_ux_utility_short_get>
 801039a:	0002      	movs	r2, r0
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	4293      	cmp	r3, r2
 80103a0:	d000      	beq.n	80103a4 <_ux_device_stack_descriptor_send+0x350>
 80103a2:	e070      	b.n	8010486 <_ux_device_stack_descriptor_send+0x432>
                    if (*(string_framework + 2) == descriptor_index)
 80103a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103a6:	3302      	adds	r3, #2
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	001a      	movs	r2, r3
 80103ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d169      	bne.n	8010486 <_ux_device_stack_descriptor_send+0x432>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80103b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103b4:	3303      	adds	r3, #3
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	3301      	adds	r3, #1
 80103ba:	005a      	lsls	r2, r3, #1
 80103bc:	2380      	movs	r3, #128	; 0x80
 80103be:	005b      	lsls	r3, r3, #1
 80103c0:	429a      	cmp	r2, r3
 80103c2:	dd15      	ble.n	80103f0 <_ux_device_stack_descriptor_send+0x39c>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80103c4:	2212      	movs	r2, #18
 80103c6:	2109      	movs	r1, #9
 80103c8:	2002      	movs	r0, #2
 80103ca:	f000 fe59 	bl	8011080 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80103ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103d0:	699b      	ldr	r3, [r3, #24]
 80103d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103d4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80103d6:	2114      	movs	r1, #20
 80103d8:	4798      	blx	r3
 80103da:	0003      	movs	r3, r0
 80103dc:	673b      	str	r3, [r7, #112]	; 0x70
                            break;
 80103de:	e065      	b.n	80104ac <_ux_device_stack_descriptor_send+0x458>
 80103e0:	20004e74 	.word	0x20004e74
 80103e4:	08014b28 	.word	0x08014b28
 80103e8:	20000054 	.word	0x20000054
 80103ec:	20000040 	.word	0x20000040
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80103f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 80103f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103f8:	3303      	adds	r3, #3
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	3301      	adds	r3, #1
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	18db      	adds	r3, r3, r3
 8010402:	b2da      	uxtb	r2, r3
 8010404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010406:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8010408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801040a:	3301      	adds	r3, #1
 801040c:	2203      	movs	r2, #3
 801040e:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8010410:	2300      	movs	r3, #0
 8010412:	663b      	str	r3, [r7, #96]	; 0x60
 8010414:	e015      	b.n	8010442 <_ux_device_stack_descriptor_send+0x3ee>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8010416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010418:	3304      	adds	r3, #4
 801041a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801041c:	18d2      	adds	r2, r2, r3
 801041e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010420:	3301      	adds	r3, #1
 8010422:	005b      	lsls	r3, r3, #1
 8010424:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010426:	18cb      	adds	r3, r1, r3
 8010428:	7812      	ldrb	r2, [r2, #0]
 801042a:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 801042c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801042e:	3301      	adds	r3, #1
 8010430:	005b      	lsls	r3, r3, #1
 8010432:	3301      	adds	r3, #1
 8010434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010436:	18d3      	adds	r3, r2, r3
 8010438:	2200      	movs	r2, #0
 801043a:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801043c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801043e:	3301      	adds	r3, #1
 8010440:	663b      	str	r3, [r7, #96]	; 0x60
 8010442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010444:	3303      	adds	r3, #3
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	001a      	movs	r2, r3
 801044a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801044c:	4293      	cmp	r3, r2
 801044e:	d3e2      	bcc.n	8010416 <_ux_device_stack_descriptor_send+0x3c2>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8010450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010452:	3303      	adds	r3, #3
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	3301      	adds	r3, #1
 8010458:	005b      	lsls	r3, r3, #1
 801045a:	001a      	movs	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	4293      	cmp	r3, r2
 8010460:	d906      	bls.n	8010470 <_ux_device_stack_descriptor_send+0x41c>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 8010462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010464:	3303      	adds	r3, #3
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	3301      	adds	r3, #1
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801046e:	e001      	b.n	8010474 <_ux_device_stack_descriptor_send+0x420>
                            length =  host_length;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801047a:	0018      	movs	r0, r3
 801047c:	f000 fd7a 	bl	8010f74 <_ux_device_stack_transfer_request>
 8010480:	0003      	movs	r3, r0
 8010482:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8010484:	e012      	b.n	80104ac <_ux_device_stack_descriptor_send+0x458>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8010486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010488:	3303      	adds	r3, #3
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	001a      	movs	r2, r3
 801048e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010490:	1a9b      	subs	r3, r3, r2
 8010492:	3b04      	subs	r3, #4
 8010494:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 8010496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010498:	3303      	adds	r3, #3
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	3304      	adds	r3, #4
 801049e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104a0:	18d3      	adds	r3, r2, r3
 80104a2:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 80104a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d000      	beq.n	80104ac <_ux_device_stack_descriptor_send+0x458>
 80104aa:	e772      	b.n	8010392 <_ux_device_stack_descriptor_send+0x33e>
            if (string_framework_length == 0)
 80104ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d111      	bne.n	80104d6 <_ux_device_stack_descriptor_send+0x482>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80104b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104b8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80104ba:	2114      	movs	r1, #20
 80104bc:	4798      	blx	r3
                return(UX_ERROR);
 80104be:	23ff      	movs	r3, #255	; 0xff
 80104c0:	e00b      	b.n	80104da <_ux_device_stack_descriptor_send+0x486>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80104c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104c4:	699b      	ldr	r3, [r3, #24]
 80104c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80104ca:	2114      	movs	r1, #20
 80104cc:	4798      	blx	r3
        return(UX_ERROR);
 80104ce:	23ff      	movs	r3, #255	; 0xff
 80104d0:	e003      	b.n	80104da <_ux_device_stack_descriptor_send+0x486>
        break;
 80104d2:	46c0      	nop			; (mov r8, r8)
 80104d4:	e000      	b.n	80104d8 <_ux_device_stack_descriptor_send+0x484>
        break;
 80104d6:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 80104d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80104da:	0018      	movs	r0, r3
 80104dc:	46bd      	mov	sp, r7
 80104de:	b023      	add	sp, #140	; 0x8c
 80104e0:	bd90      	pop	{r4, r7, pc}
 80104e2:	46c0      	nop			; (mov r8, r8)

080104e4 <_ux_device_stack_disconnect>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b092      	sub	sp, #72	; 0x48
 80104e8:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 80104ea:	23ff      	movs	r3, #255	; 0xff
 80104ec:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80104ee:	4b2d      	ldr	r3, [pc, #180]	; (80105a4 <_ux_device_stack_disconnect+0xc0>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80104f4:	4b2b      	ldr	r3, [pc, #172]	; (80105a4 <_ux_device_stack_disconnect+0xc0>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3320      	adds	r3, #32
 80104fa:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80104fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b03      	cmp	r3, #3
 8010502:	d127      	bne.n	8010554 <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 8010504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010506:	22f0      	movs	r2, #240	; 0xf0
 8010508:	589b      	ldr	r3, [r3, r2]
 801050a:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface != UX_NULL)
 801050c:	e01c      	b.n	8010548 <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 801050e:	1d3b      	adds	r3, r7, #4
 8010510:	2203      	movs	r2, #3
 8010512:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 8010514:	1d3b      	adds	r3, r7, #4
 8010516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010518:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class =  interface -> ux_slave_interface_class;
 801051a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class;
 8010520:	1d3b      	adds	r3, r7, #4
 8010522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010524:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class != UX_NULL)
 8010526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010528:	2b00      	cmp	r3, #0
 801052a:	d004      	beq.n	8010536 <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class -> ux_slave_class_entry_function(&class_command);
 801052c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010530:	1d3a      	adds	r2, r7, #4
 8010532:	0010      	movs	r0, r2
 8010534:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 8010536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801053a:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 801053c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801053e:	0018      	movs	r0, r3
 8010540:	f000 fab0 	bl	8010aa4 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 8010544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010546:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface != UX_NULL)
 8010548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1df      	bne.n	801050e <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801054e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010550:	2201      	movs	r2, #1
 8010552:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 8010554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b01      	cmp	r3, #1
 801055a:	d108      	bne.n	801056e <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 801055c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801055e:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 8010560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010562:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8010564:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010566:	210f      	movs	r1, #15
 8010568:	4798      	blx	r3
 801056a:	0003      	movs	r3, r0
 801056c:	643b      	str	r3, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 801056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010570:	22cc      	movs	r2, #204	; 0xcc
 8010572:	2100      	movs	r1, #0
 8010574:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8010576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010578:	2200      	movs	r2, #0
 801057a:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801057c:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <_ux_device_stack_disconnect+0xc0>)
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	23e0      	movs	r3, #224	; 0xe0
 8010582:	005b      	lsls	r3, r3, #1
 8010584:	58d3      	ldr	r3, [r2, r3]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d006      	beq.n	8010598 <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 801058a:	4b06      	ldr	r3, [pc, #24]	; (80105a4 <_ux_device_stack_disconnect+0xc0>)
 801058c:	681a      	ldr	r2, [r3, #0]
 801058e:	23e0      	movs	r3, #224	; 0xe0
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	58d3      	ldr	r3, [r2, r3]
 8010594:	200a      	movs	r0, #10
 8010596:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 8010598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 801059a:	0018      	movs	r0, r3
 801059c:	46bd      	mov	sp, r7
 801059e:	b012      	add	sp, #72	; 0x48
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	46c0      	nop			; (mov r8, r8)
 80105a4:	20004e74 	.word	0x20004e74

080105a8 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b088      	sub	sp, #32
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80105b0:	4b17      	ldr	r3, [pc, #92]	; (8010610 <_ux_device_stack_endpoint_stall+0x68>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 80105b6:	23ff      	movs	r3, #255	; 0xff
 80105b8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80105ba:	f3ef 8310 	mrs	r3, PRIMASK
 80105be:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80105c0:	b672      	cpsid	i
    return(primask_value);
 80105c2:	693b      	ldr	r3, [r7, #16]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 80105c4:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 80105c6:	4b12      	ldr	r3, [pc, #72]	; (8010610 <_ux_device_stack_endpoint_stall+0x68>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	6a1b      	ldr	r3, [r3, #32]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d013      	beq.n	80105f8 <_ux_device_stack_endpoint_stall+0x50>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d00f      	beq.n	80105f8 <_ux_device_stack_endpoint_stall+0x50>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	699b      	ldr	r3, [r3, #24]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	69b8      	ldr	r0, [r7, #24]
 80105e0:	2114      	movs	r1, #20
 80105e2:	4798      	blx	r3
 80105e4:	0003      	movs	r3, r0
 80105e6:	61fb      	str	r3, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	699b      	ldr	r3, [r3, #24]
 80105ec:	2203      	movs	r2, #3
 80105ee:	4013      	ands	r3, r2
 80105f0:	d002      	beq.n	80105f8 <_ux_device_stack_endpoint_stall+0x50>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2202      	movs	r2, #2
 80105f6:	605a      	str	r2, [r3, #4]
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f383 8810 	msr	PRIMASK, r3
}
 8010602:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 8010604:	69fb      	ldr	r3, [r7, #28]
}
 8010606:	0018      	movs	r0, r3
 8010608:	46bd      	mov	sp, r7
 801060a:	b008      	add	sp, #32
 801060c:	bd80      	pop	{r7, pc}
 801060e:	46c0      	nop			; (mov r8, r8)
 8010610:	20004e74 	.word	0x20004e74

08010614 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b08a      	sub	sp, #40	; 0x28
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010620:	4b3c      	ldr	r3, [pc, #240]	; (8010714 <_ux_device_stack_get_status+0x100>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010626:	4b3b      	ldr	r3, [pc, #236]	; (8010714 <_ux_device_stack_get_status+0x100>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3320      	adds	r3, #32
 801062c:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	333c      	adds	r3, #60	; 0x3c
 8010632:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	3330      	adds	r3, #48	; 0x30
 8010638:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	2200      	movs	r2, #0
 8010640:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	3301      	adds	r3, #1
 8010648:	2200      	movs	r2, #0
 801064a:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 801064c:	2302      	movs	r3, #2
 801064e:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2203      	movs	r2, #3
 8010654:	4013      	ands	r3, r2
 8010656:	d002      	beq.n	801065e <_ux_device_stack_get_status+0x4a>
 8010658:	2b02      	cmp	r3, #2
 801065a:	d024      	beq.n	80106a6 <_ux_device_stack_get_status+0x92>
 801065c:	e03e      	b.n	80106dc <_ux_device_stack_get_status+0xc8>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	23f0      	movs	r3, #240	; 0xf0
 8010662:	021b      	lsls	r3, r3, #8
 8010664:	429a      	cmp	r2, r3
 8010666:	d102      	bne.n	801066e <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 8010668:	2301      	movs	r3, #1
 801066a:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 801066c:	e03e      	b.n	80106ec <_ux_device_stack_get_status+0xd8>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 801066e:	4b29      	ldr	r3, [pc, #164]	; (8010714 <_ux_device_stack_get_status+0x100>)
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	23d0      	movs	r3, #208	; 0xd0
 8010674:	005b      	lsls	r3, r3, #1
 8010676:	58d3      	ldr	r3, [r2, r3]
 8010678:	2b02      	cmp	r3, #2
 801067a:	d103      	bne.n	8010684 <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	2201      	movs	r2, #1
 8010682:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 8010684:	4b23      	ldr	r3, [pc, #140]	; (8010714 <_ux_device_stack_get_status+0x100>)
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	23d4      	movs	r3, #212	; 0xd4
 801068a:	005b      	lsls	r3, r3, #1
 801068c:	58d3      	ldr	r3, [r2, r3]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d02c      	beq.n	80106ec <_ux_device_stack_get_status+0xd8>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	781a      	ldrb	r2, [r3, #0]
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	2102      	movs	r1, #2
 801069e:	430a      	orrs	r2, r1
 80106a0:	b2d2      	uxtb	r2, r2
 80106a2:	701a      	strb	r2, [r3, #0]
        break;
 80106a4:	e022      	b.n	80106ec <_ux_device_stack_get_status+0xd8>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	6a38      	ldr	r0, [r7, #32]
 80106ae:	2115      	movs	r1, #21
 80106b0:	4798      	blx	r3
 80106b2:	0003      	movs	r3, r0
 80106b4:	613b      	str	r3, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	2bff      	cmp	r3, #255	; 0xff
 80106ba:	d007      	beq.n	80106cc <_ux_device_stack_get_status+0xb8>
        {

            if (status == UX_TRUE)
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d116      	bne.n	80106f0 <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	2201      	movs	r2, #1
 80106c8:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 80106ca:	e011      	b.n	80106f0 <_ux_device_stack_get_status+0xdc>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80106cc:	6a3b      	ldr	r3, [r7, #32]
 80106ce:	699b      	ldr	r3, [r3, #24]
 80106d0:	69ba      	ldr	r2, [r7, #24]
 80106d2:	6a38      	ldr	r0, [r7, #32]
 80106d4:	2114      	movs	r1, #20
 80106d6:	4798      	blx	r3
            return(UX_SUCCESS);            
 80106d8:	2300      	movs	r3, #0
 80106da:	e016      	b.n	801070a <_ux_device_stack_get_status+0xf6>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80106dc:	6a3b      	ldr	r3, [r7, #32]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	69ba      	ldr	r2, [r7, #24]
 80106e2:	6a38      	ldr	r0, [r7, #32]
 80106e4:	2114      	movs	r1, #20
 80106e6:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 80106e8:	2300      	movs	r3, #0
 80106ea:	e00e      	b.n	801070a <_ux_device_stack_get_status+0xf6>
        break;
 80106ec:	46c0      	nop			; (mov r8, r8)
 80106ee:	e000      	b.n	80106f2 <_ux_device_stack_get_status+0xde>
        break;
 80106f0:	46c0      	nop			; (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	2203      	movs	r2, #3
 80106f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 80106f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	0018      	movs	r0, r3
 8010700:	f000 fc38 	bl	8010f74 <_ux_device_stack_transfer_request>
 8010704:	0003      	movs	r3, r0
 8010706:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 8010708:	693b      	ldr	r3, [r7, #16]
}
 801070a:	0018      	movs	r0, r3
 801070c:	46bd      	mov	sp, r7
 801070e:	b00a      	add	sp, #40	; 0x28
 8010710:	bd80      	pop	{r7, pc}
 8010712:	46c0      	nop			; (mov r8, r8)
 8010714:	20004e74 	.word	0x20004e74

08010718 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b094      	sub	sp, #80	; 0x50
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
 8010724:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010726:	4bbb      	ldr	r3, [pc, #748]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	3320      	adds	r3, #32
 801072c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 801072e:	4bb9      	ldr	r3, [pc, #740]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	239c      	movs	r3, #156	; 0x9c
 8010734:	005b      	lsls	r3, r3, #1
 8010736:	68f9      	ldr	r1, [r7, #12]
 8010738:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 801073a:	4bb6      	ldr	r3, [pc, #728]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	239e      	movs	r3, #158	; 0x9e
 8010740:	005b      	lsls	r3, r3, #1
 8010742:	68b9      	ldr	r1, [r7, #8]
 8010744:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 8010746:	4bb3      	ldr	r3, [pc, #716]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	2398      	movs	r3, #152	; 0x98
 801074c:	005b      	lsls	r3, r3, #1
 801074e:	6879      	ldr	r1, [r7, #4]
 8010750:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 8010752:	4bb0      	ldr	r3, [pc, #704]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	239a      	movs	r3, #154	; 0x9a
 8010758:	005b      	lsls	r3, r3, #1
 801075a:	6839      	ldr	r1, [r7, #0]
 801075c:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 801075e:	4bad      	ldr	r3, [pc, #692]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	23a0      	movs	r3, #160	; 0xa0
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010768:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 801076a:	4baa      	ldr	r3, [pc, #680]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	23a2      	movs	r3, #162	; 0xa2
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010774:	50d1      	str	r1, [r2, r3]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 8010776:	4ba7      	ldr	r3, [pc, #668]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	23a4      	movs	r3, #164	; 0xa4
 801077c:	005b      	lsls	r3, r3, #1
 801077e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010780:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8010782:	4ba4      	ldr	r3, [pc, #656]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	23a6      	movs	r3, #166	; 0xa6
 8010788:	005b      	lsls	r3, r3, #1
 801078a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801078c:	50d1      	str	r1, [r2, r3]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 801078e:	4ba1      	ldr	r3, [pc, #644]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	23e0      	movs	r3, #224	; 0xe0
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010798:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801079a:	238a      	movs	r3, #138	; 0x8a
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	001a      	movs	r2, r3
 80107a0:	2100      	movs	r1, #0
 80107a2:	2000      	movs	r0, #0
 80107a4:	f000 fddc 	bl	8011360 <_ux_utility_memory_allocate>
 80107a8:	0003      	movs	r3, r0
 80107aa:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 80107ac:	6a3b      	ldr	r3, [r7, #32]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d101      	bne.n	80107b6 <_ux_device_stack_initialize+0x9e>
        return(UX_MEMORY_INSUFFICIENT);
 80107b2:	2312      	movs	r3, #18
 80107b4:	e170      	b.n	8010a98 <_ux_device_stack_initialize+0x380>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 80107b6:	4b97      	ldr	r3, [pc, #604]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	23ac      	movs	r3, #172	; 0xac
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	6a39      	ldr	r1, [r7, #32]
 80107c0:	50d1      	str	r1, [r2, r3]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	336c      	adds	r3, #108	; 0x6c
 80107c6:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 80107c8:	2380      	movs	r3, #128	; 0x80
 80107ca:	005b      	lsls	r3, r3, #1
 80107cc:	001a      	movs	r2, r3
 80107ce:	2101      	movs	r1, #1
 80107d0:	2000      	movs	r0, #0
 80107d2:	f000 fdc5 	bl	8011360 <_ux_utility_memory_allocate>
 80107d6:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d102      	bne.n	80107ea <_ux_device_stack_initialize+0xd2>
        status = UX_MEMORY_INSUFFICIENT;
 80107e4:	2312      	movs	r3, #18
 80107e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80107e8:	e001      	b.n	80107ee <_ux_device_stack_initialize+0xd6>
    else
        status = UX_SUCCESS;
 80107ea:	2300      	movs	r3, #0
 80107ec:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 80107f2:	2300      	movs	r3, #0
 80107f4:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 80107f6:	2300      	movs	r3, #0
 80107f8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 80107fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d000      	beq.n	8010802 <_ux_device_stack_initialize+0xea>
 8010800:	e094      	b.n	801092c <_ux_device_stack_initialize+0x214>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8010802:	4b84      	ldr	r3, [pc, #528]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	2398      	movs	r3, #152	; 0x98
 8010808:	005b      	lsls	r3, r3, #1
 801080a:	58d3      	ldr	r3, [r2, r3]
 801080c:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801080e:	4b81      	ldr	r3, [pc, #516]	; (8010a14 <_ux_device_stack_initialize+0x2fc>)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	239a      	movs	r3, #154	; 0x9a
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	58d3      	ldr	r3, [r2, r3]
 8010818:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 801081a:	2300      	movs	r3, #0
 801081c:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 801081e:	2300      	movs	r3, #0
 8010820:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 8010822:	2300      	movs	r3, #0
 8010824:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 8010826:	e057      	b.n	80108d8 <_ux_device_stack_initialize+0x1c0>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 8010828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 801082e:	2117      	movs	r1, #23
 8010830:	187b      	adds	r3, r7, r1
 8010832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010834:	7852      	ldrb	r2, [r2, #1]
 8010836:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 8010838:	187b      	adds	r3, r7, r1
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	2b02      	cmp	r3, #2
 801083e:	d029      	beq.n	8010894 <_ux_device_stack_initialize+0x17c>
 8010840:	2b04      	cmp	r3, #4
 8010842:	d13e      	bne.n	80108c2 <_ux_device_stack_initialize+0x1aa>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	3303      	adds	r3, #3
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d10b      	bne.n	8010866 <_ux_device_stack_initialize+0x14e>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 801084e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010852:	18d3      	adds	r3, r2, r3
 8010854:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8010856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010858:	3304      	adds	r3, #4
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 801085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010860:	3301      	adds	r3, #1
 8010862:	63bb      	str	r3, [r7, #56]	; 0x38
 8010864:	e00a      	b.n	801087c <_ux_device_stack_initialize+0x164>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 8010866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010868:	3304      	adds	r3, #4
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	001a      	movs	r2, r3
 801086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010870:	4293      	cmp	r3, r2
 8010872:	d203      	bcs.n	801087c <_ux_device_stack_initialize+0x164>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8010874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010876:	3304      	adds	r3, #4
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	3302      	adds	r3, #2
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	001a      	movs	r2, r3
 8010884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010886:	4293      	cmp	r3, r2
 8010888:	d21d      	bcs.n	80108c6 <_ux_device_stack_initialize+0x1ae>
                    max_interface_number = *(device_framework + 2);
 801088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088c:	3302      	adds	r3, #2
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 8010892:	e018      	b.n	80108c6 <_ux_device_stack_initialize+0x1ae>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 8010894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010898:	429a      	cmp	r2, r3
 801089a:	d901      	bls.n	80108a0 <_ux_device_stack_initialize+0x188>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 801089c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089e:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 80108a0:	2300      	movs	r3, #0
 80108a2:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 80108a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a8:	18d3      	adds	r3, r2, r3
 80108aa:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 80108ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d901      	bls.n	80108b8 <_ux_device_stack_initialize+0x1a0>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 80108b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b6:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 80108b8:	2300      	movs	r3, #0
 80108ba:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 80108bc:	2300      	movs	r3, #0
 80108be:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 80108c0:	e002      	b.n	80108c8 <_ux_device_stack_initialize+0x1b0>

            default:
                break;
 80108c2:	46c0      	nop			; (mov r8, r8)
 80108c4:	e000      	b.n	80108c8 <_ux_device_stack_initialize+0x1b0>
                break;
 80108c6:	46c0      	nop			; (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 80108c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 80108d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	18d3      	adds	r3, r2, r3
 80108d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 80108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d1a4      	bne.n	8010828 <_ux_device_stack_initialize+0x110>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 80108de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e2:	18d3      	adds	r3, r2, r3
 80108e4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 80108e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d901      	bls.n	80108f2 <_ux_device_stack_initialize+0x1da>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 80108ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f0:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 80108f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d901      	bls.n	80108fe <_ux_device_stack_initialize+0x1e6>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 80108fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fc:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 80108fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010900:	2b00      	cmp	r3, #0
 8010902:	d106      	bne.n	8010912 <_ux_device_stack_initialize+0x1fa>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 8010904:	2242      	movs	r2, #66	; 0x42
 8010906:	2103      	movs	r1, #3
 8010908:	2002      	movs	r0, #2
 801090a:	f000 fbb9 	bl	8011080 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 801090e:	2342      	movs	r3, #66	; 0x42
 8010910:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 8010912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010914:	2b00      	cmp	r3, #0
 8010916:	d109      	bne.n	801092c <_ux_device_stack_initialize+0x214>
 8010918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801091a:	2b0f      	cmp	r3, #15
 801091c:	d906      	bls.n	801092c <_ux_device_stack_initialize+0x214>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 801091e:	2212      	movs	r2, #18
 8010920:	2103      	movs	r1, #3
 8010922:	2002      	movs	r0, #2
 8010924:	f000 fbac 	bl	8011080 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 8010928:	2312      	movs	r3, #18
 801092a:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 801092c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801092e:	2b00      	cmp	r3, #0
 8010930:	d11a      	bne.n	8010968 <_ux_device_stack_initialize+0x250>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	21f8      	movs	r1, #248	; 0xf8
 8010936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010938:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 801093a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801093c:	2380      	movs	r3, #128	; 0x80
 801093e:	005b      	lsls	r3, r3, #1
 8010940:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010942:	50d1      	str	r1, [r2, r3]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8010944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010946:	2338      	movs	r3, #56	; 0x38
 8010948:	2100      	movs	r1, #0
 801094a:	2000      	movs	r0, #0
 801094c:	f000 fe10 	bl	8011570 <_ux_utility_memory_allocate_mulc_safe>
 8010950:	0003      	movs	r3, r0
 8010952:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d102      	bne.n	8010960 <_ux_device_stack_initialize+0x248>
            status = UX_MEMORY_INSUFFICIENT;
 801095a:	2312      	movs	r3, #18
 801095c:	64bb      	str	r3, [r7, #72]	; 0x48
 801095e:	e003      	b.n	8010968 <_ux_device_stack_initialize+0x250>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	21f4      	movs	r1, #244	; 0xf4
 8010964:	693a      	ldr	r2, [r7, #16]
 8010966:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 8010968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801096a:	2b00      	cmp	r3, #0
 801096c:	d046      	beq.n	80109fc <_ux_device_stack_initialize+0x2e4>
 801096e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010970:	2b00      	cmp	r3, #0
 8010972:	d143      	bne.n	80109fc <_ux_device_stack_initialize+0x2e4>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 8010974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010976:	2390      	movs	r3, #144	; 0x90
 8010978:	2100      	movs	r1, #0
 801097a:	2000      	movs	r0, #0
 801097c:	f000 fdf8 	bl	8011570 <_ux_utility_memory_allocate_mulc_safe>
 8010980:	0003      	movs	r3, r0
 8010982:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 8010984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010986:	2b00      	cmp	r3, #0
 8010988:	d102      	bne.n	8010990 <_ux_device_stack_initialize+0x278>
            status = UX_MEMORY_INSUFFICIENT;
 801098a:	2312      	movs	r3, #18
 801098c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 801098e:	e037      	b.n	8010a00 <_ux_device_stack_initialize+0x2e8>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	21fc      	movs	r1, #252	; 0xfc
 8010994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010996:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8010998:	e022      	b.n	80109e0 <_ux_device_stack_initialize+0x2c8>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 801099a:	2380      	movs	r3, #128	; 0x80
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	001a      	movs	r2, r3
 80109a0:	2101      	movs	r1, #1
 80109a2:	2000      	movs	r0, #0
 80109a4:	f000 fcdc 	bl	8011360 <_ux_utility_memory_allocate>
 80109a8:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 80109aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ac:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 80109ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d102      	bne.n	80109bc <_ux_device_stack_initialize+0x2a4>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 80109b6:	2312      	movs	r3, #18
 80109b8:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 80109ba:	e01e      	b.n	80109fa <_ux_device_stack_initialize+0x2e2>
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 80109bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109be:	3360      	adds	r3, #96	; 0x60
 80109c0:	4915      	ldr	r1, [pc, #84]	; (8010a18 <_ux_device_stack_initialize+0x300>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	0018      	movs	r0, r3
 80109c6:	f000 ff76 	bl	80118b6 <_ux_utility_semaphore_create>
 80109ca:	0003      	movs	r3, r0
 80109cc:	64bb      	str	r3, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 80109ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d002      	beq.n	80109da <_ux_device_stack_initialize+0x2c2>
                {
                    status = UX_SEMAPHORE_ERROR;
 80109d4:	2315      	movs	r3, #21
 80109d6:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 80109d8:	e00f      	b.n	80109fa <_ux_device_stack_initialize+0x2e2>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 80109da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109dc:	3390      	adds	r3, #144	; 0x90
 80109de:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	22fc      	movs	r2, #252	; 0xfc
 80109e4:	5899      	ldr	r1, [r3, r2]
 80109e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109e8:	0013      	movs	r3, r2
 80109ea:	00db      	lsls	r3, r3, #3
 80109ec:	189b      	adds	r3, r3, r2
 80109ee:	011b      	lsls	r3, r3, #4
 80109f0:	18cb      	adds	r3, r1, r3
 80109f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d3d0      	bcc.n	801099a <_ux_device_stack_initialize+0x282>
        if (endpoints_pool == UX_NULL)
 80109f8:	e002      	b.n	8010a00 <_ux_device_stack_initialize+0x2e8>
 80109fa:	e001      	b.n	8010a00 <_ux_device_stack_initialize+0x2e8>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 80109fc:	2300      	movs	r3, #0
 80109fe:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 8010a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <_ux_device_stack_initialize+0x2f2>
        return(UX_SUCCESS);
 8010a06:	2300      	movs	r3, #0
 8010a08:	e046      	b.n	8010a98 <_ux_device_stack_initialize+0x380>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 8010a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d026      	beq.n	8010a5e <_ux_device_stack_initialize+0x346>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8010a10:	e019      	b.n	8010a46 <_ux_device_stack_initialize+0x32e>
 8010a12:	46c0      	nop			; (mov r8, r8)
 8010a14:	20004e74 	.word	0x20004e74
 8010a18:	08014894 	.word	0x08014894
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 8010a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d004      	beq.n	8010a2e <_ux_device_stack_initialize+0x316>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 8010a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a26:	3360      	adds	r3, #96	; 0x60
 8010a28:	0018      	movs	r0, r3
 8010a2a:	f000 ff60 	bl	80118ee <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8010a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <_ux_device_stack_initialize+0x328>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8010a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a3a:	0018      	movs	r0, r3
 8010a3c:	f000 fdf2 	bl	8011624 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 8010a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a42:	3b90      	subs	r3, #144	; 0x90
 8010a44:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8010a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a48:	22fc      	movs	r2, #252	; 0xfc
 8010a4a:	589b      	ldr	r3, [r3, r2]
 8010a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d2e4      	bcs.n	8010a1c <_ux_device_stack_initialize+0x304>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 8010a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a54:	22fc      	movs	r2, #252	; 0xfc
 8010a56:	589b      	ldr	r3, [r3, r2]
 8010a58:	0018      	movs	r0, r3
 8010a5a:	f000 fde3 	bl	8011624 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	22f4      	movs	r2, #244	; 0xf4
 8010a62:	589b      	ldr	r3, [r3, r2]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d005      	beq.n	8010a74 <_ux_device_stack_initialize+0x35c>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6a:	22f4      	movs	r2, #244	; 0xf4
 8010a6c:	589b      	ldr	r3, [r3, r2]
 8010a6e:	0018      	movs	r0, r3
 8010a70:	f000 fdd8 	bl	8011624 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d004      	beq.n	8010a86 <_ux_device_stack_initialize+0x36e>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8010a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a80:	0018      	movs	r0, r3
 8010a82:	f000 fdcf 	bl	8011624 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 8010a86:	4b06      	ldr	r3, [pc, #24]	; (8010aa0 <_ux_device_stack_initialize+0x388>)
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	23ac      	movs	r3, #172	; 0xac
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	58d3      	ldr	r3, [r2, r3]
 8010a90:	0018      	movs	r0, r3
 8010a92:	f000 fdc7 	bl	8011624 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8010a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010a98:	0018      	movs	r0, r3
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	b014      	add	sp, #80	; 0x50
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	20004e74 	.word	0x20004e74

08010aa4 <_ux_device_stack_interface_delete>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b086      	sub	sp, #24
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010aac:	4b20      	ldr	r3, [pc, #128]	; (8010b30 <_ux_device_stack_interface_delete+0x8c>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3320      	adds	r3, #32
 8010ab2:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab8:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8010aba:	e01c      	b.n	8010af6 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac4:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8010ac6:	4b1a      	ldr	r3, [pc, #104]	; (8010b30 <_ux_device_stack_interface_delete+0x8c>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	699b      	ldr	r3, [r3, #24]
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	68b8      	ldr	r0, [r7, #8]
 8010ad4:	210f      	movs	r1, #15
 8010ad6:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2200      	movs	r2, #0
 8010aee:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2200      	movs	r2, #0
 8010af4:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d1df      	bne.n	8010abc <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	21f0      	movs	r1, #240	; 0xf0
 8010b04:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	605a      	str	r2, [r3, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	609a      	str	r2, [r3, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2200      	movs	r2, #0
 8010b16:	631a      	str	r2, [r3, #48]	; 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	635a      	str	r2, [r3, #52]	; 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	0018      	movs	r0, r3
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	b006      	add	sp, #24
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	46c0      	nop			; (mov r8, r8)
 8010b30:	20004e74 	.word	0x20004e74

08010b34 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b092      	sub	sp, #72	; 0x48
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010b40:	4b86      	ldr	r3, [pc, #536]	; (8010d5c <_ux_device_stack_interface_set+0x228>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010b46:	4b85      	ldr	r3, [pc, #532]	; (8010d5c <_ux_device_stack_interface_set+0x228>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	3320      	adds	r3, #32
 8010b4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface = device -> ux_slave_device_interfaces_pool;
 8010b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b50:	22f4      	movs	r2, #244	; 0xf4
 8010b52:	589b      	ldr	r3, [r3, r2]
 8010b54:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	22f8      	movs	r2, #248	; 0xf8
 8010b5a:	589b      	ldr	r3, [r3, r2]
 8010b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 8010b5e:	e009      	b.n	8010b74 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface -> ux_slave_interface_status == UX_UNUSED)
 8010b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d009      	beq.n	8010b7c <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface++;
 8010b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b6a:	3338      	adds	r3, #56	; 0x38
 8010b6c:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 8010b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b70:	3b01      	subs	r3, #1
 8010b72:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 8010b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d1f2      	bne.n	8010b60 <_ux_device_stack_interface_set+0x2c>
 8010b7a:	e000      	b.n	8010b7e <_ux_device_stack_interface_set+0x4a>
            break;
 8010b7c:	46c0      	nop			; (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 8010b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d101      	bne.n	8010b88 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 8010b84:	2312      	movs	r3, #18
 8010b86:	e0e5      	b.n	8010d54 <_ux_device_stack_interface_set+0x220>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface -> ux_slave_interface_status = UX_USED;
 8010b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface -> ux_slave_interface_descriptor);
 8010b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b90:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 8010b92:	4973      	ldr	r1, [pc, #460]	; (8010d60 <_ux_device_stack_interface_set+0x22c>)
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	2209      	movs	r2, #9
 8010b98:	f000 fb61 	bl	801125e <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9e:	22f0      	movs	r2, #240	; 0xf0
 8010ba0:	589b      	ldr	r3, [r3, r2]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d104      	bne.n	8010bb0 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface;
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	21f0      	movs	r1, #240	; 0xf0
 8010baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bac:	505a      	str	r2, [r3, r1]
 8010bae:	e00e      	b.n	8010bce <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 8010bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb2:	22f0      	movs	r2, #240	; 0xf0
 8010bb4:	589b      	ldr	r3, [r3, r2]
 8010bb6:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8010bb8:	e002      	b.n	8010bc0 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 8010bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bbe:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8010bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d1f8      	bne.n	8010bba <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface;
 8010bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bcc:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	001a      	movs	r2, r3
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	1a9b      	subs	r3, r3, r2
 8010bd8:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	001a      	movs	r2, r3
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	189b      	adds	r3, r3, r2
 8010be4:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 8010be6:	e0aa      	b.n	8010d3e <_ux_device_stack_interface_set+0x20a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8010bee:	211b      	movs	r1, #27
 8010bf0:	187b      	adds	r3, r7, r1
 8010bf2:	68fa      	ldr	r2, [r7, #12]
 8010bf4:	7852      	ldrb	r2, [r2, #1]
 8010bf6:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8010bf8:	187b      	adds	r3, r7, r1
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	2b05      	cmp	r3, #5
 8010bfe:	d008      	beq.n	8010c12 <_ux_device_stack_interface_set+0xde>
 8010c00:	dd00      	ble.n	8010c04 <_ux_device_stack_interface_set+0xd0>
 8010c02:	e093      	b.n	8010d2c <_ux_device_stack_interface_set+0x1f8>
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d100      	bne.n	8010c0a <_ux_device_stack_interface_set+0xd6>
 8010c08:	e088      	b.n	8010d1c <_ux_device_stack_interface_set+0x1e8>
 8010c0a:	2b04      	cmp	r3, #4
 8010c0c:	d100      	bne.n	8010c10 <_ux_device_stack_interface_set+0xdc>
 8010c0e:	e085      	b.n	8010d1c <_ux_device_stack_interface_set+0x1e8>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 8010c10:	e08c      	b.n	8010d2c <_ux_device_stack_interface_set+0x1f8>
            endpoint = device -> ux_slave_device_endpoints_pool;
 8010c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c14:	22fc      	movs	r2, #252	; 0xfc
 8010c16:	589b      	ldr	r3, [r3, r2]
 8010c18:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8010c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c1c:	2380      	movs	r3, #128	; 0x80
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	58d3      	ldr	r3, [r2, r3]
 8010c22:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 8010c24:	e00d      	b.n	8010c42 <_ux_device_stack_interface_set+0x10e>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d103      	bne.n	8010c36 <_ux_device_stack_interface_set+0x102>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c30:	2201      	movs	r2, #1
 8010c32:	601a      	str	r2, [r3, #0]
                    break;
 8010c34:	e008      	b.n	8010c48 <_ux_device_stack_interface_set+0x114>
                endpoint++;
 8010c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c38:	3390      	adds	r3, #144	; 0x90
 8010c3a:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 8010c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 8010c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d1ee      	bne.n	8010c26 <_ux_device_stack_interface_set+0xf2>
            if (endpoints_pool_number == 0)
 8010c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d101      	bne.n	8010c52 <_ux_device_stack_interface_set+0x11e>
                return(UX_MEMORY_INSUFFICIENT);
 8010c4e:	2312      	movs	r3, #18
 8010c50:	e080      	b.n	8010d54 <_ux_device_stack_interface_set+0x220>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8010c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c54:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 8010c56:	4943      	ldr	r1, [pc, #268]	; (8010d64 <_ux_device_stack_interface_set+0x230>)
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	2206      	movs	r2, #6
 8010c5c:	f000 faff 	bl	801125e <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8010c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c62:	3330      	adds	r3, #48	; 0x30
 8010c64:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8010c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c68:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 8010c6a:	055b      	lsls	r3, r3, #21
 8010c6c:	0d5b      	lsrs	r3, r3, #21
 8010c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8010c70:	4b3a      	ldr	r3, [pc, #232]	; (8010d5c <_ux_device_stack_interface_set+0x228>)
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	23ce      	movs	r3, #206	; 0xce
 8010c76:	005b      	lsls	r3, r3, #1
 8010c78:	58d3      	ldr	r3, [r2, r3]
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d117      	bne.n	8010cae <_ux_device_stack_interface_set+0x17a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8010c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c80:	699b      	ldr	r3, [r3, #24]
 8010c82:	2201      	movs	r2, #1
 8010c84:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8010c86:	d012      	beq.n	8010cae <_ux_device_stack_interface_set+0x17a>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8010c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8a:	69da      	ldr	r2, [r3, #28]
 8010c8c:	23c0      	movs	r3, #192	; 0xc0
 8010c8e:	015b      	lsls	r3, r3, #5
 8010c90:	4013      	ands	r3, r2
 8010c92:	613b      	str	r3, [r7, #16]
                if (n_trans)
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d009      	beq.n	8010cae <_ux_device_stack_interface_set+0x17a>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	0adb      	lsrs	r3, r3, #11
 8010c9e:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 8010ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca8:	693a      	ldr	r2, [r7, #16]
 8010caa:	4353      	muls	r3, r2
 8010cac:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cb2:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cb8:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	4252      	negs	r2, r2
 8010cc0:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface;
 8010cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cc6:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 8010cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ccc:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	699b      	ldr	r3, [r3, #24]
 8010cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cd6:	210e      	movs	r1, #14
 8010cd8:	4798      	blx	r3
 8010cda:	0003      	movs	r3, r0
 8010cdc:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 8010cde:	6a3b      	ldr	r3, [r7, #32]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d004      	beq.n	8010cee <_ux_device_stack_interface_set+0x1ba>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	601a      	str	r2, [r3, #0]
                return(status);
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	e032      	b.n	8010d54 <_ux_device_stack_interface_set+0x220>
            if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 8010cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d103      	bne.n	8010cfe <_ux_device_stack_interface_set+0x1ca>
                interface -> ux_slave_interface_first_endpoint =  endpoint;
 8010cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cfa:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8010cfc:	e017      	b.n	8010d2e <_ux_device_stack_interface_set+0x1fa>
                endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 8010cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d02:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8010d04:	e002      	b.n	8010d0c <_ux_device_stack_interface_set+0x1d8>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8010d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d0a:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8010d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1f8      	bne.n	8010d06 <_ux_device_stack_interface_set+0x1d2>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8010d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d18:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8010d1a:	e008      	b.n	8010d2e <_ux_device_stack_interface_set+0x1fa>
            status =  _ux_device_stack_interface_start(interface);
 8010d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d1e:	0018      	movs	r0, r3
 8010d20:	f000 f822 	bl	8010d68 <_ux_device_stack_interface_start>
 8010d24:	0003      	movs	r3, r0
 8010d26:	623b      	str	r3, [r7, #32]
            return(status);
 8010d28:	6a3b      	ldr	r3, [r7, #32]
 8010d2a:	e013      	b.n	8010d54 <_ux_device_stack_interface_set+0x220>
            break;
 8010d2c:	46c0      	nop			; (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	18d3      	adds	r3, r2, r3
 8010d3c:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d000      	beq.n	8010d46 <_ux_device_stack_interface_set+0x212>
 8010d44:	e750      	b.n	8010be8 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface);
 8010d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d48:	0018      	movs	r0, r3
 8010d4a:	f000 f80d 	bl	8010d68 <_ux_device_stack_interface_start>
 8010d4e:	0003      	movs	r3, r0
 8010d50:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 8010d52:	6a3b      	ldr	r3, [r7, #32]
}
 8010d54:	0018      	movs	r0, r3
 8010d56:	46bd      	mov	sp, r7
 8010d58:	b012      	add	sp, #72	; 0x48
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	20004e74 	.word	0x20004e74
 8010d60:	20000048 	.word	0x20000048
 8010d64:	20000028 	.word	0x20000028

08010d68 <_ux_device_stack_interface_start>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface)
{
 8010d68:	b590      	push	{r4, r7, lr}
 8010d6a:	b091      	sub	sp, #68	; 0x44
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 8010d70:	4b2b      	ldr	r3, [pc, #172]	; (8010e20 <_ux_device_stack_interface_start+0xb8>)
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	695b      	ldr	r3, [r3, #20]
 8010d78:	3356      	adds	r3, #86	; 0x56
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	18d3      	adds	r3, r2, r3
 8010d7e:	3304      	adds	r3, #4
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class == UX_NULL)
 8010d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d101      	bne.n	8010d8e <_ux_device_stack_interface_start+0x26>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 8010d8a:	2357      	movs	r3, #87	; 0x57
 8010d8c:	e044      	b.n	8010e18 <_ux_device_stack_interface_start+0xb0>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010d8e:	4b24      	ldr	r3, [pc, #144]	; (8010e20 <_ux_device_stack_interface_start+0xb8>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	3320      	adds	r3, #32
 8010d94:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8010d96:	2008      	movs	r0, #8
 8010d98:	183b      	adds	r3, r7, r0
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface;
 8010d9e:	183b      	adds	r3, r7, r0
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface -> ux_slave_interface_descriptor.bInterfaceClass;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a1a      	ldr	r2, [r3, #32]
 8010da8:	183b      	adds	r3, r7, r0
 8010daa:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010db0:	183b      	adds	r3, r7, r0
 8010db2:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010db8:	183b      	adds	r3, r7, r0
 8010dba:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8010dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dbe:	6a1a      	ldr	r2, [r3, #32]
 8010dc0:	183b      	adds	r3, r7, r0
 8010dc2:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dc8:	183b      	adds	r3, r7, r0
 8010dca:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class -> ux_slave_class_interface = interface;
 8010dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dce:	2388      	movs	r3, #136	; 0x88
 8010dd0:	005b      	lsls	r3, r3, #1
 8010dd2:	6879      	ldr	r1, [r7, #4]
 8010dd4:	50d1      	str	r1, [r2, r3]
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class -> ux_slave_class_entry_function(&class_command);
 8010dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dda:	0004      	movs	r4, r0
 8010ddc:	183a      	adds	r2, r7, r0
 8010dde:	0010      	movs	r0, r2
 8010de0:	4798      	blx	r3
 8010de2:	0003      	movs	r3, r0
 8010de4:	637b      	str	r3, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 8010de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d114      	bne.n	8010e16 <_ux_device_stack_interface_start+0xae>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class;
 8010dec:	193b      	adds	r3, r7, r4
 8010dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010df0:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8010df2:	193b      	adds	r3, r7, r4
 8010df4:	2202      	movs	r2, #2
 8010df6:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class -> ux_slave_class_entry_function(&class_command);
 8010df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dfc:	193a      	adds	r2, r7, r4
 8010dfe:	0010      	movs	r0, r2
 8010e00:	4798      	blx	r3
 8010e02:	0003      	movs	r3, r0
 8010e04:	637b      	str	r3, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 8010e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <_ux_device_stack_interface_start+0xaa>
            interface -> ux_slave_interface_class =  class;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e10:	605a      	str	r2, [r3, #4]

        return(status); 
 8010e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e14:	e000      	b.n	8010e18 <_ux_device_stack_interface_start+0xb0>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 8010e16:	2357      	movs	r3, #87	; 0x57
}
 8010e18:	0018      	movs	r0, r3
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	b011      	add	sp, #68	; 0x44
 8010e1e:	bd90      	pop	{r4, r7, pc}
 8010e20:	20004e74 	.word	0x20004e74

08010e24 <_ux_device_stack_set_feature>:
/*                                            supported device requests,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b08a      	sub	sp, #40	; 0x28
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010e30:	4b29      	ldr	r3, [pc, #164]	; (8010ed8 <_ux_device_stack_set_feature+0xb4>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010e36:	4b28      	ldr	r3, [pc, #160]	; (8010ed8 <_ux_device_stack_set_feature+0xb4>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	3320      	adds	r3, #32
 8010e3c:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8010e3e:	69bb      	ldr	r3, [r7, #24]
 8010e40:	333c      	adds	r3, #60	; 0x3c
 8010e42:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2203      	movs	r2, #3
 8010e48:	4013      	ands	r3, r2
 8010e4a:	d002      	beq.n	8010e52 <_ux_device_stack_set_feature+0x2e>
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d016      	beq.n	8010e7e <_ux_device_stack_set_feature+0x5a>
 8010e50:	e037      	b.n	8010ec2 <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d110      	bne.n	8010e7a <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8010e58:	4b1f      	ldr	r3, [pc, #124]	; (8010ed8 <_ux_device_stack_set_feature+0xb4>)
 8010e5a:	681a      	ldr	r2, [r3, #0]
 8010e5c:	23d2      	movs	r3, #210	; 0xd2
 8010e5e:	005b      	lsls	r3, r3, #1
 8010e60:	58d3      	ldr	r3, [r2, r3]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d007      	beq.n	8010e76 <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8010e66:	4b1c      	ldr	r3, [pc, #112]	; (8010ed8 <_ux_device_stack_set_feature+0xb4>)
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	23d4      	movs	r3, #212	; 0xd4
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	2101      	movs	r1, #1
 8010e70:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 8010e72:	2300      	movs	r3, #0
 8010e74:	e02c      	b.n	8010ed0 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 8010e76:	2354      	movs	r3, #84	; 0x54
 8010e78:	e02a      	b.n	8010ed0 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8010e7a:	2354      	movs	r3, #84	; 0x54
 8010e7c:	e028      	b.n	8010ed0 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	22f0      	movs	r2, #240	; 0xf0
 8010e82:	589b      	ldr	r3, [r3, r2]
 8010e84:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 8010e86:	e019      	b.n	8010ebc <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8010e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e8c:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8010e8e:	e00f      	b.n	8010eb0 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	695b      	ldr	r3, [r3, #20]
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d107      	bne.n	8010eaa <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	699b      	ldr	r3, [r3, #24]
 8010e9e:	6a3a      	ldr	r2, [r7, #32]
 8010ea0:	69f8      	ldr	r0, [r7, #28]
 8010ea2:	2114      	movs	r1, #20
 8010ea4:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	e012      	b.n	8010ed0 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8010eaa:	6a3b      	ldr	r3, [r7, #32]
 8010eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eae:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8010eb0:	6a3b      	ldr	r3, [r7, #32]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d1ec      	bne.n	8010e90 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eba:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d1e2      	bne.n	8010e88 <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	699b      	ldr	r3, [r3, #24]
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	69f8      	ldr	r0, [r7, #28]
 8010eca:	2114      	movs	r1, #20
 8010ecc:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8010ece:	2300      	movs	r3, #0
    }
}
 8010ed0:	0018      	movs	r0, r3
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	b00a      	add	sp, #40	; 0x28
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	20004e74 	.word	0x20004e74

08010edc <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010ee6:	4b18      	ldr	r3, [pc, #96]	; (8010f48 <_ux_device_stack_transfer_abort+0x6c>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ef6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010ef8:	b672      	cpsid	i
    return(primask_value);
 8010efa:	697b      	ldr	r3, [r7, #20]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8010efc:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d114      	bne.n	8010f30 <_ux_device_stack_transfer_abort+0x54>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	699b      	ldr	r3, [r3, #24]
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	69f8      	ldr	r0, [r7, #28]
 8010f0e:	210d      	movs	r1, #13
 8010f10:	4798      	blx	r3
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	f383 8810 	msr	PRIMASK, r3
}
 8010f1c:	46c0      	nop			; (mov r8, r8)

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2204      	movs	r2, #4
 8010f22:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	3330      	adds	r3, #48	; 0x30
 8010f28:	0018      	movs	r0, r3
 8010f2a:	f000 fd2b 	bl	8011984 <_ux_utility_semaphore_put>
 8010f2e:	e005      	b.n	8010f3c <_ux_device_stack_transfer_abort+0x60>
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f383 8810 	msr	PRIMASK, r3
}
 8010f3a:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8010f3c:	2300      	movs	r3, #0
}
 8010f3e:	0018      	movs	r0, r3
 8010f40:	46bd      	mov	sp, r7
 8010f42:	b008      	add	sp, #32
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	46c0      	nop			; (mov r8, r8)
 8010f48:	20004e74 	.word	0x20004e74

08010f4c <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	3330      	adds	r3, #48	; 0x30
 8010f5a:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8010f5c:	683a      	ldr	r2, [r7, #0]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	0011      	movs	r1, r2
 8010f62:	0018      	movs	r0, r3
 8010f64:	f7ff ffba 	bl	8010edc <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8010f68:	2300      	movs	r3, #0
}
 8010f6a:	0018      	movs	r0, r3
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	b004      	add	sp, #16
 8010f70:	bd80      	pop	{r7, pc}
	...

08010f74 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b08c      	sub	sp, #48	; 0x30
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d101      	bne.n	8010f8c <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 8010f88:	2300      	movs	r3, #0
 8010f8a:	e073      	b.n	8011074 <_ux_device_stack_transfer_request+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8010f90:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010f92:	b672      	cpsid	i
    return(primask_value);
 8010f94:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 8010f96:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8010f98:	4b38      	ldr	r3, [pc, #224]	; (801107c <_ux_device_stack_transfer_request+0x108>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	6a1b      	ldr	r3, [r3, #32]
 8010f9e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8010fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d005      	beq.n	8010fb2 <_ux_device_stack_transfer_request+0x3e>
 8010fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa8:	2b02      	cmp	r3, #2
 8010faa:	d002      	beq.n	8010fb2 <_ux_device_stack_transfer_request+0x3e>
            || (device_state == UX_DEVICE_CONFIGURED))
 8010fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fae:	2b03      	cmp	r3, #3
 8010fb0:	d114      	bne.n	8010fdc <_ux_device_stack_transfer_request+0x68>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	601a      	str	r2, [r3, #0]
 8010fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fba:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	f383 8810 	msr	PRIMASK, r3
}
 8010fc2:	46c0      	nop			; (mov r8, r8)
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010fc4:	4b2d      	ldr	r3, [pc, #180]	; (801107c <_ux_device_stack_transfer_request+0x108>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	623b      	str	r3, [r7, #32]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8010fd0:	6a3b      	ldr	r3, [r7, #32]
 8010fd2:	699b      	ldr	r3, [r3, #24]
 8010fd4:	2203      	movs	r2, #3
 8010fd6:	4013      	ands	r3, r2
 8010fd8:	d10b      	bne.n	8010ff2 <_ux_device_stack_transfer_request+0x7e>
 8010fda:	e01a      	b.n	8011012 <_ux_device_stack_transfer_request+0x9e>
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	f383 8810 	msr	PRIMASK, r3
}
 8010fe6:	46c0      	nop			; (mov r8, r8)
        return(UX_TRANSFER_NOT_READY);
 8010fe8:	2325      	movs	r3, #37	; 0x25
 8010fea:	e043      	b.n	8011074 <_ux_device_stack_transfer_request+0x100>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 8010fec:	2064      	movs	r0, #100	; 0x64
 8010fee:	f000 f91d 	bl	801122c <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8010ff2:	6a3b      	ldr	r3, [r7, #32]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	2b02      	cmp	r3, #2
 8010ff8:	d0f8      	beq.n	8010fec <_ux_device_stack_transfer_request+0x78>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	695b      	ldr	r3, [r3, #20]
 8010ffe:	2280      	movs	r2, #128	; 0x80
 8011000:	4013      	ands	r3, r2
 8011002:	d003      	beq.n	801100c <_ux_device_stack_transfer_request+0x98>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2203      	movs	r2, #3
 8011008:	629a      	str	r2, [r3, #40]	; 0x28
 801100a:	e002      	b.n	8011012 <_ux_device_stack_transfer_request+0x9e>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2202      	movs	r2, #2
 8011010:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011016:	2b03      	cmp	r3, #3
 8011018:	d113      	bne.n	8011042 <_ux_device_stack_transfer_request+0xce>
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d010      	beq.n	8011042 <_ux_device_stack_transfer_request+0xce>
        (slave_length != 0) && (host_length != slave_length) && 
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	429a      	cmp	r2, r3
 8011026:	d00c      	beq.n	8011042 <_ux_device_stack_transfer_request+0xce>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8011028:	6a3b      	ldr	r3, [r7, #32]
 801102a:	69da      	ldr	r2, [r3, #28]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	0011      	movs	r1, r2
 8011030:	0018      	movs	r0, r3
 8011032:	f7ef fa2b 	bl	800048c <__aeabi_uidivmod>
 8011036:	1e0b      	subs	r3, r1, #0
        (slave_length != 0) && (host_length != slave_length) && 
 8011038:	d103      	bne.n	8011042 <_ux_device_stack_transfer_request+0xce>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2201      	movs	r2, #1
 801103e:	651a      	str	r2, [r3, #80]	; 0x50
 8011040:	e002      	b.n	8011048 <_ux_device_stack_transfer_request+0xd4>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2200      	movs	r2, #0
 8011046:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2200      	movs	r2, #0
 801104c:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	68ba      	ldr	r2, [r7, #8]
 8011052:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	68ba      	ldr	r2, [r7, #8]
 8011058:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8011062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011064:	699b      	ldr	r3, [r3, #24]
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801106a:	210c      	movs	r1, #12
 801106c:	4798      	blx	r3
 801106e:	0003      	movs	r3, r0
 8011070:	61fb      	str	r3, [r7, #28]

    /* And return the status.  */
    return(status);
 8011072:	69fb      	ldr	r3, [r7, #28]

#endif
}
 8011074:	0018      	movs	r0, r3
 8011076:	46bd      	mov	sp, r7
 8011078:	b00c      	add	sp, #48	; 0x30
 801107a:	bd80      	pop	{r7, pc}
 801107c:	20004e74 	.word	0x20004e74

08011080 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 801108c:	4b0c      	ldr	r3, [pc, #48]	; (80110c0 <_ux_system_error_handler+0x40>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8011094:	4b0a      	ldr	r3, [pc, #40]	; (80110c0 <_ux_system_error_handler+0x40>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801109a:	3201      	adds	r2, #1
 801109c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 801109e:	4b08      	ldr	r3, [pc, #32]	; (80110c0 <_ux_system_error_handler+0x40>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d006      	beq.n	80110b6 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 80110a8:	4b05      	ldr	r3, [pc, #20]	; (80110c0 <_ux_system_error_handler+0x40>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	68b9      	ldr	r1, [r7, #8]
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	4798      	blx	r3
    }
}
 80110b6:	46c0      	nop			; (mov r8, r8)
 80110b8:	46bd      	mov	sp, r7
 80110ba:	b004      	add	sp, #16
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	46c0      	nop			; (mov r8, r8)
 80110c0:	20004e78 	.word	0x20004e78

080110c4 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b08a      	sub	sp, #40	; 0x28
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]
 80110d0:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 80110d2:	68ba      	ldr	r2, [r7, #8]
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2100      	movs	r1, #0
 80110d8:	0018      	movs	r0, r3
 80110da:	f000 fb7f 	bl	80117dc <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 80110de:	4b50      	ldr	r3, [pc, #320]	; (8011220 <_ux_system_initialize+0x15c>)
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 80110e4:	235c      	movs	r3, #92	; 0x5c
 80110e6:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ec:	18d2      	adds	r2, r2, r3
 80110ee:	4b4d      	ldr	r3, [pc, #308]	; (8011224 <_ux_system_initialize+0x160>)
 80110f0:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 80110f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f4:	33cd      	adds	r3, #205	; 0xcd
 80110f6:	33ff      	adds	r3, #255	; 0xff
 80110f8:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 80110fa:	4b49      	ldr	r3, [pc, #292]	; (8011220 <_ux_system_initialize+0x15c>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	68f9      	ldr	r1, [r7, #12]
 8011100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011102:	188a      	adds	r2, r1, r2
 8011104:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 8011106:	4b46      	ldr	r3, [pc, #280]	; (8011220 <_ux_system_initialize+0x15c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 801110e:	6a3b      	ldr	r3, [r7, #32]
 8011110:	330f      	adds	r3, #15
 8011112:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8011114:	6a3b      	ldr	r3, [r7, #32]
 8011116:	220f      	movs	r2, #15
 8011118:	4393      	bics	r3, r2
 801111a:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 801111c:	68fa      	ldr	r2, [r7, #12]
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	18d3      	adds	r3, r2, r3
 8011122:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	6a3a      	ldr	r2, [r7, #32]
 8011128:	429a      	cmp	r2, r3
 801112a:	d301      	bcc.n	8011130 <_ux_system_initialize+0x6c>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 801112c:	2312      	movs	r3, #18
 801112e:	e073      	b.n	8011218 <_ux_system_initialize+0x154>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8011130:	69f9      	ldr	r1, [r7, #28]
 8011132:	4b3b      	ldr	r3, [pc, #236]	; (8011220 <_ux_system_initialize+0x15c>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	6a3a      	ldr	r2, [r7, #32]
 8011138:	1a8a      	subs	r2, r1, r2
 801113a:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 801113c:	4b38      	ldr	r3, [pc, #224]	; (8011220 <_ux_system_initialize+0x15c>)
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	4b37      	ldr	r3, [pc, #220]	; (8011220 <_ux_system_initialize+0x15c>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	6852      	ldr	r2, [r2, #4]
 8011146:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8011148:	4b35      	ldr	r3, [pc, #212]	; (8011220 <_ux_system_initialize+0x15c>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	6a3a      	ldr	r2, [r7, #32]
 801114e:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 8011150:	4b33      	ldr	r3, [pc, #204]	; (8011220 <_ux_system_initialize+0x15c>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8011158:	4b31      	ldr	r3, [pc, #196]	; (8011220 <_ux_system_initialize+0x15c>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	3b10      	subs	r3, #16
 8011160:	001a      	movs	r2, r3
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	2200      	movs	r2, #0
 801116a:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d112      	bne.n	8011198 <_ux_system_initialize+0xd4>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8011172:	4b2b      	ldr	r3, [pc, #172]	; (8011220 <_ux_system_initialize+0x15c>)
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	4b2a      	ldr	r3, [pc, #168]	; (8011220 <_ux_system_initialize+0x15c>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	6852      	ldr	r2, [r2, #4]
 801117c:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 801117e:	4b28      	ldr	r3, [pc, #160]	; (8011220 <_ux_system_initialize+0x15c>)
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	4b27      	ldr	r3, [pc, #156]	; (8011220 <_ux_system_initialize+0x15c>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	6892      	ldr	r2, [r2, #8]
 8011188:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 801118a:	4b25      	ldr	r3, [pc, #148]	; (8011220 <_ux_system_initialize+0x15c>)
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	4b24      	ldr	r3, [pc, #144]	; (8011220 <_ux_system_initialize+0x15c>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	6812      	ldr	r2, [r2, #0]
 8011194:	60da      	str	r2, [r3, #12]
 8011196:	e02f      	b.n	80111f8 <_ux_system_initialize+0x134>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 801119c:	6a3b      	ldr	r3, [r7, #32]
 801119e:	330f      	adds	r3, #15
 80111a0:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80111a2:	6a3b      	ldr	r3, [r7, #32]
 80111a4:	220f      	movs	r2, #15
 80111a6:	4393      	bics	r3, r2
 80111a8:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 80111aa:	4b1d      	ldr	r3, [pc, #116]	; (8011220 <_ux_system_initialize+0x15c>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	683a      	ldr	r2, [r7, #0]
 80111b0:	3a0f      	subs	r2, #15
 80111b2:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 80111b4:	4b1a      	ldr	r3, [pc, #104]	; (8011220 <_ux_system_initialize+0x15c>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	4b19      	ldr	r3, [pc, #100]	; (8011220 <_ux_system_initialize+0x15c>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	6912      	ldr	r2, [r2, #16]
 80111be:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 80111c0:	4b17      	ldr	r3, [pc, #92]	; (8011220 <_ux_system_initialize+0x15c>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	6a3a      	ldr	r2, [r7, #32]
 80111c6:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 80111c8:	4b15      	ldr	r3, [pc, #84]	; (8011220 <_ux_system_initialize+0x15c>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68d8      	ldr	r0, [r3, #12]
 80111ce:	4b14      	ldr	r3, [pc, #80]	; (8011220 <_ux_system_initialize+0x15c>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	691b      	ldr	r3, [r3, #16]
 80111d4:	001a      	movs	r2, r3
 80111d6:	2100      	movs	r1, #0
 80111d8:	f000 fb00 	bl	80117dc <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 80111dc:	4b10      	ldr	r3, [pc, #64]	; (8011220 <_ux_system_initialize+0x15c>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80111e4:	4b0e      	ldr	r3, [pc, #56]	; (8011220 <_ux_system_initialize+0x15c>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	691b      	ldr	r3, [r3, #16]
 80111ea:	3b10      	subs	r3, #16
 80111ec:	001a      	movs	r2, r3
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	2200      	movs	r2, #0
 80111f6:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 80111f8:	4b09      	ldr	r3, [pc, #36]	; (8011220 <_ux_system_initialize+0x15c>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	331c      	adds	r3, #28
 80111fe:	4a0a      	ldr	r2, [pc, #40]	; (8011228 <_ux_system_initialize+0x164>)
 8011200:	0011      	movs	r1, r2
 8011202:	0018      	movs	r0, r3
 8011204:	f000 fb06 	bl	8011814 <_ux_utility_mutex_create>
 8011208:	0003      	movs	r3, r0
 801120a:	617b      	str	r3, [r7, #20]
    if(status != UX_SUCCESS)
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <_ux_system_initialize+0x152>
        return(UX_MUTEX_ERROR);
 8011212:	2317      	movs	r3, #23
 8011214:	e000      	b.n	8011218 <_ux_system_initialize+0x154>
#endif

    return(UX_SUCCESS);
 8011216:	2300      	movs	r3, #0
}
 8011218:	0018      	movs	r0, r3
 801121a:	46bd      	mov	sp, r7
 801121c:	b00a      	add	sp, #40	; 0x28
 801121e:	bd80      	pop	{r7, pc}
 8011220:	20004e78 	.word	0x20004e78
 8011224:	20004e74 	.word	0x20004e74
 8011228:	080148b4 	.word	0x080148b4

0801122c <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b084      	sub	sp, #16
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2264      	movs	r2, #100	; 0x64
 8011238:	4353      	muls	r3, r2
 801123a:	22fa      	movs	r2, #250	; 0xfa
 801123c:	0091      	lsls	r1, r2, #2
 801123e:	0018      	movs	r0, r3
 8011240:	f7ef f89e 	bl	8000380 <__udivsi3>
 8011244:	0003      	movs	r3, r0
 8011246:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	3301      	adds	r3, #1
 801124c:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	0018      	movs	r0, r3
 8011252:	f7fc faa7 	bl	800d7a4 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8011256:	46c0      	nop			; (mov r8, r8)
}
 8011258:	46bd      	mov	sp, r7
 801125a:	b004      	add	sp, #16
 801125c:	bd80      	pop	{r7, pc}

0801125e <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 801125e:	b580      	push	{r7, lr}
 8011260:	b084      	sub	sp, #16
 8011262:	af00      	add	r7, sp, #0
 8011264:	60f8      	str	r0, [r7, #12]
 8011266:	60b9      	str	r1, [r7, #8]
 8011268:	607a      	str	r2, [r7, #4]
 801126a:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 801126c:	e028      	b.n	80112c0 <_ux_utility_descriptor_parse+0x62>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	1c5a      	adds	r2, r3, #1
 8011272:	60ba      	str	r2, [r7, #8]
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	2b02      	cmp	r3, #2
 8011278:	d00c      	beq.n	8011294 <_ux_utility_descriptor_parse+0x36>
 801127a:	2b04      	cmp	r3, #4
 801127c:	d115      	bne.n	80112aa <_ux_utility_descriptor_parse+0x4c>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	0018      	movs	r0, r3
 8011282:	f000 f826 	bl	80112d2 <_ux_utility_long_get>
 8011286:	0002      	movs	r2, r0
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	3304      	adds	r3, #4
 8011290:	60fb      	str	r3, [r7, #12]
            break;                   
 8011292:	e012      	b.n	80112ba <_ux_utility_descriptor_parse+0x5c>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	0018      	movs	r0, r3
 8011298:	f000 fb83 	bl	80119a2 <_ux_utility_short_get>
 801129c:	0002      	movs	r2, r0
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	3302      	adds	r3, #2
 80112a6:	60fb      	str	r3, [r7, #12]
            break;                   
 80112a8:	e007      	b.n	80112ba <_ux_utility_descriptor_parse+0x5c>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	001a      	movs	r2, r3
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	3301      	adds	r3, #1
 80112b8:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	3304      	adds	r3, #4
 80112be:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	1e5a      	subs	r2, r3, #1
 80112c4:	607a      	str	r2, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1d1      	bne.n	801126e <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 80112ca:	46c0      	nop			; (mov r8, r8)
}
 80112cc:	46bd      	mov	sp, r7
 80112ce:	b004      	add	sp, #16
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b084      	sub	sp, #16
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	1c5a      	adds	r2, r3, #1
 80112de:	607a      	str	r2, [r7, #4]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	1c5a      	adds	r2, r3, #1
 80112e8:	607a      	str	r2, [r7, #4]
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	021b      	lsls	r3, r3, #8
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	4313      	orrs	r3, r2
 80112f2:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	1c5a      	adds	r2, r3, #1
 80112f8:	607a      	str	r2, [r7, #4]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	041b      	lsls	r3, r3, #16
 80112fe:	68fa      	ldr	r2, [r7, #12]
 8011300:	4313      	orrs	r3, r2
 8011302:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	061b      	lsls	r3, r3, #24
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	4313      	orrs	r3, r2
 801130e:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8011310:	68fb      	ldr	r3, [r7, #12]
}
 8011312:	0018      	movs	r0, r3
 8011314:	46bd      	mov	sp, r7
 8011316:	b004      	add	sp, #16
 8011318:	bd80      	pop	{r7, pc}

0801131a <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b082      	sub	sp, #8
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
 8011322:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	1c5a      	adds	r2, r3, #1
 8011328:	607a      	str	r2, [r7, #4]
 801132a:	683a      	ldr	r2, [r7, #0]
 801132c:	b2d2      	uxtb	r2, r2
 801132e:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	0a19      	lsrs	r1, r3, #8
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	1c5a      	adds	r2, r3, #1
 8011338:	607a      	str	r2, [r7, #4]
 801133a:	b2ca      	uxtb	r2, r1
 801133c:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	0c19      	lsrs	r1, r3, #16
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	1c5a      	adds	r2, r3, #1
 8011346:	607a      	str	r2, [r7, #4]
 8011348:	b2ca      	uxtb	r2, r1
 801134a:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	0e1b      	lsrs	r3, r3, #24
 8011350:	b2da      	uxtb	r2, r3
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 8011356:	46c0      	nop			; (mov r8, r8)
}
 8011358:	46bd      	mov	sp, r7
 801135a:	b002      	add	sp, #8
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b08c      	sub	sp, #48	; 0x30
 8011364:	af00      	add	r7, sp, #0
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	60b9      	str	r1, [r7, #8]
 801136a:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 801136c:	4b7f      	ldr	r3, [pc, #508]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	331c      	adds	r3, #28
 8011372:	0018      	movs	r0, r3
 8011374:	f000 fa84 	bl	8011880 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	3301      	adds	r3, #1
 801137c:	d101      	bne.n	8011382 <_ux_utility_memory_allocate+0x22>
        memory_alignment = UX_NO_ALIGN;
 801137e:	2300      	movs	r3, #0
 8011380:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2b0e      	cmp	r3, #14
 8011386:	d801      	bhi.n	801138c <_ux_utility_memory_allocate+0x2c>
        memory_alignment =  UX_ALIGN_MIN;
 8011388:	230f      	movs	r3, #15
 801138a:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	3301      	adds	r3, #1
 8011394:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	330f      	adds	r3, #15
 801139a:	220f      	movs	r2, #15
 801139c:	4393      	bics	r3, r2
 801139e:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a4:	18d3      	adds	r3, r2, r3
 80113a6:	3310      	adds	r3, #16
 80113a8:	001a      	movs	r2, r3
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	0011      	movs	r1, r2
 80113ae:	0018      	movs	r0, r3
 80113b0:	f000 f9d4 	bl	801175c <_ux_utility_memory_free_block_best_get>
 80113b4:	0003      	movs	r3, r0
 80113b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 80113b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d10c      	bne.n	80113d8 <_ux_utility_memory_allocate+0x78>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80113be:	4b6b      	ldr	r3, [pc, #428]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	331c      	adds	r3, #28
 80113c4:	0018      	movs	r0, r3
 80113c6:	f000 fa4f 	bl	8011868 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 80113ca:	2212      	movs	r2, #18
 80113cc:	2108      	movs	r1, #8
 80113ce:	2002      	movs	r0, #2
 80113d0:	f7ff fe56 	bl	8011080 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 80113d4:	2300      	movs	r3, #0
 80113d6:	e0c5      	b.n	8011564 <_ux_utility_memory_allocate+0x204>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 80113d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113da:	3310      	adds	r3, #16
 80113dc:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	6a3a      	ldr	r2, [r7, #32]
 80113e4:	4013      	ands	r3, r2
 80113e6:	d127      	bne.n	8011438 <_ux_utility_memory_allocate+0xd8>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	3310      	adds	r3, #16
 80113ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ee:	18d3      	adds	r3, r2, r3
 80113f0:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 80113f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f4:	689a      	ldr	r2, [r3, #8]
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113fe:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8011400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	3b10      	subs	r3, #16
 801140a:	001a      	movs	r2, r3
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	2200      	movs	r2, #0
 8011414:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8011416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 801141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141e:	69fa      	ldr	r2, [r7, #28]
 8011420:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	2280      	movs	r2, #128	; 0x80
 8011426:	0612      	lsls	r2, r2, #24
 8011428:	431a      	orrs	r2, r3
 801142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142c:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	3310      	adds	r3, #16
 8011434:	62bb      	str	r3, [r7, #40]	; 0x28
 8011436:	e05f      	b.n	80114f8 <_ux_utility_memory_allocate+0x198>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8011438:	6a3b      	ldr	r3, [r7, #32]
 801143a:	3310      	adds	r3, #16
 801143c:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 801143e:	68fa      	ldr	r2, [r7, #12]
 8011440:	6a3b      	ldr	r3, [r7, #32]
 8011442:	18d3      	adds	r3, r2, r3
 8011444:	3b01      	subs	r3, #1
 8011446:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	425a      	negs	r2, r3
 801144c:	6a3b      	ldr	r3, [r7, #32]
 801144e:	4013      	ands	r3, r2
 8011450:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8011452:	6a3b      	ldr	r3, [r7, #32]
 8011454:	3b10      	subs	r3, #16
 8011456:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801145c:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 801145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011460:	689a      	ldr	r2, [r3, #8]
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8011466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	2280      	movs	r2, #128	; 0x80
 8011472:	0612      	lsls	r2, r2, #24
 8011474:	431a      	orrs	r2, r3
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 801147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147c:	3310      	adds	r3, #16
 801147e:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8011480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011482:	69fa      	ldr	r2, [r7, #28]
 8011484:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8011486:	69fa      	ldr	r2, [r7, #28]
 8011488:	6a3b      	ldr	r3, [r7, #32]
 801148a:	1ad2      	subs	r2, r2, r3
 801148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148e:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	1ad3      	subs	r3, r2, r3
 801149a:	3b10      	subs	r3, #16
 801149c:	001a      	movs	r2, r3
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	1ad3      	subs	r3, r2, r3
 80114aa:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 80114ac:	69bb      	ldr	r3, [r7, #24]
 80114ae:	2b10      	cmp	r3, #16
 80114b0:	d91c      	bls.n	80114ec <_ux_utility_memory_allocate+0x18c>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 80114b2:	69fa      	ldr	r2, [r7, #28]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	18d3      	adds	r3, r2, r3
 80114b8:	3310      	adds	r3, #16
 80114ba:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	689a      	ldr	r2, [r3, #8]
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	69fa      	ldr	r2, [r7, #28]
 80114c8:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	3b10      	subs	r3, #16
 80114ce:	001a      	movs	r2, r3
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	2200      	movs	r2, #0
 80114d8:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	1ad2      	subs	r2, r2, r3
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80114ec:	69fb      	ldr	r3, [r7, #28]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	3310      	adds	r3, #16
 80114f2:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 80114f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fa:	3310      	adds	r3, #16
 80114fc:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	2100      	movs	r1, #0
 8011504:	0018      	movs	r0, r3
 8011506:	f000 f969 	bl	80117dc <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 801150a:	4b18      	ldr	r3, [pc, #96]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	68da      	ldr	r2, [r3, #12]
 8011510:	4b16      	ldr	r3, [pc, #88]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	d108      	bne.n	801152c <_ux_utility_memory_allocate+0x1cc>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 801151a:	4b14      	ldr	r3, [pc, #80]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	6899      	ldr	r1, [r3, #8]
 8011520:	4b12      	ldr	r3, [pc, #72]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011526:	1a8a      	subs	r2, r1, r2
 8011528:	609a      	str	r2, [r3, #8]
 801152a:	e014      	b.n	8011556 <_ux_utility_memory_allocate+0x1f6>
    }
    else
    {

       switch (memory_cache_flag)
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	2b01      	cmp	r3, #1
 8011530:	d108      	bne.n	8011544 <_ux_utility_memory_allocate+0x1e4>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 8011532:	4b0e      	ldr	r3, [pc, #56]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	6959      	ldr	r1, [r3, #20]
 8011538:	4b0c      	ldr	r3, [pc, #48]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801153e:	1a8a      	subs	r2, r1, r2
 8011540:	615a      	str	r2, [r3, #20]

            break;
 8011542:	e008      	b.n	8011556 <_ux_utility_memory_allocate+0x1f6>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8011544:	4b09      	ldr	r3, [pc, #36]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	6899      	ldr	r1, [r3, #8]
 801154a:	4b08      	ldr	r3, [pc, #32]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011550:	1a8a      	subs	r2, r1, r2
 8011552:	609a      	str	r2, [r3, #8]
            break;
 8011554:	46c0      	nop			; (mov r8, r8)
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8011556:	4b05      	ldr	r3, [pc, #20]	; (801156c <_ux_utility_memory_allocate+0x20c>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	331c      	adds	r3, #28
 801155c:	0018      	movs	r0, r3
 801155e:	f000 f983 	bl	8011868 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 8011562:	693b      	ldr	r3, [r7, #16]
}                                
 8011564:	0018      	movs	r0, r3
 8011566:	46bd      	mov	sp, r7
 8011568:	b00c      	add	sp, #48	; 0x30
 801156a:	bd80      	pop	{r7, pc}
 801156c:	20004e78 	.word	0x20004e78

08011570 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8011570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011572:	b085      	sub	sp, #20
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
 801157c:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d024      	beq.n	80115ce <_ux_utility_memory_allocate_mulc_safe+0x5e>
 8011584:	2000      	movs	r0, #0
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	0c19      	lsrs	r1, r3, #16
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	1c1e      	adds	r6, r3, #0
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	0c1b      	lsrs	r3, r3, #16
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	1c15      	adds	r5, r2, #0
 8011596:	b28a      	uxth	r2, r1
 8011598:	2a00      	cmp	r2, #0
 801159a:	d105      	bne.n	80115a8 <_ux_utility_memory_allocate_mulc_safe+0x38>
 801159c:	b29a      	uxth	r2, r3
 801159e:	2a00      	cmp	r2, #0
 80115a0:	d013      	beq.n	80115ca <_ux_utility_memory_allocate_mulc_safe+0x5a>
 80115a2:	1c19      	adds	r1, r3, #0
 80115a4:	1c34      	adds	r4, r6, #0
 80115a6:	e003      	b.n	80115b0 <_ux_utility_memory_allocate_mulc_safe+0x40>
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d10c      	bne.n	80115c8 <_ux_utility_memory_allocate_mulc_safe+0x58>
 80115ae:	1c2c      	adds	r4, r5, #0
 80115b0:	b2b3      	uxth	r3, r6
 80115b2:	b2aa      	uxth	r2, r5
 80115b4:	435a      	muls	r2, r3
 80115b6:	b2a3      	uxth	r3, r4
 80115b8:	b289      	uxth	r1, r1
 80115ba:	434b      	muls	r3, r1
 80115bc:	0c12      	lsrs	r2, r2, #16
 80115be:	189b      	adds	r3, r3, r2
 80115c0:	141b      	asrs	r3, r3, #16
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d000      	beq.n	80115ca <_ux_utility_memory_allocate_mulc_safe+0x5a>
 80115c8:	2001      	movs	r0, #1
 80115ca:	1e03      	subs	r3, r0, #0
 80115cc:	d109      	bne.n	80115e2 <_ux_utility_memory_allocate_mulc_safe+0x72>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	683a      	ldr	r2, [r7, #0]
 80115d2:	435a      	muls	r2, r3
 80115d4:	68b9      	ldr	r1, [r7, #8]
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	0018      	movs	r0, r3
 80115da:	f7ff fec1 	bl	8011360 <_ux_utility_memory_allocate>
 80115de:	0003      	movs	r3, r0
 80115e0:	e000      	b.n	80115e4 <_ux_utility_memory_allocate_mulc_safe+0x74>
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	0018      	movs	r0, r3
 80115e6:	46bd      	mov	sp, r7
 80115e8:	b005      	add	sp, #20
 80115ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115ec <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b086      	sub	sp, #24
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 8011600:	e007      	b.n	8011612 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 8011602:	697a      	ldr	r2, [r7, #20]
 8011604:	1c53      	adds	r3, r2, #1
 8011606:	617b      	str	r3, [r7, #20]
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	1c59      	adds	r1, r3, #1
 801160c:	6139      	str	r1, [r7, #16]
 801160e:	7812      	ldrb	r2, [r2, #0]
 8011610:	701a      	strb	r2, [r3, #0]
    while(length--)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	1e5a      	subs	r2, r3, #1
 8011616:	607a      	str	r2, [r7, #4]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1f2      	bne.n	8011602 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 801161c:	46c0      	nop			; (mov r8, r8)
}
 801161e:	46bd      	mov	sp, r7
 8011620:	b006      	add	sp, #24
 8011622:	bd80      	pop	{r7, pc}

08011624 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 801162c:	4b49      	ldr	r3, [pc, #292]	; (8011754 <_ux_utility_memory_free+0x130>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	331c      	adds	r3, #28
 8011632:	0018      	movs	r0, r3
 8011634:	f000 f924 	bl	8011880 <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	3b10      	subs	r3, #16
 801163c:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	3310      	adds	r3, #16
 8011644:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	685a      	ldr	r2, [r3, #4]
 801164a:	2380      	movs	r3, #128	; 0x80
 801164c:	061b      	lsls	r3, r3, #24
 801164e:	429a      	cmp	r2, r3
 8011650:	d010      	beq.n	8011674 <_ux_utility_memory_free+0x50>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8011656:	4a40      	ldr	r2, [pc, #256]	; (8011758 <_ux_utility_memory_free+0x134>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d00b      	beq.n	8011674 <_ux_utility_memory_free+0x50>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 801165c:	4b3d      	ldr	r3, [pc, #244]	; (8011754 <_ux_utility_memory_free+0x130>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	331c      	adds	r3, #28
 8011662:	0018      	movs	r0, r3
 8011664:	f000 f900 	bl	8011868 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 8011668:	2219      	movs	r2, #25
 801166a:	2108      	movs	r1, #8
 801166c:	2002      	movs	r0, #2
 801166e:	f7ff fd07 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 8011672:	e06c      	b.n	801174e <_ux_utility_memory_free+0x12a>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	2200      	movs	r2, #0
 8011678:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 801167a:	e007      	b.n	801168c <_ux_utility_memory_free+0x68>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d107      	bne.n	8011696 <_ux_utility_memory_free+0x72>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1f3      	bne.n	801167c <_ux_utility_memory_free+0x58>
 8011694:	e000      	b.n	8011698 <_ux_utility_memory_free+0x74>

        else

            /* The previous memory block is not free.  */
            break;
 8011696:	46c0      	nop			; (mov r8, r8)
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	689b      	ldr	r3, [r3, #8]
 801169c:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 801169e:	e01a      	b.n	80116d6 <_ux_utility_memory_free+0xb2>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d006      	beq.n	80116b6 <_ux_utility_memory_free+0x92>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	693a      	ldr	r2, [r7, #16]
 80116ac:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	60da      	str	r2, [r3, #12]
            break;
 80116b4:	e012      	b.n	80116dc <_ux_utility_memory_free+0xb8>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	689a      	ldr	r2, [r3, #8]
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	18d3      	adds	r3, r2, r3
 80116c8:	3310      	adds	r3, #16
 80116ca:	001a      	movs	r2, r3
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	689b      	ldr	r3, [r3, #8]
 80116d4:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d1e1      	bne.n	80116a0 <_ux_utility_memory_free+0x7c>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 80116dc:	4b1d      	ldr	r3, [pc, #116]	; (8011754 <_ux_utility_memory_free+0x130>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	68da      	ldr	r2, [r3, #12]
 80116e2:	4b1c      	ldr	r3, [pc, #112]	; (8011754 <_ux_utility_memory_free+0x130>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d108      	bne.n	80116fe <_ux_utility_memory_free+0xda>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 80116ec:	4b19      	ldr	r3, [pc, #100]	; (8011754 <_ux_utility_memory_free+0x130>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	6899      	ldr	r1, [r3, #8]
 80116f2:	4b18      	ldr	r3, [pc, #96]	; (8011754 <_ux_utility_memory_free+0x130>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	188a      	adds	r2, r1, r2
 80116fa:	609a      	str	r2, [r3, #8]
 80116fc:	e020      	b.n	8011740 <_ux_utility_memory_free+0x11c>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 80116fe:	4b15      	ldr	r3, [pc, #84]	; (8011754 <_ux_utility_memory_free+0x130>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	429a      	cmp	r2, r3
 801170c:	d310      	bcc.n	8011730 <_ux_utility_memory_free+0x10c>
 801170e:	4b11      	ldr	r3, [pc, #68]	; (8011754 <_ux_utility_memory_free+0x130>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	68ba      	ldr	r2, [r7, #8]
 8011716:	18d3      	adds	r3, r2, r3
 8011718:	697a      	ldr	r2, [r7, #20]
 801171a:	429a      	cmp	r2, r3
 801171c:	d208      	bcs.n	8011730 <_ux_utility_memory_free+0x10c>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 801171e:	4b0d      	ldr	r3, [pc, #52]	; (8011754 <_ux_utility_memory_free+0x130>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	6899      	ldr	r1, [r3, #8]
 8011724:	4b0b      	ldr	r3, [pc, #44]	; (8011754 <_ux_utility_memory_free+0x130>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	68fa      	ldr	r2, [r7, #12]
 801172a:	188a      	adds	r2, r1, r2
 801172c:	609a      	str	r2, [r3, #8]
 801172e:	e007      	b.n	8011740 <_ux_utility_memory_free+0x11c>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8011730:	4b08      	ldr	r3, [pc, #32]	; (8011754 <_ux_utility_memory_free+0x130>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	6959      	ldr	r1, [r3, #20]
 8011736:	4b07      	ldr	r3, [pc, #28]	; (8011754 <_ux_utility_memory_free+0x130>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	188a      	adds	r2, r1, r2
 801173e:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8011740:	4b04      	ldr	r3, [pc, #16]	; (8011754 <_ux_utility_memory_free+0x130>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	331c      	adds	r3, #28
 8011746:	0018      	movs	r0, r3
 8011748:	f000 f88e 	bl	8011868 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 801174c:	46c0      	nop			; (mov r8, r8)
}
 801174e:	46bd      	mov	sp, r7
 8011750:	b006      	add	sp, #24
 8011752:	bd80      	pop	{r7, pc}
 8011754:	20004e78 	.word	0x20004e78
 8011758:	80000001 	.word	0x80000001

0801175c <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 8011766:	2300      	movs	r3, #0
 8011768:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d003      	beq.n	8011778 <_ux_utility_memory_free_block_best_get+0x1c>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d005      	beq.n	8011782 <_ux_utility_memory_free_block_best_get+0x26>
 8011776:	e009      	b.n	801178c <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 8011778:	4b17      	ldr	r3, [pc, #92]	; (80117d8 <_ux_utility_memory_free_block_best_get+0x7c>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	60fb      	str	r3, [r7, #12]
            break;
 8011780:	e006      	b.n	8011790 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 8011782:	4b15      	ldr	r3, [pc, #84]	; (80117d8 <_ux_utility_memory_free_block_best_get+0x7c>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	60fb      	str	r3, [r7, #12]
            break;
 801178a:	e001      	b.n	8011790 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 801178c:	2300      	movs	r3, #0
 801178e:	e01e      	b.n	80117ce <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 8011790:	e019      	b.n	80117c6 <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d112      	bne.n	80117c0 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d20d      	bcs.n	80117c0 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d102      	bne.n	80117b0 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	60bb      	str	r3, [r7, #8]
 80117ae:	e007      	b.n	80117c0 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d201      	bcs.n	80117c0 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1e2      	bne.n	8011792 <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 80117cc:	68bb      	ldr	r3, [r7, #8]
}                                
 80117ce:	0018      	movs	r0, r3
 80117d0:	46bd      	mov	sp, r7
 80117d2:	b004      	add	sp, #16
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	46c0      	nop			; (mov r8, r8)
 80117d8:	20004e78 	.word	0x20004e78

080117dc <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b086      	sub	sp, #24
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	607a      	str	r2, [r7, #4]
 80117e6:	230b      	movs	r3, #11
 80117e8:	18fb      	adds	r3, r7, r3
 80117ea:	1c0a      	adds	r2, r1, #0
 80117ec:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 80117f2:	e006      	b.n	8011802 <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	1c5a      	adds	r2, r3, #1
 80117f8:	617a      	str	r2, [r7, #20]
 80117fa:	220b      	movs	r2, #11
 80117fc:	18ba      	adds	r2, r7, r2
 80117fe:	7812      	ldrb	r2, [r2, #0]
 8011800:	701a      	strb	r2, [r3, #0]
    while(length--)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	1e5a      	subs	r2, r3, #1
 8011806:	607a      	str	r2, [r7, #4]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1f3      	bne.n	80117f4 <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 801180c:	46c0      	nop			; (mov r8, r8)
}
 801180e:	46bd      	mov	sp, r7
 8011810:	b006      	add	sp, #24
 8011812:	bd80      	pop	{r7, pc}

08011814 <_ux_utility_mutex_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 801181e:	6839      	ldr	r1, [r7, #0]
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	2334      	movs	r3, #52	; 0x34
 8011824:	2200      	movs	r2, #0
 8011826:	f7fd f801 	bl	800e82c <_txe_mutex_create>
 801182a:	0003      	movs	r3, r0
 801182c:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d005      	beq.n	8011840 <_ux_utility_mutex_create+0x2c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	001a      	movs	r2, r3
 8011838:	2108      	movs	r1, #8
 801183a:	2002      	movs	r0, #2
 801183c:	f7ff fc20 	bl	8011080 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8011840:	68fb      	ldr	r3, [r7, #12]
}
 8011842:	0018      	movs	r0, r3
 8011844:	46bd      	mov	sp, r7
 8011846:	b004      	add	sp, #16
 8011848:	bd80      	pop	{r7, pc}

0801184a <_ux_utility_mutex_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 801184a:	b580      	push	{r7, lr}
 801184c:	b084      	sub	sp, #16
 801184e:	af00      	add	r7, sp, #0
 8011850:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	0018      	movs	r0, r3
 8011856:	f7fd f887 	bl	800e968 <_txe_mutex_delete>
 801185a:	0003      	movs	r3, r0
 801185c:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801185e:	68fb      	ldr	r3, [r7, #12]
}
 8011860:	0018      	movs	r0, r3
 8011862:	46bd      	mov	sp, r7
 8011864:	b004      	add	sp, #16
 8011866:	bd80      	pop	{r7, pc}

08011868 <_ux_utility_mutex_off>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	0018      	movs	r0, r3
 8011874:	f7fd f914 	bl	800eaa0 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 8011878:	46c0      	nop			; (mov r8, r8)
}
 801187a:	46bd      	mov	sp, r7
 801187c:	b002      	add	sp, #8
 801187e:	bd80      	pop	{r7, pc}

08011880 <_ux_utility_mutex_on>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 8011888:	2301      	movs	r3, #1
 801188a:	425a      	negs	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	0011      	movs	r1, r2
 8011890:	0018      	movs	r0, r3
 8011892:	f7fd f8a7 	bl	800e9e4 <_txe_mutex_get>
 8011896:	0003      	movs	r3, r0
 8011898:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d006      	beq.n	80118ae <_ux_utility_mutex_on+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	001a      	movs	r2, r3
 80118a4:	2108      	movs	r1, #8
 80118a6:	2002      	movs	r0, #2
 80118a8:	f7ff fbea 	bl	8011080 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 80118ac:	46c0      	nop			; (mov r8, r8)
 80118ae:	46c0      	nop			; (mov r8, r8)
}
 80118b0:	46bd      	mov	sp, r7
 80118b2:	b004      	add	sp, #16
 80118b4:	bd80      	pop	{r7, pc}

080118b6 <_ux_utility_semaphore_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b086      	sub	sp, #24
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	60f8      	str	r0, [r7, #12]
 80118be:	60b9      	str	r1, [r7, #8]
 80118c0:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	68b9      	ldr	r1, [r7, #8]
 80118c6:	68f8      	ldr	r0, [r7, #12]
 80118c8:	231c      	movs	r3, #28
 80118ca:	f7fd fa6d 	bl	800eda8 <_txe_semaphore_create>
 80118ce:	0003      	movs	r3, r0
 80118d0:	617b      	str	r3, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d005      	beq.n	80118e4 <_ux_utility_semaphore_create+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	001a      	movs	r2, r3
 80118dc:	2108      	movs	r1, #8
 80118de:	2002      	movs	r0, #2
 80118e0:	f7ff fbce 	bl	8011080 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 80118e4:	697b      	ldr	r3, [r7, #20]
}
 80118e6:	0018      	movs	r0, r3
 80118e8:	46bd      	mov	sp, r7
 80118ea:	b006      	add	sp, #24
 80118ec:	bd80      	pop	{r7, pc}

080118ee <_ux_utility_semaphore_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b084      	sub	sp, #16
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	0018      	movs	r0, r3
 80118fa:	f7fd faeb 	bl	800eed4 <_txe_semaphore_delete>
 80118fe:	0003      	movs	r3, r0
 8011900:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8011902:	68fb      	ldr	r3, [r7, #12]
}
 8011904:	0018      	movs	r0, r3
 8011906:	46bd      	mov	sp, r7
 8011908:	b004      	add	sp, #16
 801190a:	bd80      	pop	{r7, pc}

0801190c <_ux_utility_semaphore_get>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 801190c:	b590      	push	{r4, r7, lr}
 801190e:	b093      	sub	sp, #76	; 0x4c
 8011910:	af06      	add	r7, sp, #24
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 8011916:	f7fb fe31 	bl	800d57c <_tx_thread_identify>
 801191a:	0003      	movs	r3, r0
 801191c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 801191e:	231c      	movs	r3, #28
 8011920:	18fc      	adds	r4, r7, r3
 8011922:	2320      	movs	r3, #32
 8011924:	18fa      	adds	r2, r7, r3
 8011926:	2324      	movs	r3, #36	; 0x24
 8011928:	18f9      	adds	r1, r7, r3
 801192a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801192c:	2308      	movs	r3, #8
 801192e:	18fb      	adds	r3, r7, r3
 8011930:	9304      	str	r3, [sp, #16]
 8011932:	230c      	movs	r3, #12
 8011934:	18fb      	adds	r3, r7, r3
 8011936:	9303      	str	r3, [sp, #12]
 8011938:	2310      	movs	r3, #16
 801193a:	18fb      	adds	r3, r7, r3
 801193c:	9302      	str	r3, [sp, #8]
 801193e:	2314      	movs	r3, #20
 8011940:	18fb      	adds	r3, r7, r3
 8011942:	9301      	str	r3, [sp, #4]
 8011944:	2318      	movs	r3, #24
 8011946:	18fb      	adds	r3, r7, r3
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	0023      	movs	r3, r4
 801194c:	f7fd fc56 	bl	800f1fc <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 8011950:	4b0b      	ldr	r3, [pc, #44]	; (8011980 <_ux_utility_semaphore_get+0x74>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	699a      	ldr	r2, [r3, #24]
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	429a      	cmp	r2, r3
 801195a:	d203      	bcs.n	8011964 <_ux_utility_semaphore_get+0x58>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 801195c:	4b08      	ldr	r3, [pc, #32]	; (8011980 <_ux_utility_semaphore_get+0x74>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	69ba      	ldr	r2, [r7, #24]
 8011962:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 8011964:	683a      	ldr	r2, [r7, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	0011      	movs	r1, r2
 801196a:	0018      	movs	r0, r3
 801196c:	f7fd faf0 	bl	800ef50 <_txe_semaphore_get>
 8011970:	0003      	movs	r3, r0
 8011972:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 8011974:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011976:	0018      	movs	r0, r3
 8011978:	46bd      	mov	sp, r7
 801197a:	b00d      	add	sp, #52	; 0x34
 801197c:	bd90      	pop	{r4, r7, pc}
 801197e:	46c0      	nop			; (mov r8, r8)
 8011980:	20004e78 	.word	0x20004e78

08011984 <_ux_utility_semaphore_put>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	0018      	movs	r0, r3
 8011990:	f7fd fb22 	bl	800efd8 <_txe_semaphore_put>
 8011994:	0003      	movs	r3, r0
 8011996:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8011998:	68fb      	ldr	r3, [r7, #12]
}
 801199a:	0018      	movs	r0, r3
 801199c:	46bd      	mov	sp, r7
 801199e:	b004      	add	sp, #16
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b084      	sub	sp, #16
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	607a      	str	r2, [r7, #4]
 80119b0:	781a      	ldrb	r2, [r3, #0]
 80119b2:	200e      	movs	r0, #14
 80119b4:	183b      	adds	r3, r7, r0
 80119b6:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	021b      	lsls	r3, r3, #8
 80119c0:	b299      	uxth	r1, r3
 80119c2:	183b      	adds	r3, r7, r0
 80119c4:	183a      	adds	r2, r7, r0
 80119c6:	8812      	ldrh	r2, [r2, #0]
 80119c8:	430a      	orrs	r2, r1
 80119ca:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 80119cc:	183b      	adds	r3, r7, r0
 80119ce:	881b      	ldrh	r3, [r3, #0]
}
 80119d0:	0018      	movs	r0, r3
 80119d2:	46bd      	mov	sp, r7
 80119d4:	b004      	add	sp, #16
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <_ux_utility_string_length_check>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b086      	sub	sp, #24
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d101      	bne.n	80119ee <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 80119ea:	23ff      	movs	r3, #255	; 0xff
 80119ec:	e01d      	b.n	8011a2a <_ux_utility_string_length_check+0x52>

    string_length = 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	18d3      	adds	r3, r2, r3
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00d      	beq.n	8011a1a <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	3301      	adds	r3, #1
 8011a02:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 8011a04:	697a      	ldr	r2, [r7, #20]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d9f2      	bls.n	80119f2 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8011a0c:	22ff      	movs	r2, #255	; 0xff
 8011a0e:	2108      	movs	r1, #8
 8011a10:	2002      	movs	r0, #2
 8011a12:	f7ff fb35 	bl	8011080 <_ux_system_error_handler>

            return(UX_ERROR);
 8011a16:	23ff      	movs	r3, #255	; 0xff
 8011a18:	e007      	b.n	8011a2a <_ux_utility_string_length_check+0x52>
            break;
 8011a1a:	46c0      	nop			; (mov r8, r8)
        }
    }

    if (string_length_ptr)
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d002      	beq.n	8011a28 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	697a      	ldr	r2, [r7, #20]
 8011a26:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8011a28:	2300      	movs	r3, #0
}
 8011a2a:	0018      	movs	r0, r3
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	b006      	add	sp, #24
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <_ux_device_class_cdc_acm_activate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b086      	sub	sp, #24
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface;         
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;
UX_SLAVE_CLASS                          *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a1b      	ldr	r3, [r3, #32]
 8011a3e:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a44:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	689b      	ldr	r3, [r3, #8]
 8011a4a:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	693a      	ldr	r2, [r7, #16]
 8011a50:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface;
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	68fa      	ldr	r2, [r7, #12]
 8011a56:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d004      	beq.n	8011a6a <_ux_device_class_cdc_acm_activate+0x38>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	693a      	ldr	r2, [r7, #16]
 8011a66:	0010      	movs	r0, r2
 8011a68:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8011a6a:	2300      	movs	r3, #0
}
 8011a6c:	0018      	movs	r0, r3
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	b006      	add	sp, #24
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <_ux_device_class_cdc_acm_control_request>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b08a      	sub	sp, #40	; 0x28
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6a1b      	ldr	r3, [r3, #32]
 8011a80:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 8011a82:	6a3b      	ldr	r3, [r7, #32]
 8011a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a86:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8011a88:	4b53      	ldr	r3, [pc, #332]	; (8011bd8 <_ux_device_class_cdc_acm_control_request+0x164>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3320      	adds	r3, #32
 8011a8e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	336c      	adds	r3, #108	; 0x6c
 8011a94:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	2255      	movs	r2, #85	; 0x55
 8011a9a:	5c9b      	ldrb	r3, [r3, r2]
 8011a9c:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	3354      	adds	r3, #84	; 0x54
 8011aa2:	3302      	adds	r3, #2
 8011aa4:	0018      	movs	r0, r3
 8011aa6:	f7ff ff7c 	bl	80119a2 <_ux_utility_short_get>
 8011aaa:	0003      	movs	r3, r0
 8011aac:	60fb      	str	r3, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	3354      	adds	r3, #84	; 0x54
 8011ab2:	3306      	adds	r3, #6
 8011ab4:	0018      	movs	r0, r3
 8011ab6:	f7ff ff74 	bl	80119a2 <_ux_utility_short_get>
 8011aba:	0003      	movs	r3, r0
 8011abc:	60bb      	str	r3, [r7, #8]

    transmit_length = request_length ;
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	2b22      	cmp	r3, #34	; 0x22
 8011ac6:	d00a      	beq.n	8011ade <_ux_device_class_cdc_acm_control_request+0x6a>
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	2b22      	cmp	r3, #34	; 0x22
 8011acc:	d900      	bls.n	8011ad0 <_ux_device_class_cdc_acm_control_request+0x5c>
 8011ace:	e078      	b.n	8011bc2 <_ux_device_class_cdc_acm_control_request+0x14e>
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	2b20      	cmp	r3, #32
 8011ad4:	d051      	beq.n	8011b7a <_ux_device_class_cdc_acm_control_request+0x106>
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2b21      	cmp	r3, #33	; 0x21
 8011ada:	d022      	beq.n	8011b22 <_ux_device_class_cdc_acm_control_request+0xae>
 8011adc:	e071      	b.n	8011bc2 <_ux_device_class_cdc_acm_control_request+0x14e>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	227f      	movs	r2, #127	; 0x7f
 8011ae2:	2100      	movs	r1, #0
 8011ae4:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	2280      	movs	r2, #128	; 0x80
 8011aea:	2100      	movs	r1, #0
 8011aec:	5499      	strb	r1, [r3, r2]

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2201      	movs	r2, #1
 8011af2:	4013      	ands	r3, r2
 8011af4:	d003      	beq.n	8011afe <_ux_device_class_cdc_acm_control_request+0x8a>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	227f      	movs	r2, #127	; 0x7f
 8011afa:	2101      	movs	r1, #1
 8011afc:	5499      	strb	r1, [r3, r2]

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2202      	movs	r2, #2
 8011b02:	4013      	ands	r3, r2
 8011b04:	d003      	beq.n	8011b0e <_ux_device_class_cdc_acm_control_request+0x9a>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 8011b06:	69fb      	ldr	r3, [r7, #28]
 8011b08:	2280      	movs	r2, #128	; 0x80
 8011b0a:	2101      	movs	r1, #1
 8011b0c:	5499      	strb	r1, [r3, r2]
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8011b0e:	69fb      	ldr	r3, [r7, #28]
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d057      	beq.n	8011bc6 <_ux_device_class_cdc_acm_control_request+0x152>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	69fa      	ldr	r2, [r7, #28]
 8011b1c:	0010      	movs	r0, r2
 8011b1e:	4798      	blx	r3
            }

            break ;
 8011b20:	e051      	b.n	8011bc6 <_ux_device_class_cdc_acm_control_request+0x152>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	2b07      	cmp	r3, #7
 8011b26:	d901      	bls.n	8011b2c <_ux_device_class_cdc_acm_control_request+0xb8>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 8011b28:	2307      	movs	r3, #7
 8011b2a:	627b      	str	r3, [r7, #36]	; 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	68da      	ldr	r2, [r3, #12]
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b34:	0019      	movs	r1, r3
 8011b36:	0010      	movs	r0, r2
 8011b38:	f7ff fbef 	bl	801131a <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	3304      	adds	r3, #4
 8011b42:	69fa      	ldr	r2, [r7, #28]
 8011b44:	217c      	movs	r1, #124	; 0x7c
 8011b46:	5c52      	ldrb	r2, [r2, r1]
 8011b48:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	3305      	adds	r3, #5
 8011b50:	69fa      	ldr	r2, [r7, #28]
 8011b52:	217d      	movs	r1, #125	; 0x7d
 8011b54:	5c52      	ldrb	r2, [r2, r1]
 8011b56:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	3306      	adds	r3, #6
 8011b5e:	69fa      	ldr	r2, [r7, #28]
 8011b60:	217e      	movs	r1, #126	; 0x7e
 8011b62:	5c52      	ldrb	r2, [r2, r1]
 8011b64:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	2203      	movs	r2, #3
 8011b6a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 8011b6c:	68ba      	ldr	r2, [r7, #8]
 8011b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	0018      	movs	r0, r3
 8011b74:	f7ff f9fe 	bl	8010f74 <_ux_device_stack_transfer_request>
            break; 
 8011b78:	e028      	b.n	8011bcc <_ux_device_class_cdc_acm_control_request+0x158>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	0018      	movs	r0, r3
 8011b80:	f7ff fba7 	bl	80112d2 <_ux_utility_long_get>
 8011b84:	0002      	movs	r2, r0
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	7919      	ldrb	r1, [r3, #4]
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	227c      	movs	r2, #124	; 0x7c
 8011b94:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	7959      	ldrb	r1, [r3, #5]
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	227d      	movs	r2, #125	; 0x7d
 8011ba0:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	7999      	ldrb	r1, [r3, #6]
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	227e      	movs	r2, #126	; 0x7e
 8011bac:	5499      	strb	r1, [r3, r2]

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d009      	beq.n	8011bca <_ux_device_class_cdc_acm_control_request+0x156>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	69fa      	ldr	r2, [r7, #28]
 8011bbc:	0010      	movs	r0, r2
 8011bbe:	4798      	blx	r3
            }

            break ;
 8011bc0:	e003      	b.n	8011bca <_ux_device_class_cdc_acm_control_request+0x156>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 8011bc2:	23ff      	movs	r3, #255	; 0xff
 8011bc4:	e003      	b.n	8011bce <_ux_device_class_cdc_acm_control_request+0x15a>
            break ;
 8011bc6:	46c0      	nop			; (mov r8, r8)
 8011bc8:	e000      	b.n	8011bcc <_ux_device_class_cdc_acm_control_request+0x158>
            break ;
 8011bca:	46c0      	nop			; (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8011bcc:	2300      	movs	r3, #0
}
 8011bce:	0018      	movs	r0, r3
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	b00a      	add	sp, #40	; 0x28
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	46c0      	nop			; (mov r8, r8)
 8011bd8:	20004e74 	.word	0x20004e74

08011bdc <_ux_device_class_cdc_acm_deactivate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b088      	sub	sp, #32
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6a1b      	ldr	r3, [r3, #32]
 8011be8:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bee:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bfa:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8011bfc:	69fb      	ldr	r3, [r7, #28]
 8011bfe:	695b      	ldr	r3, [r3, #20]
 8011c00:	2280      	movs	r2, #128	; 0x80
 8011c02:	4013      	ands	r3, r2
 8011c04:	d105      	bne.n	8011c12 <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c0e:	61fb      	str	r3, [r7, #28]
 8011c10:	e002      	b.n	8011c18 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c16:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	2126      	movs	r1, #38	; 0x26
 8011c1c:	0018      	movs	r0, r3
 8011c1e:	f7ff f995 	bl	8010f4c <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	2126      	movs	r1, #38	; 0x26
 8011c26:	0018      	movs	r0, r3
 8011c28:	f7ff f990 	bl	8010f4c <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	2107      	movs	r1, #7
 8011c32:	0018      	movs	r0, r3
 8011c34:	f000 f8c2 	bl	8011dbc <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	689b      	ldr	r3, [r3, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d004      	beq.n	8011c4a <_ux_device_class_cdc_acm_deactivate+0x6e>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	693a      	ldr	r2, [r7, #16]
 8011c46:	0010      	movs	r0, r2
 8011c48:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	227f      	movs	r2, #127	; 0x7f
 8011c4e:	2100      	movs	r1, #0
 8011c50:	5499      	strb	r1, [r3, r2]
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	2280      	movs	r2, #128	; 0x80
 8011c56:	2100      	movs	r1, #0
 8011c58:	5499      	strb	r1, [r3, r2]

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	0018      	movs	r0, r3
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	b008      	add	sp, #32
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b07      	cmp	r3, #7
 8011c72:	d834      	bhi.n	8011cde <_ux_device_class_cdc_acm_entry+0x7a>
 8011c74:	009a      	lsls	r2, r3, #2
 8011c76:	4b1c      	ldr	r3, [pc, #112]	; (8011ce8 <_ux_device_class_cdc_acm_entry+0x84>)
 8011c78:	18d3      	adds	r3, r2, r3
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	0018      	movs	r0, r3
 8011c82:	f000 f833 	bl	8011cec <_ux_device_class_cdc_acm_initialize>
 8011c86:	0003      	movs	r3, r0
 8011c88:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	e028      	b.n	8011ce0 <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	0018      	movs	r0, r3
 8011c92:	f000 f9e3 	bl	801205c <_ux_device_class_cdc_acm_uninitialize>
 8011c96:	0003      	movs	r3, r0
 8011c98:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	e020      	b.n	8011ce0 <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	695b      	ldr	r3, [r3, #20]
 8011ca2:	2b0a      	cmp	r3, #10
 8011ca4:	d101      	bne.n	8011caa <_ux_device_class_cdc_acm_entry+0x46>
            return(UX_SUCCESS);
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	e01a      	b.n	8011ce0 <_ux_device_class_cdc_acm_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 8011caa:	2357      	movs	r3, #87	; 0x57
 8011cac:	e018      	b.n	8011ce0 <_ux_device_class_cdc_acm_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	0018      	movs	r0, r3
 8011cb2:	f7ff febe 	bl	8011a32 <_ux_device_class_cdc_acm_activate>
 8011cb6:	0003      	movs	r3, r0
 8011cb8:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	e010      	b.n	8011ce0 <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	0018      	movs	r0, r3
 8011cc2:	f7ff ff8b 	bl	8011bdc <_ux_device_class_cdc_acm_deactivate>
 8011cc6:	0003      	movs	r3, r0
 8011cc8:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	e008      	b.n	8011ce0 <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	0018      	movs	r0, r3
 8011cd2:	f7ff fecf 	bl	8011a74 <_ux_device_class_cdc_acm_control_request>
 8011cd6:	0003      	movs	r3, r0
 8011cd8:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	e000      	b.n	8011ce0 <_ux_device_class_cdc_acm_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8011cde:	2354      	movs	r3, #84	; 0x54
    }   
}
 8011ce0:	0018      	movs	r0, r3
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	b004      	add	sp, #16
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	08014b68 	.word	0x08014b68

08011cec <_ux_device_class_cdc_acm_initialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6a1b      	ldr	r3, [r3, #32]
 8011cf8:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 8011cfa:	2284      	movs	r2, #132	; 0x84
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	2000      	movs	r0, #0
 8011d00:	f7ff fb2e 	bl	8011360 <_ux_utility_memory_allocate>
 8011d04:	0003      	movs	r3, r0
 8011d06:	613b      	str	r3, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d101      	bne.n	8011d12 <_ux_device_class_cdc_acm_initialize+0x26>
        return(UX_MEMORY_INSUFFICIENT);
 8011d0e:	2312      	movs	r3, #18
 8011d10:	e04b      	b.n	8011daa <_ux_device_class_cdc_acm_initialize+0xbe>

    /* Save the address of the CDC instance inside the CDC container.  */
    class -> ux_slave_class_instance = (VOID *) cdc_acm;
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	693a      	ldr	r2, [r7, #16]
 8011d16:	649a      	str	r2, [r3, #72]	; 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d1c:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	685a      	ldr	r2, [r3, #4]
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	689a      	ldr	r2, [r3, #8]
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	60da      	str	r2, [r3, #12]

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	3310      	adds	r3, #16
 8011d3a:	4a1e      	ldr	r2, [pc, #120]	; (8011db4 <_ux_device_class_cdc_acm_initialize+0xc8>)
 8011d3c:	0011      	movs	r1, r2
 8011d3e:	0018      	movs	r0, r3
 8011d40:	f7ff fd68 	bl	8011814 <_ux_utility_mutex_create>
 8011d44:	0003      	movs	r3, r0
 8011d46:	60bb      	str	r3, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d005      	beq.n	8011d5a <_ux_device_class_cdc_acm_initialize+0x6e>
    {

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	0018      	movs	r0, r3
 8011d52:	f7ff fc67 	bl	8011624 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 8011d56:	2317      	movs	r3, #23
 8011d58:	e027      	b.n	8011daa <_ux_device_class_cdc_acm_initialize+0xbe>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	3344      	adds	r3, #68	; 0x44
 8011d5e:	4a16      	ldr	r2, [pc, #88]	; (8011db8 <_ux_device_class_cdc_acm_initialize+0xcc>)
 8011d60:	0011      	movs	r1, r2
 8011d62:	0018      	movs	r0, r3
 8011d64:	f7ff fd56 	bl	8011814 <_ux_utility_mutex_create>
 8011d68:	0003      	movs	r3, r0
 8011d6a:	60bb      	str	r3, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00a      	beq.n	8011d88 <_ux_device_class_cdc_acm_initialize+0x9c>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	3310      	adds	r3, #16
 8011d76:	0018      	movs	r0, r3
 8011d78:	f7ff fd67 	bl	801184a <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	0018      	movs	r0, r3
 8011d80:	f7ff fc50 	bl	8011624 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 8011d84:	2317      	movs	r3, #23
 8011d86:	e010      	b.n	8011daa <_ux_device_class_cdc_acm_initialize+0xbe>
    }        
    
#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	22e1      	movs	r2, #225	; 0xe1
 8011d8c:	0252      	lsls	r2, r2, #9
 8011d8e:	679a      	str	r2, [r3, #120]	; 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	227c      	movs	r2, #124	; 0x7c
 8011d94:	2101      	movs	r1, #1
 8011d96:	5499      	strb	r1, [r3, r2]
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	227d      	movs	r2, #125	; 0x7d
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	5499      	strb	r1, [r3, r2]
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	227e      	movs	r2, #126	; 0x7e
 8011da4:	2108      	movs	r1, #8
 8011da6:	5499      	strb	r1, [r3, r2]

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 8011da8:	2300      	movs	r3, #0
}
 8011daa:	0018      	movs	r0, r3
 8011dac:	46bd      	mov	sp, r7
 8011dae:	b006      	add	sp, #24
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	46c0      	nop			; (mov r8, r8)
 8011db4:	080148c4 	.word	0x080148c4
 8011db8:	080148e4 	.word	0x080148e4

08011dbc <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b08a      	sub	sp, #40	; 0x28
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	60b9      	str	r1, [r7, #8]
 8011dc6:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	627b      	str	r3, [r7, #36]	; 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	2b09      	cmp	r3, #9
 8011dd0:	d900      	bls.n	8011dd4 <_ux_device_class_cdc_acm_ioctl+0x18>
 8011dd2:	e09f      	b.n	8011f14 <_ux_device_class_cdc_acm_ioctl+0x158>
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	009a      	lsls	r2, r3, #2
 8011dd8:	4b55      	ldr	r3, [pc, #340]	; (8011f30 <_ux_device_class_cdc_acm_ioctl+0x174>)
 8011dda:	18d3      	adds	r3, r2, r3
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	469f      	mov	pc, r3
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	7919      	ldrb	r1, [r3, #4]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	227c      	movs	r2, #124	; 0x7c
 8011df4:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	7959      	ldrb	r1, [r3, #5]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	227d      	movs	r2, #125	; 0x7d
 8011dfe:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	7999      	ldrb	r1, [r3, #6]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	227e      	movs	r2, #126	; 0x7e
 8011e08:	5499      	strb	r1, [r3, r2]
            
            break;
 8011e0a:	e08c      	b.n	8011f26 <_ux_device_class_cdc_acm_ioctl+0x16a>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	227c      	movs	r2, #124	; 0x7c
 8011e1c:	5c9a      	ldrb	r2, [r3, r2]
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	227d      	movs	r2, #125	; 0x7d
 8011e26:	5c9a      	ldrb	r2, [r3, r2]
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	227e      	movs	r2, #126	; 0x7e
 8011e30:	5c9a      	ldrb	r2, [r3, r2]
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	719a      	strb	r2, [r3, #6]
            
            break;
 8011e36:	e076      	b.n	8011f26 <_ux_device_class_cdc_acm_ioctl+0x16a>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2280      	movs	r2, #128	; 0x80
 8011e40:	5c9a      	ldrb	r2, [r3, r2]
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	227f      	movs	r2, #127	; 0x7f
 8011e4a:	5c9a      	ldrb	r2, [r3, r2]
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	705a      	strb	r2, [r3, #1]
            
            break;
 8011e50:	e069      	b.n	8011f26 <_ux_device_class_cdc_acm_ioctl+0x16a>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	7819      	ldrb	r1, [r3, #0]
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2280      	movs	r2, #128	; 0x80
 8011e5e:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	7859      	ldrb	r1, [r3, #1]
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	227f      	movs	r2, #127	; 0x7f
 8011e68:	5499      	strb	r1, [r3, r2]
            
            break;
 8011e6a:	e05c      	b.n	8011f26 <_ux_device_class_cdc_acm_ioctl+0x16a>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e76:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d002      	beq.n	8011e84 <_ux_device_class_cdc_acm_ioctl+0xc8>
 8011e7e:	2b02      	cmp	r3, #2
 8011e80:	d009      	beq.n	8011e96 <_ux_device_class_cdc_acm_ioctl+0xda>
 8011e82:	e011      	b.n	8011ea8 <_ux_device_class_cdc_acm_ioctl+0xec>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	695b      	ldr	r3, [r3, #20]
 8011e88:	2280      	movs	r2, #128	; 0x80
 8011e8a:	4013      	ands	r3, r2
 8011e8c:	d10f      	bne.n	8011eae <_ux_device_class_cdc_acm_ioctl+0xf2>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e92:	623b      	str	r3, [r7, #32]
                }
                break;
 8011e94:	e00b      	b.n	8011eae <_ux_device_class_cdc_acm_ioctl+0xf2>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8011e96:	6a3b      	ldr	r3, [r7, #32]
 8011e98:	695b      	ldr	r3, [r3, #20]
 8011e9a:	2280      	movs	r2, #128	; 0x80
 8011e9c:	4013      	ands	r3, r2
 8011e9e:	d008      	beq.n	8011eb2 <_ux_device_class_cdc_acm_ioctl+0xf6>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8011ea0:	6a3b      	ldr	r3, [r7, #32]
 8011ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ea4:	623b      	str	r3, [r7, #32]
                }
                break;
 8011ea6:	e004      	b.n	8011eb2 <_ux_device_class_cdc_acm_ioctl+0xf6>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 8011ea8:	2353      	movs	r3, #83	; 0x53
 8011eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8011eac:	e002      	b.n	8011eb4 <_ux_device_class_cdc_acm_ioctl+0xf8>
                break;
 8011eae:	46c0      	nop			; (mov r8, r8)
 8011eb0:	e000      	b.n	8011eb4 <_ux_device_class_cdc_acm_ioctl+0xf8>
                break;
 8011eb2:	46c0      	nop			; (mov r8, r8)
            }
        
            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8011eb4:	6a3b      	ldr	r3, [r7, #32]
 8011eb6:	3330      	adds	r3, #48	; 0x30
 8011eb8:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d130      	bne.n	8011f24 <_ux_device_class_cdc_acm_ioctl+0x168>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	21f9      	movs	r1, #249	; 0xf9
 8011ec6:	0018      	movs	r0, r3
 8011ec8:	f7ff f808 	bl	8010edc <_ux_device_stack_transfer_abort>
            
            }
#endif
            break;
 8011ecc:	e02a      	b.n	8011f24 <_ux_device_class_cdc_acm_ioctl+0x168>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ed8:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8011eda:	6a3b      	ldr	r3, [r7, #32]
 8011edc:	695b      	ldr	r3, [r3, #20]
 8011ede:	2280      	movs	r2, #128	; 0x80
 8011ee0:	401a      	ands	r2, r3
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	2b08      	cmp	r3, #8
 8011ee6:	d101      	bne.n	8011eec <_ux_device_class_cdc_acm_ioctl+0x130>
 8011ee8:	2300      	movs	r3, #0
 8011eea:	e000      	b.n	8011eee <_ux_device_class_cdc_acm_ioctl+0x132>
 8011eec:	2380      	movs	r3, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d002      	beq.n	8011ef8 <_ux_device_class_cdc_acm_ioctl+0x13c>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef6:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8011ef8:	6a3b      	ldr	r3, [r7, #32]
 8011efa:	3330      	adds	r3, #48	; 0x30
 8011efc:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d102      	bne.n	8011f0c <_ux_device_class_cdc_acm_ioctl+0x150>
                status = UX_ERROR;
 8011f06:	23ff      	movs	r3, #255	; 0xff
 8011f08:	627b      	str	r3, [r7, #36]	; 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 8011f0a:	e00c      	b.n	8011f26 <_ux_device_class_cdc_acm_ioctl+0x16a>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8011f12:	e008      	b.n	8011f26 <_ux_device_class_cdc_acm_ioctl+0x16a>
#endif
    
        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8011f14:	2254      	movs	r2, #84	; 0x54
 8011f16:	2107      	movs	r1, #7
 8011f18:	2002      	movs	r0, #2
 8011f1a:	f7ff f8b1 	bl	8011080 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 8011f1e:	2354      	movs	r3, #84	; 0x54
 8011f20:	627b      	str	r3, [r7, #36]	; 0x24
 8011f22:	e000      	b.n	8011f26 <_ux_device_class_cdc_acm_ioctl+0x16a>
            break;
 8011f24:	46c0      	nop			; (mov r8, r8)
    }   

    /* Return status to caller.  */
    return(status);
 8011f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
          
}
 8011f28:	0018      	movs	r0, r3
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	b00a      	add	sp, #40	; 0x28
 8011f2e:	bd80      	pop	{r7, pc}
 8011f30:	08014b88 	.word	0x08014b88

08011f34 <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b08a      	sub	sp, #40	; 0x28
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
 8011f40:	603b      	str	r3, [r7, #0]

UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface;
UX_SLAVE_TRANSFER           *transfer_request;
UINT                        status= UX_SUCCESS;
 8011f42:	2300      	movs	r3, #0
 8011f44:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8011f46:	4b44      	ldr	r3, [pc, #272]	; (8012058 <_ux_device_class_cdc_acm_read+0x124>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	3320      	adds	r3, #32
 8011f4c:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	2b03      	cmp	r3, #3
 8011f54:	d006      	beq.n	8011f64 <_ux_device_class_cdc_acm_read+0x30>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8011f56:	2251      	movs	r2, #81	; 0x51
 8011f58:	2107      	movs	r1, #7
 8011f5a:	2002      	movs	r0, #2
 8011f5c:	f7ff f890 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8011f60:	2351      	movs	r3, #81	; 0x51
 8011f62:	e074      	b.n	801204e <_ux_device_class_cdc_acm_read+0x11a>
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f6e:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f72:	695b      	ldr	r3, [r3, #20]
 8011f74:	2280      	movs	r2, #128	; 0x80
 8011f76:	4013      	ands	r3, r2
 8011f78:	d002      	beq.n	8011f80 <_ux_device_class_cdc_acm_read+0x4c>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_utility_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	3344      	adds	r3, #68	; 0x44
 8011f84:	0018      	movs	r0, r3
 8011f86:	f7ff fc7b 	bl	8011880 <_ux_utility_mutex_on>
        
    /* All CDC reading  are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	3330      	adds	r3, #48	; 0x30
 8011f8e:	613b      	str	r3, [r7, #16]
    
    /* Reset the actual length.  */
    *actual_length =  0;
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	2200      	movs	r2, #0
 8011f94:	601a      	str	r2, [r3, #0]
    
    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8011f96:	e042      	b.n	801201e <_ux_device_class_cdc_acm_read+0xea>
    { 
        
        /* Check if we have enough in the local buffer.  */
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8011f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9a:	69db      	ldr	r3, [r3, #28]
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d903      	bls.n	8011faa <_ux_device_class_cdc_acm_read+0x76>
    
            /* We have too much to transfer.  */
            local_requested_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa4:	69db      	ldr	r3, [r3, #28]
 8011fa6:	61fb      	str	r3, [r7, #28]
 8011fa8:	e001      	b.n	8011fae <_ux_device_class_cdc_acm_read+0x7a>
            
        else
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	61fb      	str	r3, [r7, #28]
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 8011fae:	69fa      	ldr	r2, [r7, #28]
 8011fb0:	69f9      	ldr	r1, [r7, #28]
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	0018      	movs	r0, r3
 8011fb6:	f7fe ffdd 	bl	8010f74 <_ux_device_stack_transfer_request>
 8011fba:	0003      	movs	r3, r0
 8011fbc:	623b      	str	r3, [r7, #32]
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 8011fbe:	6a3b      	ldr	r3, [r7, #32]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d125      	bne.n	8012010 <_ux_device_class_cdc_acm_read+0xdc>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	68d9      	ldr	r1, [r3, #12]
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	699a      	ldr	r2, [r3, #24]
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	0018      	movs	r0, r3
 8011fd0:	f7ff fb0c 	bl	80115ec <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	699b      	ldr	r3, [r3, #24]
 8011fd8:	68ba      	ldr	r2, [r7, #8]
 8011fda:	18d3      	adds	r3, r2, r3
 8011fdc:	60bb      	str	r3, [r7, #8]
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	699b      	ldr	r3, [r3, #24]
 8011fe6:	18d2      	adds	r2, r2, r3
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	601a      	str	r2, [r3, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	699b      	ldr	r3, [r3, #24]
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	1ad3      	subs	r3, r2, r3
 8011ff4:	607b      	str	r3, [r7, #4]


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	699a      	ldr	r2, [r3, #24]
 8011ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffc:	69db      	ldr	r3, [r3, #28]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d20d      	bcs.n	801201e <_ux_device_class_cdc_acm_read+0xea>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	3344      	adds	r3, #68	; 0x44
 8012006:	0018      	movs	r0, r3
 8012008:	f7ff fc2e 	bl	8011868 <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 801200c:	2300      	movs	r3, #0
 801200e:	e01e      	b.n	801204e <_ux_device_class_cdc_acm_read+0x11a>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	3344      	adds	r3, #68	; 0x44
 8012014:	0018      	movs	r0, r3
 8012016:	f7ff fc27 	bl	8011868 <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 801201a:	6a3b      	ldr	r3, [r7, #32]
 801201c:	e017      	b.n	801204e <_ux_device_class_cdc_acm_read+0x11a>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2b03      	cmp	r3, #3
 8012024:	d102      	bne.n	801202c <_ux_device_class_cdc_acm_read+0xf8>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d1b5      	bne.n	8011f98 <_ux_device_class_cdc_acm_read+0x64>
        }            
    }

    
    /* Free Mutex resource.  */
    _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	3344      	adds	r3, #68	; 0x44
 8012030:	0018      	movs	r0, r3
 8012032:	f7ff fc19 	bl	8011868 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2b03      	cmp	r3, #3
 801203c:	d006      	beq.n	801204c <_ux_device_class_cdc_acm_read+0x118>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 801203e:	2222      	movs	r2, #34	; 0x22
 8012040:	2107      	movs	r1, #7
 8012042:	2002      	movs	r0, #2
 8012044:	f7ff f81c 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 8012048:	2322      	movs	r3, #34	; 0x22
 801204a:	e000      	b.n	801204e <_ux_device_class_cdc_acm_read+0x11a>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 801204c:	6a3b      	ldr	r3, [r7, #32]
}
 801204e:	0018      	movs	r0, r3
 8012050:	46bd      	mov	sp, r7
 8012052:	b00a      	add	sp, #40	; 0x28
 8012054:	bd80      	pop	{r7, pc}
 8012056:	46c0      	nop			; (mov r8, r8)
 8012058:	20004e74 	.word	0x20004e74

0801205c <_ux_device_class_cdc_acm_uninitialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6a1b      	ldr	r3, [r3, #32]
 8012068:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801206e:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00d      	beq.n	8012092 <_ux_device_class_cdc_acm_uninitialize+0x36>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	3310      	adds	r3, #16
 801207a:	0018      	movs	r0, r3
 801207c:	f7ff fbe5 	bl	801184a <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	3344      	adds	r3, #68	; 0x44
 8012084:	0018      	movs	r0, r3
 8012086:	f7ff fbe0 	bl	801184a <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack);
#endif
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	0018      	movs	r0, r3
 801208e:	f7ff fac9 	bl	8011624 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 8012092:	2300      	movs	r3, #0
}
 8012094:	0018      	movs	r0, r3
 8012096:	46bd      	mov	sp, r7
 8012098:	b004      	add	sp, #16
 801209a:	bd80      	pop	{r7, pc}

0801209c <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b08a      	sub	sp, #40	; 0x28
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	603b      	str	r3, [r7, #0]
UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface;
UX_SLAVE_TRANSFER           *transfer_request;
ULONG                       local_requested_length;
UINT                        status = 0;
 80120aa:	2300      	movs	r3, #0
 80120ac:	61fb      	str	r3, [r7, #28]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80120ae:	4b48      	ldr	r3, [pc, #288]	; (80121d0 <_ux_device_class_cdc_acm_write+0x134>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	3320      	adds	r3, #32
 80120b4:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	2b03      	cmp	r3, #3
 80120bc:	d006      	beq.n	80120cc <_ux_device_class_cdc_acm_write+0x30>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 80120be:	2251      	movs	r2, #81	; 0x51
 80120c0:	2107      	movs	r1, #7
 80120c2:	2002      	movs	r0, #2
 80120c4:	f7fe ffdc 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 80120c8:	2351      	movs	r3, #81	; 0x51
 80120ca:	e07c      	b.n	80121c6 <_ux_device_class_cdc_acm_write+0x12a>
    }
        
    /* We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120d6:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 80120d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120da:	695b      	ldr	r3, [r3, #20]
 80120dc:	2280      	movs	r2, #128	; 0x80
 80120de:	4013      	ands	r3, r2
 80120e0:	d102      	bne.n	80120e8 <_ux_device_class_cdc_acm_write+0x4c>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80120e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_utility_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	3310      	adds	r3, #16
 80120ec:	0018      	movs	r0, r3
 80120ee:	f7ff fbc7 	bl	8011880 <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80120f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f4:	3330      	adds	r3, #48	; 0x30
 80120f6:	613b      	str	r3, [r7, #16]

    /* Reset the actual length.  */
    *actual_length =  0;
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	2200      	movs	r2, #0
 80120fc:	601a      	str	r2, [r3, #0]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	2b03      	cmp	r3, #3
 8012104:	d147      	bne.n	8012196 <_ux_device_class_cdc_acm_write+0xfa>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d144      	bne.n	8012196 <_ux_device_class_cdc_acm_write+0xfa>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	2200      	movs	r2, #0
 8012110:	2100      	movs	r1, #0
 8012112:	0018      	movs	r0, r3
 8012114:	f7fe ff2e 	bl	8010f74 <_ux_device_stack_transfer_request>
 8012118:	0003      	movs	r3, r0
 801211a:	61fb      	str	r3, [r7, #28]

        /* Free Mutex resource.  */
        _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	3310      	adds	r3, #16
 8012120:	0018      	movs	r0, r3
 8012122:	f7ff fba1 	bl	8011868 <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	e04d      	b.n	80121c6 <_ux_device_class_cdc_acm_write+0x12a>
        /* Check if we need more transactions.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
        { 
    
            /* Check if we have enough in the local buffer.  */
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	2380      	movs	r3, #128	; 0x80
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	429a      	cmp	r2, r3
 8012132:	d903      	bls.n	801213c <_ux_device_class_cdc_acm_write+0xa0>
    
                /* We have too much to transfer.  */
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 8012134:	2380      	movs	r3, #128	; 0x80
 8012136:	009b      	lsls	r3, r3, #2
 8012138:	623b      	str	r3, [r7, #32]
 801213a:	e001      	b.n	8012140 <_ux_device_class_cdc_acm_write+0xa4>
                
            else
            
                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	623b      	str	r3, [r7, #32]
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	6a3a      	ldr	r2, [r7, #32]
 8012146:	68b9      	ldr	r1, [r7, #8]
 8012148:	0018      	movs	r0, r3
 801214a:	f7ff fa4f 	bl	80115ec <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 801214e:	6a3a      	ldr	r2, [r7, #32]
 8012150:	6a39      	ldr	r1, [r7, #32]
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	0018      	movs	r0, r3
 8012156:	f7fe ff0d 	bl	8010f74 <_ux_device_stack_transfer_request>
 801215a:	0003      	movs	r3, r0
 801215c:	61fb      	str	r3, [r7, #28]
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 801215e:	69fb      	ldr	r3, [r7, #28]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d111      	bne.n	8012188 <_ux_device_class_cdc_acm_write+0xec>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	699b      	ldr	r3, [r3, #24]
 8012168:	68ba      	ldr	r2, [r7, #8]
 801216a:	18d3      	adds	r3, r2, r3
 801216c:	60bb      	str	r3, [r7, #8]
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	18d2      	adds	r2, r2, r3
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	601a      	str	r2, [r3, #0]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	699b      	ldr	r3, [r3, #24]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	1ad3      	subs	r3, r2, r3
 8012184:	607b      	str	r3, [r7, #4]
 8012186:	e006      	b.n	8012196 <_ux_device_class_cdc_acm_write+0xfa>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	3310      	adds	r3, #16
 801218c:	0018      	movs	r0, r3
 801218e:	f7ff fb6b 	bl	8011868 <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	e017      	b.n	80121c6 <_ux_device_class_cdc_acm_write+0x12a>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	2b03      	cmp	r3, #3
 801219c:	d102      	bne.n	80121a4 <_ux_device_class_cdc_acm_write+0x108>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d1c2      	bne.n	801212a <_ux_device_class_cdc_acm_write+0x8e>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	3310      	adds	r3, #16
 80121a8:	0018      	movs	r0, r3
 80121aa:	f7ff fb5d 	bl	8011868 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	2b03      	cmp	r3, #3
 80121b4:	d006      	beq.n	80121c4 <_ux_device_class_cdc_acm_write+0x128>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 80121b6:	2222      	movs	r2, #34	; 0x22
 80121b8:	2107      	movs	r1, #7
 80121ba:	2002      	movs	r0, #2
 80121bc:	f7fe ff60 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 80121c0:	2322      	movs	r3, #34	; 0x22
 80121c2:	e000      	b.n	80121c6 <_ux_device_class_cdc_acm_write+0x12a>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 80121c4:	69fb      	ldr	r3, [r7, #28]
          
}
 80121c6:	0018      	movs	r0, r3
 80121c8:	46bd      	mov	sp, r7
 80121ca:	b00a      	add	sp, #40	; 0x28
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	46c0      	nop			; (mov r8, r8)
 80121d0:	20004e74 	.word	0x20004e74

080121d4 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2280      	movs	r2, #128	; 0x80
 80121e2:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2201      	movs	r2, #1
 80121e8:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	0018      	movs	r0, r3
 80121ee:	f7fd fde1 	bl	800fdb4 <_ux_device_stack_control_request_process>
}
 80121f2:	46c0      	nop			; (mov r8, r8)
 80121f4:	46bd      	mov	sp, r7
 80121f6:	b002      	add	sp, #8
 80121f8:	bd80      	pop	{r7, pc}

080121fa <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 80121fa:	b580      	push	{r7, lr}
 80121fc:	b084      	sub	sp, #16
 80121fe:	af00      	add	r7, sp, #0
 8012200:	60f8      	str	r0, [r7, #12]
 8012202:	60b9      	str	r1, [r7, #8]
 8012204:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	2200      	movs	r2, #0
 801220a:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2280      	movs	r2, #128	; 0x80
 8012210:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	0018      	movs	r0, r3
 8012216:	f7fd fdcd 	bl	800fdb4 <_ux_device_stack_control_request_process>
 801221a:	1e03      	subs	r3, r0, #0
 801221c:	d108      	bne.n	8012230 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2203      	movs	r2, #3
 8012222:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	2300      	movs	r3, #0
 8012228:	2200      	movs	r2, #0
 801222a:	2100      	movs	r1, #0
 801222c:	f7f2 fc87 	bl	8004b3e <HAL_PCD_EP_Transmit>
    }
}
 8012230:	46c0      	nop			; (mov r8, r8)
 8012232:	46bd      	mov	sp, r7
 8012234:	b004      	add	sp, #16
 8012236:	bd80      	pop	{r7, pc}

08012238 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2280      	movs	r2, #128	; 0x80
 8012248:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	0018      	movs	r0, r3
 801224e:	f7fd fdb1 	bl	800fdb4 <_ux_device_stack_control_request_process>
 8012252:	1e03      	subs	r3, r0, #0
 8012254:	d108      	bne.n	8012268 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2204      	movs	r2, #4
 801225a:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	2300      	movs	r3, #0
 8012260:	2200      	movs	r2, #0
 8012262:	2100      	movs	r1, #0
 8012264:	f7f2 fc6b 	bl	8004b3e <HAL_PCD_EP_Transmit>
    }
}
 8012268:	46c0      	nop			; (mov r8, r8)
 801226a:	46bd      	mov	sp, r7
 801226c:	b004      	add	sp, #16
 801226e:	bd80      	pop	{r7, pc}

08012270 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b088      	sub	sp, #32
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012278:	4b3e      	ldr	r3, [pc, #248]	; (8012374 <HAL_PCD_SetupStageCallback+0x104>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801227e:	69fb      	ldr	r3, [r7, #28]
 8012280:	69db      	ldr	r3, [r3, #28]
 8012282:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	3304      	adds	r3, #4
 8012288:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	3330      	adds	r3, #48	; 0x30
 8012290:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	3354      	adds	r3, #84	; 0x54
 8012296:	0018      	movs	r0, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	22a7      	movs	r2, #167	; 0xa7
 801229c:	0092      	lsls	r2, r2, #2
 801229e:	4694      	mov	ip, r2
 80122a0:	4463      	add	r3, ip
 80122a2:	2208      	movs	r2, #8
 80122a4:	0019      	movs	r1, r3
 80122a6:	f7ff f9a1 	bl	80115ec <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	2200      	movs	r2, #0
 80122ae:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	2201      	movs	r2, #1
 80122b4:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	2200      	movs	r2, #0
 80122ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	220e      	movs	r2, #14
 80122c2:	4393      	bics	r3, r2
 80122c4:	001a      	movs	r2, r3
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	2254      	movs	r2, #84	; 0x54
 80122ce:	5c9b      	ldrb	r3, [r3, r2]
 80122d0:	b25b      	sxtb	r3, r3
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	da06      	bge.n	80122e4 <HAL_PCD_SetupStageCallback+0x74>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 80122d6:	693a      	ldr	r2, [r7, #16]
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	0011      	movs	r1, r2
 80122dc:	0018      	movs	r0, r3
 80122de:	f7ff ff79 	bl	80121d4 <_ux_dcd_stm32_setup_in>
 80122e2:	e043      	b.n	801236c <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	2200      	movs	r2, #0
 80122e8:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	225a      	movs	r2, #90	; 0x5a
 80122ee:	5c9b      	ldrb	r3, [r3, r2]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d10b      	bne.n	801230c <HAL_PCD_SetupStageCallback+0x9c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	225b      	movs	r2, #91	; 0x5b
 80122f8:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d106      	bne.n	801230c <HAL_PCD_SetupStageCallback+0x9c>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	6939      	ldr	r1, [r7, #16]
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	0018      	movs	r0, r3
 8012306:	f7ff ff97 	bl	8012238 <_ux_dcd_stm32_setup_status>
 801230a:	e02f      	b.n	801236c <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	689b      	ldr	r3, [r3, #8]
 8012310:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	3354      	adds	r3, #84	; 0x54
 8012316:	3306      	adds	r3, #6
 8012318:	0018      	movs	r0, r3
 801231a:	f7ff fb42 	bl	80119a2 <_ux_utility_short_get>
 801231e:	0002      	movs	r2, r0
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	695a      	ldr	r2, [r3, #20]
 8012328:	2380      	movs	r3, #128	; 0x80
 801232a:	005b      	lsls	r3, r3, #1
 801232c:	429a      	cmp	r2, r3
 801232e:	d909      	bls.n	8012344 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8012330:	68fa      	ldr	r2, [r7, #12]
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	0011      	movs	r1, r2
 8012336:	0018      	movs	r0, r3
 8012338:	f000 fa5a 	bl	80127f0 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	2200      	movs	r2, #0
 8012340:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 8012342:	e013      	b.n	801236c <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	2200      	movs	r2, #0
 8012348:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	68da      	ldr	r2, [r3, #12]
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 8012356:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	695b      	ldr	r3, [r3, #20]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7f2 fb9b 	bl	8004a9c <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	2202      	movs	r2, #2
 801236a:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 801236c:	46bd      	mov	sp, r7
 801236e:	b008      	add	sp, #32
 8012370:	bd80      	pop	{r7, pc}
 8012372:	46c0      	nop			; (mov r8, r8)
 8012374:	20004e74 	.word	0x20004e74

08012378 <HAL_PCD_DataInStageCallback>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b088      	sub	sp, #32
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	000a      	movs	r2, r1
 8012382:	1cfb      	adds	r3, r7, #3
 8012384:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012386:	4b4f      	ldr	r3, [pc, #316]	; (80124c4 <HAL_PCD_DataInStageCallback+0x14c>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	69db      	ldr	r3, [r3, #28]
 8012390:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8012392:	1cfb      	adds	r3, r7, #3
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	220f      	movs	r2, #15
 8012398:	4013      	ands	r3, r2
 801239a:	d00d      	beq.n	80123b8 <HAL_PCD_DataInStageCallback+0x40>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 801239c:	1cfb      	adds	r3, r7, #3
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	220f      	movs	r2, #15
 80123a2:	401a      	ands	r2, r3
 80123a4:	0013      	movs	r3, r2
 80123a6:	005b      	lsls	r3, r3, #1
 80123a8:	189b      	adds	r3, r3, r2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	3360      	adds	r3, #96	; 0x60
 80123ae:	693a      	ldr	r2, [r7, #16]
 80123b0:	18d3      	adds	r3, r2, r3
 80123b2:	3304      	adds	r3, #4
 80123b4:	61fb      	str	r3, [r7, #28]
 80123b6:	e00b      	b.n	80123d0 <HAL_PCD_DataInStageCallback+0x58>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 80123b8:	1cfb      	adds	r3, r7, #3
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	220f      	movs	r2, #15
 80123be:	401a      	ands	r2, r3
 80123c0:	0013      	movs	r3, r2
 80123c2:	005b      	lsls	r3, r3, #1
 80123c4:	189b      	adds	r3, r3, r2
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	693a      	ldr	r2, [r7, #16]
 80123ca:	18d3      	adds	r3, r2, r3
 80123cc:	3304      	adds	r3, #4
 80123ce:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	3330      	adds	r3, #48	; 0x30
 80123d6:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 80123d8:	1cfb      	adds	r3, r7, #3
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d15e      	bne.n	801249e <HAL_PCD_DataInStageCallback+0x126>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	689b      	ldr	r3, [r3, #8]
 80123e4:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	7a1b      	ldrb	r3, [r3, #8]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d166      	bne.n	80124bc <HAL_PCD_DataInStageCallback+0x144>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	2300      	movs	r3, #0
 80123f2:	2200      	movs	r2, #0
 80123f4:	2100      	movs	r1, #0
 80123f6:	f7f2 fb51 	bl	8004a9c <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8012402:	429a      	cmp	r2, r3
 8012404:	d826      	bhi.n	8012454 <HAL_PCD_DataInStageCallback+0xdc>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801240a:	2b01      	cmp	r3, #1
 801240c:	d10b      	bne.n	8012426 <HAL_PCD_DataInStageCallback+0xae>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 8012412:	b2d9      	uxtb	r1, r3
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	2300      	movs	r3, #0
 8012418:	2200      	movs	r2, #0
 801241a:	f7f2 fb90 	bl	8004b3e <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2200      	movs	r2, #0
 8012422:	651a      	str	r2, [r3, #80]	; 0x50

        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
    }
}
 8012424:	e04a      	b.n	80124bc <HAL_PCD_DataInStageCallback+0x144>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2200      	movs	r2, #0
 801242a:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2202      	movs	r2, #2
 8012430:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801243e:	2b00      	cmp	r3, #0
 8012440:	d004      	beq.n	801244c <HAL_PCD_DataInStageCallback+0xd4>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	0010      	movs	r0, r2
 801244a:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	2204      	movs	r2, #4
 8012450:	721a      	strb	r2, [r3, #8]
}
 8012452:	e033      	b.n	80124bc <HAL_PCD_DataInStageCallback+0x144>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	69da      	ldr	r2, [r3, #28]
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	69db      	ldr	r3, [r3, #28]
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	69db      	ldr	r3, [r3, #28]
 8012464:	69ba      	ldr	r2, [r7, #24]
 8012466:	429a      	cmp	r2, r3
 8012468:	d902      	bls.n	8012470 <HAL_PCD_DataInStageCallback+0xf8>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	691a      	ldr	r2, [r3, #16]
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	69db      	ldr	r3, [r3, #28]
 8012478:	18d2      	adds	r2, r2, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	69da      	ldr	r2, [r3, #28]
 8012482:	69bb      	ldr	r3, [r7, #24]
 8012484:	1ad2      	subs	r2, r2, r3
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 801248e:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f7f2 fb51 	bl	8004b3e <HAL_PCD_EP_Transmit>
}
 801249c:	e00e      	b.n	80124bc <HAL_PCD_DataInStageCallback+0x144>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2200      	movs	r2, #0
 80124a2:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2202      	movs	r2, #2
 80124a8:	601a      	str	r2, [r3, #0]
            transfer_request -> ux_slave_transfer_request_requested_length;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	695a      	ldr	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_actual_length =
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3330      	adds	r3, #48	; 0x30
 80124b6:	0018      	movs	r0, r3
 80124b8:	f7ff fa64 	bl	8011984 <_ux_utility_semaphore_put>
}
 80124bc:	46c0      	nop			; (mov r8, r8)
 80124be:	46bd      	mov	sp, r7
 80124c0:	b008      	add	sp, #32
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	20004e74 	.word	0x20004e74

080124c8 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b088      	sub	sp, #32
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	000a      	movs	r2, r1
 80124d2:	1cfb      	adds	r3, r7, #3
 80124d4:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 80124d6:	4b40      	ldr	r3, [pc, #256]	; (80125d8 <HAL_PCD_DataOutStageCallback+0x110>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	69db      	ldr	r3, [r3, #28]
 80124e0:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 80124e2:	1cfb      	adds	r3, r7, #3
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	220f      	movs	r2, #15
 80124e8:	401a      	ands	r2, r3
 80124ea:	0013      	movs	r3, r2
 80124ec:	005b      	lsls	r3, r3, #1
 80124ee:	189b      	adds	r3, r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	69ba      	ldr	r2, [r7, #24]
 80124f4:	18d3      	adds	r3, r2, r3
 80124f6:	3304      	adds	r3, #4
 80124f8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	3330      	adds	r3, #48	; 0x30
 8012500:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8012502:	1cfb      	adds	r3, r7, #3
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d14c      	bne.n	80125a4 <HAL_PCD_DataOutStageCallback+0xdc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	7a1b      	ldrb	r3, [r3, #8]
 801250e:	2b02      	cmp	r3, #2
 8012510:	d15d      	bne.n	80125ce <HAL_PCD_DataOutStageCallback+0x106>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	689b      	ldr	r3, [r3, #8]
 8012516:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8012518:	1cfb      	adds	r3, r7, #3
 801251a:	781a      	ldrb	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	0011      	movs	r1, r2
 8012520:	0018      	movs	r0, r3
 8012522:	f7f2 faf3 	bl	8004b0c <HAL_PCD_EP_GetRxCount>
 8012526:	0003      	movs	r3, r0
 8012528:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	699a      	ldr	r2, [r3, #24]
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	18d2      	adds	r2, r2, r3
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801253e:	429a      	cmp	r2, r3
 8012540:	d823      	bhi.n	801258a <HAL_PCD_DataOutStageCallback+0xc2>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 801254a:	429a      	cmp	r2, r3
 801254c:	d004      	beq.n	8012558 <HAL_PCD_DataOutStageCallback+0x90>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	429a      	cmp	r2, r3
 8012556:	d006      	beq.n	8012566 <HAL_PCD_DataOutStageCallback+0x9e>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 8012558:	687a      	ldr	r2, [r7, #4]
 801255a:	6939      	ldr	r1, [r7, #16]
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	0018      	movs	r0, r3
 8012560:	f7ff fe4b 	bl	80121fa <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8012564:	e033      	b.n	80125ce <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	691a      	ldr	r2, [r3, #16]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	69db      	ldr	r3, [r3, #28]
 801256e:	18d2      	adds	r2, r2, r3
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 8012578:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	69db      	ldr	r3, [r3, #28]
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7f2 fa8a 	bl	8004a9c <HAL_PCD_EP_Receive>
}
 8012588:	e021      	b.n	80125ce <HAL_PCD_DataOutStageCallback+0x106>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	2227      	movs	r2, #39	; 0x27
 801258e:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012594:	2b00      	cmp	r3, #0
 8012596:	d01a      	beq.n	80125ce <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801259c:	693a      	ldr	r2, [r7, #16]
 801259e:	0010      	movs	r0, r2
 80125a0:	4798      	blx	r3
}
 80125a2:	e014      	b.n	80125ce <HAL_PCD_DataOutStageCallback+0x106>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 80125a4:	1cfb      	adds	r3, r7, #3
 80125a6:	781a      	ldrb	r2, [r3, #0]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	0011      	movs	r1, r2
 80125ac:	0018      	movs	r0, r3
 80125ae:	f7f2 faad 	bl	8004b0c <HAL_PCD_EP_GetRxCount>
 80125b2:	0002      	movs	r2, r0
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	2200      	movs	r2, #0
 80125bc:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	2202      	movs	r2, #2
 80125c2:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	3330      	adds	r3, #48	; 0x30
 80125c8:	0018      	movs	r0, r3
 80125ca:	f7ff f9db 	bl	8011984 <_ux_utility_semaphore_put>
}
 80125ce:	46c0      	nop			; (mov r8, r8)
 80125d0:	46bd      	mov	sp, r7
 80125d2:	b008      	add	sp, #32
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	46c0      	nop			; (mov r8, r8)
 80125d8:	20004e74 	.word	0x20004e74

080125dc <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 80125e4:	4b11      	ldr	r3, [pc, #68]	; (801262c <HAL_PCD_ResetCallback+0x50>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	6a1b      	ldr	r3, [r3, #32]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d001      	beq.n	80125f2 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 80125ee:	f7fd ff79 	bl	80104e4 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	79db      	ldrb	r3, [r3, #7]
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	d106      	bne.n	8012608 <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 80125fa:	4b0c      	ldr	r3, [pc, #48]	; (801262c <HAL_PCD_ResetCallback+0x50>)
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	23ce      	movs	r3, #206	; 0xce
 8012600:	005b      	lsls	r3, r3, #1
 8012602:	2101      	movs	r1, #1
 8012604:	50d1      	str	r1, [r2, r3]
        break;
 8012606:	e006      	b.n	8012616 <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8012608:	4b08      	ldr	r3, [pc, #32]	; (801262c <HAL_PCD_ResetCallback+0x50>)
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	23ce      	movs	r3, #206	; 0xce
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	2101      	movs	r1, #1
 8012612:	50d1      	str	r1, [r2, r3]
        break;
 8012614:	46c0      	nop			; (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8012616:	f000 fa29 	bl	8012a6c <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801261a:	4b04      	ldr	r3, [pc, #16]	; (801262c <HAL_PCD_ResetCallback+0x50>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2201      	movs	r2, #1
 8012620:	621a      	str	r2, [r3, #32]
}
 8012622:	46c0      	nop			; (mov r8, r8)
 8012624:	46bd      	mov	sp, r7
 8012626:	b002      	add	sp, #8
 8012628:	bd80      	pop	{r7, pc}
 801262a:	46c0      	nop			; (mov r8, r8)
 801262c:	20004e74 	.word	0x20004e74

08012630 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	2280      	movs	r2, #128	; 0x80
 801263e:	4013      	ands	r3, r2
 8012640:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	227f      	movs	r2, #127	; 0x7f
 8012646:	4013      	ands	r3, r2
 8012648:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2b07      	cmp	r3, #7
 801264e:	d807      	bhi.n	8012660 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	22c4      	movs	r2, #196	; 0xc4
 8012654:	589b      	ldr	r3, [r3, r2]
 8012656:	791b      	ldrb	r3, [r3, #4]
 8012658:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	4293      	cmp	r3, r2
 801265e:	d301      	bcc.n	8012664 <_stm32_ed_get+0x34>
        return(UX_NULL);
 8012660:	2300      	movs	r3, #0
 8012662:	e014      	b.n	801268e <_stm32_ed_get+0x5e>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d009      	beq.n	801267e <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	0013      	movs	r3, r2
 801266e:	005b      	lsls	r3, r3, #1
 8012670:	189b      	adds	r3, r3, r2
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	3360      	adds	r3, #96	; 0x60
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	18d3      	adds	r3, r2, r3
 801267a:	3304      	adds	r3, #4
 801267c:	e007      	b.n	801268e <_stm32_ed_get+0x5e>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801267e:	68ba      	ldr	r2, [r7, #8]
 8012680:	0013      	movs	r3, r2
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	189b      	adds	r3, r3, r2
 8012686:	009b      	lsls	r3, r3, #2
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	18d3      	adds	r3, r2, r3
 801268c:	3304      	adds	r3, #4
}
 801268e:	0018      	movs	r0, r3
 8012690:	46bd      	mov	sp, r7
 8012692:	b004      	add	sp, #16
 8012694:	bd80      	pop	{r7, pc}

08012696 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8012696:	b590      	push	{r4, r7, lr}
 8012698:	b085      	sub	sp, #20
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
 801269e:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	695b      	ldr	r3, [r3, #20]
 80126a4:	2280      	movs	r2, #128	; 0x80
 80126a6:	4393      	bics	r3, r2
 80126a8:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	695a      	ldr	r2, [r3, #20]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	0011      	movs	r1, r2
 80126b2:	0018      	movs	r0, r3
 80126b4:	f7ff ffbc 	bl	8012630 <_stm32_ed_get>
 80126b8:	0003      	movs	r3, r0
 80126ba:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d101      	bne.n	80126c6 <_ux_dcd_stm32_endpoint_create+0x30>
        return(UX_NO_ED_AVAILABLE);
 80126c2:	2314      	movs	r3, #20
 80126c4:	e033      	b.n	801272e <_ux_dcd_stm32_endpoint_create+0x98>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	2201      	movs	r2, #1
 80126cc:	4013      	ands	r3, r2
 80126ce:	d12d      	bne.n	801272c <_ux_dcd_stm32_endpoint_create+0x96>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	2201      	movs	r2, #1
 80126d6:	431a      	orrs	r2, r3
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	683a      	ldr	r2, [r7, #0]
 80126e6:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	b2da      	uxtb	r2, r3
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	695b      	ldr	r3, [r3, #20]
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	227f      	movs	r2, #127	; 0x7f
 80126f8:	4393      	bics	r3, r2
 80126fa:	b2da      	uxtb	r2, r3
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d010      	beq.n	8012728 <_ux_dcd_stm32_endpoint_create+0x92>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	22c4      	movs	r2, #196	; 0xc4
 801270a:	5898      	ldr	r0, [r3, r2]
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	695b      	ldr	r3, [r3, #20]
 8012710:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8012716:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801271c:	b2db      	uxtb	r3, r3
 801271e:	2403      	movs	r4, #3
 8012720:	4023      	ands	r3, r4
 8012722:	b2db      	uxtb	r3, r3
 8012724:	f7f2 f8f6 	bl	8004914 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 8012728:	2300      	movs	r3, #0
 801272a:	e000      	b.n	801272e <_ux_dcd_stm32_endpoint_create+0x98>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 801272c:	2314      	movs	r3, #20
}
 801272e:	0018      	movs	r0, r3
 8012730:	46bd      	mov	sp, r7
 8012732:	b005      	add	sp, #20
 8012734:	bd90      	pop	{r4, r7, pc}

08012736 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8012736:	b580      	push	{r7, lr}
 8012738:	b084      	sub	sp, #16
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
 801273e:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	689b      	ldr	r3, [r3, #8]
 8012744:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2200      	movs	r2, #0
 801274a:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	22c4      	movs	r2, #196	; 0xc4
 8012750:	589a      	ldr	r2, [r3, r2]
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	695b      	ldr	r3, [r3, #20]
 8012756:	b2db      	uxtb	r3, r3
 8012758:	0019      	movs	r1, r3
 801275a:	0010      	movs	r0, r2
 801275c:	f7f2 f94b 	bl	80049f6 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8012760:	2300      	movs	r3, #0
}
 8012762:	0018      	movs	r0, r3
 8012764:	46bd      	mov	sp, r7
 8012766:	b004      	add	sp, #16
 8012768:	bd80      	pop	{r7, pc}
	...

0801276c <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b086      	sub	sp, #24
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801277c:	f3ef 8310 	mrs	r3, PRIMASK
 8012780:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012782:	b672      	cpsid	i
    return(primask_value);
 8012784:	68fb      	ldr	r3, [r7, #12]

    UX_DISABLE
 8012786:	613b      	str	r3, [r7, #16]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	4a17      	ldr	r2, [pc, #92]	; (80127ec <_ux_dcd_stm32_endpoint_reset+0x80>)
 801278e:	401a      	ands	r2, r3
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	2200      	movs	r2, #0
 8012798:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	22c4      	movs	r2, #196	; 0xc4
 801279e:	589a      	ldr	r2, [r3, r2]
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	695b      	ldr	r3, [r3, #20]
 80127a4:	b2db      	uxtb	r3, r3
 80127a6:	0019      	movs	r1, r3
 80127a8:	0010      	movs	r0, r2
 80127aa:	f7f2 fa63 	bl	8004c74 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	22c4      	movs	r2, #196	; 0xc4
 80127b2:	589a      	ldr	r2, [r3, r2]
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	695b      	ldr	r3, [r3, #20]
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	0019      	movs	r1, r3
 80127bc:	0010      	movs	r0, r2
 80127be:	f7f2 faf2 	bl	8004da6 <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d004      	beq.n	80127d4 <_ux_dcd_stm32_endpoint_reset+0x68>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	3360      	adds	r3, #96	; 0x60
 80127ce:	0018      	movs	r0, r3
 80127d0:	f7ff f8d8 	bl	8011984 <_ux_utility_semaphore_put>
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	f383 8810 	msr	PRIMASK, r3
}
 80127de:	46c0      	nop			; (mov r8, r8)
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	0018      	movs	r0, r3
 80127e4:	46bd      	mov	sp, r7
 80127e6:	b006      	add	sp, #24
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	46c0      	nop			; (mov r8, r8)
 80127ec:	fffffcf3 	.word	0xfffffcf3

080127f0 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b084      	sub	sp, #16
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	689b      	ldr	r3, [r3, #8]
 80127fe:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	2204      	movs	r2, #4
 8012806:	431a      	orrs	r2, r3
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	22c4      	movs	r2, #196	; 0xc4
 8012810:	5898      	ldr	r0, [r3, r2]
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	695b      	ldr	r3, [r3, #20]
 8012816:	b2da      	uxtb	r2, r3
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	7a9b      	ldrb	r3, [r3, #10]
 801281c:	4313      	orrs	r3, r2
 801281e:	b2db      	uxtb	r3, r3
 8012820:	0019      	movs	r1, r3
 8012822:	f7f2 f9c9 	bl	8004bb8 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8012826:	2300      	movs	r3, #0
}
 8012828:	0018      	movs	r0, r3
 801282a:	46bd      	mov	sp, r7
 801282c:	b004      	add	sp, #16
 801282e:	bd80      	pop	{r7, pc}

08012830 <_stm32_ed_get>:
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	2280      	movs	r2, #128	; 0x80
 801283e:	4013      	ands	r3, r2
 8012840:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	227f      	movs	r2, #127	; 0x7f
 8012846:	4013      	ands	r3, r2
 8012848:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	2b07      	cmp	r3, #7
 801284e:	d807      	bhi.n	8012860 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	22c4      	movs	r2, #196	; 0xc4
 8012854:	589b      	ldr	r3, [r3, r2]
 8012856:	791b      	ldrb	r3, [r3, #4]
 8012858:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	4293      	cmp	r3, r2
 801285e:	d301      	bcc.n	8012864 <_stm32_ed_get+0x34>
        return(UX_NULL);
 8012860:	2300      	movs	r3, #0
 8012862:	e014      	b.n	801288e <_stm32_ed_get+0x5e>
    if (ep_dir)
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d009      	beq.n	801287e <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	0013      	movs	r3, r2
 801286e:	005b      	lsls	r3, r3, #1
 8012870:	189b      	adds	r3, r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	3360      	adds	r3, #96	; 0x60
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	18d3      	adds	r3, r2, r3
 801287a:	3304      	adds	r3, #4
 801287c:	e007      	b.n	801288e <_stm32_ed_get+0x5e>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	0013      	movs	r3, r2
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	189b      	adds	r3, r3, r2
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	18d3      	adds	r3, r2, r3
 801288c:	3304      	adds	r3, #4
}
 801288e:	0018      	movs	r0, r3
 8012890:	46bd      	mov	sp, r7
 8012892:	b004      	add	sp, #16
 8012894:	bd80      	pop	{r7, pc}

08012896 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b084      	sub	sp, #16
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
 801289e:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 80128a0:	683a      	ldr	r2, [r7, #0]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	0011      	movs	r1, r2
 80128a6:	0018      	movs	r0, r3
 80128a8:	f7ff ffc2 	bl	8012830 <_stm32_ed_get>
 80128ac:	0003      	movs	r3, r0
 80128ae:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	2201      	movs	r2, #1
 80128b6:	4013      	ands	r3, r2
 80128b8:	d101      	bne.n	80128be <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 80128ba:	23ff      	movs	r3, #255	; 0xff
 80128bc:	e007      	b.n	80128ce <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	2204      	movs	r2, #4
 80128c4:	4013      	ands	r3, r2
 80128c6:	d101      	bne.n	80128cc <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 80128c8:	2300      	movs	r3, #0
 80128ca:	e000      	b.n	80128ce <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 80128cc:	2301      	movs	r3, #1
}
 80128ce:	0018      	movs	r0, r3
 80128d0:	46bd      	mov	sp, r7
 80128d2:	b004      	add	sp, #16
 80128d4:	bd80      	pop	{r7, pc}

080128d6 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 80128d6:	b580      	push	{r7, lr}
 80128d8:	b082      	sub	sp, #8
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 80128e0:	2300      	movs	r3, #0
}
 80128e2:	0018      	movs	r0, r3
 80128e4:	46bd      	mov	sp, r7
 80128e6:	b002      	add	sp, #8
 80128e8:	bd80      	pop	{r7, pc}
	...

080128ec <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b086      	sub	sp, #24
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d106      	bne.n	801290e <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 8012900:	2255      	movs	r2, #85	; 0x55
 8012902:	2102      	movs	r1, #2
 8012904:	2002      	movs	r0, #2
 8012906:	f7fe fbbb 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 801290a:	2355      	movs	r3, #85	; 0x55
 801290c:	e077      	b.n	80129fe <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	69db      	ldr	r3, [r3, #28]
 8012912:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	3b0a      	subs	r3, #10
 8012918:	2b0b      	cmp	r3, #11
 801291a:	d867      	bhi.n	80129ec <_ux_dcd_stm32_function+0x100>
 801291c:	009a      	lsls	r2, r3, #2
 801291e:	4b3a      	ldr	r3, [pc, #232]	; (8012a08 <_ux_dcd_stm32_function+0x11c>)
 8012920:	18d3      	adds	r3, r2, r3
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	0011      	movs	r1, r2
 801292c:	0018      	movs	r0, r3
 801292e:	f7ff ffd2 	bl	80128d6 <_ux_dcd_stm32_frame_number_get>
 8012932:	0003      	movs	r3, r0
 8012934:	617b      	str	r3, [r7, #20]
        break;
 8012936:	e061      	b.n	80129fc <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	0011      	movs	r1, r2
 801293e:	0018      	movs	r0, r3
 8012940:	f000 f991 	bl	8012c66 <_ux_dcd_stm32_transfer_request>
 8012944:	0003      	movs	r3, r0
 8012946:	617b      	str	r3, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 8012948:	e058      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	0011      	movs	r1, r2
 8012950:	0018      	movs	r0, r3
 8012952:	f000 f967 	bl	8012c24 <_ux_dcd_stm32_transfer_abort>
 8012956:	0003      	movs	r3, r0
 8012958:	617b      	str	r3, [r7, #20]
        break;
 801295a:	e04f      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	0011      	movs	r1, r2
 8012962:	0018      	movs	r0, r3
 8012964:	f7ff fe97 	bl	8012696 <_ux_dcd_stm32_endpoint_create>
 8012968:	0003      	movs	r3, r0
 801296a:	617b      	str	r3, [r7, #20]
        break;
 801296c:	e046      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	0011      	movs	r1, r2
 8012974:	0018      	movs	r0, r3
 8012976:	f7ff fede 	bl	8012736 <_ux_dcd_stm32_endpoint_destroy>
 801297a:	0003      	movs	r3, r0
 801297c:	617b      	str	r3, [r7, #20]
        break;
 801297e:	e03d      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	0011      	movs	r1, r2
 8012986:	0018      	movs	r0, r3
 8012988:	f7ff fef0 	bl	801276c <_ux_dcd_stm32_endpoint_reset>
 801298c:	0003      	movs	r3, r0
 801298e:	617b      	str	r3, [r7, #20]
        break;
 8012990:	e034      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	0011      	movs	r1, r2
 8012998:	0018      	movs	r0, r3
 801299a:	f7ff ff29 	bl	80127f0 <_ux_dcd_stm32_endpoint_stall>
 801299e:	0003      	movs	r3, r0
 80129a0:	617b      	str	r3, [r7, #20]
        break;
 80129a2:	e02b      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	22c4      	movs	r2, #196	; 0xc4
 80129a8:	589b      	ldr	r3, [r3, r2]
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	b2d2      	uxtb	r2, r2
 80129ae:	0011      	movs	r1, r2
 80129b0:	0018      	movs	r0, r3
 80129b2:	f7f1 ff85 	bl	80048c0 <HAL_PCD_SetAddress>
 80129b6:	0003      	movs	r3, r0
 80129b8:	617b      	str	r3, [r7, #20]
        break;
 80129ba:	e01f      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2b0b      	cmp	r3, #11
 80129c0:	d108      	bne.n	80129d4 <_ux_dcd_stm32_function+0xe8>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	22c4      	movs	r2, #196	; 0xc4
 80129c6:	589b      	ldr	r3, [r3, r2]
 80129c8:	0018      	movs	r0, r3
 80129ca:	f7f1 fe26 	bl	800461a <HAL_PCD_Stop>
 80129ce:	0003      	movs	r3, r0
 80129d0:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 80129d2:	e013      	b.n	80129fc <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 80129d4:	2300      	movs	r3, #0
 80129d6:	617b      	str	r3, [r7, #20]
        break;
 80129d8:	e010      	b.n	80129fc <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	0011      	movs	r1, r2
 80129e0:	0018      	movs	r0, r3
 80129e2:	f7ff ff58 	bl	8012896 <_ux_dcd_stm32_endpoint_status>
 80129e6:	0003      	movs	r3, r0
 80129e8:	617b      	str	r3, [r7, #20]
        break;
 80129ea:	e007      	b.n	80129fc <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 80129ec:	2254      	movs	r2, #84	; 0x54
 80129ee:	2102      	movs	r1, #2
 80129f0:	2002      	movs	r0, #2
 80129f2:	f7fe fb45 	bl	8011080 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 80129f6:	2354      	movs	r3, #84	; 0x54
 80129f8:	617b      	str	r3, [r7, #20]
        break;
 80129fa:	46c0      	nop			; (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 80129fc:	697b      	ldr	r3, [r7, #20]
}
 80129fe:	0018      	movs	r0, r3
 8012a00:	46bd      	mov	sp, r7
 8012a02:	b006      	add	sp, #24
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	46c0      	nop			; (mov r8, r8)
 8012a08:	08014bb0 	.word	0x08014bb0

08012a0c <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012a16:	4b13      	ldr	r3, [pc, #76]	; (8012a64 <_ux_dcd_stm32_initialize+0x58>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2280      	movs	r2, #128	; 0x80
 8012a20:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8012a22:	22c8      	movs	r2, #200	; 0xc8
 8012a24:	2100      	movs	r1, #0
 8012a26:	2000      	movs	r0, #0
 8012a28:	f7fe fc9a 	bl	8011360 <_ux_utility_memory_allocate>
 8012a2c:	0003      	movs	r3, r0
 8012a2e:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d101      	bne.n	8012a3a <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 8012a36:	2312      	movs	r3, #18
 8012a38:	e010      	b.n	8012a5c <_ux_dcd_stm32_initialize+0x50>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	68ba      	ldr	r2, [r7, #8]
 8012a3e:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	68fa      	ldr	r2, [r7, #12]
 8012a44:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	4a07      	ldr	r2, [pc, #28]	; (8012a68 <_ux_dcd_stm32_initialize+0x5c>)
 8012a4a:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8012a4c:	683a      	ldr	r2, [r7, #0]
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	21c4      	movs	r1, #196	; 0xc4
 8012a52:	505a      	str	r2, [r3, r1]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	2201      	movs	r2, #1
 8012a58:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8012a5a:	2300      	movs	r3, #0
}
 8012a5c:	0018      	movs	r0, r3
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	b004      	add	sp, #16
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	20004e74 	.word	0x20004e74
 8012a68:	080128ed 	.word	0x080128ed

08012a6c <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b086      	sub	sp, #24
 8012a70:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012a72:	4b6a      	ldr	r3, [pc, #424]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	69db      	ldr	r3, [r3, #28]
 8012a7c:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012a7e:	4b67      	ldr	r3, [pc, #412]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	3320      	adds	r3, #32
 8012a84:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8012a86:	4b65      	ldr	r3, [pc, #404]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	23dc      	movs	r3, #220	; 0xdc
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	58d3      	ldr	r3, [r2, r3]
 8012a90:	2b01      	cmp	r3, #1
 8012a92:	d114      	bne.n	8012abe <_ux_dcd_stm32_initialize_complete+0x52>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8012a94:	4b61      	ldr	r3, [pc, #388]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012a96:	6819      	ldr	r1, [r3, #0]
 8012a98:	4b60      	ldr	r3, [pc, #384]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	23a8      	movs	r3, #168	; 0xa8
 8012a9e:	005b      	lsls	r3, r3, #1
 8012aa0:	58c9      	ldr	r1, [r1, r3]
 8012aa2:	2394      	movs	r3, #148	; 0x94
 8012aa4:	005b      	lsls	r3, r3, #1
 8012aa6:	50d1      	str	r1, [r2, r3]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8012aa8:	4b5c      	ldr	r3, [pc, #368]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012aaa:	6819      	ldr	r1, [r3, #0]
 8012aac:	4b5b      	ldr	r3, [pc, #364]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	23aa      	movs	r3, #170	; 0xaa
 8012ab2:	005b      	lsls	r3, r3, #1
 8012ab4:	58c9      	ldr	r1, [r1, r3]
 8012ab6:	2396      	movs	r3, #150	; 0x96
 8012ab8:	005b      	lsls	r3, r3, #1
 8012aba:	50d1      	str	r1, [r2, r3]
 8012abc:	e035      	b.n	8012b2a <_ux_dcd_stm32_initialize_complete+0xbe>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8012abe:	4b57      	ldr	r3, [pc, #348]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	23dc      	movs	r3, #220	; 0xdc
 8012ac4:	005b      	lsls	r3, r3, #1
 8012ac6:	2100      	movs	r1, #0
 8012ac8:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 8012aca:	4b54      	ldr	r3, [pc, #336]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012acc:	681a      	ldr	r2, [r3, #0]
 8012ace:	23ce      	movs	r3, #206	; 0xce
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	58d3      	ldr	r3, [r2, r3]
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d114      	bne.n	8012b02 <_ux_dcd_stm32_initialize_complete+0x96>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8012ad8:	4b50      	ldr	r3, [pc, #320]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012ada:	6819      	ldr	r1, [r3, #0]
 8012adc:	4b4f      	ldr	r3, [pc, #316]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	2398      	movs	r3, #152	; 0x98
 8012ae2:	005b      	lsls	r3, r3, #1
 8012ae4:	58c9      	ldr	r1, [r1, r3]
 8012ae6:	2394      	movs	r3, #148	; 0x94
 8012ae8:	005b      	lsls	r3, r3, #1
 8012aea:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8012aec:	4b4b      	ldr	r3, [pc, #300]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012aee:	6819      	ldr	r1, [r3, #0]
 8012af0:	4b4a      	ldr	r3, [pc, #296]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	239a      	movs	r3, #154	; 0x9a
 8012af6:	005b      	lsls	r3, r3, #1
 8012af8:	58c9      	ldr	r1, [r1, r3]
 8012afa:	2396      	movs	r3, #150	; 0x96
 8012afc:	005b      	lsls	r3, r3, #1
 8012afe:	50d1      	str	r1, [r2, r3]
 8012b00:	e013      	b.n	8012b2a <_ux_dcd_stm32_initialize_complete+0xbe>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8012b02:	4b46      	ldr	r3, [pc, #280]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012b04:	6819      	ldr	r1, [r3, #0]
 8012b06:	4b45      	ldr	r3, [pc, #276]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	239c      	movs	r3, #156	; 0x9c
 8012b0c:	005b      	lsls	r3, r3, #1
 8012b0e:	58c9      	ldr	r1, [r1, r3]
 8012b10:	2394      	movs	r3, #148	; 0x94
 8012b12:	005b      	lsls	r3, r3, #1
 8012b14:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8012b16:	4b41      	ldr	r3, [pc, #260]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012b18:	6819      	ldr	r1, [r3, #0]
 8012b1a:	4b40      	ldr	r3, [pc, #256]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012b1c:	681a      	ldr	r2, [r3, #0]
 8012b1e:	239e      	movs	r3, #158	; 0x9e
 8012b20:	005b      	lsls	r3, r3, #1
 8012b22:	58c9      	ldr	r1, [r1, r3]
 8012b24:	2396      	movs	r3, #150	; 0x96
 8012b26:	005b      	lsls	r3, r3, #1
 8012b28:	50d1      	str	r1, [r2, r3]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8012b2a:	4b3c      	ldr	r3, [pc, #240]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012b2c:	681a      	ldr	r2, [r3, #0]
 8012b2e:	2394      	movs	r3, #148	; 0x94
 8012b30:	005b      	lsls	r3, r3, #1
 8012b32:	58d3      	ldr	r3, [r2, r3]
 8012b34:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 8012b3a:	4939      	ldr	r1, [pc, #228]	; (8012c20 <_ux_dcd_stm32_initialize_complete+0x1b4>)
 8012b3c:	68b8      	ldr	r0, [r7, #8]
 8012b3e:	220e      	movs	r2, #14
 8012b40:	f7fe fb8d 	bl	801125e <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	336c      	adds	r3, #108	; 0x6c
 8012b48:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	22fa      	movs	r2, #250	; 0xfa
 8012b4e:	0092      	lsls	r2, r2, #2
 8012b50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	333c      	adds	r3, #60	; 0x3c
 8012b5e:	001a      	movs	r2, r3
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8012b68:	68fa      	ldr	r2, [r7, #12]
 8012b6a:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8012b6c:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	333c      	adds	r3, #60	; 0x3c
 8012b7a:	001a      	movs	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8012b88:	6978      	ldr	r0, [r7, #20]
 8012b8a:	210e      	movs	r1, #14
 8012b8c:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	22c4      	movs	r2, #196	; 0xc4
 8012b92:	589b      	ldr	r3, [r3, r2]
 8012b94:	2100      	movs	r1, #0
 8012b96:	0018      	movs	r0, r3
 8012b98:	f7f2 f905 	bl	8004da6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	22c4      	movs	r2, #196	; 0xc4
 8012ba0:	5898      	ldr	r0, [r3, r2]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	69db      	ldr	r3, [r3, #28]
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	2300      	movs	r3, #0
 8012baa:	2100      	movs	r1, #0
 8012bac:	f7f1 feb2 	bl	8004914 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	22c4      	movs	r2, #196	; 0xc4
 8012bb4:	589b      	ldr	r3, [r3, r2]
 8012bb6:	2180      	movs	r1, #128	; 0x80
 8012bb8:	0018      	movs	r0, r3
 8012bba:	f7f2 f8f4 	bl	8004da6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	22c4      	movs	r2, #196	; 0xc4
 8012bc2:	5898      	ldr	r0, [r3, r2]
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	69db      	ldr	r3, [r3, #28]
 8012bc8:	b29a      	uxth	r2, r3
 8012bca:	2300      	movs	r3, #0
 8012bcc:	2180      	movs	r1, #128	; 0x80
 8012bce:	f7f1 fea1 	bl	8004914 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2201      	movs	r2, #1
 8012bdc:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2201      	movs	r2, #1
 8012be2:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2208      	movs	r2, #8
 8012be8:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2208      	movs	r2, #8
 8012bee:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8012bf6:	4b09      	ldr	r3, [pc, #36]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	23e0      	movs	r3, #224	; 0xe0
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	58d3      	ldr	r3, [r2, r3]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d006      	beq.n	8012c12 <_ux_dcd_stm32_initialize_complete+0x1a6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8012c04:	4b05      	ldr	r3, [pc, #20]	; (8012c1c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	23e0      	movs	r3, #224	; 0xe0
 8012c0a:	005b      	lsls	r3, r3, #1
 8012c0c:	58d3      	ldr	r3, [r2, r3]
 8012c0e:	2001      	movs	r0, #1
 8012c10:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	0018      	movs	r0, r3
 8012c16:	46bd      	mov	sp, r7
 8012c18:	b006      	add	sp, #24
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20004e74 	.word	0x20004e74
 8012c20:	20000030 	.word	0x20000030

08012c24 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	22c4      	movs	r2, #196	; 0xc4
 8012c38:	589a      	ldr	r2, [r3, r2]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	695b      	ldr	r3, [r3, #20]
 8012c3e:	b2db      	uxtb	r3, r3
 8012c40:	0019      	movs	r1, r3
 8012c42:	0010      	movs	r0, r2
 8012c44:	f7f2 f876 	bl	8004d34 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	22c4      	movs	r2, #196	; 0xc4
 8012c4c:	589a      	ldr	r2, [r3, r2]
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	695b      	ldr	r3, [r3, #20]
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	0019      	movs	r1, r3
 8012c56:	0010      	movs	r0, r2
 8012c58:	f7f2 f8a5 	bl	8004da6 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8012c5c:	2300      	movs	r3, #0
}
 8012c5e:	0018      	movs	r0, r3
 8012c60:	46bd      	mov	sp, r7
 8012c62:	b004      	add	sp, #16
 8012c64:	bd80      	pop	{r7, pc}

08012c66 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b084      	sub	sp, #16
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
 8012c6e:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	689b      	ldr	r3, [r3, #8]
 8012c74:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c7a:	2b03      	cmp	r3, #3
 8012c7c:	d12d      	bne.n	8012cda <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	22c4      	movs	r2, #196	; 0xc4
 8012c82:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8012c88:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	695b      	ldr	r3, [r3, #20]
 8012c92:	f7f1 ff54 	bl	8004b3e <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	695b      	ldr	r3, [r3, #20]
 8012c9a:	2280      	movs	r2, #128	; 0x80
 8012c9c:	4393      	bics	r3, r2
 8012c9e:	d046      	beq.n	8012d2e <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	3330      	adds	r3, #48	; 0x30
 8012ca4:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8012caa:	0019      	movs	r1, r3
 8012cac:	0010      	movs	r0, r2
 8012cae:	f7fe fe2d 	bl	801190c <_ux_utility_semaphore_get>
 8012cb2:	0003      	movs	r3, r0
 8012cb4:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d001      	beq.n	8012cc0 <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	e037      	b.n	8012d30 <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	695a      	ldr	r2, [r3, #20]
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d002      	beq.n	8012cd6 <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd4:	e02c      	b.n	8012d30 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	e02a      	b.n	8012d30 <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	22c4      	movs	r2, #196	; 0xc4
 8012cde:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8012ce4:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	695b      	ldr	r3, [r3, #20]
 8012cee:	f7f1 fed5 	bl	8004a9c <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	695b      	ldr	r3, [r3, #20]
 8012cf6:	2280      	movs	r2, #128	; 0x80
 8012cf8:	4393      	bics	r3, r2
 8012cfa:	d018      	beq.n	8012d2e <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	3330      	adds	r3, #48	; 0x30
 8012d00:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8012d06:	0019      	movs	r1, r3
 8012d08:	0010      	movs	r0, r2
 8012d0a:	f7fe fdff 	bl	801190c <_ux_utility_semaphore_get>
 8012d0e:	0003      	movs	r3, r0
 8012d10:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d001      	beq.n	8012d1c <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	e009      	b.n	8012d30 <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d002      	beq.n	8012d2a <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d28:	e002      	b.n	8012d30 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	e000      	b.n	8012d30 <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8012d2e:	2300      	movs	r3, #0
}
 8012d30:	0018      	movs	r0, r3
 8012d32:	46bd      	mov	sp, r7
 8012d34:	b004      	add	sp, #16
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 8012d38:	b5b0      	push	{r4, r5, r7, lr}
 8012d3a:	b094      	sub	sp, #80	; 0x50
 8012d3c:	af08      	add	r7, sp, #32
 8012d3e:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8012d40:	2300      	movs	r3, #0
 8012d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	62bb      	str	r3, [r7, #40]	; 0x28
	ULONG language_id_framework_length;
	UCHAR *string_framework;
	UCHAR *language_id_framework;
	UCHAR *pointer;

	if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8012d48:	23c0      	movs	r3, #192	; 0xc0
 8012d4a:	015a      	lsls	r2, r3, #5
 8012d4c:	230c      	movs	r3, #12
 8012d4e:	18f9      	adds	r1, r7, r3
 8012d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d52:	2300      	movs	r3, #0
 8012d54:	f7fb fb3c 	bl	800e3d0 <_txe_byte_allocate>
 8012d58:	1e03      	subs	r3, r0, #0
 8012d5a:	d001      	beq.n	8012d60 <MX_USBX_Device_Init+0x28>
	USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS) {
		return TX_POOL_ERROR;
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	e0ab      	b.n	8012eb8 <MX_USBX_Device_Init+0x180>
	}

	/* Initialize USBX Memory */
	if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL,
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	23c0      	movs	r3, #192	; 0xc0
 8012d64:	0159      	lsls	r1, r3, #5
 8012d66:	2300      	movs	r3, #0
 8012d68:	2200      	movs	r2, #0
 8012d6a:	f7fe f9ab 	bl	80110c4 <_ux_system_initialize>
 8012d6e:	1e03      	subs	r3, r0, #0
 8012d70:	d001      	beq.n	8012d76 <MX_USBX_Device_Init+0x3e>
			0) != UX_SUCCESS) {
		return UX_ERROR;
 8012d72:	23ff      	movs	r3, #255	; 0xff
 8012d74:	e0a0      	b.n	8012eb8 <MX_USBX_Device_Init+0x180>
	}

	/* Get Device Framework Full Speed and get the length */
	device_framework_full_speed = USBD_Get_Device_Framework_Speed(
 8012d76:	2318      	movs	r3, #24
 8012d78:	18fb      	adds	r3, r7, r3
 8012d7a:	0019      	movs	r1, r3
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	f000 f98b 	bl	8013098 <USBD_Get_Device_Framework_Speed>
 8012d82:	0003      	movs	r3, r0
 8012d84:	627b      	str	r3, [r7, #36]	; 0x24
	USBD_FULL_SPEED, &device_framework_fs_length);

	/* Get String Framework and get the length */
	string_framework = USBD_Get_String_Framework(&string_framework_length);
 8012d86:	2314      	movs	r3, #20
 8012d88:	18fb      	adds	r3, r7, r3
 8012d8a:	0018      	movs	r0, r3
 8012d8c:	f000 f9ce 	bl	801312c <USBD_Get_String_Framework>
 8012d90:	0003      	movs	r3, r0
 8012d92:	623b      	str	r3, [r7, #32]

	/* Get Language Id Framework and get the length */
	language_id_framework = USBD_Get_Language_Id_Framework(
 8012d94:	2310      	movs	r3, #16
 8012d96:	18fb      	adds	r3, r7, r3
 8012d98:	0018      	movs	r0, r3
 8012d9a:	f000 fa69 	bl	8013270 <USBD_Get_Language_Id_Framework>
 8012d9e:	0003      	movs	r3, r0
 8012da0:	61fb      	str	r3, [r7, #28]
			&language_id_framework_length);

	/* Install the device portion of USBX */
	if (ux_device_stack_initialize(NULL,
 8012da2:	69b8      	ldr	r0, [r7, #24]
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	693a      	ldr	r2, [r7, #16]
 8012da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012daa:	2400      	movs	r4, #0
 8012dac:	9404      	str	r4, [sp, #16]
 8012dae:	9203      	str	r2, [sp, #12]
 8012db0:	69fa      	ldr	r2, [r7, #28]
 8012db2:	9202      	str	r2, [sp, #8]
 8012db4:	9301      	str	r3, [sp, #4]
 8012db6:	6a3b      	ldr	r3, [r7, #32]
 8012db8:	9300      	str	r3, [sp, #0]
 8012dba:	0003      	movs	r3, r0
 8012dbc:	000a      	movs	r2, r1
 8012dbe:	2100      	movs	r1, #0
 8012dc0:	2000      	movs	r0, #0
 8012dc2:	f7fd fca9 	bl	8010718 <_ux_device_stack_initialize>
 8012dc6:	1e03      	subs	r3, r0, #0
 8012dc8:	d001      	beq.n	8012dce <MX_USBX_Device_Init+0x96>
			0U, device_framework_full_speed,
			device_framework_fs_length, string_framework,
			string_framework_length, language_id_framework,
			language_id_framework_length,
			UX_NULL) != UX_SUCCESS) {
		return UX_ERROR;
 8012dca:	23ff      	movs	r3, #255	; 0xff
 8012dcc:	e074      	b.n	8012eb8 <MX_USBX_Device_Init+0x180>
	}

	/* Initialize the cdc acm class parameters for the device */
	cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate =
 8012dce:	4b3c      	ldr	r3, [pc, #240]	; (8012ec0 <MX_USBX_Device_Init+0x188>)
 8012dd0:	4a3c      	ldr	r2, [pc, #240]	; (8012ec4 <MX_USBX_Device_Init+0x18c>)
 8012dd2:	601a      	str	r2, [r3, #0]
			USBD_CDC_ACM_Activate;
	cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate =
 8012dd4:	4b3a      	ldr	r3, [pc, #232]	; (8012ec0 <MX_USBX_Device_Init+0x188>)
 8012dd6:	4a3c      	ldr	r2, [pc, #240]	; (8012ec8 <MX_USBX_Device_Init+0x190>)
 8012dd8:	605a      	str	r2, [r3, #4]
			USBD_CDC_ACM_Deactivate;
	cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change =
 8012dda:	4b39      	ldr	r3, [pc, #228]	; (8012ec0 <MX_USBX_Device_Init+0x188>)
 8012ddc:	4a3b      	ldr	r2, [pc, #236]	; (8012ecc <MX_USBX_Device_Init+0x194>)
 8012dde:	609a      	str	r2, [r3, #8]
			USBD_CDC_ACM_ParameterChange;

	/* Registers a slave class to the slave stack. The class is connected with
	 interface 0 */
	if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8012de0:	493b      	ldr	r1, [pc, #236]	; (8012ed0 <MX_USBX_Device_Init+0x198>)
 8012de2:	483c      	ldr	r0, [pc, #240]	; (8012ed4 <MX_USBX_Device_Init+0x19c>)
 8012de4:	4b36      	ldr	r3, [pc, #216]	; (8012ec0 <MX_USBX_Device_Init+0x188>)
 8012de6:	9300      	str	r3, [sp, #0]
 8012de8:	2300      	movs	r3, #0
 8012dea:	2201      	movs	r2, #1
 8012dec:	f7fc fd00 	bl	800f7f0 <_ux_device_stack_class_register>
 8012df0:	1e03      	subs	r3, r0, #0
 8012df2:	d001      	beq.n	8012df8 <MX_USBX_Device_Init+0xc0>
	ux_device_class_cdc_acm_entry, 1, 0,
			(VOID*) &cdc_acm_parameter) != UX_SUCCESS) {
		return UX_ERROR;
 8012df4:	23ff      	movs	r3, #255	; 0xff
 8012df6:	e05f      	b.n	8012eb8 <MX_USBX_Device_Init+0x180>
	}

	/* Allocate the stack for device application main thread */
	if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8012df8:	2380      	movs	r3, #128	; 0x80
 8012dfa:	00da      	lsls	r2, r3, #3
 8012dfc:	230c      	movs	r3, #12
 8012dfe:	18f9      	adds	r1, r7, r3
 8012e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e02:	2300      	movs	r3, #0
 8012e04:	f7fb fae4 	bl	800e3d0 <_txe_byte_allocate>
 8012e08:	1e03      	subs	r3, r0, #0
 8012e0a:	d001      	beq.n	8012e10 <MX_USBX_Device_Init+0xd8>
	UX_DEVICE_APP_THREAD_STACK_SIZE,
	TX_NO_WAIT) != TX_SUCCESS) {
		return TX_POOL_ERROR;
 8012e0c:	2302      	movs	r3, #2
 8012e0e:	e053      	b.n	8012eb8 <MX_USBX_Device_Init+0x180>
	}

	/* Create the device application main thread */
	if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	4c31      	ldr	r4, [pc, #196]	; (8012ed8 <MX_USBX_Device_Init+0x1a0>)
 8012e14:	4931      	ldr	r1, [pc, #196]	; (8012edc <MX_USBX_Device_Init+0x1a4>)
 8012e16:	4832      	ldr	r0, [pc, #200]	; (8012ee0 <MX_USBX_Device_Init+0x1a8>)
 8012e18:	22b0      	movs	r2, #176	; 0xb0
 8012e1a:	9206      	str	r2, [sp, #24]
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	9205      	str	r2, [sp, #20]
 8012e20:	2200      	movs	r2, #0
 8012e22:	9204      	str	r2, [sp, #16]
 8012e24:	220a      	movs	r2, #10
 8012e26:	9203      	str	r2, [sp, #12]
 8012e28:	220a      	movs	r2, #10
 8012e2a:	9202      	str	r2, [sp, #8]
 8012e2c:	2280      	movs	r2, #128	; 0x80
 8012e2e:	00d2      	lsls	r2, r2, #3
 8012e30:	9201      	str	r2, [sp, #4]
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	2300      	movs	r3, #0
 8012e36:	0022      	movs	r2, r4
 8012e38:	f7fc f8ee 	bl	800f018 <_txe_thread_create>
 8012e3c:	1e03      	subs	r3, r0, #0
 8012e3e:	d001      	beq.n	8012e44 <MX_USBX_Device_Init+0x10c>
			0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
			UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
			UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS) {
		return TX_THREAD_ERROR;
 8012e40:	230e      	movs	r3, #14
 8012e42:	e039      	b.n	8012eb8 <MX_USBX_Device_Init+0x180>
	}

	/* Allocate memory for the UX RX thread */
	tx_byte_allocate(byte_pool, (VOID**) &pointer, 1024, TX_NO_WAIT);
 8012e44:	2380      	movs	r3, #128	; 0x80
 8012e46:	00da      	lsls	r2, r3, #3
 8012e48:	250c      	movs	r5, #12
 8012e4a:	1979      	adds	r1, r7, r5
 8012e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e4e:	2300      	movs	r3, #0
 8012e50:	f7fb fabe 	bl	800e3d0 <_txe_byte_allocate>
	/* Create the UX RX thread */
	tx_thread_create(&ux_cdc_read_thread, "cdc_acm_read_usbx_app_thread_entry",
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	4c23      	ldr	r4, [pc, #140]	; (8012ee4 <MX_USBX_Device_Init+0x1ac>)
 8012e58:	4923      	ldr	r1, [pc, #140]	; (8012ee8 <MX_USBX_Device_Init+0x1b0>)
 8012e5a:	4824      	ldr	r0, [pc, #144]	; (8012eec <MX_USBX_Device_Init+0x1b4>)
 8012e5c:	22b0      	movs	r2, #176	; 0xb0
 8012e5e:	9206      	str	r2, [sp, #24]
 8012e60:	2201      	movs	r2, #1
 8012e62:	9205      	str	r2, [sp, #20]
 8012e64:	2200      	movs	r2, #0
 8012e66:	9204      	str	r2, [sp, #16]
 8012e68:	2214      	movs	r2, #20
 8012e6a:	9203      	str	r2, [sp, #12]
 8012e6c:	2214      	movs	r2, #20
 8012e6e:	9202      	str	r2, [sp, #8]
 8012e70:	2280      	movs	r2, #128	; 0x80
 8012e72:	00d2      	lsls	r2, r2, #3
 8012e74:	9201      	str	r2, [sp, #4]
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	2301      	movs	r3, #1
 8012e7a:	0022      	movs	r2, r4
 8012e7c:	f7fc f8cc 	bl	800f018 <_txe_thread_create>
			usbx_cdc_acm_read_thread_entry, 1, pointer, 1024, 20, 20,
			TX_NO_TIME_SLICE, TX_AUTO_START);
	/* Allocate memory for the UX TX thread */
	tx_byte_allocate(byte_pool, (VOID**) &pointer, 1024, TX_NO_WAIT);
 8012e80:	2380      	movs	r3, #128	; 0x80
 8012e82:	00da      	lsls	r2, r3, #3
 8012e84:	1979      	adds	r1, r7, r5
 8012e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f7fb faa1 	bl	800e3d0 <_txe_byte_allocate>
	/* Create the UX TX thread */
	tx_thread_create(&ux_cdc_write_thread,
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	4a17      	ldr	r2, [pc, #92]	; (8012ef0 <MX_USBX_Device_Init+0x1b8>)
 8012e92:	4918      	ldr	r1, [pc, #96]	; (8012ef4 <MX_USBX_Device_Init+0x1bc>)
 8012e94:	4818      	ldr	r0, [pc, #96]	; (8012ef8 <MX_USBX_Device_Init+0x1c0>)
 8012e96:	24b0      	movs	r4, #176	; 0xb0
 8012e98:	9406      	str	r4, [sp, #24]
 8012e9a:	2401      	movs	r4, #1
 8012e9c:	9405      	str	r4, [sp, #20]
 8012e9e:	2400      	movs	r4, #0
 8012ea0:	9404      	str	r4, [sp, #16]
 8012ea2:	2414      	movs	r4, #20
 8012ea4:	9403      	str	r4, [sp, #12]
 8012ea6:	2414      	movs	r4, #20
 8012ea8:	9402      	str	r4, [sp, #8]
 8012eaa:	4c14      	ldr	r4, [pc, #80]	; (8012efc <MX_USBX_Device_Init+0x1c4>)
 8012eac:	9401      	str	r4, [sp, #4]
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	f7fc f8b1 	bl	800f018 <_txe_thread_create>
			usbx_cdc_acm_write_thread_entry, 1, pointer, 1025, 20, 20,
			TX_NO_TIME_SLICE, TX_AUTO_START);

  /* USER CODE END MX_USBX_Device_Init */

  return ret;
 8012eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012eb8:	0018      	movs	r0, r3
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	b00c      	add	sp, #48	; 0x30
 8012ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8012ec0:	20004e7c 	.word	0x20004e7c
 8012ec4:	08012f71 	.word	0x08012f71
 8012ec8:	08012f8d 	.word	0x08012f8d
 8012ecc:	08012f9d 	.word	0x08012f9d
 8012ed0:	08011c65 	.word	0x08011c65
 8012ed4:	20000010 	.word	0x20000010
 8012ed8:	08012f01 	.word	0x08012f01
 8012edc:	08014908 	.word	0x08014908
 8012ee0:	20004e88 	.word	0x20004e88
 8012ee4:	08012fed 	.word	0x08012fed
 8012ee8:	08014924 	.word	0x08014924
 8012eec:	20004f38 	.word	0x20004f38
 8012ef0:	08012fad 	.word	0x08012fad
 8012ef4:	08014948 	.word	0x08014948
 8012ef8:	20004fe8 	.word	0x20004fe8
 8012efc:	00000401 	.word	0x00000401

08012f00 <app_ux_device_thread_entry>:
/**
 * @brief  Function implementing app_ux_device_thread_entry.
 * @param  thread_input: User thread input parameter.
 * @retval none
 */
static VOID app_ux_device_thread_entry(ULONG thread_input) {
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]

	MX_USB_DRD_FS_PCD_Init();
 8012f08:	f7ef f9d4 	bl	80022b4 <MX_USB_DRD_FS_PCD_Init>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x14);
 8012f0c:	4816      	ldr	r0, [pc, #88]	; (8012f68 <app_ux_device_thread_entry+0x68>)
 8012f0e:	2314      	movs	r3, #20
 8012f10:	2200      	movs	r2, #0
 8012f12:	2100      	movs	r1, #0
 8012f14:	f7f2 ffa8 	bl	8005e68 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x54);
 8012f18:	4813      	ldr	r0, [pc, #76]	; (8012f68 <app_ux_device_thread_entry+0x68>)
 8012f1a:	2354      	movs	r3, #84	; 0x54
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	2180      	movs	r1, #128	; 0x80
 8012f20:	f7f2 ffa2 	bl	8005e68 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x94);
 8012f24:	4810      	ldr	r0, [pc, #64]	; (8012f68 <app_ux_device_thread_entry+0x68>)
 8012f26:	2394      	movs	r3, #148	; 0x94
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2181      	movs	r1, #129	; 0x81
 8012f2c:	f7f2 ff9c 	bl	8005e68 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x01, PCD_SNG_BUF, 0xD4);
 8012f30:	480d      	ldr	r0, [pc, #52]	; (8012f68 <app_ux_device_thread_entry+0x68>)
 8012f32:	23d4      	movs	r3, #212	; 0xd4
 8012f34:	2200      	movs	r2, #0
 8012f36:	2101      	movs	r1, #1
 8012f38:	f7f2 ff96 	bl	8005e68 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x82, PCD_SNG_BUF, 0x114);
 8012f3c:	238a      	movs	r3, #138	; 0x8a
 8012f3e:	005b      	lsls	r3, r3, #1
 8012f40:	4809      	ldr	r0, [pc, #36]	; (8012f68 <app_ux_device_thread_entry+0x68>)
 8012f42:	2200      	movs	r2, #0
 8012f44:	2182      	movs	r1, #130	; 0x82
 8012f46:	f7f2 ff8f 	bl	8005e68 <HAL_PCDEx_PMAConfig>
	ux_dcd_stm32_initialize((ULONG) USB_DRD_FS, (ULONG) &hpcd_USB_DRD_FS);
 8012f4a:	4b07      	ldr	r3, [pc, #28]	; (8012f68 <app_ux_device_thread_entry+0x68>)
 8012f4c:	4a07      	ldr	r2, [pc, #28]	; (8012f6c <app_ux_device_thread_entry+0x6c>)
 8012f4e:	0019      	movs	r1, r3
 8012f50:	0010      	movs	r0, r2
 8012f52:	f7ff fd5b 	bl	8012a0c <_ux_dcd_stm32_initialize>
	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8012f56:	4b04      	ldr	r3, [pc, #16]	; (8012f68 <app_ux_device_thread_entry+0x68>)
 8012f58:	0018      	movs	r0, r3
 8012f5a:	f7f1 fb39 	bl	80045d0 <HAL_PCD_Start>

}
 8012f5e:	46c0      	nop			; (mov r8, r8)
 8012f60:	46bd      	mov	sp, r7
 8012f62:	b002      	add	sp, #8
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	46c0      	nop			; (mov r8, r8)
 8012f68:	20004550 	.word	0x20004550
 8012f6c:	40005c00 	.word	0x40005c00

08012f70 <USBD_CDC_ACM_Activate>:
 * @brief  USBD_CDC_ACM_Activate
 *         This function is called when insertion of a CDC ACM device.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance) {
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_Activate */
	cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) cdc_acm_instance;
 8012f78:	4b03      	ldr	r3, [pc, #12]	; (8012f88 <USBD_CDC_ACM_Activate+0x18>)
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	601a      	str	r2, [r3, #0]
	/* USER CODE END USBD_CDC_ACM_Activate */

	return;
 8012f7e:	46c0      	nop			; (mov r8, r8)
}
 8012f80:	46bd      	mov	sp, r7
 8012f82:	b002      	add	sp, #8
 8012f84:	bd80      	pop	{r7, pc}
 8012f86:	46c0      	nop			; (mov r8, r8)
 8012f88:	20005098 	.word	0x20005098

08012f8c <USBD_CDC_ACM_Deactivate>:
 * @brief  USBD_CDC_ACM_Deactivate
 *         This function is called when extraction of a CDC ACM device.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance) {
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
	UX_PARAMETER_NOT_USED(cdc_acm_instance);
	/* USER CODE END USBD_CDC_ACM_Deactivate */

	return;
 8012f94:	46c0      	nop			; (mov r8, r8)
}
 8012f96:	46bd      	mov	sp, r7
 8012f98:	b002      	add	sp, #8
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <USBD_CDC_ACM_ParameterChange>:
 * @brief  USBD_CDC_ACM_ParameterChange
 *         This function is invoked to manage the CDC ACM class requests.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance) {
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
	UX_PARAMETER_NOT_USED(cdc_acm_instance);
	/* USER CODE END USBD_CDC_ACM_ParameterChange */

	return;
 8012fa4:	46c0      	nop			; (mov r8, r8)
}
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	b002      	add	sp, #8
 8012faa:	bd80      	pop	{r7, pc}

08012fac <usbx_cdc_acm_write_thread_entry>:

/* USER CODE END 0 */

/* USER CODE BEGIN 1 */

VOID usbx_cdc_acm_write_thread_entry(ULONG thread_input) {
 8012fac:	b590      	push	{r4, r7, lr}
 8012fae:	b08b      	sub	sp, #44	; 0x2c
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
	/* Private Variables */
	ULONG tx_actual_length;
	const uint8_t message[] = "USBX Application Running!\r\n";
 8012fb4:	2308      	movs	r3, #8
 8012fb6:	18fb      	adds	r3, r7, r3
 8012fb8:	4a0a      	ldr	r2, [pc, #40]	; (8012fe4 <usbx_cdc_acm_write_thread_entry+0x38>)
 8012fba:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012fbc:	c313      	stmia	r3!, {r0, r1, r4}
 8012fbe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012fc0:	c313      	stmia	r3!, {r0, r1, r4}
 8012fc2:	6812      	ldr	r2, [r2, #0]
 8012fc4:	601a      	str	r2, [r3, #0]
	while (1) {
		ux_device_class_cdc_acm_write(cdc_acm, (UCHAR*) (message),
 8012fc6:	4b08      	ldr	r3, [pc, #32]	; (8012fe8 <usbx_cdc_acm_write_thread_entry+0x3c>)
 8012fc8:	6818      	ldr	r0, [r3, #0]
 8012fca:	2324      	movs	r3, #36	; 0x24
 8012fcc:	18fb      	adds	r3, r7, r3
 8012fce:	2208      	movs	r2, #8
 8012fd0:	18b9      	adds	r1, r7, r2
 8012fd2:	221c      	movs	r2, #28
 8012fd4:	f7ff f862 	bl	801209c <_ux_device_class_cdc_acm_write>
				sizeof(message), &tx_actual_length);
		tx_thread_sleep(1000);
 8012fd8:	23fa      	movs	r3, #250	; 0xfa
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	0018      	movs	r0, r3
 8012fde:	f7fa fbe1 	bl	800d7a4 <_tx_thread_sleep>
		ux_device_class_cdc_acm_write(cdc_acm, (UCHAR*) (message),
 8012fe2:	e7f0      	b.n	8012fc6 <usbx_cdc_acm_write_thread_entry+0x1a>
 8012fe4:	0801496c 	.word	0x0801496c
 8012fe8:	20005098 	.word	0x20005098

08012fec <usbx_cdc_acm_read_thread_entry>:
	}
}

VOID usbx_cdc_acm_read_thread_entry(ULONG thread_input) {
 8012fec:	b590      	push	{r4, r7, lr}
 8012fee:	b097      	sub	sp, #92	; 0x5c
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
	uint8_t UserRxBuffer[64];
	ULONG voltage_raw;

	/* Infinite Loop */
	while (1) {
		if (cdc_acm != UX_NULL) {
 8012ff4:	4b25      	ldr	r3, [pc, #148]	; (801308c <usbx_cdc_acm_read_thread_entry+0xa0>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d0fb      	beq.n	8012ff4 <usbx_cdc_acm_read_thread_entry+0x8>

			ux_device_class_cdc_acm_read(cdc_acm, (UCHAR*) UserRxBuffer, 64,
 8012ffc:	4b23      	ldr	r3, [pc, #140]	; (801308c <usbx_cdc_acm_read_thread_entry+0xa0>)
 8012ffe:	6818      	ldr	r0, [r3, #0]
 8013000:	2350      	movs	r3, #80	; 0x50
 8013002:	18fb      	adds	r3, r7, r3
 8013004:	2410      	movs	r4, #16
 8013006:	1939      	adds	r1, r7, r4
 8013008:	2240      	movs	r2, #64	; 0x40
 801300a:	f7fe ff93 	bl	8011f34 <_ux_device_class_cdc_acm_read>
					&rx_actual_length);

			if (rx_actual_length > 0) {
 801300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013010:	2b00      	cmp	r3, #0
 8013012:	d0ef      	beq.n	8012ff4 <usbx_cdc_acm_read_thread_entry+0x8>

				switch (UserRxBuffer[0]) {
 8013014:	193b      	adds	r3, r7, r4
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	2b03      	cmp	r3, #3
 801301a:	d017      	beq.n	801304c <usbx_cdc_acm_read_thread_entry+0x60>
 801301c:	dcea      	bgt.n	8012ff4 <usbx_cdc_acm_read_thread_entry+0x8>
 801301e:	2b01      	cmp	r3, #1
 8013020:	d002      	beq.n	8013028 <usbx_cdc_acm_read_thread_entry+0x3c>
 8013022:	2b02      	cmp	r3, #2
 8013024:	d009      	beq.n	801303a <usbx_cdc_acm_read_thread_entry+0x4e>
 8013026:	e02f      	b.n	8013088 <usbx_cdc_acm_read_thread_entry+0x9c>

				case 0x01:
					/* Set regulator event flag to turn OFF the regulator. */
					status = tx_event_flags_set(&event_flags_regulator,
 8013028:	4b19      	ldr	r3, [pc, #100]	; (8013090 <usbx_cdc_acm_read_thread_entry+0xa4>)
 801302a:	2200      	movs	r2, #0
 801302c:	2101      	movs	r1, #1
 801302e:	0018      	movs	r0, r3
 8013030:	f7fb fbcc 	bl	800e7cc <_txe_event_flags_set>
 8013034:	0003      	movs	r3, r0
 8013036:	657b      	str	r3, [r7, #84]	; 0x54
					TX_OR);

					/* Check status. */
					if (status != TX_SUCCESS)
						break;
					break;
 8013038:	e026      	b.n	8013088 <usbx_cdc_acm_read_thread_entry+0x9c>

				case 0x02:
					/* Set regulator event flag to turn ON the regulator. */
					status = tx_event_flags_set(&event_flags_regulator,
 801303a:	4b15      	ldr	r3, [pc, #84]	; (8013090 <usbx_cdc_acm_read_thread_entry+0xa4>)
 801303c:	2200      	movs	r2, #0
 801303e:	2102      	movs	r1, #2
 8013040:	0018      	movs	r0, r3
 8013042:	f7fb fbc3 	bl	800e7cc <_txe_event_flags_set>
 8013046:	0003      	movs	r3, r0
 8013048:	657b      	str	r3, [r7, #84]	; 0x54
					TX_OR);

					/* Check status. */
					if (status != TX_SUCCESS)
						break;
					break;
 801304a:	e01d      	b.n	8013088 <usbx_cdc_acm_read_thread_entry+0x9c>

				case 0x03:
					if (rx_actual_length >= 2) {
 801304c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801304e:	2b01      	cmp	r3, #1
 8013050:	d9d0      	bls.n	8012ff4 <usbx_cdc_acm_read_thread_entry+0x8>

						/* Voltage value will be set by the second character */
						voltage_raw = UserRxBuffer[1];
 8013052:	2310      	movs	r3, #16
 8013054:	18fb      	adds	r3, r7, r3
 8013056:	785b      	ldrb	r3, [r3, #1]
 8013058:	60fb      	str	r3, [r7, #12]

						/* Send message to queue voltage. */
						status = tx_queue_send(&queue_voltage,
 801305a:	2301      	movs	r3, #1
 801305c:	425a      	negs	r2, r3
 801305e:	230c      	movs	r3, #12
 8013060:	18f9      	adds	r1, r7, r3
 8013062:	4b0c      	ldr	r3, [pc, #48]	; (8013094 <usbx_cdc_acm_read_thread_entry+0xa8>)
 8013064:	0018      	movs	r0, r3
 8013066:	f7fb fe53 	bl	800ed10 <_txe_queue_send>
 801306a:	0003      	movs	r3, r0
 801306c:	657b      	str	r3, [r7, #84]	; 0x54
								&voltage_raw,
								TX_WAIT_FOREVER);

						/* Check completion status. */
						if (status != TX_SUCCESS)
 801306e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013070:	2b00      	cmp	r3, #0
 8013072:	d108      	bne.n	8013086 <usbx_cdc_acm_read_thread_entry+0x9a>
							break;

						/* Set regulator event flag to set the regulator. */
						status = tx_event_flags_set(&event_flags_regulator,
 8013074:	4b06      	ldr	r3, [pc, #24]	; (8013090 <usbx_cdc_acm_read_thread_entry+0xa4>)
 8013076:	2200      	movs	r2, #0
 8013078:	2103      	movs	r1, #3
 801307a:	0018      	movs	r0, r3
 801307c:	f7fb fba6 	bl	800e7cc <_txe_event_flags_set>
 8013080:	0003      	movs	r3, r0
 8013082:	657b      	str	r3, [r7, #84]	; 0x54
						TX_OR);

						/* Check status. */
						if (status != TX_SUCCESS)
							break;
						break;
 8013084:	e000      	b.n	8013088 <usbx_cdc_acm_read_thread_entry+0x9c>
							break;
 8013086:	46c0      	nop			; (mov r8, r8)
		if (cdc_acm != UX_NULL) {
 8013088:	e7b4      	b.n	8012ff4 <usbx_cdc_acm_read_thread_entry+0x8>
 801308a:	46c0      	nop			; (mov r8, r8)
 801308c:	20005098 	.word	0x20005098
 8013090:	20004330 	.word	0x20004330
 8013094:	20004354 	.word	0x20004354

08013098 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	0002      	movs	r2, r0
 80130a0:	6039      	str	r1, [r7, #0]
 80130a2:	1dfb      	adds	r3, r7, #7
 80130a4:	701a      	strb	r2, [r3, #0]
  uint8_t *pFrameWork = NULL;
 80130a6:	2300      	movs	r3, #0
 80130a8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 80130aa:	1dfb      	adds	r3, r7, #7
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d116      	bne.n	80130e0 <USBD_Get_Device_Framework_Speed+0x48>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 80130b2:	4b19      	ldr	r3, [pc, #100]	; (8013118 <USBD_Get_Device_Framework_Speed+0x80>)
 80130b4:	6819      	ldr	r1, [r3, #0]
 80130b6:	1dfb      	adds	r3, r7, #7
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	4a18      	ldr	r2, [pc, #96]	; (801311c <USBD_Get_Device_Framework_Speed+0x84>)
 80130bc:	4818      	ldr	r0, [pc, #96]	; (8013120 <USBD_Get_Device_Framework_Speed+0x88>)
 80130be:	f000 f959 	bl	8013374 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 80130c2:	4a17      	ldr	r2, [pc, #92]	; (8013120 <USBD_Get_Device_Framework_Speed+0x88>)
 80130c4:	238a      	movs	r3, #138	; 0x8a
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	58d2      	ldr	r2, [r2, r3]
 80130ca:	4915      	ldr	r1, [pc, #84]	; (8013120 <USBD_Get_Device_Framework_Speed+0x88>)
 80130cc:	238c      	movs	r3, #140	; 0x8c
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	58cb      	ldr	r3, [r1, r3]
 80130d2:	18d2      	adds	r2, r2, r3
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 80130d8:	4b0f      	ldr	r3, [pc, #60]	; (8013118 <USBD_Get_Device_Framework_Speed+0x80>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	60fb      	str	r3, [r7, #12]
 80130de:	e015      	b.n	801310c <USBD_Get_Device_Framework_Speed+0x74>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 80130e0:	4b10      	ldr	r3, [pc, #64]	; (8013124 <USBD_Get_Device_Framework_Speed+0x8c>)
 80130e2:	6819      	ldr	r1, [r3, #0]
 80130e4:	1dfb      	adds	r3, r7, #7
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	4a0c      	ldr	r2, [pc, #48]	; (801311c <USBD_Get_Device_Framework_Speed+0x84>)
 80130ea:	480f      	ldr	r0, [pc, #60]	; (8013128 <USBD_Get_Device_Framework_Speed+0x90>)
 80130ec:	f000 f942 	bl	8013374 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 80130f0:	4a0d      	ldr	r2, [pc, #52]	; (8013128 <USBD_Get_Device_Framework_Speed+0x90>)
 80130f2:	238a      	movs	r3, #138	; 0x8a
 80130f4:	005b      	lsls	r3, r3, #1
 80130f6:	58d2      	ldr	r2, [r2, r3]
 80130f8:	490b      	ldr	r1, [pc, #44]	; (8013128 <USBD_Get_Device_Framework_Speed+0x90>)
 80130fa:	238c      	movs	r3, #140	; 0x8c
 80130fc:	005b      	lsls	r3, r3, #1
 80130fe:	58cb      	ldr	r3, [r1, r3]
 8013100:	18d2      	adds	r2, r2, r3
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8013106:	4b07      	ldr	r3, [pc, #28]	; (8013124 <USBD_Get_Device_Framework_Speed+0x8c>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 801310c:	68fb      	ldr	r3, [r7, #12]
}
 801310e:	0018      	movs	r0, r3
 8013110:	46bd      	mov	sp, r7
 8013112:	b004      	add	sp, #16
 8013114:	bd80      	pop	{r7, pc}
 8013116:	46c0      	nop			; (mov r8, r8)
 8013118:	20000064 	.word	0x20000064
 801311c:	20000058 	.word	0x20000058
 8013120:	2000509c 	.word	0x2000509c
 8013124:	20000068 	.word	0x20000068
 8013128:	200051b8 	.word	0x200051b8

0801312c <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 801312c:	b5b0      	push	{r4, r5, r7, lr}
 801312e:	b084      	sub	sp, #16
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8013134:	250c      	movs	r5, #12
 8013136:	197b      	adds	r3, r7, r5
 8013138:	2200      	movs	r2, #0
 801313a:	801a      	strh	r2, [r3, #0]
  uint8_t count = 0U;
 801313c:	240f      	movs	r4, #15
 801313e:	193b      	adds	r3, r7, r4
 8013140:	2200      	movs	r2, #0
 8013142:	701a      	strb	r2, [r3, #0]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8013144:	193b      	adds	r3, r7, r4
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	193a      	adds	r2, r7, r4
 801314a:	1c59      	adds	r1, r3, #1
 801314c:	7011      	strb	r1, [r2, #0]
 801314e:	001a      	movs	r2, r3
 8013150:	4b43      	ldr	r3, [pc, #268]	; (8013260 <USBD_Get_String_Framework+0x134>)
 8013152:	2109      	movs	r1, #9
 8013154:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8013156:	193b      	adds	r3, r7, r4
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	193a      	adds	r2, r7, r4
 801315c:	1c59      	adds	r1, r3, #1
 801315e:	7011      	strb	r1, [r2, #0]
 8013160:	001a      	movs	r2, r3
 8013162:	4b3f      	ldr	r3, [pc, #252]	; (8013260 <USBD_Get_String_Framework+0x134>)
 8013164:	2104      	movs	r1, #4
 8013166:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8013168:	193b      	adds	r3, r7, r4
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	193a      	adds	r2, r7, r4
 801316e:	1c59      	adds	r1, r3, #1
 8013170:	7011      	strb	r1, [r2, #0]
 8013172:	001a      	movs	r2, r3
 8013174:	4b3a      	ldr	r3, [pc, #232]	; (8013260 <USBD_Get_String_Framework+0x134>)
 8013176:	2101      	movs	r1, #1
 8013178:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 801317a:	193b      	adds	r3, r7, r4
 801317c:	781a      	ldrb	r2, [r3, #0]
 801317e:	4b38      	ldr	r3, [pc, #224]	; (8013260 <USBD_Get_String_Framework+0x134>)
 8013180:	18d1      	adds	r1, r2, r3
 8013182:	197a      	adds	r2, r7, r5
 8013184:	4b37      	ldr	r3, [pc, #220]	; (8013264 <USBD_Get_String_Framework+0x138>)
 8013186:	0018      	movs	r0, r3
 8013188:	f000 f89a 	bl	80132c0 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 801318c:	197b      	adds	r3, r7, r5
 801318e:	881b      	ldrh	r3, [r3, #0]
 8013190:	b2da      	uxtb	r2, r3
 8013192:	193b      	adds	r3, r7, r4
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	18d3      	adds	r3, r2, r3
 8013198:	b2da      	uxtb	r2, r3
 801319a:	193b      	adds	r3, r7, r4
 801319c:	3201      	adds	r2, #1
 801319e:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80131a0:	193b      	adds	r3, r7, r4
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	193a      	adds	r2, r7, r4
 80131a6:	1c59      	adds	r1, r3, #1
 80131a8:	7011      	strb	r1, [r2, #0]
 80131aa:	001a      	movs	r2, r3
 80131ac:	4b2c      	ldr	r3, [pc, #176]	; (8013260 <USBD_Get_String_Framework+0x134>)
 80131ae:	2109      	movs	r1, #9
 80131b0:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80131b2:	193b      	adds	r3, r7, r4
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	193a      	adds	r2, r7, r4
 80131b8:	1c59      	adds	r1, r3, #1
 80131ba:	7011      	strb	r1, [r2, #0]
 80131bc:	001a      	movs	r2, r3
 80131be:	4b28      	ldr	r3, [pc, #160]	; (8013260 <USBD_Get_String_Framework+0x134>)
 80131c0:	2104      	movs	r1, #4
 80131c2:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 80131c4:	193b      	adds	r3, r7, r4
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	193a      	adds	r2, r7, r4
 80131ca:	1c59      	adds	r1, r3, #1
 80131cc:	7011      	strb	r1, [r2, #0]
 80131ce:	001a      	movs	r2, r3
 80131d0:	4b23      	ldr	r3, [pc, #140]	; (8013260 <USBD_Get_String_Framework+0x134>)
 80131d2:	2102      	movs	r1, #2
 80131d4:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 80131d6:	193b      	adds	r3, r7, r4
 80131d8:	781a      	ldrb	r2, [r3, #0]
 80131da:	4b21      	ldr	r3, [pc, #132]	; (8013260 <USBD_Get_String_Framework+0x134>)
 80131dc:	18d1      	adds	r1, r2, r3
 80131de:	197a      	adds	r2, r7, r5
 80131e0:	4b21      	ldr	r3, [pc, #132]	; (8013268 <USBD_Get_String_Framework+0x13c>)
 80131e2:	0018      	movs	r0, r3
 80131e4:	f000 f86c 	bl	80132c0 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 80131e8:	197b      	adds	r3, r7, r5
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	b2da      	uxtb	r2, r3
 80131ee:	193b      	adds	r3, r7, r4
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	18d3      	adds	r3, r2, r3
 80131f4:	b2da      	uxtb	r2, r3
 80131f6:	193b      	adds	r3, r7, r4
 80131f8:	3201      	adds	r2, #1
 80131fa:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80131fc:	193b      	adds	r3, r7, r4
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	0020      	movs	r0, r4
 8013202:	193a      	adds	r2, r7, r4
 8013204:	1c59      	adds	r1, r3, #1
 8013206:	7011      	strb	r1, [r2, #0]
 8013208:	001a      	movs	r2, r3
 801320a:	4b15      	ldr	r3, [pc, #84]	; (8013260 <USBD_Get_String_Framework+0x134>)
 801320c:	2109      	movs	r1, #9
 801320e:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8013210:	183b      	adds	r3, r7, r0
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	183a      	adds	r2, r7, r0
 8013216:	1c59      	adds	r1, r3, #1
 8013218:	7011      	strb	r1, [r2, #0]
 801321a:	001a      	movs	r2, r3
 801321c:	4b10      	ldr	r3, [pc, #64]	; (8013260 <USBD_Get_String_Framework+0x134>)
 801321e:	2104      	movs	r1, #4
 8013220:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8013222:	183b      	adds	r3, r7, r0
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	183a      	adds	r2, r7, r0
 8013228:	1c59      	adds	r1, r3, #1
 801322a:	7011      	strb	r1, [r2, #0]
 801322c:	001a      	movs	r2, r3
 801322e:	4b0c      	ldr	r3, [pc, #48]	; (8013260 <USBD_Get_String_Framework+0x134>)
 8013230:	2103      	movs	r1, #3
 8013232:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8013234:	183b      	adds	r3, r7, r0
 8013236:	781a      	ldrb	r2, [r3, #0]
 8013238:	4b09      	ldr	r3, [pc, #36]	; (8013260 <USBD_Get_String_Framework+0x134>)
 801323a:	18d1      	adds	r1, r2, r3
 801323c:	197a      	adds	r2, r7, r5
 801323e:	4b0b      	ldr	r3, [pc, #44]	; (801326c <USBD_Get_String_Framework+0x140>)
 8013240:	0018      	movs	r0, r3
 8013242:	f000 f83d 	bl	80132c0 <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 8013246:	4b06      	ldr	r3, [pc, #24]	; (8013260 <USBD_Get_String_Framework+0x134>)
 8013248:	0018      	movs	r0, r3
 801324a:	f7ed f891 	bl	8000370 <strlen>
 801324e:	0002      	movs	r2, r0
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8013254:	4b02      	ldr	r3, [pc, #8]	; (8013260 <USBD_Get_String_Framework+0x134>)
}
 8013256:	0018      	movs	r0, r3
 8013258:	46bd      	mov	sp, r7
 801325a:	b004      	add	sp, #16
 801325c:	bdb0      	pop	{r4, r5, r7, pc}
 801325e:	46c0      	nop			; (mov r8, r8)
 8013260:	20005464 	.word	0x20005464
 8013264:	08014988 	.word	0x08014988
 8013268:	0801499c 	.word	0x0801499c
 801326c:	080149b0 	.word	0x080149b0

08013270 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8013278:	200f      	movs	r0, #15
 801327a:	183b      	adds	r3, r7, r0
 801327c:	2200      	movs	r2, #0
 801327e:	701a      	strb	r2, [r3, #0]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8013280:	183b      	adds	r3, r7, r0
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	183a      	adds	r2, r7, r0
 8013286:	1c59      	adds	r1, r3, #1
 8013288:	7011      	strb	r1, [r2, #0]
 801328a:	001a      	movs	r2, r3
 801328c:	4b0b      	ldr	r3, [pc, #44]	; (80132bc <USBD_Get_Language_Id_Framework+0x4c>)
 801328e:	2109      	movs	r1, #9
 8013290:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 8013292:	183b      	adds	r3, r7, r0
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	183a      	adds	r2, r7, r0
 8013298:	1c59      	adds	r1, r3, #1
 801329a:	7011      	strb	r1, [r2, #0]
 801329c:	001a      	movs	r2, r3
 801329e:	4b07      	ldr	r3, [pc, #28]	; (80132bc <USBD_Get_Language_Id_Framework+0x4c>)
 80132a0:	2104      	movs	r1, #4
 80132a2:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 80132a4:	4b05      	ldr	r3, [pc, #20]	; (80132bc <USBD_Get_Language_Id_Framework+0x4c>)
 80132a6:	0018      	movs	r0, r3
 80132a8:	f7ed f862 	bl	8000370 <strlen>
 80132ac:	0002      	movs	r2, r0
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 80132b2:	4b02      	ldr	r3, [pc, #8]	; (80132bc <USBD_Get_Language_Id_Framework+0x4c>)
}
 80132b4:	0018      	movs	r0, r3
 80132b6:	46bd      	mov	sp, r7
 80132b8:	b004      	add	sp, #16
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	20005564 	.word	0x20005564

080132c0 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80132c0:	b590      	push	{r4, r7, lr}
 80132c2:	b087      	sub	sp, #28
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80132cc:	2417      	movs	r4, #23
 80132ce:	193b      	adds	r3, r7, r4
 80132d0:	2200      	movs	r2, #0
 80132d2:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d029      	beq.n	801332e <USBD_Desc_GetString+0x6e>
  {
    return;
  }

  pdesc = desc;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	0018      	movs	r0, r3
 80132e2:	f000 f828 	bl	8013336 <USBD_Desc_GetLen>
 80132e6:	0003      	movs	r3, r0
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 80132ee:	193b      	adds	r3, r7, r4
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	193a      	adds	r2, r7, r4
 80132f4:	1c59      	adds	r1, r3, #1
 80132f6:	7011      	strb	r1, [r2, #0]
 80132f8:	001a      	movs	r2, r3
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	189b      	adds	r3, r3, r2
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	7812      	ldrb	r2, [r2, #0]
 8013302:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8013304:	e00e      	b.n	8013324 <USBD_Desc_GetString+0x64>
  {
    unicode[idx++] = *pdesc;
 8013306:	2217      	movs	r2, #23
 8013308:	18bb      	adds	r3, r7, r2
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	18ba      	adds	r2, r7, r2
 801330e:	1c59      	adds	r1, r3, #1
 8013310:	7011      	strb	r1, [r2, #0]
 8013312:	001a      	movs	r2, r3
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	189b      	adds	r3, r3, r2
 8013318:	693a      	ldr	r2, [r7, #16]
 801331a:	7812      	ldrb	r2, [r2, #0]
 801331c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	3301      	adds	r3, #1
 8013322:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d1ec      	bne.n	8013306 <USBD_Desc_GetString+0x46>
 801332c:	e000      	b.n	8013330 <USBD_Desc_GetString+0x70>
    return;
 801332e:	46c0      	nop			; (mov r8, r8)
  }
}
 8013330:	46bd      	mov	sp, r7
 8013332:	b007      	add	sp, #28
 8013334:	bd90      	pop	{r4, r7, pc}

08013336 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8013336:	b580      	push	{r7, lr}
 8013338:	b084      	sub	sp, #16
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801333e:	230f      	movs	r3, #15
 8013340:	18fb      	adds	r3, r7, r3
 8013342:	2200      	movs	r2, #0
 8013344:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801334a:	e008      	b.n	801335e <USBD_Desc_GetLen+0x28>
  {
    len++;
 801334c:	210f      	movs	r1, #15
 801334e:	187b      	adds	r3, r7, r1
 8013350:	781a      	ldrb	r2, [r3, #0]
 8013352:	187b      	adds	r3, r7, r1
 8013354:	3201      	adds	r2, #1
 8013356:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	3301      	adds	r3, #1
 801335c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d1f2      	bne.n	801334c <USBD_Desc_GetLen+0x16>
  }

  return len;
 8013366:	230f      	movs	r3, #15
 8013368:	18fb      	adds	r3, r7, r3
 801336a:	781b      	ldrb	r3, [r3, #0]
}
 801336c:	0018      	movs	r0, r3
 801336e:	46bd      	mov	sp, r7
 8013370:	b004      	add	sp, #16
 8013372:	bd80      	pop	{r7, pc}

08013374 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b088      	sub	sp, #32
 8013378:	af02      	add	r7, sp, #8
 801337a:	60f8      	str	r0, [r7, #12]
 801337c:	60b9      	str	r1, [r7, #8]
 801337e:	607a      	str	r2, [r7, #4]
 8013380:	001a      	movs	r2, r3
 8013382:	1cfb      	adds	r3, r7, #3
 8013384:	701a      	strb	r2, [r3, #0]
  static USBD_DeviceDescTypedef *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8013386:	2317      	movs	r3, #23
 8013388:	18fb      	adds	r3, r7, r3
 801338a:	2200      	movs	r2, #0
 801338c:	701a      	strb	r2, [r3, #0]
  uint8_t NumberClass = 1U;
 801338e:	2316      	movs	r3, #22
 8013390:	18fb      	adds	r3, r7, r3
 8013392:	2201      	movs	r2, #1
 8013394:	701a      	strb	r2, [r3, #0]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 8013396:	68fa      	ldr	r2, [r7, #12]
 8013398:	238c      	movs	r3, #140	; 0x8c
 801339a:	005b      	lsls	r3, r3, #1
 801339c:	2100      	movs	r1, #0
 801339e:	50d1      	str	r1, [r2, r3]
  pdev->CurrDevDescSz = 0U;
 80133a0:	68fa      	ldr	r2, [r7, #12]
 80133a2:	238a      	movs	r3, #138	; 0x8a
 80133a4:	005b      	lsls	r3, r3, #1
 80133a6:	2100      	movs	r1, #0
 80133a8:	50d1      	str	r1, [r2, r3]

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 80133aa:	4b8f      	ldr	r3, [pc, #572]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133ac:	68ba      	ldr	r2, [r7, #8]
 80133ae:	601a      	str	r2, [r3, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 80133b0:	4b8d      	ldr	r3, [pc, #564]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2212      	movs	r2, #18
 80133b6:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 80133b8:	4b8b      	ldr	r3, [pc, #556]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2201      	movs	r2, #1
 80133be:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 80133c0:	4b89      	ldr	r3, [pc, #548]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	789a      	ldrb	r2, [r3, #2]
 80133c6:	2100      	movs	r1, #0
 80133c8:	400a      	ands	r2, r1
 80133ca:	709a      	strb	r2, [r3, #2]
 80133cc:	78da      	ldrb	r2, [r3, #3]
 80133ce:	2100      	movs	r1, #0
 80133d0:	400a      	ands	r2, r1
 80133d2:	1c11      	adds	r1, r2, #0
 80133d4:	2202      	movs	r2, #2
 80133d6:	430a      	orrs	r2, r1
 80133d8:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 80133da:	4b83      	ldr	r3, [pc, #524]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2200      	movs	r2, #0
 80133e0:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 80133e2:	4b81      	ldr	r3, [pc, #516]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	2200      	movs	r2, #0
 80133e8:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 80133ea:	4b7f      	ldr	r3, [pc, #508]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2200      	movs	r2, #0
 80133f0:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 80133f2:	4b7d      	ldr	r3, [pc, #500]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2240      	movs	r2, #64	; 0x40
 80133f8:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 80133fa:	4b7b      	ldr	r3, [pc, #492]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	7a1a      	ldrb	r2, [r3, #8]
 8013400:	2100      	movs	r1, #0
 8013402:	400a      	ands	r2, r1
 8013404:	1c11      	adds	r1, r2, #0
 8013406:	227d      	movs	r2, #125	; 0x7d
 8013408:	4252      	negs	r2, r2
 801340a:	430a      	orrs	r2, r1
 801340c:	721a      	strb	r2, [r3, #8]
 801340e:	7a5a      	ldrb	r2, [r3, #9]
 8013410:	2100      	movs	r1, #0
 8013412:	400a      	ands	r2, r1
 8013414:	1c11      	adds	r1, r2, #0
 8013416:	2204      	movs	r2, #4
 8013418:	430a      	orrs	r2, r1
 801341a:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 801341c:	4b72      	ldr	r3, [pc, #456]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	7a9a      	ldrb	r2, [r3, #10]
 8013422:	2100      	movs	r1, #0
 8013424:	400a      	ands	r2, r1
 8013426:	1c11      	adds	r1, r2, #0
 8013428:	2210      	movs	r2, #16
 801342a:	430a      	orrs	r2, r1
 801342c:	729a      	strb	r2, [r3, #10]
 801342e:	7ada      	ldrb	r2, [r3, #11]
 8013430:	2100      	movs	r1, #0
 8013432:	400a      	ands	r2, r1
 8013434:	1c11      	adds	r1, r2, #0
 8013436:	2257      	movs	r2, #87	; 0x57
 8013438:	430a      	orrs	r2, r1
 801343a:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 801343c:	4b6a      	ldr	r3, [pc, #424]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	7b1a      	ldrb	r2, [r3, #12]
 8013442:	2100      	movs	r1, #0
 8013444:	400a      	ands	r2, r1
 8013446:	731a      	strb	r2, [r3, #12]
 8013448:	7b5a      	ldrb	r2, [r3, #13]
 801344a:	2100      	movs	r1, #0
 801344c:	400a      	ands	r2, r1
 801344e:	1c11      	adds	r1, r2, #0
 8013450:	2202      	movs	r2, #2
 8013452:	430a      	orrs	r2, r1
 8013454:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8013456:	4b64      	ldr	r3, [pc, #400]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2201      	movs	r2, #1
 801345c:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 801345e:	4b62      	ldr	r3, [pc, #392]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	2202      	movs	r2, #2
 8013464:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8013466:	4b60      	ldr	r3, [pc, #384]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	2203      	movs	r2, #3
 801346c:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 801346e:	4b5e      	ldr	r3, [pc, #376]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2201      	movs	r2, #1
 8013474:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	238a      	movs	r3, #138	; 0x8a
 801347a:	005b      	lsls	r3, r3, #1
 801347c:	58d3      	ldr	r3, [r2, r3]
 801347e:	3312      	adds	r3, #18
 8013480:	0019      	movs	r1, r3
 8013482:	68fa      	ldr	r2, [r7, #12]
 8013484:	238a      	movs	r3, #138	; 0x8a
 8013486:	005b      	lsls	r3, r3, #1
 8013488:	50d1      	str	r1, [r2, r3]

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 801348a:	1cfb      	adds	r3, r7, #3
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	2b01      	cmp	r3, #1
 8013490:	d000      	beq.n	8013494 <USBD_Device_Framework_Builder+0x120>
 8013492:	e07d      	b.n	8013590 <USBD_Device_Framework_Builder+0x21c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	238a      	movs	r3, #138	; 0x8a
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	58d3      	ldr	r3, [r2, r3]
 801349c:	68ba      	ldr	r2, [r7, #8]
 801349e:	18d2      	adds	r2, r2, r3
 80134a0:	4b52      	ldr	r3, [pc, #328]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134a2:	601a      	str	r2, [r3, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 80134a4:	4b51      	ldr	r3, [pc, #324]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	220a      	movs	r2, #10
 80134aa:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 80134ac:	4b4f      	ldr	r3, [pc, #316]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2206      	movs	r2, #6
 80134b2:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 80134b4:	4b4d      	ldr	r3, [pc, #308]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	789a      	ldrb	r2, [r3, #2]
 80134ba:	2100      	movs	r1, #0
 80134bc:	400a      	ands	r2, r1
 80134be:	709a      	strb	r2, [r3, #2]
 80134c0:	78da      	ldrb	r2, [r3, #3]
 80134c2:	2100      	movs	r1, #0
 80134c4:	400a      	ands	r2, r1
 80134c6:	1c11      	adds	r1, r2, #0
 80134c8:	2202      	movs	r2, #2
 80134ca:	430a      	orrs	r2, r1
 80134cc:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 80134ce:	4b47      	ldr	r3, [pc, #284]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	2200      	movs	r2, #0
 80134d4:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 80134d6:	4b45      	ldr	r3, [pc, #276]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	2200      	movs	r2, #0
 80134dc:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 80134de:	4b43      	ldr	r3, [pc, #268]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2200      	movs	r2, #0
 80134e4:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 80134e6:	4b41      	ldr	r3, [pc, #260]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	2240      	movs	r2, #64	; 0x40
 80134ec:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 80134ee:	4b3f      	ldr	r3, [pc, #252]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2201      	movs	r2, #1
 80134f4:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 80134f6:	4b3d      	ldr	r3, [pc, #244]	; (80135ec <USBD_Device_Framework_Builder+0x278>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2200      	movs	r2, #0
 80134fc:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 80134fe:	68fa      	ldr	r2, [r7, #12]
 8013500:	238a      	movs	r3, #138	; 0x8a
 8013502:	005b      	lsls	r3, r3, #1
 8013504:	58d3      	ldr	r3, [r2, r3]
 8013506:	330a      	adds	r3, #10
 8013508:	0019      	movs	r1, r3
 801350a:	68fa      	ldr	r2, [r7, #12]
 801350c:	238a      	movs	r3, #138	; 0x8a
 801350e:	005b      	lsls	r3, r3, #1
 8013510:	50d1      	str	r1, [r2, r3]
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8013512:	e03d      	b.n	8013590 <USBD_Device_Framework_Builder+0x21c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	2b02      	cmp	r3, #2
 801351a:	d821      	bhi.n	8013560 <USBD_Device_Framework_Builder+0x1ec>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8013520:	2b02      	cmp	r3, #2
 8013522:	d81d      	bhi.n	8013560 <USBD_Device_Framework_Builder+0x1ec>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8013524:	2317      	movs	r3, #23
 8013526:	18fb      	adds	r3, r7, r3
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	18d3      	adds	r3, r2, r3
      (void)USBD_FrameWork_AddClass(pdev,
 801352e:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed, (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8013530:	68fa      	ldr	r2, [r7, #12]
 8013532:	238a      	movs	r3, #138	; 0x8a
 8013534:	005b      	lsls	r3, r3, #1
 8013536:	58d3      	ldr	r3, [r2, r3]
      (void)USBD_FrameWork_AddClass(pdev,
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	18d3      	adds	r3, r2, r3
 801353c:	1cfa      	adds	r2, r7, #3
 801353e:	7812      	ldrb	r2, [r2, #0]
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	0013      	movs	r3, r2
 8013546:	2200      	movs	r2, #0
 8013548:	f000 f852 	bl	80135f0 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	685b      	ldr	r3, [r3, #4]
 8013550:	1c5a      	adds	r2, r3, #1
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	1c5a      	adds	r2, r3, #1
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	609a      	str	r2, [r3, #8]
    }
    Idx_Instance++;
 8013560:	2117      	movs	r1, #23
 8013562:	187b      	adds	r3, r7, r1
 8013564:	781a      	ldrb	r2, [r3, #0]
 8013566:	187b      	adds	r3, r7, r1
 8013568:	3201      	adds	r2, #1
 801356a:	701a      	strb	r2, [r3, #0]

    /* Count the number of Classes different of CLASS_TYPE_NONE */
    if (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE)
 801356c:	187b      	adds	r3, r7, r1
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	18d3      	adds	r3, r2, r3
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	2016      	movs	r0, #22
 8013578:	183a      	adds	r2, r7, r0
 801357a:	1839      	adds	r1, r7, r0
 801357c:	7809      	ldrb	r1, [r1, #0]
 801357e:	7011      	strb	r1, [r2, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d005      	beq.n	8013590 <USBD_Device_Framework_Builder+0x21c>
    {
      NumberClass++;
 8013584:	0001      	movs	r1, r0
 8013586:	187b      	adds	r3, r7, r1
 8013588:	781a      	ldrb	r2, [r3, #0]
 801358a:	187b      	adds	r3, r7, r1
 801358c:	3201      	adds	r2, #1
 801358e:	701a      	strb	r2, [r3, #0]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8013590:	2317      	movs	r3, #23
 8013592:	18fb      	adds	r3, r7, r3
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	2b02      	cmp	r3, #2
 8013598:	d9bc      	bls.n	8013514 <USBD_Device_Framework_Builder+0x1a0>
    }
  }
  /* Check if there is a composite class and update device class */
  if (NumberClass > 1)
 801359a:	2316      	movs	r3, #22
 801359c:	18fb      	adds	r3, r7, r3
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d90c      	bls.n	80135be <USBD_Device_Framework_Builder+0x24a>
  {
    pDevDesc->bDeviceClass = 0xEF;
 80135a4:	4b10      	ldr	r3, [pc, #64]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	22ef      	movs	r2, #239	; 0xef
 80135aa:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 80135ac:	4b0e      	ldr	r3, [pc, #56]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2202      	movs	r2, #2
 80135b2:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 80135b4:	4b0c      	ldr	r3, [pc, #48]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	2201      	movs	r2, #1
 80135ba:	719a      	strb	r2, [r3, #6]
 80135bc:	e00f      	b.n	80135de <USBD_Device_Framework_Builder+0x26a>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	2b02      	cmp	r3, #2
 80135c4:	d10b      	bne.n	80135de <USBD_Device_Framework_Builder+0x26a>
    {
      pDevDesc->bDeviceClass = 0x02;
 80135c6:	4b08      	ldr	r3, [pc, #32]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2202      	movs	r2, #2
 80135cc:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 80135ce:	4b06      	ldr	r3, [pc, #24]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2202      	movs	r2, #2
 80135d4:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 80135d6:	4b04      	ldr	r3, [pc, #16]	; (80135e8 <USBD_Device_Framework_Builder+0x274>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2200      	movs	r2, #0
 80135dc:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 80135de:	68bb      	ldr	r3, [r7, #8]
}
 80135e0:	0018      	movs	r0, r3
 80135e2:	46bd      	mov	sp, r7
 80135e4:	b006      	add	sp, #24
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	20005568 	.word	0x20005568
 80135ec:	2000556c 	.word	0x2000556c

080135f0 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 80135f0:	b590      	push	{r4, r7, lr}
 80135f2:	b083      	sub	sp, #12
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	000c      	movs	r4, r1
 80135fa:	0010      	movs	r0, r2
 80135fc:	0019      	movs	r1, r3
 80135fe:	1cfb      	adds	r3, r7, #3
 8013600:	1c22      	adds	r2, r4, #0
 8013602:	701a      	strb	r2, [r3, #0]
 8013604:	1cbb      	adds	r3, r7, #2
 8013606:	1c02      	adds	r2, r0, #0
 8013608:	701a      	strb	r2, [r3, #0]
 801360a:	1c7b      	adds	r3, r7, #1
 801360c:	1c0a      	adds	r2, r1, #0
 801360e:	701a      	strb	r2, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	2b02      	cmp	r3, #2
 8013616:	d831      	bhi.n	801367c <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	2158      	movs	r1, #88	; 0x58
 8013620:	434b      	muls	r3, r1
 8013622:	18d3      	adds	r3, r2, r3
 8013624:	3314      	adds	r3, #20
 8013626:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8013628:	2b00      	cmp	r3, #0
 801362a:	d127      	bne.n	801367c <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6858      	ldr	r0, [r3, #4]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	685a      	ldr	r2, [r3, #4]
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	2358      	movs	r3, #88	; 0x58
 8013638:	4343      	muls	r3, r0
 801363a:	18cb      	adds	r3, r1, r3
 801363c:	3310      	adds	r3, #16
 801363e:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	2158      	movs	r1, #88	; 0x58
 8013648:	434b      	muls	r3, r1
 801364a:	18d3      	adds	r3, r2, r3
 801364c:	3314      	adds	r3, #20
 801364e:	2201      	movs	r2, #1
 8013650:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	2158      	movs	r1, #88	; 0x58
 801365a:	434b      	muls	r3, r1
 801365c:	18d3      	adds	r3, r2, r3
 801365e:	330c      	adds	r3, #12
 8013660:	1cfa      	adds	r2, r7, #3
 8013662:	7812      	ldrb	r2, [r2, #0]
 8013664:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8013666:	69ba      	ldr	r2, [r7, #24]
 8013668:	1c7b      	adds	r3, r7, #1
 801366a:	7819      	ldrb	r1, [r3, #0]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	0018      	movs	r0, r3
 8013670:	f000 f809 	bl	8013686 <USBD_FrameWork_AddToConfDesc>
 8013674:	1e03      	subs	r3, r0, #0
 8013676:	d001      	beq.n	801367c <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 8013678:	23ff      	movs	r3, #255	; 0xff
 801367a:	e000      	b.n	801367e <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 801367c:	2300      	movs	r3, #0
}
 801367e:	0018      	movs	r0, r3
 8013680:	46bd      	mov	sp, r7
 8013682:	b003      	add	sp, #12
 8013684:	bd90      	pop	{r4, r7, pc}

08013686 <USBD_FrameWork_AddToConfDesc>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 8013686:	b5b0      	push	{r4, r5, r7, lr}
 8013688:	b086      	sub	sp, #24
 801368a:	af00      	add	r7, sp, #0
 801368c:	60f8      	str	r0, [r7, #12]
 801368e:	607a      	str	r2, [r7, #4]
 8013690:	200b      	movs	r0, #11
 8013692:	183b      	adds	r3, r7, r0
 8013694:	1c0a      	adds	r2, r1, #0
 8013696:	701a      	strb	r2, [r3, #0]
  uint8_t interface = 0U;
 8013698:	2317      	movs	r3, #23
 801369a:	18fb      	adds	r3, r7, r3
 801369c:	2200      	movs	r2, #0
 801369e:	701a      	strb	r2, [r3, #0]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	183a      	adds	r2, r7, r0
 80136a4:	7812      	ldrb	r2, [r2, #0]
 80136a6:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d107      	bne.n	80136c0 <USBD_FrameWork_AddToConfDesc+0x3a>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	3319      	adds	r3, #25
 80136b6:	33ff      	adds	r3, #255	; 0xff
 80136b8:	0019      	movs	r1, r3
 80136ba:	0010      	movs	r0, r2
 80136bc:	f000 f8a3 	bl	8013806 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	68fa      	ldr	r2, [r7, #12]
 80136c6:	2158      	movs	r1, #88	; 0x58
 80136c8:	434b      	muls	r3, r1
 80136ca:	18d3      	adds	r3, r2, r3
 80136cc:	330c      	adds	r3, #12
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	2b02      	cmp	r3, #2
 80136d2:	d168      	bne.n	80137a6 <USBD_FrameWork_AddToConfDesc+0x120>

#if USBD_CDC_ACM_CLASS_ACTIVATED == 1
    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 80136d4:	2517      	movs	r5, #23
 80136d6:	197c      	adds	r4, r7, r5
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	0018      	movs	r0, r3
 80136dc:	f000 f869 	bl	80137b2 <USBD_FrameWork_FindFreeIFNbr>
 80136e0:	0003      	movs	r3, r0
 80136e2:	7023      	strb	r3, [r4, #0]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	68fa      	ldr	r2, [r7, #12]
 80136ea:	2158      	movs	r1, #88	; 0x58
 80136ec:	434b      	muls	r3, r1
 80136ee:	18d3      	adds	r3, r2, r3
 80136f0:	3354      	adds	r3, #84	; 0x54
 80136f2:	2202      	movs	r2, #2
 80136f4:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	68fa      	ldr	r2, [r7, #12]
 80136fc:	2158      	movs	r1, #88	; 0x58
 80136fe:	2058      	movs	r0, #88	; 0x58
 8013700:	4343      	muls	r3, r0
 8013702:	18d3      	adds	r3, r2, r3
 8013704:	185b      	adds	r3, r3, r1
 8013706:	197a      	adds	r2, r7, r5
 8013708:	7812      	ldrb	r2, [r2, #0]
 801370a:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	197a      	adds	r2, r7, r5
 8013712:	7812      	ldrb	r2, [r2, #0]
 8013714:	3201      	adds	r2, #1
 8013716:	b2d4      	uxtb	r4, r2
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	2159      	movs	r1, #89	; 0x59
 801371c:	2058      	movs	r0, #88	; 0x58
 801371e:	4343      	muls	r3, r0
 8013720:	18d3      	adds	r3, r2, r3
 8013722:	185b      	adds	r3, r3, r1
 8013724:	1c22      	adds	r2, r4, #0
 8013726:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	685b      	ldr	r3, [r3, #4]
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	2158      	movs	r1, #88	; 0x58
 8013730:	434b      	muls	r3, r1
 8013732:	18d3      	adds	r3, r2, r3
 8013734:	3318      	adds	r3, #24
 8013736:	2203      	movs	r2, #3
 8013738:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 801373a:	230b      	movs	r3, #11
 801373c:	18fb      	adds	r3, r7, r3
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	2b01      	cmp	r3, #1
 8013742:	d114      	bne.n	801376e <USBD_FrameWork_AddToConfDesc+0xe8>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8013744:	2380      	movs	r3, #128	; 0x80
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	2202      	movs	r2, #2
 801374c:	2101      	movs	r1, #1
 801374e:	f000 f889 	bl	8013864 <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8013752:	2380      	movs	r3, #128	; 0x80
 8013754:	009b      	lsls	r3, r3, #2
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	2202      	movs	r2, #2
 801375a:	2181      	movs	r1, #129	; 0x81
 801375c:	f000 f882 	bl	8013864 <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR, USBD_EP_TYPE_INTR,
 8013760:	68f8      	ldr	r0, [r7, #12]
 8013762:	2308      	movs	r3, #8
 8013764:	2203      	movs	r2, #3
 8013766:	2182      	movs	r1, #130	; 0x82
 8013768:	f000 f87c 	bl	8013864 <USBD_FrameWork_AssignEp>
 801376c:	e011      	b.n	8013792 <USBD_FrameWork_AddToConfDesc+0x10c>
                                USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	2340      	movs	r3, #64	; 0x40
 8013772:	2202      	movs	r2, #2
 8013774:	2101      	movs	r1, #1
 8013776:	f000 f875 	bl	8013864 <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR, USBD_EP_TYPE_BULK,
 801377a:	68f8      	ldr	r0, [r7, #12]
 801377c:	2340      	movs	r3, #64	; 0x40
 801377e:	2202      	movs	r2, #2
 8013780:	2181      	movs	r1, #129	; 0x81
 8013782:	f000 f86f 	bl	8013864 <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR, USBD_EP_TYPE_INTR,
 8013786:	68f8      	ldr	r0, [r7, #12]
 8013788:	2308      	movs	r3, #8
 801378a:	2203      	movs	r2, #3
 801378c:	2182      	movs	r1, #130	; 0x82
 801378e:	f000 f869 	bl	8013864 <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8013792:	6879      	ldr	r1, [r7, #4]
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	3319      	adds	r3, #25
 8013798:	33ff      	adds	r3, #255	; 0xff
 801379a:	001a      	movs	r2, r3
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	0018      	movs	r0, r3
 80137a0:	f000 f8d8 	bl	8013954 <USBD_FrameWork_CDCDesc>

      break;
 80137a4:	e000      	b.n	80137a8 <USBD_FrameWork_AddToConfDesc+0x122>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 80137a6:	46c0      	nop			; (mov r8, r8)
  }

  return UX_SUCCESS;
 80137a8:	2300      	movs	r3, #0
}
 80137aa:	0018      	movs	r0, r3
 80137ac:	46bd      	mov	sp, r7
 80137ae:	b006      	add	sp, #24
 80137b0:	bdb0      	pop	{r4, r5, r7, pc}

080137b2 <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 80137b2:	b580      	push	{r7, lr}
 80137b4:	b086      	sub	sp, #24
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 80137ba:	2300      	movs	r3, #0
 80137bc:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80137be:	2300      	movs	r3, #0
 80137c0:	613b      	str	r3, [r7, #16]
 80137c2:	e015      	b.n	80137f0 <USBD_FrameWork_FindFreeIFNbr+0x3e>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80137c4:	2300      	movs	r3, #0
 80137c6:	60fb      	str	r3, [r7, #12]
 80137c8:	e005      	b.n	80137d6 <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	3301      	adds	r3, #1
 80137ce:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	3301      	adds	r3, #1
 80137d4:	60fb      	str	r3, [r7, #12]
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	693b      	ldr	r3, [r7, #16]
 80137da:	2158      	movs	r1, #88	; 0x58
 80137dc:	434b      	muls	r3, r1
 80137de:	18d3      	adds	r3, r2, r3
 80137e0:	3354      	adds	r3, #84	; 0x54
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	68fa      	ldr	r2, [r7, #12]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d3ef      	bcc.n	80137ca <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	3301      	adds	r3, #1
 80137ee:	613b      	str	r3, [r7, #16]
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	689b      	ldr	r3, [r3, #8]
 80137f4:	693a      	ldr	r2, [r7, #16]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d3e4      	bcc.n	80137c4 <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	b2db      	uxtb	r3, r3
}
 80137fe:	0018      	movs	r0, r3
 8013800:	46bd      	mov	sp, r7
 8013802:	b006      	add	sp, #24
 8013804:	bd80      	pop	{r7, pc}

08013806 <USBD_FrameWork_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 8013806:	b580      	push	{r7, lr}
 8013808:	b084      	sub	sp, #16
 801380a:	af00      	add	r7, sp, #0
 801380c:	6078      	str	r0, [r7, #4]
 801380e:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	60fb      	str	r3, [r7, #12]

  ptr->bLength                = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2209      	movs	r2, #9
 8013818:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType        = USB_DESC_TYPE_CONFIGURATION;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2202      	movs	r2, #2
 801381e:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength      = 0U;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	789a      	ldrb	r2, [r3, #2]
 8013824:	2100      	movs	r1, #0
 8013826:	400a      	ands	r2, r1
 8013828:	709a      	strb	r2, [r3, #2]
 801382a:	78da      	ldrb	r2, [r3, #3]
 801382c:	2100      	movs	r1, #0
 801382e:	400a      	ands	r2, r1
 8013830:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces         = 0U;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	2200      	movs	r2, #0
 8013836:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue    = 1U;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	2201      	movs	r2, #1
 801383c:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration         = USBD_CONFIG_STR_DESC_IDX;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2200      	movs	r2, #0
 8013842:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes           = USBD_CONFIG_BMATTRIBUTES;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	22c0      	movs	r2, #192	; 0xc0
 8013848:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower              = USBD_CONFIG_MAXPOWER;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2219      	movs	r2, #25
 801384e:	721a      	strb	r2, [r3, #8]
  *pSze                       += sizeof(USBD_ConfigDescTypedef);
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	3309      	adds	r3, #9
 8013856:	001a      	movs	r2, r3
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	601a      	str	r2, [r3, #0]
}
 801385c:	46c0      	nop			; (mov r8, r8)
 801385e:	46bd      	mov	sp, r7
 8013860:	b004      	add	sp, #16
 8013862:	bd80      	pop	{r7, pc}

08013864 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8013864:	b590      	push	{r4, r7, lr}
 8013866:	b087      	sub	sp, #28
 8013868:	af00      	add	r7, sp, #0
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	0008      	movs	r0, r1
 801386e:	0011      	movs	r1, r2
 8013870:	607b      	str	r3, [r7, #4]
 8013872:	230b      	movs	r3, #11
 8013874:	18fb      	adds	r3, r7, r3
 8013876:	1c02      	adds	r2, r0, #0
 8013878:	701a      	strb	r2, [r3, #0]
 801387a:	230a      	movs	r3, #10
 801387c:	18fb      	adds	r3, r7, r3
 801387e:	1c0a      	adds	r2, r1, #0
 8013880:	701a      	strb	r2, [r3, #0]
  uint32_t idx = 0U;
 8013882:	2300      	movs	r3, #0
 8013884:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8013886:	e002      	b.n	801388e <USBD_FrameWork_AssignEp+0x2a>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	3301      	adds	r3, #1
 801388c:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	68fa      	ldr	r2, [r7, #12]
 8013894:	2158      	movs	r1, #88	; 0x58
 8013896:	434b      	muls	r3, r1
 8013898:	18d3      	adds	r3, r2, r3
 801389a:	3318      	adds	r3, #24
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d210      	bcs.n	80138c6 <USBD_FrameWork_AssignEp+0x62>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	6858      	ldr	r0, [r3, #4]
 80138a8:	68f9      	ldr	r1, [r7, #12]
 80138aa:	697a      	ldr	r2, [r7, #20]
 80138ac:	2420      	movs	r4, #32
 80138ae:	0013      	movs	r3, r2
 80138b0:	005b      	lsls	r3, r3, #1
 80138b2:	189b      	adds	r3, r3, r2
 80138b4:	005b      	lsls	r3, r3, #1
 80138b6:	2258      	movs	r2, #88	; 0x58
 80138b8:	4342      	muls	r2, r0
 80138ba:	189b      	adds	r3, r3, r2
 80138bc:	18cb      	adds	r3, r1, r3
 80138be:	191b      	adds	r3, r3, r4
 80138c0:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d1e0      	bne.n	8013888 <USBD_FrameWork_AssignEp+0x24>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	6858      	ldr	r0, [r3, #4]
 80138ca:	68f9      	ldr	r1, [r7, #12]
 80138cc:	697a      	ldr	r2, [r7, #20]
 80138ce:	0013      	movs	r3, r2
 80138d0:	005b      	lsls	r3, r3, #1
 80138d2:	189b      	adds	r3, r3, r2
 80138d4:	005b      	lsls	r3, r3, #1
 80138d6:	2258      	movs	r2, #88	; 0x58
 80138d8:	4342      	muls	r2, r0
 80138da:	189b      	adds	r3, r3, r2
 80138dc:	18cb      	adds	r3, r1, r3
 80138de:	331c      	adds	r3, #28
 80138e0:	220b      	movs	r2, #11
 80138e2:	18ba      	adds	r2, r7, r2
 80138e4:	7812      	ldrb	r2, [r2, #0]
 80138e6:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	6858      	ldr	r0, [r3, #4]
 80138ec:	68f9      	ldr	r1, [r7, #12]
 80138ee:	697a      	ldr	r2, [r7, #20]
 80138f0:	0013      	movs	r3, r2
 80138f2:	005b      	lsls	r3, r3, #1
 80138f4:	189b      	adds	r3, r3, r2
 80138f6:	005b      	lsls	r3, r3, #1
 80138f8:	2258      	movs	r2, #88	; 0x58
 80138fa:	4342      	muls	r2, r0
 80138fc:	189b      	adds	r3, r3, r2
 80138fe:	18cb      	adds	r3, r1, r3
 8013900:	331d      	adds	r3, #29
 8013902:	220a      	movs	r2, #10
 8013904:	18ba      	adds	r2, r7, r2
 8013906:	7812      	ldrb	r2, [r2, #0]
 8013908:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	6858      	ldr	r0, [r3, #4]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	b29c      	uxth	r4, r3
 8013912:	68f9      	ldr	r1, [r7, #12]
 8013914:	697a      	ldr	r2, [r7, #20]
 8013916:	0013      	movs	r3, r2
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	189b      	adds	r3, r3, r2
 801391c:	005b      	lsls	r3, r3, #1
 801391e:	2258      	movs	r2, #88	; 0x58
 8013920:	4342      	muls	r2, r0
 8013922:	189b      	adds	r3, r3, r2
 8013924:	18cb      	adds	r3, r1, r3
 8013926:	331e      	adds	r3, #30
 8013928:	1c22      	adds	r2, r4, #0
 801392a:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6858      	ldr	r0, [r3, #4]
 8013930:	68f9      	ldr	r1, [r7, #12]
 8013932:	697a      	ldr	r2, [r7, #20]
 8013934:	2420      	movs	r4, #32
 8013936:	0013      	movs	r3, r2
 8013938:	005b      	lsls	r3, r3, #1
 801393a:	189b      	adds	r3, r3, r2
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	2258      	movs	r2, #88	; 0x58
 8013940:	4342      	muls	r2, r0
 8013942:	189b      	adds	r3, r3, r2
 8013944:	18cb      	adds	r3, r1, r3
 8013946:	191b      	adds	r3, r3, r4
 8013948:	2201      	movs	r2, #1
 801394a:	701a      	strb	r2, [r3, #0]
}
 801394c:	46c0      	nop			; (mov r8, r8)
 801394e:	46bd      	mov	sp, r7
 8013950:	b007      	add	sp, #28
 8013952:	bd90      	pop	{r4, r7, pc}

08013954 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 8013954:	b590      	push	{r4, r7, lr}
 8013956:	b085      	sub	sp, #20
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypedef *)(pConf + *Sze));
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	18d3      	adds	r3, r2, r3
 8013968:	001a      	movs	r2, r3
 801396a:	4be8      	ldr	r3, [pc, #928]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 801396c:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypedef);
 801396e:	4be7      	ldr	r3, [pc, #924]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	2208      	movs	r2, #8
 8013974:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8013976:	4be5      	ldr	r3, [pc, #916]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	220b      	movs	r2, #11
 801397c:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	685a      	ldr	r2, [r3, #4]
 8013982:	4be2      	ldr	r3, [pc, #904]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	68f9      	ldr	r1, [r7, #12]
 8013988:	2058      	movs	r0, #88	; 0x58
 801398a:	2458      	movs	r4, #88	; 0x58
 801398c:	4362      	muls	r2, r4
 801398e:	188a      	adds	r2, r1, r2
 8013990:	1812      	adds	r2, r2, r0
 8013992:	7812      	ldrb	r2, [r2, #0]
 8013994:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2;    /* 2 interfaces */
 8013996:	4bdd      	ldr	r3, [pc, #884]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2202      	movs	r2, #2
 801399c:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02;
 801399e:	4bdb      	ldr	r3, [pc, #876]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2202      	movs	r2, #2
 80139a4:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02;
 80139a6:	4bd9      	ldr	r3, [pc, #868]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2202      	movs	r2, #2
 80139ac:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01;
 80139ae:	4bd7      	ldr	r3, [pc, #860]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	2201      	movs	r2, #1
 80139b4:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0; /* String Index */
 80139b6:	4bd5      	ldr	r3, [pc, #852]	; (8013d0c <USBD_FrameWork_CDCDesc+0x3b8>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	2200      	movs	r2, #0
 80139bc:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypedef);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	3308      	adds	r3, #8
 80139c4:	001a      	movs	r2, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	18d3      	adds	r3, r2, r3
 80139d2:	001a      	movs	r2, r3
 80139d4:	4bce      	ldr	r3, [pc, #824]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	4bcd      	ldr	r3, [pc, #820]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	2209      	movs	r2, #9
 80139de:	701a      	strb	r2, [r3, #0]
 80139e0:	4bcb      	ldr	r3, [pc, #812]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	2204      	movs	r2, #4
 80139e6:	705a      	strb	r2, [r3, #1]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	685a      	ldr	r2, [r3, #4]
 80139ec:	4bc8      	ldr	r3, [pc, #800]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	68f9      	ldr	r1, [r7, #12]
 80139f2:	2058      	movs	r0, #88	; 0x58
 80139f4:	2458      	movs	r4, #88	; 0x58
 80139f6:	4362      	muls	r2, r4
 80139f8:	188a      	adds	r2, r1, r2
 80139fa:	1812      	adds	r2, r2, r0
 80139fc:	7812      	ldrb	r2, [r2, #0]
 80139fe:	709a      	strb	r2, [r3, #2]
 8013a00:	4bc3      	ldr	r3, [pc, #780]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2200      	movs	r2, #0
 8013a06:	70da      	strb	r2, [r3, #3]
 8013a08:	4bc1      	ldr	r3, [pc, #772]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	711a      	strb	r2, [r3, #4]
 8013a10:	4bbf      	ldr	r3, [pc, #764]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2202      	movs	r2, #2
 8013a16:	715a      	strb	r2, [r3, #5]
 8013a18:	4bbd      	ldr	r3, [pc, #756]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	2202      	movs	r2, #2
 8013a1e:	719a      	strb	r2, [r3, #6]
 8013a20:	4bbb      	ldr	r3, [pc, #748]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2201      	movs	r2, #1
 8013a26:	71da      	strb	r2, [r3, #7]
 8013a28:	4bb9      	ldr	r3, [pc, #740]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	721a      	strb	r2, [r3, #8]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	3309      	adds	r3, #9
 8013a36:	001a      	movs	r2, r3
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	18d3      	adds	r3, r2, r3
 8013a44:	001a      	movs	r2, r3
 8013a46:	4bb3      	ldr	r3, [pc, #716]	; (8013d14 <USBD_FrameWork_CDCDesc+0x3c0>)
 8013a48:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05;
 8013a4a:	4bb2      	ldr	r3, [pc, #712]	; (8013d14 <USBD_FrameWork_CDCDesc+0x3c0>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2205      	movs	r2, #5
 8013a50:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24;
 8013a52:	4bb0      	ldr	r3, [pc, #704]	; (8013d14 <USBD_FrameWork_CDCDesc+0x3c0>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2224      	movs	r2, #36	; 0x24
 8013a58:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00;
 8013a5a:	4bae      	ldr	r3, [pc, #696]	; (8013d14 <USBD_FrameWork_CDCDesc+0x3c0>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 8013a62:	4bac      	ldr	r3, [pc, #688]	; (8013d14 <USBD_FrameWork_CDCDesc+0x3c0>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	3303      	adds	r3, #3
 8013a68:	781a      	ldrb	r2, [r3, #0]
 8013a6a:	2100      	movs	r1, #0
 8013a6c:	400a      	ands	r2, r1
 8013a6e:	1c11      	adds	r1, r2, #0
 8013a70:	2210      	movs	r2, #16
 8013a72:	430a      	orrs	r2, r1
 8013a74:	701a      	strb	r2, [r3, #0]
 8013a76:	785a      	ldrb	r2, [r3, #1]
 8013a78:	2100      	movs	r1, #0
 8013a7a:	400a      	ands	r2, r1
 8013a7c:	1c11      	adds	r1, r2, #0
 8013a7e:	2201      	movs	r2, #1
 8013a80:	430a      	orrs	r2, r1
 8013a82:	705a      	strb	r2, [r3, #1]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	1d5a      	adds	r2, r3, #5
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	18d3      	adds	r3, r2, r3
 8013a96:	001a      	movs	r2, r3
 8013a98:	4b9f      	ldr	r3, [pc, #636]	; (8013d18 <USBD_FrameWork_CDCDesc+0x3c4>)
 8013a9a:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05;
 8013a9c:	4b9e      	ldr	r3, [pc, #632]	; (8013d18 <USBD_FrameWork_CDCDesc+0x3c4>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2205      	movs	r2, #5
 8013aa2:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24;
 8013aa4:	4b9c      	ldr	r3, [pc, #624]	; (8013d18 <USBD_FrameWork_CDCDesc+0x3c4>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2224      	movs	r2, #36	; 0x24
 8013aaa:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01;
 8013aac:	4b9a      	ldr	r3, [pc, #616]	; (8013d18 <USBD_FrameWork_CDCDesc+0x3c4>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00;
 8013ab4:	4b98      	ldr	r3, [pc, #608]	; (8013d18 <USBD_FrameWork_CDCDesc+0x3c4>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	685a      	ldr	r2, [r3, #4]
 8013ac0:	4b95      	ldr	r3, [pc, #596]	; (8013d18 <USBD_FrameWork_CDCDesc+0x3c4>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	68f9      	ldr	r1, [r7, #12]
 8013ac6:	2059      	movs	r0, #89	; 0x59
 8013ac8:	2458      	movs	r4, #88	; 0x58
 8013aca:	4362      	muls	r2, r4
 8013acc:	188a      	adds	r2, r1, r2
 8013ace:	1812      	adds	r2, r2, r0
 8013ad0:	7812      	ldrb	r2, [r2, #0]
 8013ad2:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	1d5a      	adds	r2, r3, #5
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	18d3      	adds	r3, r2, r3
 8013ae6:	001a      	movs	r2, r3
 8013ae8:	4b8c      	ldr	r3, [pc, #560]	; (8013d1c <USBD_FrameWork_CDCDesc+0x3c8>)
 8013aea:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04;
 8013aec:	4b8b      	ldr	r3, [pc, #556]	; (8013d1c <USBD_FrameWork_CDCDesc+0x3c8>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2204      	movs	r2, #4
 8013af2:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24;
 8013af4:	4b89      	ldr	r3, [pc, #548]	; (8013d1c <USBD_FrameWork_CDCDesc+0x3c8>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2224      	movs	r2, #36	; 0x24
 8013afa:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02;
 8013afc:	4b87      	ldr	r3, [pc, #540]	; (8013d1c <USBD_FrameWork_CDCDesc+0x3c8>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2202      	movs	r2, #2
 8013b02:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8013b04:	4b85      	ldr	r3, [pc, #532]	; (8013d1c <USBD_FrameWork_CDCDesc+0x3c8>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	2202      	movs	r2, #2
 8013b0a:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	1d1a      	adds	r2, r3, #4
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	18d3      	adds	r3, r2, r3
 8013b1e:	001a      	movs	r2, r3
 8013b20:	4b7f      	ldr	r3, [pc, #508]	; (8013d20 <USBD_FrameWork_CDCDesc+0x3cc>)
 8013b22:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05;
 8013b24:	4b7e      	ldr	r3, [pc, #504]	; (8013d20 <USBD_FrameWork_CDCDesc+0x3cc>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2205      	movs	r2, #5
 8013b2a:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24;
 8013b2c:	4b7c      	ldr	r3, [pc, #496]	; (8013d20 <USBD_FrameWork_CDCDesc+0x3cc>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2224      	movs	r2, #36	; 0x24
 8013b32:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06;
 8013b34:	4b7a      	ldr	r3, [pc, #488]	; (8013d20 <USBD_FrameWork_CDCDesc+0x3cc>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	2206      	movs	r2, #6
 8013b3a:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	685a      	ldr	r2, [r3, #4]
 8013b40:	4b77      	ldr	r3, [pc, #476]	; (8013d20 <USBD_FrameWork_CDCDesc+0x3cc>)
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	68f9      	ldr	r1, [r7, #12]
 8013b46:	2058      	movs	r0, #88	; 0x58
 8013b48:	2458      	movs	r4, #88	; 0x58
 8013b4a:	4362      	muls	r2, r4
 8013b4c:	188a      	adds	r2, r1, r2
 8013b4e:	1812      	adds	r2, r2, r0
 8013b50:	7812      	ldrb	r2, [r2, #0]
 8013b52:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	685a      	ldr	r2, [r3, #4]
 8013b58:	4b71      	ldr	r3, [pc, #452]	; (8013d20 <USBD_FrameWork_CDCDesc+0x3cc>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	68f9      	ldr	r1, [r7, #12]
 8013b5e:	2059      	movs	r0, #89	; 0x59
 8013b60:	2458      	movs	r4, #88	; 0x58
 8013b62:	4362      	muls	r2, r4
 8013b64:	188a      	adds	r2, r1, r2
 8013b66:	1812      	adds	r2, r2, r0
 8013b68:	7812      	ldrb	r2, [r2, #0]
 8013b6a:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	1d5a      	adds	r2, r3, #5
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	18d3      	adds	r3, r2, r3
 8013b7e:	001a      	movs	r2, r3
 8013b80:	4b68      	ldr	r3, [pc, #416]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013b82:	601a      	str	r2, [r3, #0]
 8013b84:	4b67      	ldr	r3, [pc, #412]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2207      	movs	r2, #7
 8013b8a:	701a      	strb	r2, [r3, #0]
 8013b8c:	4b65      	ldr	r3, [pc, #404]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2205      	movs	r2, #5
 8013b92:	705a      	strb	r2, [r3, #1]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	685a      	ldr	r2, [r3, #4]
 8013b98:	4b62      	ldr	r3, [pc, #392]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	68f9      	ldr	r1, [r7, #12]
 8013b9e:	2028      	movs	r0, #40	; 0x28
 8013ba0:	2458      	movs	r4, #88	; 0x58
 8013ba2:	4362      	muls	r2, r4
 8013ba4:	188a      	adds	r2, r1, r2
 8013ba6:	1812      	adds	r2, r2, r0
 8013ba8:	7812      	ldrb	r2, [r2, #0]
 8013baa:	709a      	strb	r2, [r3, #2]
 8013bac:	4b5d      	ldr	r3, [pc, #372]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	2203      	movs	r2, #3
 8013bb2:	70da      	strb	r2, [r3, #3]
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	685a      	ldr	r2, [r3, #4]
 8013bb8:	4b5a      	ldr	r3, [pc, #360]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	68f9      	ldr	r1, [r7, #12]
 8013bbe:	2058      	movs	r0, #88	; 0x58
 8013bc0:	4342      	muls	r2, r0
 8013bc2:	188a      	adds	r2, r1, r2
 8013bc4:	322a      	adds	r2, #42	; 0x2a
 8013bc6:	8812      	ldrh	r2, [r2, #0]
 8013bc8:	21ff      	movs	r1, #255	; 0xff
 8013bca:	4011      	ands	r1, r2
 8013bcc:	000c      	movs	r4, r1
 8013bce:	7919      	ldrb	r1, [r3, #4]
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	4001      	ands	r1, r0
 8013bd4:	1c08      	adds	r0, r1, #0
 8013bd6:	1c21      	adds	r1, r4, #0
 8013bd8:	4301      	orrs	r1, r0
 8013bda:	7119      	strb	r1, [r3, #4]
 8013bdc:	0a12      	lsrs	r2, r2, #8
 8013bde:	b290      	uxth	r0, r2
 8013be0:	795a      	ldrb	r2, [r3, #5]
 8013be2:	2100      	movs	r1, #0
 8013be4:	400a      	ands	r2, r1
 8013be6:	1c11      	adds	r1, r2, #0
 8013be8:	1c02      	adds	r2, r0, #0
 8013bea:	430a      	orrs	r2, r1
 8013bec:	715a      	strb	r2, [r3, #5]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d104      	bne.n	8013c00 <USBD_FrameWork_CDCDesc+0x2ac>
 8013bf6:	4b4b      	ldr	r3, [pc, #300]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2205      	movs	r2, #5
 8013bfc:	719a      	strb	r2, [r3, #6]
 8013bfe:	e003      	b.n	8013c08 <USBD_FrameWork_CDCDesc+0x2b4>
 8013c00:	4b48      	ldr	r3, [pc, #288]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2205      	movs	r2, #5
 8013c06:	719a      	strb	r2, [r3, #6]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	1dda      	adds	r2, r3, #7
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	18d3      	adds	r3, r2, r3
 8013c1a:	001a      	movs	r2, r3
 8013c1c:	4b3c      	ldr	r3, [pc, #240]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c1e:	601a      	str	r2, [r3, #0]
 8013c20:	4b3b      	ldr	r3, [pc, #236]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2209      	movs	r2, #9
 8013c26:	701a      	strb	r2, [r3, #0]
 8013c28:	4b39      	ldr	r3, [pc, #228]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2204      	movs	r2, #4
 8013c2e:	705a      	strb	r2, [r3, #1]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	685a      	ldr	r2, [r3, #4]
 8013c34:	4b36      	ldr	r3, [pc, #216]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	68f9      	ldr	r1, [r7, #12]
 8013c3a:	2059      	movs	r0, #89	; 0x59
 8013c3c:	2458      	movs	r4, #88	; 0x58
 8013c3e:	4362      	muls	r2, r4
 8013c40:	188a      	adds	r2, r1, r2
 8013c42:	1812      	adds	r2, r2, r0
 8013c44:	7812      	ldrb	r2, [r2, #0]
 8013c46:	709a      	strb	r2, [r3, #2]
 8013c48:	4b31      	ldr	r3, [pc, #196]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	70da      	strb	r2, [r3, #3]
 8013c50:	4b2f      	ldr	r3, [pc, #188]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	2202      	movs	r2, #2
 8013c56:	711a      	strb	r2, [r3, #4]
 8013c58:	4b2d      	ldr	r3, [pc, #180]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	220a      	movs	r2, #10
 8013c5e:	715a      	strb	r2, [r3, #5]
 8013c60:	4b2b      	ldr	r3, [pc, #172]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2200      	movs	r2, #0
 8013c66:	719a      	strb	r2, [r3, #6]
 8013c68:	4b29      	ldr	r3, [pc, #164]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	71da      	strb	r2, [r3, #7]
 8013c70:	4b27      	ldr	r3, [pc, #156]	; (8013d10 <USBD_FrameWork_CDCDesc+0x3bc>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2200      	movs	r2, #0
 8013c76:	721a      	strb	r2, [r3, #8]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	3309      	adds	r3, #9
 8013c7e:	001a      	movs	r2, r3
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	18d3      	adds	r3, r2, r3
 8013c8c:	001a      	movs	r2, r3
 8013c8e:	4b25      	ldr	r3, [pc, #148]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013c90:	601a      	str	r2, [r3, #0]
 8013c92:	4b24      	ldr	r3, [pc, #144]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2207      	movs	r2, #7
 8013c98:	701a      	strb	r2, [r3, #0]
 8013c9a:	4b22      	ldr	r3, [pc, #136]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2205      	movs	r2, #5
 8013ca0:	705a      	strb	r2, [r3, #1]
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	685a      	ldr	r2, [r3, #4]
 8013ca6:	4b1f      	ldr	r3, [pc, #124]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	68f9      	ldr	r1, [r7, #12]
 8013cac:	2058      	movs	r0, #88	; 0x58
 8013cae:	4342      	muls	r2, r0
 8013cb0:	188a      	adds	r2, r1, r2
 8013cb2:	321c      	adds	r2, #28
 8013cb4:	7812      	ldrb	r2, [r2, #0]
 8013cb6:	709a      	strb	r2, [r3, #2]
 8013cb8:	4b1a      	ldr	r3, [pc, #104]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2202      	movs	r2, #2
 8013cbe:	70da      	strb	r2, [r3, #3]
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	685a      	ldr	r2, [r3, #4]
 8013cc4:	4b17      	ldr	r3, [pc, #92]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	68f9      	ldr	r1, [r7, #12]
 8013cca:	2058      	movs	r0, #88	; 0x58
 8013ccc:	4342      	muls	r2, r0
 8013cce:	188a      	adds	r2, r1, r2
 8013cd0:	321e      	adds	r2, #30
 8013cd2:	8812      	ldrh	r2, [r2, #0]
 8013cd4:	21ff      	movs	r1, #255	; 0xff
 8013cd6:	4011      	ands	r1, r2
 8013cd8:	000c      	movs	r4, r1
 8013cda:	7919      	ldrb	r1, [r3, #4]
 8013cdc:	2000      	movs	r0, #0
 8013cde:	4001      	ands	r1, r0
 8013ce0:	1c08      	adds	r0, r1, #0
 8013ce2:	1c21      	adds	r1, r4, #0
 8013ce4:	4301      	orrs	r1, r0
 8013ce6:	7119      	strb	r1, [r3, #4]
 8013ce8:	0a12      	lsrs	r2, r2, #8
 8013cea:	b290      	uxth	r0, r2
 8013cec:	795a      	ldrb	r2, [r3, #5]
 8013cee:	2100      	movs	r1, #0
 8013cf0:	400a      	ands	r2, r1
 8013cf2:	1c11      	adds	r1, r2, #0
 8013cf4:	1c02      	adds	r2, r0, #0
 8013cf6:	430a      	orrs	r2, r1
 8013cf8:	715a      	strb	r2, [r3, #5]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	2b01      	cmp	r3, #1
 8013d00:	d112      	bne.n	8013d28 <USBD_FrameWork_CDCDesc+0x3d4>
 8013d02:	4b08      	ldr	r3, [pc, #32]	; (8013d24 <USBD_FrameWork_CDCDesc+0x3d0>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2200      	movs	r2, #0
 8013d08:	719a      	strb	r2, [r3, #6]
 8013d0a:	e011      	b.n	8013d30 <USBD_FrameWork_CDCDesc+0x3dc>
 8013d0c:	20005570 	.word	0x20005570
 8013d10:	20005574 	.word	0x20005574
 8013d14:	20005578 	.word	0x20005578
 8013d18:	2000557c 	.word	0x2000557c
 8013d1c:	20005580 	.word	0x20005580
 8013d20:	20005584 	.word	0x20005584
 8013d24:	20005588 	.word	0x20005588
 8013d28:	4b3b      	ldr	r3, [pc, #236]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	719a      	strb	r2, [r3, #6]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	1dda      	adds	r2, r3, #7
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681a      	ldr	r2, [r3, #0]
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	18d3      	adds	r3, r2, r3
 8013d42:	001a      	movs	r2, r3
 8013d44:	4b34      	ldr	r3, [pc, #208]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013d46:	601a      	str	r2, [r3, #0]
 8013d48:	4b33      	ldr	r3, [pc, #204]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	2207      	movs	r2, #7
 8013d4e:	701a      	strb	r2, [r3, #0]
 8013d50:	4b31      	ldr	r3, [pc, #196]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2205      	movs	r2, #5
 8013d56:	705a      	strb	r2, [r3, #1]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	685a      	ldr	r2, [r3, #4]
 8013d5c:	4b2e      	ldr	r3, [pc, #184]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	68f9      	ldr	r1, [r7, #12]
 8013d62:	2022      	movs	r0, #34	; 0x22
 8013d64:	2458      	movs	r4, #88	; 0x58
 8013d66:	4362      	muls	r2, r4
 8013d68:	188a      	adds	r2, r1, r2
 8013d6a:	1812      	adds	r2, r2, r0
 8013d6c:	7812      	ldrb	r2, [r2, #0]
 8013d6e:	709a      	strb	r2, [r3, #2]
 8013d70:	4b29      	ldr	r3, [pc, #164]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	2202      	movs	r2, #2
 8013d76:	70da      	strb	r2, [r3, #3]
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	685a      	ldr	r2, [r3, #4]
 8013d7c:	4b26      	ldr	r3, [pc, #152]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	68f9      	ldr	r1, [r7, #12]
 8013d82:	2058      	movs	r0, #88	; 0x58
 8013d84:	4342      	muls	r2, r0
 8013d86:	188a      	adds	r2, r1, r2
 8013d88:	3224      	adds	r2, #36	; 0x24
 8013d8a:	8812      	ldrh	r2, [r2, #0]
 8013d8c:	21ff      	movs	r1, #255	; 0xff
 8013d8e:	4011      	ands	r1, r2
 8013d90:	000c      	movs	r4, r1
 8013d92:	7919      	ldrb	r1, [r3, #4]
 8013d94:	2000      	movs	r0, #0
 8013d96:	4001      	ands	r1, r0
 8013d98:	1c08      	adds	r0, r1, #0
 8013d9a:	1c21      	adds	r1, r4, #0
 8013d9c:	4301      	orrs	r1, r0
 8013d9e:	7119      	strb	r1, [r3, #4]
 8013da0:	0a12      	lsrs	r2, r2, #8
 8013da2:	b290      	uxth	r0, r2
 8013da4:	795a      	ldrb	r2, [r3, #5]
 8013da6:	2100      	movs	r1, #0
 8013da8:	400a      	ands	r2, r1
 8013daa:	1c11      	adds	r1, r2, #0
 8013dac:	1c02      	adds	r2, r0, #0
 8013dae:	430a      	orrs	r2, r1
 8013db0:	715a      	strb	r2, [r3, #5]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	2b01      	cmp	r3, #1
 8013db8:	d104      	bne.n	8013dc4 <USBD_FrameWork_CDCDesc+0x470>
 8013dba:	4b17      	ldr	r3, [pc, #92]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	719a      	strb	r2, [r3, #6]
 8013dc2:	e003      	b.n	8013dcc <USBD_FrameWork_CDCDesc+0x478>
 8013dc4:	4b14      	ldr	r3, [pc, #80]	; (8013e18 <USBD_FrameWork_CDCDesc+0x4c4>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	719a      	strb	r2, [r3, #6]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	1dda      	adds	r2, r3, #7
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 8013dd6:	68bb      	ldr	r3, [r7, #8]
 8013dd8:	791a      	ldrb	r2, [r3, #4]
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	3202      	adds	r2, #2
 8013dde:	b2d2      	uxtb	r2, r2
 8013de0:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	b292      	uxth	r2, r2
 8013dea:	21ff      	movs	r1, #255	; 0xff
 8013dec:	4011      	ands	r1, r2
 8013dee:	000c      	movs	r4, r1
 8013df0:	7899      	ldrb	r1, [r3, #2]
 8013df2:	2000      	movs	r0, #0
 8013df4:	4001      	ands	r1, r0
 8013df6:	1c08      	adds	r0, r1, #0
 8013df8:	1c21      	adds	r1, r4, #0
 8013dfa:	4301      	orrs	r1, r0
 8013dfc:	7099      	strb	r1, [r3, #2]
 8013dfe:	0a12      	lsrs	r2, r2, #8
 8013e00:	b290      	uxth	r0, r2
 8013e02:	78da      	ldrb	r2, [r3, #3]
 8013e04:	2100      	movs	r1, #0
 8013e06:	400a      	ands	r2, r1
 8013e08:	1c11      	adds	r1, r2, #0
 8013e0a:	1c02      	adds	r2, r0, #0
 8013e0c:	430a      	orrs	r2, r1
 8013e0e:	70da      	strb	r2, [r3, #3]
}
 8013e10:	46c0      	nop			; (mov r8, r8)
 8013e12:	46bd      	mov	sp, r7
 8013e14:	b005      	add	sp, #20
 8013e16:	bd90      	pop	{r4, r7, pc}
 8013e18:	20005588 	.word	0x20005588

08013e1c <memset>:
 8013e1c:	0003      	movs	r3, r0
 8013e1e:	1882      	adds	r2, r0, r2
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d100      	bne.n	8013e26 <memset+0xa>
 8013e24:	4770      	bx	lr
 8013e26:	7019      	strb	r1, [r3, #0]
 8013e28:	3301      	adds	r3, #1
 8013e2a:	e7f9      	b.n	8013e20 <memset+0x4>

08013e2c <__errno>:
 8013e2c:	4b01      	ldr	r3, [pc, #4]	; (8013e34 <__errno+0x8>)
 8013e2e:	6818      	ldr	r0, [r3, #0]
 8013e30:	4770      	bx	lr
 8013e32:	46c0      	nop			; (mov r8, r8)
 8013e34:	200000b8 	.word	0x200000b8

08013e38 <__libc_init_array>:
 8013e38:	b570      	push	{r4, r5, r6, lr}
 8013e3a:	2600      	movs	r6, #0
 8013e3c:	4c0c      	ldr	r4, [pc, #48]	; (8013e70 <__libc_init_array+0x38>)
 8013e3e:	4d0d      	ldr	r5, [pc, #52]	; (8013e74 <__libc_init_array+0x3c>)
 8013e40:	1b64      	subs	r4, r4, r5
 8013e42:	10a4      	asrs	r4, r4, #2
 8013e44:	42a6      	cmp	r6, r4
 8013e46:	d109      	bne.n	8013e5c <__libc_init_array+0x24>
 8013e48:	2600      	movs	r6, #0
 8013e4a:	f000 fcd3 	bl	80147f4 <_init>
 8013e4e:	4c0a      	ldr	r4, [pc, #40]	; (8013e78 <__libc_init_array+0x40>)
 8013e50:	4d0a      	ldr	r5, [pc, #40]	; (8013e7c <__libc_init_array+0x44>)
 8013e52:	1b64      	subs	r4, r4, r5
 8013e54:	10a4      	asrs	r4, r4, #2
 8013e56:	42a6      	cmp	r6, r4
 8013e58:	d105      	bne.n	8013e66 <__libc_init_array+0x2e>
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}
 8013e5c:	00b3      	lsls	r3, r6, #2
 8013e5e:	58eb      	ldr	r3, [r5, r3]
 8013e60:	4798      	blx	r3
 8013e62:	3601      	adds	r6, #1
 8013e64:	e7ee      	b.n	8013e44 <__libc_init_array+0xc>
 8013e66:	00b3      	lsls	r3, r6, #2
 8013e68:	58eb      	ldr	r3, [r5, r3]
 8013e6a:	4798      	blx	r3
 8013e6c:	3601      	adds	r6, #1
 8013e6e:	e7f2      	b.n	8013e56 <__libc_init_array+0x1e>
 8013e70:	08014bf8 	.word	0x08014bf8
 8013e74:	08014bf8 	.word	0x08014bf8
 8013e78:	08014bfc 	.word	0x08014bfc
 8013e7c:	08014bf8 	.word	0x08014bf8

08013e80 <powf>:
 8013e80:	b570      	push	{r4, r5, r6, lr}
 8013e82:	1c0c      	adds	r4, r1, #0
 8013e84:	1c06      	adds	r6, r0, #0
 8013e86:	f000 f859 	bl	8013f3c <__ieee754_powf>
 8013e8a:	1c21      	adds	r1, r4, #0
 8013e8c:	1c05      	adds	r5, r0, #0
 8013e8e:	1c20      	adds	r0, r4, #0
 8013e90:	f7ed f9ac 	bl	80011ec <__aeabi_fcmpun>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d133      	bne.n	8013f00 <powf+0x80>
 8013e98:	2100      	movs	r1, #0
 8013e9a:	1c30      	adds	r0, r6, #0
 8013e9c:	f7ec fb08 	bl	80004b0 <__aeabi_fcmpeq>
 8013ea0:	2800      	cmp	r0, #0
 8013ea2:	d014      	beq.n	8013ece <powf+0x4e>
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	1c20      	adds	r0, r4, #0
 8013ea8:	f7ec fb02 	bl	80004b0 <__aeabi_fcmpeq>
 8013eac:	2800      	cmp	r0, #0
 8013eae:	d138      	bne.n	8013f22 <powf+0xa2>
 8013eb0:	1c20      	adds	r0, r4, #0
 8013eb2:	f000 f839 	bl	8013f28 <finitef>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d022      	beq.n	8013f00 <powf+0x80>
 8013eba:	2100      	movs	r1, #0
 8013ebc:	1c20      	adds	r0, r4, #0
 8013ebe:	f7ec fafd 	bl	80004bc <__aeabi_fcmplt>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	d01c      	beq.n	8013f00 <powf+0x80>
 8013ec6:	f7ff ffb1 	bl	8013e2c <__errno>
 8013eca:	2322      	movs	r3, #34	; 0x22
 8013ecc:	e017      	b.n	8013efe <powf+0x7e>
 8013ece:	1c28      	adds	r0, r5, #0
 8013ed0:	f000 f82a 	bl	8013f28 <finitef>
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	d115      	bne.n	8013f04 <powf+0x84>
 8013ed8:	1c30      	adds	r0, r6, #0
 8013eda:	f000 f825 	bl	8013f28 <finitef>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d010      	beq.n	8013f04 <powf+0x84>
 8013ee2:	1c20      	adds	r0, r4, #0
 8013ee4:	f000 f820 	bl	8013f28 <finitef>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	d00b      	beq.n	8013f04 <powf+0x84>
 8013eec:	1c29      	adds	r1, r5, #0
 8013eee:	1c28      	adds	r0, r5, #0
 8013ef0:	f7ed f97c 	bl	80011ec <__aeabi_fcmpun>
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	d0e6      	beq.n	8013ec6 <powf+0x46>
 8013ef8:	f7ff ff98 	bl	8013e2c <__errno>
 8013efc:	2321      	movs	r3, #33	; 0x21
 8013efe:	6003      	str	r3, [r0, #0]
 8013f00:	1c28      	adds	r0, r5, #0
 8013f02:	bd70      	pop	{r4, r5, r6, pc}
 8013f04:	2100      	movs	r1, #0
 8013f06:	1c28      	adds	r0, r5, #0
 8013f08:	f7ec fad2 	bl	80004b0 <__aeabi_fcmpeq>
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	d0f7      	beq.n	8013f00 <powf+0x80>
 8013f10:	1c30      	adds	r0, r6, #0
 8013f12:	f000 f809 	bl	8013f28 <finitef>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d0f2      	beq.n	8013f00 <powf+0x80>
 8013f1a:	1c20      	adds	r0, r4, #0
 8013f1c:	f000 f804 	bl	8013f28 <finitef>
 8013f20:	e7cf      	b.n	8013ec2 <powf+0x42>
 8013f22:	25fe      	movs	r5, #254	; 0xfe
 8013f24:	05ad      	lsls	r5, r5, #22
 8013f26:	e7eb      	b.n	8013f00 <powf+0x80>

08013f28 <finitef>:
 8013f28:	22ff      	movs	r2, #255	; 0xff
 8013f2a:	0043      	lsls	r3, r0, #1
 8013f2c:	085b      	lsrs	r3, r3, #1
 8013f2e:	2001      	movs	r0, #1
 8013f30:	05d2      	lsls	r2, r2, #23
 8013f32:	4293      	cmp	r3, r2
 8013f34:	db00      	blt.n	8013f38 <finitef+0x10>
 8013f36:	2000      	movs	r0, #0
 8013f38:	4770      	bx	lr
	...

08013f3c <__ieee754_powf>:
 8013f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f3e:	b08b      	sub	sp, #44	; 0x2c
 8013f40:	9101      	str	r1, [sp, #4]
 8013f42:	9f01      	ldr	r7, [sp, #4]
 8013f44:	1c05      	adds	r5, r0, #0
 8013f46:	007b      	lsls	r3, r7, #1
 8013f48:	9003      	str	r0, [sp, #12]
 8013f4a:	085e      	lsrs	r6, r3, #1
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d10d      	bne.n	8013f6c <__ieee754_powf+0x30>
 8013f50:	2380      	movs	r3, #128	; 0x80
 8013f52:	03db      	lsls	r3, r3, #15
 8013f54:	4043      	eors	r3, r0
 8013f56:	4a96      	ldr	r2, [pc, #600]	; (80141b0 <__ieee754_powf+0x274>)
 8013f58:	005b      	lsls	r3, r3, #1
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d800      	bhi.n	8013f60 <__ieee754_powf+0x24>
 8013f5e:	e31d      	b.n	801459c <__ieee754_powf+0x660>
 8013f60:	9901      	ldr	r1, [sp, #4]
 8013f62:	1c28      	adds	r0, r5, #0
 8013f64:	f7ec faea 	bl	800053c <__aeabi_fadd>
 8013f68:	b00b      	add	sp, #44	; 0x2c
 8013f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f6c:	22ff      	movs	r2, #255	; 0xff
 8013f6e:	0044      	lsls	r4, r0, #1
 8013f70:	0864      	lsrs	r4, r4, #1
 8013f72:	05d2      	lsls	r2, r2, #23
 8013f74:	4294      	cmp	r4, r2
 8013f76:	dcf3      	bgt.n	8013f60 <__ieee754_powf+0x24>
 8013f78:	23fe      	movs	r3, #254	; 0xfe
 8013f7a:	059b      	lsls	r3, r3, #22
 8013f7c:	4296      	cmp	r6, r2
 8013f7e:	dd06      	ble.n	8013f8e <__ieee754_powf+0x52>
 8013f80:	4298      	cmp	r0, r3
 8013f82:	d1ed      	bne.n	8013f60 <__ieee754_powf+0x24>
 8013f84:	2380      	movs	r3, #128	; 0x80
 8013f86:	9a01      	ldr	r2, [sp, #4]
 8013f88:	03db      	lsls	r3, r3, #15
 8013f8a:	4053      	eors	r3, r2
 8013f8c:	e7e3      	b.n	8013f56 <__ieee754_powf+0x1a>
 8013f8e:	2100      	movs	r1, #0
 8013f90:	9102      	str	r1, [sp, #8]
 8013f92:	2800      	cmp	r0, #0
 8013f94:	da22      	bge.n	8013fdc <__ieee754_powf+0xa0>
 8013f96:	2197      	movs	r1, #151	; 0x97
 8013f98:	05c9      	lsls	r1, r1, #23
 8013f9a:	428e      	cmp	r6, r1
 8013f9c:	da1c      	bge.n	8013fd8 <__ieee754_powf+0x9c>
 8013f9e:	429e      	cmp	r6, r3
 8013fa0:	db0d      	blt.n	8013fbe <__ieee754_powf+0x82>
 8013fa2:	2296      	movs	r2, #150	; 0x96
 8013fa4:	15f3      	asrs	r3, r6, #23
 8013fa6:	1ad2      	subs	r2, r2, r3
 8013fa8:	0033      	movs	r3, r6
 8013faa:	4113      	asrs	r3, r2
 8013fac:	0019      	movs	r1, r3
 8013fae:	4091      	lsls	r1, r2
 8013fb0:	42b1      	cmp	r1, r6
 8013fb2:	d104      	bne.n	8013fbe <__ieee754_powf+0x82>
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	4013      	ands	r3, r2
 8013fb8:	1892      	adds	r2, r2, r2
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	9302      	str	r3, [sp, #8]
 8013fbe:	23fe      	movs	r3, #254	; 0xfe
 8013fc0:	059b      	lsls	r3, r3, #22
 8013fc2:	429e      	cmp	r6, r3
 8013fc4:	d11e      	bne.n	8014004 <__ieee754_powf+0xc8>
 8013fc6:	1c28      	adds	r0, r5, #0
 8013fc8:	2f00      	cmp	r7, #0
 8013fca:	dacd      	bge.n	8013f68 <__ieee754_powf+0x2c>
 8013fcc:	20fe      	movs	r0, #254	; 0xfe
 8013fce:	1c29      	adds	r1, r5, #0
 8013fd0:	0580      	lsls	r0, r0, #22
 8013fd2:	f7ec fc53 	bl	800087c <__aeabi_fdiv>
 8013fd6:	e7c7      	b.n	8013f68 <__ieee754_powf+0x2c>
 8013fd8:	2102      	movs	r1, #2
 8013fda:	9102      	str	r1, [sp, #8]
 8013fdc:	4296      	cmp	r6, r2
 8013fde:	d1ee      	bne.n	8013fbe <__ieee754_powf+0x82>
 8013fe0:	429c      	cmp	r4, r3
 8013fe2:	d100      	bne.n	8013fe6 <__ieee754_powf+0xaa>
 8013fe4:	e2da      	b.n	801459c <__ieee754_powf+0x660>
 8013fe6:	dd04      	ble.n	8013ff2 <__ieee754_powf+0xb6>
 8013fe8:	9801      	ldr	r0, [sp, #4]
 8013fea:	2f00      	cmp	r7, #0
 8013fec:	dabc      	bge.n	8013f68 <__ieee754_powf+0x2c>
 8013fee:	2000      	movs	r0, #0
 8013ff0:	e7ba      	b.n	8013f68 <__ieee754_powf+0x2c>
 8013ff2:	2f00      	cmp	r7, #0
 8013ff4:	dafb      	bge.n	8013fee <__ieee754_powf+0xb2>
 8013ff6:	2280      	movs	r2, #128	; 0x80
 8013ff8:	0612      	lsls	r2, r2, #24
 8013ffa:	4694      	mov	ip, r2
 8013ffc:	9b01      	ldr	r3, [sp, #4]
 8013ffe:	4463      	add	r3, ip
 8014000:	0018      	movs	r0, r3
 8014002:	e7b1      	b.n	8013f68 <__ieee754_powf+0x2c>
 8014004:	2380      	movs	r3, #128	; 0x80
 8014006:	05db      	lsls	r3, r3, #23
 8014008:	429f      	cmp	r7, r3
 801400a:	d104      	bne.n	8014016 <__ieee754_powf+0xda>
 801400c:	1c29      	adds	r1, r5, #0
 801400e:	1c28      	adds	r0, r5, #0
 8014010:	f7ec fdfe 	bl	8000c10 <__aeabi_fmul>
 8014014:	e7a8      	b.n	8013f68 <__ieee754_powf+0x2c>
 8014016:	23fc      	movs	r3, #252	; 0xfc
 8014018:	1c28      	adds	r0, r5, #0
 801401a:	059b      	lsls	r3, r3, #22
 801401c:	429f      	cmp	r7, r3
 801401e:	d104      	bne.n	801402a <__ieee754_powf+0xee>
 8014020:	2d00      	cmp	r5, #0
 8014022:	db02      	blt.n	801402a <__ieee754_powf+0xee>
 8014024:	f000 fb6e 	bl	8014704 <__ieee754_sqrtf>
 8014028:	e79e      	b.n	8013f68 <__ieee754_powf+0x2c>
 801402a:	f000 faef 	bl	801460c <fabsf>
 801402e:	2c00      	cmp	r4, #0
 8014030:	d005      	beq.n	801403e <__ieee754_powf+0x102>
 8014032:	22fe      	movs	r2, #254	; 0xfe
 8014034:	00ab      	lsls	r3, r5, #2
 8014036:	089b      	lsrs	r3, r3, #2
 8014038:	0592      	lsls	r2, r2, #22
 801403a:	4293      	cmp	r3, r2
 801403c:	d11c      	bne.n	8014078 <__ieee754_powf+0x13c>
 801403e:	2f00      	cmp	r7, #0
 8014040:	da04      	bge.n	801404c <__ieee754_powf+0x110>
 8014042:	1c01      	adds	r1, r0, #0
 8014044:	20fe      	movs	r0, #254	; 0xfe
 8014046:	0580      	lsls	r0, r0, #22
 8014048:	f7ec fc18 	bl	800087c <__aeabi_fdiv>
 801404c:	9b03      	ldr	r3, [sp, #12]
 801404e:	2b00      	cmp	r3, #0
 8014050:	db00      	blt.n	8014054 <__ieee754_powf+0x118>
 8014052:	e789      	b.n	8013f68 <__ieee754_powf+0x2c>
 8014054:	4b57      	ldr	r3, [pc, #348]	; (80141b4 <__ieee754_powf+0x278>)
 8014056:	18e4      	adds	r4, r4, r3
 8014058:	9b02      	ldr	r3, [sp, #8]
 801405a:	431c      	orrs	r4, r3
 801405c:	d104      	bne.n	8014068 <__ieee754_powf+0x12c>
 801405e:	1c01      	adds	r1, r0, #0
 8014060:	f7ec ff24 	bl	8000eac <__aeabi_fsub>
 8014064:	1c01      	adds	r1, r0, #0
 8014066:	e7b4      	b.n	8013fd2 <__ieee754_powf+0x96>
 8014068:	9b02      	ldr	r3, [sp, #8]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d000      	beq.n	8014070 <__ieee754_powf+0x134>
 801406e:	e77b      	b.n	8013f68 <__ieee754_powf+0x2c>
 8014070:	2380      	movs	r3, #128	; 0x80
 8014072:	061b      	lsls	r3, r3, #24
 8014074:	18c0      	adds	r0, r0, r3
 8014076:	e777      	b.n	8013f68 <__ieee754_powf+0x2c>
 8014078:	0feb      	lsrs	r3, r5, #31
 801407a:	3b01      	subs	r3, #1
 801407c:	9307      	str	r3, [sp, #28]
 801407e:	9a07      	ldr	r2, [sp, #28]
 8014080:	9b02      	ldr	r3, [sp, #8]
 8014082:	4313      	orrs	r3, r2
 8014084:	d102      	bne.n	801408c <__ieee754_powf+0x150>
 8014086:	1c29      	adds	r1, r5, #0
 8014088:	1c28      	adds	r0, r5, #0
 801408a:	e7e9      	b.n	8014060 <__ieee754_powf+0x124>
 801408c:	239a      	movs	r3, #154	; 0x9a
 801408e:	05db      	lsls	r3, r3, #23
 8014090:	429e      	cmp	r6, r3
 8014092:	dc00      	bgt.n	8014096 <__ieee754_powf+0x15a>
 8014094:	e09e      	b.n	80141d4 <__ieee754_powf+0x298>
 8014096:	4b48      	ldr	r3, [pc, #288]	; (80141b8 <__ieee754_powf+0x27c>)
 8014098:	429c      	cmp	r4, r3
 801409a:	dc05      	bgt.n	80140a8 <__ieee754_powf+0x16c>
 801409c:	2f00      	cmp	r7, #0
 801409e:	da08      	bge.n	80140b2 <__ieee754_powf+0x176>
 80140a0:	2000      	movs	r0, #0
 80140a2:	f000 fb29 	bl	80146f8 <__math_oflowf>
 80140a6:	e75f      	b.n	8013f68 <__ieee754_powf+0x2c>
 80140a8:	4b44      	ldr	r3, [pc, #272]	; (80141bc <__ieee754_powf+0x280>)
 80140aa:	429c      	cmp	r4, r3
 80140ac:	dd05      	ble.n	80140ba <__ieee754_powf+0x17e>
 80140ae:	2f00      	cmp	r7, #0
 80140b0:	dcf6      	bgt.n	80140a0 <__ieee754_powf+0x164>
 80140b2:	2000      	movs	r0, #0
 80140b4:	f000 fb1a 	bl	80146ec <__math_uflowf>
 80140b8:	e756      	b.n	8013f68 <__ieee754_powf+0x2c>
 80140ba:	21fe      	movs	r1, #254	; 0xfe
 80140bc:	0589      	lsls	r1, r1, #22
 80140be:	f7ec fef5 	bl	8000eac <__aeabi_fsub>
 80140c2:	493f      	ldr	r1, [pc, #252]	; (80141c0 <__ieee754_powf+0x284>)
 80140c4:	1c04      	adds	r4, r0, #0
 80140c6:	f7ec fda3 	bl	8000c10 <__aeabi_fmul>
 80140ca:	493e      	ldr	r1, [pc, #248]	; (80141c4 <__ieee754_powf+0x288>)
 80140cc:	1c05      	adds	r5, r0, #0
 80140ce:	1c20      	adds	r0, r4, #0
 80140d0:	f7ec fd9e 	bl	8000c10 <__aeabi_fmul>
 80140d4:	21fa      	movs	r1, #250	; 0xfa
 80140d6:	1c06      	adds	r6, r0, #0
 80140d8:	0589      	lsls	r1, r1, #22
 80140da:	1c20      	adds	r0, r4, #0
 80140dc:	f7ec fd98 	bl	8000c10 <__aeabi_fmul>
 80140e0:	1c01      	adds	r1, r0, #0
 80140e2:	4839      	ldr	r0, [pc, #228]	; (80141c8 <__ieee754_powf+0x28c>)
 80140e4:	f7ec fee2 	bl	8000eac <__aeabi_fsub>
 80140e8:	1c21      	adds	r1, r4, #0
 80140ea:	f7ec fd91 	bl	8000c10 <__aeabi_fmul>
 80140ee:	1c01      	adds	r1, r0, #0
 80140f0:	20fc      	movs	r0, #252	; 0xfc
 80140f2:	0580      	lsls	r0, r0, #22
 80140f4:	f7ec feda 	bl	8000eac <__aeabi_fsub>
 80140f8:	1c21      	adds	r1, r4, #0
 80140fa:	1c07      	adds	r7, r0, #0
 80140fc:	1c20      	adds	r0, r4, #0
 80140fe:	f7ec fd87 	bl	8000c10 <__aeabi_fmul>
 8014102:	1c01      	adds	r1, r0, #0
 8014104:	1c38      	adds	r0, r7, #0
 8014106:	f7ec fd83 	bl	8000c10 <__aeabi_fmul>
 801410a:	4930      	ldr	r1, [pc, #192]	; (80141cc <__ieee754_powf+0x290>)
 801410c:	f7ec fd80 	bl	8000c10 <__aeabi_fmul>
 8014110:	1c01      	adds	r1, r0, #0
 8014112:	1c30      	adds	r0, r6, #0
 8014114:	f7ec feca 	bl	8000eac <__aeabi_fsub>
 8014118:	1c01      	adds	r1, r0, #0
 801411a:	1c06      	adds	r6, r0, #0
 801411c:	1c28      	adds	r0, r5, #0
 801411e:	f7ec fa0d 	bl	800053c <__aeabi_fadd>
 8014122:	0b04      	lsrs	r4, r0, #12
 8014124:	0324      	lsls	r4, r4, #12
 8014126:	1c29      	adds	r1, r5, #0
 8014128:	1c20      	adds	r0, r4, #0
 801412a:	f7ec febf 	bl	8000eac <__aeabi_fsub>
 801412e:	1c01      	adds	r1, r0, #0
 8014130:	1c30      	adds	r0, r6, #0
 8014132:	f7ec febb 	bl	8000eac <__aeabi_fsub>
 8014136:	9b02      	ldr	r3, [sp, #8]
 8014138:	9a07      	ldr	r2, [sp, #28]
 801413a:	3b01      	subs	r3, #1
 801413c:	1c06      	adds	r6, r0, #0
 801413e:	4313      	orrs	r3, r2
 8014140:	d000      	beq.n	8014144 <__ieee754_powf+0x208>
 8014142:	e158      	b.n	80143f6 <__ieee754_powf+0x4ba>
 8014144:	4f22      	ldr	r7, [pc, #136]	; (80141d0 <__ieee754_powf+0x294>)
 8014146:	9b01      	ldr	r3, [sp, #4]
 8014148:	9801      	ldr	r0, [sp, #4]
 801414a:	0b1d      	lsrs	r5, r3, #12
 801414c:	032d      	lsls	r5, r5, #12
 801414e:	1c29      	adds	r1, r5, #0
 8014150:	f7ec feac 	bl	8000eac <__aeabi_fsub>
 8014154:	1c21      	adds	r1, r4, #0
 8014156:	f7ec fd5b 	bl	8000c10 <__aeabi_fmul>
 801415a:	9901      	ldr	r1, [sp, #4]
 801415c:	9002      	str	r0, [sp, #8]
 801415e:	1c30      	adds	r0, r6, #0
 8014160:	f7ec fd56 	bl	8000c10 <__aeabi_fmul>
 8014164:	1c01      	adds	r1, r0, #0
 8014166:	9802      	ldr	r0, [sp, #8]
 8014168:	f7ec f9e8 	bl	800053c <__aeabi_fadd>
 801416c:	1c29      	adds	r1, r5, #0
 801416e:	1c06      	adds	r6, r0, #0
 8014170:	1c20      	adds	r0, r4, #0
 8014172:	f7ec fd4d 	bl	8000c10 <__aeabi_fmul>
 8014176:	9003      	str	r0, [sp, #12]
 8014178:	1c01      	adds	r1, r0, #0
 801417a:	1c05      	adds	r5, r0, #0
 801417c:	1c30      	adds	r0, r6, #0
 801417e:	f7ec f9dd 	bl	800053c <__aeabi_fadd>
 8014182:	9002      	str	r0, [sp, #8]
 8014184:	9b02      	ldr	r3, [sp, #8]
 8014186:	9304      	str	r3, [sp, #16]
 8014188:	005b      	lsls	r3, r3, #1
 801418a:	085b      	lsrs	r3, r3, #1
 801418c:	9301      	str	r3, [sp, #4]
 801418e:	9b04      	ldr	r3, [sp, #16]
 8014190:	2b00      	cmp	r3, #0
 8014192:	dc00      	bgt.n	8014196 <__ieee754_powf+0x25a>
 8014194:	e164      	b.n	8014460 <__ieee754_powf+0x524>
 8014196:	2386      	movs	r3, #134	; 0x86
 8014198:	9a01      	ldr	r2, [sp, #4]
 801419a:	05db      	lsls	r3, r3, #23
 801419c:	429a      	cmp	r2, r3
 801419e:	dc00      	bgt.n	80141a2 <__ieee754_powf+0x266>
 80141a0:	e12c      	b.n	80143fc <__ieee754_powf+0x4c0>
 80141a2:	2100      	movs	r1, #0
 80141a4:	1c38      	adds	r0, r7, #0
 80141a6:	f7ec f989 	bl	80004bc <__aeabi_fcmplt>
 80141aa:	1e43      	subs	r3, r0, #1
 80141ac:	4198      	sbcs	r0, r3
 80141ae:	e778      	b.n	80140a2 <__ieee754_powf+0x166>
 80141b0:	ff800000 	.word	0xff800000
 80141b4:	c0800000 	.word	0xc0800000
 80141b8:	3f7ffff3 	.word	0x3f7ffff3
 80141bc:	3f800007 	.word	0x3f800007
 80141c0:	3fb8aa00 	.word	0x3fb8aa00
 80141c4:	36eca570 	.word	0x36eca570
 80141c8:	3eaaaaab 	.word	0x3eaaaaab
 80141cc:	3fb8aa3b 	.word	0x3fb8aa3b
 80141d0:	bf800000 	.word	0xbf800000
 80141d4:	23ff      	movs	r3, #255	; 0xff
 80141d6:	05db      	lsls	r3, r3, #23
 80141d8:	2200      	movs	r2, #0
 80141da:	422b      	tst	r3, r5
 80141dc:	d106      	bne.n	80141ec <__ieee754_powf+0x2b0>
 80141de:	2197      	movs	r1, #151	; 0x97
 80141e0:	05c9      	lsls	r1, r1, #23
 80141e2:	f7ec fd15 	bl	8000c10 <__aeabi_fmul>
 80141e6:	2218      	movs	r2, #24
 80141e8:	0004      	movs	r4, r0
 80141ea:	4252      	negs	r2, r2
 80141ec:	25fe      	movs	r5, #254	; 0xfe
 80141ee:	15e3      	asrs	r3, r4, #23
 80141f0:	3b7f      	subs	r3, #127	; 0x7f
 80141f2:	189b      	adds	r3, r3, r2
 80141f4:	0264      	lsls	r4, r4, #9
 80141f6:	9305      	str	r3, [sp, #20]
 80141f8:	0a64      	lsrs	r4, r4, #9
 80141fa:	05ad      	lsls	r5, r5, #22
 80141fc:	4be9      	ldr	r3, [pc, #932]	; (80145a4 <__ieee754_powf+0x668>)
 80141fe:	4325      	orrs	r5, r4
 8014200:	2600      	movs	r6, #0
 8014202:	9504      	str	r5, [sp, #16]
 8014204:	429c      	cmp	r4, r3
 8014206:	dd0c      	ble.n	8014222 <__ieee754_powf+0x2e6>
 8014208:	4be7      	ldr	r3, [pc, #924]	; (80145a8 <__ieee754_powf+0x66c>)
 801420a:	3601      	adds	r6, #1
 801420c:	429c      	cmp	r4, r3
 801420e:	dd08      	ble.n	8014222 <__ieee754_powf+0x2e6>
 8014210:	9b05      	ldr	r3, [sp, #20]
 8014212:	4ae6      	ldr	r2, [pc, #920]	; (80145ac <__ieee754_powf+0x670>)
 8014214:	199b      	adds	r3, r3, r6
 8014216:	4694      	mov	ip, r2
 8014218:	9305      	str	r3, [sp, #20]
 801421a:	002b      	movs	r3, r5
 801421c:	2600      	movs	r6, #0
 801421e:	4463      	add	r3, ip
 8014220:	9304      	str	r3, [sp, #16]
 8014222:	9b04      	ldr	r3, [sp, #16]
 8014224:	00b2      	lsls	r2, r6, #2
 8014226:	9306      	str	r3, [sp, #24]
 8014228:	4be1      	ldr	r3, [pc, #900]	; (80145b0 <__ieee754_powf+0x674>)
 801422a:	9806      	ldr	r0, [sp, #24]
 801422c:	58d7      	ldr	r7, [r2, r3]
 801422e:	9208      	str	r2, [sp, #32]
 8014230:	1c39      	adds	r1, r7, #0
 8014232:	f7ec fe3b 	bl	8000eac <__aeabi_fsub>
 8014236:	9906      	ldr	r1, [sp, #24]
 8014238:	1c04      	adds	r4, r0, #0
 801423a:	1c38      	adds	r0, r7, #0
 801423c:	f7ec f97e 	bl	800053c <__aeabi_fadd>
 8014240:	1c01      	adds	r1, r0, #0
 8014242:	20fe      	movs	r0, #254	; 0xfe
 8014244:	0580      	lsls	r0, r0, #22
 8014246:	f7ec fb19 	bl	800087c <__aeabi_fdiv>
 801424a:	1c01      	adds	r1, r0, #0
 801424c:	9009      	str	r0, [sp, #36]	; 0x24
 801424e:	1c20      	adds	r0, r4, #0
 8014250:	f7ec fcde 	bl	8000c10 <__aeabi_fmul>
 8014254:	2280      	movs	r2, #128	; 0x80
 8014256:	9003      	str	r0, [sp, #12]
 8014258:	9b03      	ldr	r3, [sp, #12]
 801425a:	0592      	lsls	r2, r2, #22
 801425c:	0b1d      	lsrs	r5, r3, #12
 801425e:	9b04      	ldr	r3, [sp, #16]
 8014260:	0576      	lsls	r6, r6, #21
 8014262:	105b      	asrs	r3, r3, #1
 8014264:	431a      	orrs	r2, r3
 8014266:	2380      	movs	r3, #128	; 0x80
 8014268:	02db      	lsls	r3, r3, #11
 801426a:	18d2      	adds	r2, r2, r3
 801426c:	1996      	adds	r6, r2, r6
 801426e:	032d      	lsls	r5, r5, #12
 8014270:	1c31      	adds	r1, r6, #0
 8014272:	1c28      	adds	r0, r5, #0
 8014274:	f7ec fccc 	bl	8000c10 <__aeabi_fmul>
 8014278:	1c01      	adds	r1, r0, #0
 801427a:	1c20      	adds	r0, r4, #0
 801427c:	f7ec fe16 	bl	8000eac <__aeabi_fsub>
 8014280:	1c39      	adds	r1, r7, #0
 8014282:	1c04      	adds	r4, r0, #0
 8014284:	1c30      	adds	r0, r6, #0
 8014286:	f7ec fe11 	bl	8000eac <__aeabi_fsub>
 801428a:	1c01      	adds	r1, r0, #0
 801428c:	9806      	ldr	r0, [sp, #24]
 801428e:	f7ec fe0d 	bl	8000eac <__aeabi_fsub>
 8014292:	1c29      	adds	r1, r5, #0
 8014294:	f7ec fcbc 	bl	8000c10 <__aeabi_fmul>
 8014298:	1c01      	adds	r1, r0, #0
 801429a:	1c20      	adds	r0, r4, #0
 801429c:	f7ec fe06 	bl	8000eac <__aeabi_fsub>
 80142a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142a2:	f7ec fcb5 	bl	8000c10 <__aeabi_fmul>
 80142a6:	9903      	ldr	r1, [sp, #12]
 80142a8:	9004      	str	r0, [sp, #16]
 80142aa:	1c08      	adds	r0, r1, #0
 80142ac:	f7ec fcb0 	bl	8000c10 <__aeabi_fmul>
 80142b0:	49c0      	ldr	r1, [pc, #768]	; (80145b4 <__ieee754_powf+0x678>)
 80142b2:	1c04      	adds	r4, r0, #0
 80142b4:	f7ec fcac 	bl	8000c10 <__aeabi_fmul>
 80142b8:	49bf      	ldr	r1, [pc, #764]	; (80145b8 <__ieee754_powf+0x67c>)
 80142ba:	f7ec f93f 	bl	800053c <__aeabi_fadd>
 80142be:	1c21      	adds	r1, r4, #0
 80142c0:	f7ec fca6 	bl	8000c10 <__aeabi_fmul>
 80142c4:	49bd      	ldr	r1, [pc, #756]	; (80145bc <__ieee754_powf+0x680>)
 80142c6:	f7ec f939 	bl	800053c <__aeabi_fadd>
 80142ca:	1c21      	adds	r1, r4, #0
 80142cc:	f7ec fca0 	bl	8000c10 <__aeabi_fmul>
 80142d0:	49bb      	ldr	r1, [pc, #748]	; (80145c0 <__ieee754_powf+0x684>)
 80142d2:	f7ec f933 	bl	800053c <__aeabi_fadd>
 80142d6:	1c21      	adds	r1, r4, #0
 80142d8:	f7ec fc9a 	bl	8000c10 <__aeabi_fmul>
 80142dc:	49b9      	ldr	r1, [pc, #740]	; (80145c4 <__ieee754_powf+0x688>)
 80142de:	f7ec f92d 	bl	800053c <__aeabi_fadd>
 80142e2:	1c21      	adds	r1, r4, #0
 80142e4:	f7ec fc94 	bl	8000c10 <__aeabi_fmul>
 80142e8:	49b7      	ldr	r1, [pc, #732]	; (80145c8 <__ieee754_powf+0x68c>)
 80142ea:	f7ec f927 	bl	800053c <__aeabi_fadd>
 80142ee:	1c21      	adds	r1, r4, #0
 80142f0:	1c06      	adds	r6, r0, #0
 80142f2:	1c20      	adds	r0, r4, #0
 80142f4:	f7ec fc8c 	bl	8000c10 <__aeabi_fmul>
 80142f8:	1c01      	adds	r1, r0, #0
 80142fa:	1c30      	adds	r0, r6, #0
 80142fc:	f7ec fc88 	bl	8000c10 <__aeabi_fmul>
 8014300:	1c29      	adds	r1, r5, #0
 8014302:	1c04      	adds	r4, r0, #0
 8014304:	9803      	ldr	r0, [sp, #12]
 8014306:	f7ec f919 	bl	800053c <__aeabi_fadd>
 801430a:	9904      	ldr	r1, [sp, #16]
 801430c:	f7ec fc80 	bl	8000c10 <__aeabi_fmul>
 8014310:	1c21      	adds	r1, r4, #0
 8014312:	f7ec f913 	bl	800053c <__aeabi_fadd>
 8014316:	1c29      	adds	r1, r5, #0
 8014318:	1c06      	adds	r6, r0, #0
 801431a:	1c28      	adds	r0, r5, #0
 801431c:	f7ec fc78 	bl	8000c10 <__aeabi_fmul>
 8014320:	49aa      	ldr	r1, [pc, #680]	; (80145cc <__ieee754_powf+0x690>)
 8014322:	1c07      	adds	r7, r0, #0
 8014324:	f7ec f90a 	bl	800053c <__aeabi_fadd>
 8014328:	1c31      	adds	r1, r6, #0
 801432a:	f7ec f907 	bl	800053c <__aeabi_fadd>
 801432e:	0b04      	lsrs	r4, r0, #12
 8014330:	0324      	lsls	r4, r4, #12
 8014332:	1c21      	adds	r1, r4, #0
 8014334:	1c28      	adds	r0, r5, #0
 8014336:	f7ec fc6b 	bl	8000c10 <__aeabi_fmul>
 801433a:	49a4      	ldr	r1, [pc, #656]	; (80145cc <__ieee754_powf+0x690>)
 801433c:	1c05      	adds	r5, r0, #0
 801433e:	1c20      	adds	r0, r4, #0
 8014340:	f7ec fdb4 	bl	8000eac <__aeabi_fsub>
 8014344:	1c39      	adds	r1, r7, #0
 8014346:	f7ec fdb1 	bl	8000eac <__aeabi_fsub>
 801434a:	1c01      	adds	r1, r0, #0
 801434c:	1c30      	adds	r0, r6, #0
 801434e:	f7ec fdad 	bl	8000eac <__aeabi_fsub>
 8014352:	9903      	ldr	r1, [sp, #12]
 8014354:	f7ec fc5c 	bl	8000c10 <__aeabi_fmul>
 8014358:	1c21      	adds	r1, r4, #0
 801435a:	1c06      	adds	r6, r0, #0
 801435c:	9804      	ldr	r0, [sp, #16]
 801435e:	f7ec fc57 	bl	8000c10 <__aeabi_fmul>
 8014362:	1c01      	adds	r1, r0, #0
 8014364:	1c30      	adds	r0, r6, #0
 8014366:	f7ec f8e9 	bl	800053c <__aeabi_fadd>
 801436a:	1c06      	adds	r6, r0, #0
 801436c:	1c01      	adds	r1, r0, #0
 801436e:	1c28      	adds	r0, r5, #0
 8014370:	f7ec f8e4 	bl	800053c <__aeabi_fadd>
 8014374:	0b04      	lsrs	r4, r0, #12
 8014376:	0324      	lsls	r4, r4, #12
 8014378:	4995      	ldr	r1, [pc, #596]	; (80145d0 <__ieee754_powf+0x694>)
 801437a:	1c20      	adds	r0, r4, #0
 801437c:	f7ec fc48 	bl	8000c10 <__aeabi_fmul>
 8014380:	1c29      	adds	r1, r5, #0
 8014382:	9003      	str	r0, [sp, #12]
 8014384:	1c20      	adds	r0, r4, #0
 8014386:	f7ec fd91 	bl	8000eac <__aeabi_fsub>
 801438a:	1c01      	adds	r1, r0, #0
 801438c:	1c30      	adds	r0, r6, #0
 801438e:	f7ec fd8d 	bl	8000eac <__aeabi_fsub>
 8014392:	4990      	ldr	r1, [pc, #576]	; (80145d4 <__ieee754_powf+0x698>)
 8014394:	f7ec fc3c 	bl	8000c10 <__aeabi_fmul>
 8014398:	498f      	ldr	r1, [pc, #572]	; (80145d8 <__ieee754_powf+0x69c>)
 801439a:	1c05      	adds	r5, r0, #0
 801439c:	1c20      	adds	r0, r4, #0
 801439e:	f7ec fc37 	bl	8000c10 <__aeabi_fmul>
 80143a2:	1c01      	adds	r1, r0, #0
 80143a4:	1c28      	adds	r0, r5, #0
 80143a6:	f7ec f8c9 	bl	800053c <__aeabi_fadd>
 80143aa:	9a08      	ldr	r2, [sp, #32]
 80143ac:	4b8b      	ldr	r3, [pc, #556]	; (80145dc <__ieee754_powf+0x6a0>)
 80143ae:	58d1      	ldr	r1, [r2, r3]
 80143b0:	f7ec f8c4 	bl	800053c <__aeabi_fadd>
 80143b4:	1c05      	adds	r5, r0, #0
 80143b6:	9805      	ldr	r0, [sp, #20]
 80143b8:	f7ec ff4e 	bl	8001258 <__aeabi_i2f>
 80143bc:	4b88      	ldr	r3, [pc, #544]	; (80145e0 <__ieee754_powf+0x6a4>)
 80143be:	9a08      	ldr	r2, [sp, #32]
 80143c0:	1c06      	adds	r6, r0, #0
 80143c2:	58d7      	ldr	r7, [r2, r3]
 80143c4:	1c29      	adds	r1, r5, #0
 80143c6:	9803      	ldr	r0, [sp, #12]
 80143c8:	f7ec f8b8 	bl	800053c <__aeabi_fadd>
 80143cc:	1c39      	adds	r1, r7, #0
 80143ce:	f7ec f8b5 	bl	800053c <__aeabi_fadd>
 80143d2:	1c31      	adds	r1, r6, #0
 80143d4:	f7ec f8b2 	bl	800053c <__aeabi_fadd>
 80143d8:	0b04      	lsrs	r4, r0, #12
 80143da:	0324      	lsls	r4, r4, #12
 80143dc:	1c31      	adds	r1, r6, #0
 80143de:	1c20      	adds	r0, r4, #0
 80143e0:	f7ec fd64 	bl	8000eac <__aeabi_fsub>
 80143e4:	1c39      	adds	r1, r7, #0
 80143e6:	f7ec fd61 	bl	8000eac <__aeabi_fsub>
 80143ea:	9903      	ldr	r1, [sp, #12]
 80143ec:	f7ec fd5e 	bl	8000eac <__aeabi_fsub>
 80143f0:	1c01      	adds	r1, r0, #0
 80143f2:	1c28      	adds	r0, r5, #0
 80143f4:	e69d      	b.n	8014132 <__ieee754_powf+0x1f6>
 80143f6:	27fe      	movs	r7, #254	; 0xfe
 80143f8:	05bf      	lsls	r7, r7, #22
 80143fa:	e6a4      	b.n	8014146 <__ieee754_powf+0x20a>
 80143fc:	9a01      	ldr	r2, [sp, #4]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d146      	bne.n	8014490 <__ieee754_powf+0x554>
 8014402:	4978      	ldr	r1, [pc, #480]	; (80145e4 <__ieee754_powf+0x6a8>)
 8014404:	1c30      	adds	r0, r6, #0
 8014406:	f7ec f899 	bl	800053c <__aeabi_fadd>
 801440a:	1c29      	adds	r1, r5, #0
 801440c:	1c04      	adds	r4, r0, #0
 801440e:	9802      	ldr	r0, [sp, #8]
 8014410:	f7ec fd4c 	bl	8000eac <__aeabi_fsub>
 8014414:	1c01      	adds	r1, r0, #0
 8014416:	1c20      	adds	r0, r4, #0
 8014418:	f7ec f864 	bl	80004e4 <__aeabi_fcmpgt>
 801441c:	2800      	cmp	r0, #0
 801441e:	d000      	beq.n	8014422 <__ieee754_powf+0x4e6>
 8014420:	e6bf      	b.n	80141a2 <__ieee754_powf+0x266>
 8014422:	2480      	movs	r4, #128	; 0x80
 8014424:	0424      	lsls	r4, r4, #16
 8014426:	0022      	movs	r2, r4
 8014428:	9b01      	ldr	r3, [sp, #4]
 801442a:	4960      	ldr	r1, [pc, #384]	; (80145ac <__ieee754_powf+0x670>)
 801442c:	15db      	asrs	r3, r3, #23
 801442e:	3b7e      	subs	r3, #126	; 0x7e
 8014430:	411a      	asrs	r2, r3
 8014432:	0013      	movs	r3, r2
 8014434:	9a02      	ldr	r2, [sp, #8]
 8014436:	189b      	adds	r3, r3, r2
 8014438:	15da      	asrs	r2, r3, #23
 801443a:	b2d2      	uxtb	r2, r2
 801443c:	3a7f      	subs	r2, #127	; 0x7f
 801443e:	4111      	asrs	r1, r2
 8014440:	4019      	ands	r1, r3
 8014442:	025b      	lsls	r3, r3, #9
 8014444:	0a5b      	lsrs	r3, r3, #9
 8014446:	431c      	orrs	r4, r3
 8014448:	2317      	movs	r3, #23
 801444a:	1a9b      	subs	r3, r3, r2
 801444c:	411c      	asrs	r4, r3
 801444e:	9b04      	ldr	r3, [sp, #16]
 8014450:	2b00      	cmp	r3, #0
 8014452:	da00      	bge.n	8014456 <__ieee754_powf+0x51a>
 8014454:	4264      	negs	r4, r4
 8014456:	1c28      	adds	r0, r5, #0
 8014458:	f7ec fd28 	bl	8000eac <__aeabi_fsub>
 801445c:	9003      	str	r0, [sp, #12]
 801445e:	e01d      	b.n	801449c <__ieee754_powf+0x560>
 8014460:	4b61      	ldr	r3, [pc, #388]	; (80145e8 <__ieee754_powf+0x6ac>)
 8014462:	9a01      	ldr	r2, [sp, #4]
 8014464:	429a      	cmp	r2, r3
 8014466:	dd06      	ble.n	8014476 <__ieee754_powf+0x53a>
 8014468:	2100      	movs	r1, #0
 801446a:	1c38      	adds	r0, r7, #0
 801446c:	f7ec f826 	bl	80004bc <__aeabi_fcmplt>
 8014470:	1e43      	subs	r3, r0, #1
 8014472:	4198      	sbcs	r0, r3
 8014474:	e61e      	b.n	80140b4 <__ieee754_powf+0x178>
 8014476:	9a01      	ldr	r2, [sp, #4]
 8014478:	429a      	cmp	r2, r3
 801447a:	d109      	bne.n	8014490 <__ieee754_powf+0x554>
 801447c:	1c29      	adds	r1, r5, #0
 801447e:	9802      	ldr	r0, [sp, #8]
 8014480:	f7ec fd14 	bl	8000eac <__aeabi_fsub>
 8014484:	1c31      	adds	r1, r6, #0
 8014486:	f7ec f837 	bl	80004f8 <__aeabi_fcmpge>
 801448a:	2800      	cmp	r0, #0
 801448c:	d0c9      	beq.n	8014422 <__ieee754_powf+0x4e6>
 801448e:	e7eb      	b.n	8014468 <__ieee754_powf+0x52c>
 8014490:	23fc      	movs	r3, #252	; 0xfc
 8014492:	9a01      	ldr	r2, [sp, #4]
 8014494:	2400      	movs	r4, #0
 8014496:	059b      	lsls	r3, r3, #22
 8014498:	429a      	cmp	r2, r3
 801449a:	dcc2      	bgt.n	8014422 <__ieee754_powf+0x4e6>
 801449c:	1c31      	adds	r1, r6, #0
 801449e:	9803      	ldr	r0, [sp, #12]
 80144a0:	f7ec f84c 	bl	800053c <__aeabi_fadd>
 80144a4:	0b05      	lsrs	r5, r0, #12
 80144a6:	032d      	lsls	r5, r5, #12
 80144a8:	4950      	ldr	r1, [pc, #320]	; (80145ec <__ieee754_powf+0x6b0>)
 80144aa:	1c28      	adds	r0, r5, #0
 80144ac:	f7ec fbb0 	bl	8000c10 <__aeabi_fmul>
 80144b0:	9903      	ldr	r1, [sp, #12]
 80144b2:	9001      	str	r0, [sp, #4]
 80144b4:	1c28      	adds	r0, r5, #0
 80144b6:	f7ec fcf9 	bl	8000eac <__aeabi_fsub>
 80144ba:	1c01      	adds	r1, r0, #0
 80144bc:	1c30      	adds	r0, r6, #0
 80144be:	f7ec fcf5 	bl	8000eac <__aeabi_fsub>
 80144c2:	494b      	ldr	r1, [pc, #300]	; (80145f0 <__ieee754_powf+0x6b4>)
 80144c4:	f7ec fba4 	bl	8000c10 <__aeabi_fmul>
 80144c8:	494a      	ldr	r1, [pc, #296]	; (80145f4 <__ieee754_powf+0x6b8>)
 80144ca:	1c06      	adds	r6, r0, #0
 80144cc:	1c28      	adds	r0, r5, #0
 80144ce:	f7ec fb9f 	bl	8000c10 <__aeabi_fmul>
 80144d2:	1c01      	adds	r1, r0, #0
 80144d4:	1c30      	adds	r0, r6, #0
 80144d6:	f7ec f831 	bl	800053c <__aeabi_fadd>
 80144da:	1c06      	adds	r6, r0, #0
 80144dc:	1c01      	adds	r1, r0, #0
 80144de:	9801      	ldr	r0, [sp, #4]
 80144e0:	f7ec f82c 	bl	800053c <__aeabi_fadd>
 80144e4:	9901      	ldr	r1, [sp, #4]
 80144e6:	1c05      	adds	r5, r0, #0
 80144e8:	f7ec fce0 	bl	8000eac <__aeabi_fsub>
 80144ec:	1c01      	adds	r1, r0, #0
 80144ee:	1c30      	adds	r0, r6, #0
 80144f0:	f7ec fcdc 	bl	8000eac <__aeabi_fsub>
 80144f4:	1c29      	adds	r1, r5, #0
 80144f6:	9001      	str	r0, [sp, #4]
 80144f8:	1c28      	adds	r0, r5, #0
 80144fa:	f7ec fb89 	bl	8000c10 <__aeabi_fmul>
 80144fe:	493e      	ldr	r1, [pc, #248]	; (80145f8 <__ieee754_powf+0x6bc>)
 8014500:	1c06      	adds	r6, r0, #0
 8014502:	f7ec fb85 	bl	8000c10 <__aeabi_fmul>
 8014506:	493d      	ldr	r1, [pc, #244]	; (80145fc <__ieee754_powf+0x6c0>)
 8014508:	f7ec fcd0 	bl	8000eac <__aeabi_fsub>
 801450c:	1c31      	adds	r1, r6, #0
 801450e:	f7ec fb7f 	bl	8000c10 <__aeabi_fmul>
 8014512:	493b      	ldr	r1, [pc, #236]	; (8014600 <__ieee754_powf+0x6c4>)
 8014514:	f7ec f812 	bl	800053c <__aeabi_fadd>
 8014518:	1c31      	adds	r1, r6, #0
 801451a:	f7ec fb79 	bl	8000c10 <__aeabi_fmul>
 801451e:	4939      	ldr	r1, [pc, #228]	; (8014604 <__ieee754_powf+0x6c8>)
 8014520:	f7ec fcc4 	bl	8000eac <__aeabi_fsub>
 8014524:	1c31      	adds	r1, r6, #0
 8014526:	f7ec fb73 	bl	8000c10 <__aeabi_fmul>
 801452a:	4937      	ldr	r1, [pc, #220]	; (8014608 <__ieee754_powf+0x6cc>)
 801452c:	f7ec f806 	bl	800053c <__aeabi_fadd>
 8014530:	1c31      	adds	r1, r6, #0
 8014532:	f7ec fb6d 	bl	8000c10 <__aeabi_fmul>
 8014536:	1c01      	adds	r1, r0, #0
 8014538:	1c28      	adds	r0, r5, #0
 801453a:	f7ec fcb7 	bl	8000eac <__aeabi_fsub>
 801453e:	1c06      	adds	r6, r0, #0
 8014540:	1c01      	adds	r1, r0, #0
 8014542:	1c28      	adds	r0, r5, #0
 8014544:	f7ec fb64 	bl	8000c10 <__aeabi_fmul>
 8014548:	2180      	movs	r1, #128	; 0x80
 801454a:	9002      	str	r0, [sp, #8]
 801454c:	05c9      	lsls	r1, r1, #23
 801454e:	1c30      	adds	r0, r6, #0
 8014550:	f7ec fcac 	bl	8000eac <__aeabi_fsub>
 8014554:	1c01      	adds	r1, r0, #0
 8014556:	9802      	ldr	r0, [sp, #8]
 8014558:	f7ec f990 	bl	800087c <__aeabi_fdiv>
 801455c:	9901      	ldr	r1, [sp, #4]
 801455e:	1c06      	adds	r6, r0, #0
 8014560:	1c28      	adds	r0, r5, #0
 8014562:	f7ec fb55 	bl	8000c10 <__aeabi_fmul>
 8014566:	9901      	ldr	r1, [sp, #4]
 8014568:	f7eb ffe8 	bl	800053c <__aeabi_fadd>
 801456c:	1c01      	adds	r1, r0, #0
 801456e:	1c30      	adds	r0, r6, #0
 8014570:	f7ec fc9c 	bl	8000eac <__aeabi_fsub>
 8014574:	1c29      	adds	r1, r5, #0
 8014576:	f7ec fc99 	bl	8000eac <__aeabi_fsub>
 801457a:	1c01      	adds	r1, r0, #0
 801457c:	20fe      	movs	r0, #254	; 0xfe
 801457e:	0580      	lsls	r0, r0, #22
 8014580:	f7ec fc94 	bl	8000eac <__aeabi_fsub>
 8014584:	05e3      	lsls	r3, r4, #23
 8014586:	181b      	adds	r3, r3, r0
 8014588:	15da      	asrs	r2, r3, #23
 801458a:	2a00      	cmp	r2, #0
 801458c:	dc04      	bgt.n	8014598 <__ieee754_powf+0x65c>
 801458e:	0021      	movs	r1, r4
 8014590:	f000 f840 	bl	8014614 <scalbnf>
 8014594:	1c39      	adds	r1, r7, #0
 8014596:	e53b      	b.n	8014010 <__ieee754_powf+0xd4>
 8014598:	1c18      	adds	r0, r3, #0
 801459a:	e7fb      	b.n	8014594 <__ieee754_powf+0x658>
 801459c:	20fe      	movs	r0, #254	; 0xfe
 801459e:	0580      	lsls	r0, r0, #22
 80145a0:	e4e2      	b.n	8013f68 <__ieee754_powf+0x2c>
 80145a2:	46c0      	nop			; (mov r8, r8)
 80145a4:	001cc471 	.word	0x001cc471
 80145a8:	005db3d6 	.word	0x005db3d6
 80145ac:	ff800000 	.word	0xff800000
 80145b0:	08014be0 	.word	0x08014be0
 80145b4:	3e53f142 	.word	0x3e53f142
 80145b8:	3e6c3255 	.word	0x3e6c3255
 80145bc:	3e8ba305 	.word	0x3e8ba305
 80145c0:	3eaaaaab 	.word	0x3eaaaaab
 80145c4:	3edb6db7 	.word	0x3edb6db7
 80145c8:	3f19999a 	.word	0x3f19999a
 80145cc:	40400000 	.word	0x40400000
 80145d0:	3f763800 	.word	0x3f763800
 80145d4:	3f76384f 	.word	0x3f76384f
 80145d8:	369dc3a0 	.word	0x369dc3a0
 80145dc:	08014bf0 	.word	0x08014bf0
 80145e0:	08014be8 	.word	0x08014be8
 80145e4:	3338aa3c 	.word	0x3338aa3c
 80145e8:	43160000 	.word	0x43160000
 80145ec:	3f317200 	.word	0x3f317200
 80145f0:	3f317218 	.word	0x3f317218
 80145f4:	35bfbe8c 	.word	0x35bfbe8c
 80145f8:	3331bb4c 	.word	0x3331bb4c
 80145fc:	35ddea0e 	.word	0x35ddea0e
 8014600:	388ab355 	.word	0x388ab355
 8014604:	3b360b61 	.word	0x3b360b61
 8014608:	3e2aaaab 	.word	0x3e2aaaab

0801460c <fabsf>:
 801460c:	0040      	lsls	r0, r0, #1
 801460e:	0840      	lsrs	r0, r0, #1
 8014610:	4770      	bx	lr
	...

08014614 <scalbnf>:
 8014614:	0043      	lsls	r3, r0, #1
 8014616:	b570      	push	{r4, r5, r6, lr}
 8014618:	0002      	movs	r2, r0
 801461a:	000c      	movs	r4, r1
 801461c:	085d      	lsrs	r5, r3, #1
 801461e:	2b00      	cmp	r3, #0
 8014620:	d006      	beq.n	8014630 <scalbnf+0x1c>
 8014622:	21ff      	movs	r1, #255	; 0xff
 8014624:	05c9      	lsls	r1, r1, #23
 8014626:	428d      	cmp	r5, r1
 8014628:	d303      	bcc.n	8014632 <scalbnf+0x1e>
 801462a:	1c01      	adds	r1, r0, #0
 801462c:	f7eb ff86 	bl	800053c <__aeabi_fadd>
 8014630:	bd70      	pop	{r4, r5, r6, pc}
 8014632:	4208      	tst	r0, r1
 8014634:	d118      	bne.n	8014668 <scalbnf+0x54>
 8014636:	2198      	movs	r1, #152	; 0x98
 8014638:	05c9      	lsls	r1, r1, #23
 801463a:	f7ec fae9 	bl	8000c10 <__aeabi_fmul>
 801463e:	4b19      	ldr	r3, [pc, #100]	; (80146a4 <scalbnf+0x90>)
 8014640:	429c      	cmp	r4, r3
 8014642:	db0d      	blt.n	8014660 <scalbnf+0x4c>
 8014644:	0002      	movs	r2, r0
 8014646:	15c1      	asrs	r1, r0, #23
 8014648:	b2c9      	uxtb	r1, r1
 801464a:	3919      	subs	r1, #25
 801464c:	4b16      	ldr	r3, [pc, #88]	; (80146a8 <scalbnf+0x94>)
 801464e:	429c      	cmp	r4, r3
 8014650:	dd0c      	ble.n	801466c <scalbnf+0x58>
 8014652:	4b16      	ldr	r3, [pc, #88]	; (80146ac <scalbnf+0x98>)
 8014654:	2800      	cmp	r0, #0
 8014656:	da00      	bge.n	801465a <scalbnf+0x46>
 8014658:	4b15      	ldr	r3, [pc, #84]	; (80146b0 <scalbnf+0x9c>)
 801465a:	4914      	ldr	r1, [pc, #80]	; (80146ac <scalbnf+0x98>)
 801465c:	1c18      	adds	r0, r3, #0
 801465e:	e000      	b.n	8014662 <scalbnf+0x4e>
 8014660:	4914      	ldr	r1, [pc, #80]	; (80146b4 <scalbnf+0xa0>)
 8014662:	f7ec fad5 	bl	8000c10 <__aeabi_fmul>
 8014666:	e7e3      	b.n	8014630 <scalbnf+0x1c>
 8014668:	0e19      	lsrs	r1, r3, #24
 801466a:	e7ef      	b.n	801464c <scalbnf+0x38>
 801466c:	1909      	adds	r1, r1, r4
 801466e:	29fe      	cmp	r1, #254	; 0xfe
 8014670:	dcef      	bgt.n	8014652 <scalbnf+0x3e>
 8014672:	2900      	cmp	r1, #0
 8014674:	dd04      	ble.n	8014680 <scalbnf+0x6c>
 8014676:	4810      	ldr	r0, [pc, #64]	; (80146b8 <scalbnf+0xa4>)
 8014678:	05c9      	lsls	r1, r1, #23
 801467a:	4010      	ands	r0, r2
 801467c:	4308      	orrs	r0, r1
 801467e:	e7d7      	b.n	8014630 <scalbnf+0x1c>
 8014680:	000b      	movs	r3, r1
 8014682:	3316      	adds	r3, #22
 8014684:	da05      	bge.n	8014692 <scalbnf+0x7e>
 8014686:	4b0b      	ldr	r3, [pc, #44]	; (80146b4 <scalbnf+0xa0>)
 8014688:	2800      	cmp	r0, #0
 801468a:	da00      	bge.n	801468e <scalbnf+0x7a>
 801468c:	4b0b      	ldr	r3, [pc, #44]	; (80146bc <scalbnf+0xa8>)
 801468e:	4909      	ldr	r1, [pc, #36]	; (80146b4 <scalbnf+0xa0>)
 8014690:	e7e4      	b.n	801465c <scalbnf+0x48>
 8014692:	3119      	adds	r1, #25
 8014694:	05c8      	lsls	r0, r1, #23
 8014696:	21cc      	movs	r1, #204	; 0xcc
 8014698:	4b07      	ldr	r3, [pc, #28]	; (80146b8 <scalbnf+0xa4>)
 801469a:	0589      	lsls	r1, r1, #22
 801469c:	401a      	ands	r2, r3
 801469e:	4310      	orrs	r0, r2
 80146a0:	e7df      	b.n	8014662 <scalbnf+0x4e>
 80146a2:	46c0      	nop			; (mov r8, r8)
 80146a4:	ffff3cb0 	.word	0xffff3cb0
 80146a8:	0000c350 	.word	0x0000c350
 80146ac:	7149f2ca 	.word	0x7149f2ca
 80146b0:	f149f2ca 	.word	0xf149f2ca
 80146b4:	0da24260 	.word	0x0da24260
 80146b8:	807fffff 	.word	0x807fffff
 80146bc:	8da24260 	.word	0x8da24260

080146c0 <with_errnof>:
 80146c0:	b570      	push	{r4, r5, r6, lr}
 80146c2:	000d      	movs	r5, r1
 80146c4:	1c04      	adds	r4, r0, #0
 80146c6:	f7ff fbb1 	bl	8013e2c <__errno>
 80146ca:	6005      	str	r5, [r0, #0]
 80146cc:	1c20      	adds	r0, r4, #0
 80146ce:	bd70      	pop	{r4, r5, r6, pc}

080146d0 <xflowf>:
 80146d0:	b510      	push	{r4, lr}
 80146d2:	1c0b      	adds	r3, r1, #0
 80146d4:	2800      	cmp	r0, #0
 80146d6:	d002      	beq.n	80146de <xflowf+0xe>
 80146d8:	2380      	movs	r3, #128	; 0x80
 80146da:	061b      	lsls	r3, r3, #24
 80146dc:	18cb      	adds	r3, r1, r3
 80146de:	1c18      	adds	r0, r3, #0
 80146e0:	f7ec fa96 	bl	8000c10 <__aeabi_fmul>
 80146e4:	2122      	movs	r1, #34	; 0x22
 80146e6:	f7ff ffeb 	bl	80146c0 <with_errnof>
 80146ea:	bd10      	pop	{r4, pc}

080146ec <__math_uflowf>:
 80146ec:	2180      	movs	r1, #128	; 0x80
 80146ee:	b510      	push	{r4, lr}
 80146f0:	0549      	lsls	r1, r1, #21
 80146f2:	f7ff ffed 	bl	80146d0 <xflowf>
 80146f6:	bd10      	pop	{r4, pc}

080146f8 <__math_oflowf>:
 80146f8:	21e0      	movs	r1, #224	; 0xe0
 80146fa:	b510      	push	{r4, lr}
 80146fc:	05c9      	lsls	r1, r1, #23
 80146fe:	f7ff ffe7 	bl	80146d0 <xflowf>
 8014702:	bd10      	pop	{r4, pc}

08014704 <__ieee754_sqrtf>:
 8014704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014706:	0003      	movs	r3, r0
 8014708:	0042      	lsls	r2, r0, #1
 801470a:	1c04      	adds	r4, r0, #0
 801470c:	20ff      	movs	r0, #255	; 0xff
 801470e:	0852      	lsrs	r2, r2, #1
 8014710:	05c0      	lsls	r0, r0, #23
 8014712:	4282      	cmp	r2, r0
 8014714:	d30a      	bcc.n	801472c <__ieee754_sqrtf+0x28>
 8014716:	1c21      	adds	r1, r4, #0
 8014718:	1c20      	adds	r0, r4, #0
 801471a:	f7ec fa79 	bl	8000c10 <__aeabi_fmul>
 801471e:	1c01      	adds	r1, r0, #0
 8014720:	1c20      	adds	r0, r4, #0
 8014722:	f7eb ff0b 	bl	800053c <__aeabi_fadd>
 8014726:	1c04      	adds	r4, r0, #0
 8014728:	1c20      	adds	r0, r4, #0
 801472a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801472c:	2a00      	cmp	r2, #0
 801472e:	d0fb      	beq.n	8014728 <__ieee754_sqrtf+0x24>
 8014730:	2c00      	cmp	r4, #0
 8014732:	da07      	bge.n	8014744 <__ieee754_sqrtf+0x40>
 8014734:	1c21      	adds	r1, r4, #0
 8014736:	1c20      	adds	r0, r4, #0
 8014738:	f7ec fbb8 	bl	8000eac <__aeabi_fsub>
 801473c:	1c01      	adds	r1, r0, #0
 801473e:	f7ec f89d 	bl	800087c <__aeabi_fdiv>
 8014742:	e7f0      	b.n	8014726 <__ieee754_sqrtf+0x22>
 8014744:	0022      	movs	r2, r4
 8014746:	15e1      	asrs	r1, r4, #23
 8014748:	4002      	ands	r2, r0
 801474a:	4204      	tst	r4, r0
 801474c:	d047      	beq.n	80147de <__ieee754_sqrtf+0xda>
 801474e:	2280      	movs	r2, #128	; 0x80
 8014750:	0008      	movs	r0, r1
 8014752:	025b      	lsls	r3, r3, #9
 8014754:	0a5b      	lsrs	r3, r3, #9
 8014756:	0412      	lsls	r2, r2, #16
 8014758:	387f      	subs	r0, #127	; 0x7f
 801475a:	4313      	orrs	r3, r2
 801475c:	07c9      	lsls	r1, r1, #31
 801475e:	d400      	bmi.n	8014762 <__ieee754_sqrtf+0x5e>
 8014760:	005b      	lsls	r3, r3, #1
 8014762:	2400      	movs	r4, #0
 8014764:	2180      	movs	r1, #128	; 0x80
 8014766:	1042      	asrs	r2, r0, #1
 8014768:	0026      	movs	r6, r4
 801476a:	2019      	movs	r0, #25
 801476c:	9201      	str	r2, [sp, #4]
 801476e:	005b      	lsls	r3, r3, #1
 8014770:	0449      	lsls	r1, r1, #17
 8014772:	1875      	adds	r5, r6, r1
 8014774:	001a      	movs	r2, r3
 8014776:	429d      	cmp	r5, r3
 8014778:	dc02      	bgt.n	8014780 <__ieee754_sqrtf+0x7c>
 801477a:	186e      	adds	r6, r5, r1
 801477c:	1b5a      	subs	r2, r3, r5
 801477e:	1864      	adds	r4, r4, r1
 8014780:	3801      	subs	r0, #1
 8014782:	0053      	lsls	r3, r2, #1
 8014784:	0849      	lsrs	r1, r1, #1
 8014786:	2800      	cmp	r0, #0
 8014788:	d1f3      	bne.n	8014772 <__ieee754_sqrtf+0x6e>
 801478a:	2a00      	cmp	r2, #0
 801478c:	d018      	beq.n	80147c0 <__ieee754_sqrtf+0xbc>
 801478e:	4d17      	ldr	r5, [pc, #92]	; (80147ec <__ieee754_sqrtf+0xe8>)
 8014790:	4e17      	ldr	r6, [pc, #92]	; (80147f0 <__ieee754_sqrtf+0xec>)
 8014792:	6828      	ldr	r0, [r5, #0]
 8014794:	6831      	ldr	r1, [r6, #0]
 8014796:	f7ec fb89 	bl	8000eac <__aeabi_fsub>
 801479a:	682f      	ldr	r7, [r5, #0]
 801479c:	1c01      	adds	r1, r0, #0
 801479e:	1c38      	adds	r0, r7, #0
 80147a0:	f7eb fe96 	bl	80004d0 <__aeabi_fcmple>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d00b      	beq.n	80147c0 <__ieee754_sqrtf+0xbc>
 80147a8:	6828      	ldr	r0, [r5, #0]
 80147aa:	6831      	ldr	r1, [r6, #0]
 80147ac:	f7eb fec6 	bl	800053c <__aeabi_fadd>
 80147b0:	682d      	ldr	r5, [r5, #0]
 80147b2:	1c01      	adds	r1, r0, #0
 80147b4:	1c28      	adds	r0, r5, #0
 80147b6:	f7eb fe81 	bl	80004bc <__aeabi_fcmplt>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d012      	beq.n	80147e4 <__ieee754_sqrtf+0xe0>
 80147be:	3402      	adds	r4, #2
 80147c0:	22fc      	movs	r2, #252	; 0xfc
 80147c2:	1063      	asrs	r3, r4, #1
 80147c4:	0592      	lsls	r2, r2, #22
 80147c6:	189b      	adds	r3, r3, r2
 80147c8:	9a01      	ldr	r2, [sp, #4]
 80147ca:	05d4      	lsls	r4, r2, #23
 80147cc:	18e4      	adds	r4, r4, r3
 80147ce:	e7ab      	b.n	8014728 <__ieee754_sqrtf+0x24>
 80147d0:	005b      	lsls	r3, r3, #1
 80147d2:	3201      	adds	r2, #1
 80147d4:	4203      	tst	r3, r0
 80147d6:	d0fb      	beq.n	80147d0 <__ieee754_sqrtf+0xcc>
 80147d8:	3a01      	subs	r2, #1
 80147da:	1a89      	subs	r1, r1, r2
 80147dc:	e7b7      	b.n	801474e <__ieee754_sqrtf+0x4a>
 80147de:	2080      	movs	r0, #128	; 0x80
 80147e0:	0400      	lsls	r0, r0, #16
 80147e2:	e7f7      	b.n	80147d4 <__ieee754_sqrtf+0xd0>
 80147e4:	2301      	movs	r3, #1
 80147e6:	3401      	adds	r4, #1
 80147e8:	439c      	bics	r4, r3
 80147ea:	e7e9      	b.n	80147c0 <__ieee754_sqrtf+0xbc>
 80147ec:	200000bc 	.word	0x200000bc
 80147f0:	200000c0 	.word	0x200000c0

080147f4 <_init>:
 80147f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f6:	46c0      	nop			; (mov r8, r8)
 80147f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147fa:	bc08      	pop	{r3}
 80147fc:	469e      	mov	lr, r3
 80147fe:	4770      	bx	lr

08014800 <_fini>:
 8014800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014802:	46c0      	nop			; (mov r8, r8)
 8014804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014806:	bc08      	pop	{r3}
 8014808:	469e      	mov	lr, r3
 801480a:	4770      	bx	lr
